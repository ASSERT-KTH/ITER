bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFunction.isEmpty(variable))  {  [CE]  cannot  find  symbol  VariableReadBeforeFunction  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFunction.isEmpty(variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFunction.isEmpty(variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFunction.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol  VariableReadBeforeFunction	25	None	replace
2	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!VariableReadBeforeFunction.isEmpty(child))  {  [CE]  cannot  find  symbol  VariableReadBeforeFunction  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!VariableReadBeforeFunction.isEmpty(child))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!VariableReadBeforeFunction.isEmpty(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFunction.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol  VariableReadBeforeFunction	25	None	replace
3	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFunction.isEmpty(varvariable))  {  [CE]  cannot  find  symbol  var  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFunction.isEmpty(varvariable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFunction.isEmpty(varvariable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFunction.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol  var	25	None	replace
4	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  MayBE_LIVE))  {  [CE]  cannot  find  symbol  MayBE_LIVE  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  MayBE_LIVE))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  MayBE_LIVE))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable,    VAR_LIVE))    {    	non-compiled	[CE]  cannot  find  symbol  MayBE_LIVE	62	None	replace
5	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  MAIBE_LIVE))  {  [CE]  cannot  find  symbol  MAIBE_LIVE  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  MAIBE_LIVE))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  MAIBE_LIVE))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable,    VAR_LIVE))    {    	non-compiled	[CE]  cannot  find  symbol  MAIBE_LIVE	62	None	replace
6	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  mayBE_LIVE))  {  [CE]  cannot  find  symbol  mayBE_LIVE  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  mayBE_LIVE))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  mayBE_LIVE))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable,    VAR_LIVE))    {    	non-compiled	[CE]  cannot  find  symbol  mayBE_LIVE	62	None	replace
7	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  maybe_LIVE))  {  [CE]  cannot  find  symbol  maybe_LIVE  [FE]                                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  maybe_LIVE))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  maybe_LIVE))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable,    VAR_LIVE))    {    	non-compiled	[CE]  cannot  find  symbol  maybe_LIVE	62	None	replace
8	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(n)||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(n)||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(n)||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  	92	None	replace
9	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||  state!=  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||  state!=  VariableLiveness.MOVED)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||  state!=  VariableLiveness.MOVED)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  	92	None	replace
10	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!variable.equals(child.getString()))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!variable.equals(child.getString()))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!variable.equals(child.getString()))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!variable.equals(child.getString()))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	50	None	replace
11	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  condition!=  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  condition  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  condition!=  VariableLiveness.READ)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  condition!=  VariableLiveness.READ)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    condition!=    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  condition	133	None	replace
12	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  condition!=  VariableLiveness.READ)  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  condition!=  VariableLiveness.READ)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  condition!=  VariableLiveness.READ)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    condition!=    VariableLiveness.READ)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	133	None	replace
13	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable  ==  VariableLiveness.READ)  {  [CE]  incomparable  types:  String  and  VariableLiveness  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable  ==  VariableLiveness.READ)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable  ==  VariableLiveness.READ)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    condition!=    VariableLiveness.READ)    {    	non-compiled	[CE]  incomparable  types:  String  and  VariableLiveness	133	None	replace
14	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  variable!=  VariableLiveness.READ)  {  [CE]  incomparable  types:  String  and  VariableLiveness  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  variable!=  VariableLiveness.READ)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  variable!=  VariableLiveness.READ)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    condition!=    VariableLiveness.READ)    {    	non-compiled	[CE]  incomparable  types:  String  and  VariableLiveness	133	None	replace
15	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  MAYBE_LIVE))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  MAYBE_LIVE))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  MAYBE_LIVE))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	54	None	replace
16	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  state))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  state))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  state))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	54	None	replace
17	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  state))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  state))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  state))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	54	None	replace
18	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable),  state)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable),  state)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable),  state)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  ')'  expected	54	None	replace
19	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	State  state  =  isVariableReadBeforeKill(child,  variable);	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
20	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  READ))  {  [CE]  cannot  find  symbol  READ  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  READ))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  READ))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable,    MAYBE_LIVE))    {    	non-compiled	[CE]  cannot  find  symbol  READ	18	None	replace
21	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  LIVE))  {  [CE]  cannot  find  symbol  LIVE  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  LIVE))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  LIVE))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable,    MAYBE_LIVE))    {    	non-compiled	[CE]  cannot  find  symbol  LIVE	18	None	replace
22	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  KILL_LIVE))  {  [CE]  cannot  find  symbol  KILL_LIVE  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  KILL_LIVE))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  KILL_LIVE))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable,    MAYBE_LIVE))    {    	non-compiled	[CE]  cannot  find  symbol  KILL_LIVE	18	None	replace
23	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  MOVE_LIVE))  {  [CE]  cannot  find  symbol  MOVE_LIVE  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  MOVE_LIVE))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  MOVE_LIVE))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable,    MAYBE_LIVE))    {    	non-compiled	[CE]  cannot  find  symbol  MOVE_LIVE	18	None	replace
24	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  MOVE_SECOND))  {  [CE]  cannot  find  symbol  MOVE_SECOND  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  MOVE_SECOND))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  MOVE_SECOND))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable,    MAYBE_LIVE))    {    	non-compiled	[CE]  cannot  find  symbol  MOVE_SECOND	18	None	replace
25	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  HOUR_LEAD))  {  [CE]  cannot  find  symbol  HOUR_LEAD  [FE]                                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  HOUR_LEAD))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  HOUR_LEAD))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable,    MAYBE_LIVE))    {    	non-compiled	[CE]  cannot  find  symbol  HOUR_LEAD	18	None	replace
26	[BUG]  [BUGGY]  !ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(n.getString()))  {  return  state;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  !ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(n.getString()))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(n.getString()))  {  return  state;  }	  !ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))    {    return    state;    }    	non-compiled	[CE]  not  a  statement	98	None	replace
27	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  variable!=  VariableLiveness.READ)  {  [CE]  incomparable  types:  String  and  VariableLiveness  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  variable!=  VariableLiveness.READ)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  variable!=  VariableLiveness.READ)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    variable!=    VariableLiveness.READ)    {    	non-compiled	[CE]  incomparable  types:  String  and  VariableLiveness	7	None	replace
28	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  state!=  VariableLiveness.READ)  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  state!=  VariableLiveness.READ)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  state!=  VariableLiveness.READ)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    variable!=    VariableLiveness.READ)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	7	None	replace
29	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  VariableLiveness.KILL)  {  [CE]  incomparable  types:  String  and  VariableLiveness  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  VariableLiveness.KILL)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  VariableLiveness.KILL)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    variable!=    VariableLiveness.READ)    {    	non-compiled	[CE]  incomparable  types:  String  and  VariableLiveness	7	None	replace
30	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable  >=  VariableLiveness.READ)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable  >=  VariableLiveness.READ)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable  >=  VariableLiveness.READ)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    variable!=    VariableLiveness.READ)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	7	None	replace
31	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child.getFirstChild().getType()  ==  Token.FUNCTION)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child.getFirstChild().getType()  ==  Token.FUNCTION)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child.getFirstChild().getType()  ==  Token.FUNCTION)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&    child.getFirstChild().getType()    ==    Token.FUNCTION)    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	147	None	replace
32	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state.getFirstChild().getType()  ==  Token.FUNCTION)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state.getFirstChild().getType()  ==  Token.FUNCTION)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state.getFirstChild().getType()  ==  Token.FUNCTION)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&    child.getFirstChild().getType()    ==    Token.FUNCTION)    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	147	None	replace
33	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  child.getFirstChild().getType()  ==  Token.FUNCTION)  {  //  Not  a  FUNCTION  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  child.getFirstChild().getType()  ==  Token.FUNCTION)  {  //  Not  a  FUNCTION  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  child.getFirstChild().getType()  ==  Token.FUNCTION)  {  //  Not  a  FUNCTION	  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&    child.getFirstChild().getType()    ==    Token.FUNCTION)    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	147	None	replace
34	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child.getFirstChild().getType()  ==  Token.FUNCTION)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child.getFirstChild().getType()  ==  Token.FUNCTION)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child.getFirstChild().getType()  ==  Token.FUNCTION)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable	  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&    child.getFirstChild().getType()    ==    Token.FUNCTION)    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	147	None	replace
35	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child.getFirstChild().getType()  ==  Token.FUNCTION)  {  //  Not  a  FUNCTION  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child.getFirstChild().getType()  ==  Token.FUNCTION)  {  //  Not  a  FUNCTION  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child.getFirstChild().getType()  ==  Token.FUNCTION)  {  //  Not  a  FUNCTION	  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&    child.getFirstChild().getType()    ==    Token.FUNCTION)    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	147	None	replace
36	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  child.getFirstChild().getType()  ==  Token.FUNCTION)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  [CE]  cannot  find  symbol  state  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  child.getFirstChild().getType()  ==  Token.FUNCTION)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  child.getFirstChild().getType()  ==  Token.FUNCTION)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable	  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&    child.getFirstChild().getType()    ==    Token.FUNCTION)    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	147	None	replace
37	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  [CE]  cannot  find  symbol  state  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    	non-compiled	[CE]  cannot  find  symbol  state	118	None	replace
38	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable);	  if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    	non-compiled	[CE]  ')'  expected	118	None	replace
39	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child),  variable)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child),  variable)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child),  variable)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    	non-compiled	[CE]  ')'  expected	118	None	replace
40	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  null)  {  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    	non-compiled	[CE]  cannot  find  symbol  state	118	None	replace
41	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  variable!=  null)  {  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  variable!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  variable!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    	non-compiled	[CE]  cannot  find  symbol  state	118	None	replace
42	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  NO_VARIABLE_LIVE)  {  [CE]  cannot  find  symbol  NO_VARIABLE_LIVE  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  NO_VARIABLE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  NO_VARIABLE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    	non-compiled	[CE]  cannot  find  symbol  NO_VARIABLE_LIVE	118	None	replace
43	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  MOVED))  {  [CE]  cannot  find  symbol  MOVED  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  MOVED))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  MOVED))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable,    VAR))    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	61	None	replace
44	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  MISSING))  {  [CE]  cannot  find  symbol  MISSING  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  MISSING))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  MISSING))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable,    VAR))    {    	non-compiled	[CE]  cannot  find  symbol  MISSING	61	None	replace
45	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  MISSING_VARIABLE))  {  [CE]  cannot  find  symbol  MISSING_VARIABLE  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  MISSING_VARIABLE))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  MISSING_VARIABLE))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable,    VAR))    {    	non-compiled	[CE]  cannot  find  symbol  MISSING_VARIABLE	61	None	replace
46	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  READ);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  READ);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  READ);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    MAYBE_LIVE);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
47	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  KILL_LIVE);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  KILL_LIVE);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  KILL_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    MAYBE_LIVE);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
48	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  LIVE);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  LIVE);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    MAYBE_LIVE);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
49	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  VAR_LIVE);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  VAR_LIVE);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  VAR_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    MAYBE_LIVE);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
50	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  REGEXP);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  REGEXP);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  REGEXP);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    MAYBE_LIVE);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
51	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MOVE_LIVE);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MOVE_LIVE);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MOVE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    MAYBE_LIVE);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
52	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(n.getQualifiedName()))  {  [CE]  cannot  find  symbol  state  [FE]            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(n.getQualifiedName()))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(n.getQualifiedName()))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getQualifiedName()))    {    	non-compiled	[CE]  cannot  find  symbol  state	103	None	replace
53	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getQualifiedName())||  variable.equals(child.getQualifiedName()))  {  [CE]  cannot  find  symbol  state  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getQualifiedName())||  variable.equals(child.getQualifiedName()))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getQualifiedName())||  variable.equals(child.getQualifiedName()))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getQualifiedName()))    {    	non-compiled	[CE]  cannot  find  symbol  state	103	None	replace
54	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getQualifiedName())||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getQualifiedName())||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getQualifiedName())||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getQualifiedName()))    {    	non-compiled	[CE]  cannot  find  symbol  state	103	None	replace
55	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getQualifiedName())||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getQualifiedName())||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getQualifiedName())||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getQualifiedName()))    {    	non-compiled	[CE]  cannot  find  symbol  state	103	None	replace
56	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(n))  {  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(n))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(n))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))    {    	non-compiled	[CE]  cannot  find  symbol  state	12	None	replace
57	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	12	None	replace
58	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	12	None	replace
59	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(parent))  {  [CE]  cannot  find  symbol  parent  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(parent))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(parent))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))    {    	non-compiled	[CE]  cannot  find  symbol  parent	12	None	replace
60	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  [CE]  cannot  find  symbol  state  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))    {    	non-compiled	[CE]  cannot  find  symbol  state	12	None	replace
61	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||  isVariableReadBeforeKill(child,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||  isVariableReadBeforeKill(child,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||  isVariableReadBeforeKill(child,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||    isVariableReadBeforeKill(child,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	23	None	replace
62	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable),  state)  {  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable),  state)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable),  state)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||    isVariableReadBeforeKill(child,    variable))    {    	non-compiled	[CE]  ')'  expected	23	None	replace
63	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(n,  variable))  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(n,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(n,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||    isVariableReadBeforeKill(child,    variable))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	23	None	replace
64	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)||  isVariableReadBeforeKill(child,  variable))  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)||  isVariableReadBeforeKill(child,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)||  isVariableReadBeforeKill(child,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||    isVariableReadBeforeKill(child,    variable))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	23	None	replace
65	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||  isVariableReadBeforeKill(child,  state))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||  isVariableReadBeforeKill(child,  state))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||  isVariableReadBeforeKill(child,  state))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||    isVariableReadBeforeKill(child,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	23	None	replace
66	[BUG]  [BUGGY]  Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||  isVariableReadBeforeKill(child,  variable))  {  return  state;  }	  Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)||    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  ';'  expected	111	None	replace
67	[BUG]  [BUGGY]  Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable));  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable));  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable));	  Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)||    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
68	[BUG]  [BUGGY]  Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable)&&  child.getType()  ==  Token.EXPR_RESULT)  {  return  state;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable)&&  child.getType()  ==  Token.EXPR_RESULT)  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable)&&  child.getType()  ==  Token.EXPR_RESULT)  {  return  state;  }	  Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)||    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  ';'  expected	111	None	replace
69	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(n)||!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	44	None	replace
70	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  [CE]  cannot  find  symbol  state  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION	  if(!ControlFlowGraph.isEnteringNewCfgNode(n)||!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	44	None	replace
71	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  state  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(n)||!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	44	None	replace
72	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  child.getNext();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicate  matchRemovableAssigns  =  child.getNext();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssigns  =  child.getNext();	  Predicate    matchRemovableAssigns    =    child.getPredicate();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
73	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  child.getPredicate(),  variable;  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicate  matchRemovableAssigns  =  child.getPredicate(),  variable;  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssigns  =  child.getPredicate(),  variable;	  Predicate    matchRemovableAssigns    =    child.getPredicate();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
74	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  child.getImmediateParent();  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicate  matchRemovableAssigns  =  child.getImmediateParent();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssigns  =  child.getImmediateParent();	  Predicate    matchRemovableAssigns    =    child.getPredicate();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
75	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  child.getPredicate(),  variable);  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicate  matchRemovableAssigns  =  child.getPredicate(),  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssigns  =  child.getPredicate(),  variable);	  Predicate    matchRemovableAssigns    =    child.getPredicate();    	non-compiled	[CE]  ';'  expected	4	None	replace
76	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  MAYBE_LIVE);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  MAYBE_LIVE);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  MAYBE_LIVE);	  VariableLiveness    state    =    matchRemovableAssignsElimination(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
77	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  n);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  n);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  n);	  VariableLiveness    state    =    matchRemovableAssignsElimination(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
78	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  null);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  null);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  null);	  VariableLiveness    state    =    matchRemovableAssignsElimination(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
79	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  liveness);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  liveness);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  liveness);	  VariableLiveness    state    =    matchRemovableAssignsElimination(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
80	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  child.getType());  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  child.getType());  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  child.getType());	  VariableLiveness    state    =    matchRemovableAssignsElimination(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
81	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  mayBE_LIVE);  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  mayBE_LIVE);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  mayBE_LIVE);	  VariableLiveness    state    =    matchRemovableAssignsElimination(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
82	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(n.getString())||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  state  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(n.getString())||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(n.getString())||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  state	48	None	replace
83	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  state	48	None	replace
84	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  state	48	None	replace
85	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state  ==  VariableLiveness.MOVED)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state  ==  VariableLiveness.MOVED)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  state	48	None	replace
86	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(varVariable))  {  [CE]  cannot  find  symbol  varVariable  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(varVariable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(varVariable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(varVariableName))    {    	non-compiled	[CE]  cannot  find  symbol  varVariable	127	None	replace
87	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(value))  {  [CE]  cannot  find  symbol  value  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(value))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(value))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(varVariableName))    {    	non-compiled	[CE]  cannot  find  symbol  value	127	None	replace
88	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child.getType()))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child.getType()))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child.getType()))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(varVariableName))    {    	non-compiled	[CE]  cannot  find  symbol  	127	None	replace
89	[BUG]  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable);	  ||!ControlFlowGraph.isEnteringNewCfgNode(child,    variable))    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
90	[BUG]  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable),  n)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable),  n)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable),  n)  {	  ||!ControlFlowGraph.isEnteringNewCfgNode(child,    variable))    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
91	[BUG]  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  state!=  VariableLiveness.MAYBE_LIVE)  {	  ||!ControlFlowGraph.isEnteringNewCfgNode(child,    variable))    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
92	[BUG]  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable))  {	  ||!ControlFlowGraph.isEnteringNewCfgNode(child,    variable))    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
93	[BUG]  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  state  ==  VariableLiveness.MAYBE_LIVE)  {	  ||!ControlFlowGraph.isEnteringNewCfgNode(child,    variable))    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
94	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||!ControlFlowGraph.isEnteringNewCfgNode(variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||!ControlFlowGraph.isEnteringNewCfgNode(variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||!ControlFlowGraph.isEnteringNewCfgNode(variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	14	None	replace
95	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||!ControlFlowGraph.isEnteringNewCfgNode(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	14	None	replace
96	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||!ControlFlowGraph.isEnteringNewCfgNode(n,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||!ControlFlowGraph.isEnteringNewCfgNode(n,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||!ControlFlowGraph.isEnteringNewCfgNode(n,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	14	None	replace
97	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	14	None	replace
98	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state!=  null)  {  [CE]  cannot  find  symbol  state  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||    variable!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  state	152	None	replace
99	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state  ==  null)  {  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state  ==  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state  ==  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||    variable!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  state	152	None	replace
100	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(n.getString())||  variable!=  null)  {  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(n.getString())||  variable!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(n.getString())||  variable!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||    variable!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  state	152	None	replace
101	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  child!=  null)  {  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  child!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  child!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||    variable!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  state	152	None	replace
102	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(n.getString())||  state!=  null)  {  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(n.getString())||  state!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(n.getString())||  state!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||    variable!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  state	152	None	replace
103	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  VariableLiveness.BOTTOM_LIVE)  {  [CE]  cannot  find  symbol  BOTTOM_LIVE  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  VariableLiveness.BOTTOM_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  VariableLiveness.BOTTOM_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.BOTTOM_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM_LIVE	40	None	replace
104	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  ==  VariableLiveness.BOTTOM_LIVE)  {  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  ==  VariableLiveness.BOTTOM_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  ==  VariableLiveness.BOTTOM_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.BOTTOM_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  state	40	None	replace
105	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state!=  VariableLiveness.BOTTOM_LIVE)  {  [CE]  cannot  find  symbol  state  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state!=  VariableLiveness.BOTTOM_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state!=  VariableLiveness.BOTTOM_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.BOTTOM_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  state	40	None	replace
106	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child!=  VariableLiveness.BOTTOM_LIVE)  {  [CE]  cannot  find  symbol  BOTTOM_LIVE  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child!=  VariableLiveness.BOTTOM_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child!=  VariableLiveness.BOTTOM_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.BOTTOM_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM_LIVE	40	None	replace
107	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable  ==  VariableLiveness.BOTTOM_LIVE)  {  [CE]  cannot  find  symbol  BOTTOM_LIVE  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable  ==  VariableLiveness.BOTTOM_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable  ==  VariableLiveness.BOTTOM_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.BOTTOM_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM_LIVE	40	None	replace
108	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  state!=  VariableLiveness.BOTTOM_LIVE)  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  state!=  VariableLiveness.BOTTOM_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  state!=  VariableLiveness.BOTTOM_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.BOTTOM_LIVE)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	40	None	replace
109	[BUG]  [BUGGY]  &&!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state!=  null)  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  &&!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state!=  null)  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	&&!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state!=  null)  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||    variable!=    null)    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
110	[BUG]  [BUGGY]  &&!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state  ==  null)  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  &&!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state  ==  null)  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	&&!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state  ==  null)  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||    variable!=    null)    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
111	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state!=  null)  {  return  state;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state!=  null)  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state!=  null)  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||    variable!=    null)    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
112	[BUG]  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state!=  null)  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state!=  null)  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state!=  null)  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||    variable!=    null)    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
113	[BUG]  [BUGGY]  &&!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  variable!=  null)  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  &&!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  variable!=  null)  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	&&!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  variable!=  null)  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||    variable!=    null)    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
114	[BUG]  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  variable!=  null)  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  variable!=  null)  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  variable!=  null)  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||    variable!=    null)    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
115	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state!=  null)  {  return  state;  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state!=  null)  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state!=  null)  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||    variable!=    null)    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
116	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableFactory.isEmpty(variable))  {  [CE]  cannot  find  symbol  VariableFactory  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableFactory.isEmpty(variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableFactory.isEmpty(variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableFactory.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol  VariableFactory	101	None	replace
117	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!VariableFactory.isEmpty(child))  {  [CE]  cannot  find  symbol  VariableFactory  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!VariableFactory.isEmpty(child))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!VariableFactory.isEmpty(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableFactory.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol  VariableFactory	101	None	replace
118	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableFactory.isEmpty(child))  {  [CE]  cannot  find  symbol  VariableFactory  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableFactory.isEmpty(child))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableFactory.isEmpty(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableFactory.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol  VariableFactory	101	None	replace
119	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariablesAnalysis.isEmpty(child))  {  [CE]  cannot  find  symbol  VariablesAnalysis  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariablesAnalysis.isEmpty(child))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariablesAnalysis.isEmpty(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableFactory.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol  VariablesAnalysis	101	None	replace
120	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(varable))  {  [CE]  cannot  find  symbol  varable  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(varable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(varable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(parent))    {    	non-compiled	[CE]  cannot  find  symbol  varable	91	None	replace
121	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(n,  state))  {  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(n,  state))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(n,  state))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(n))    {    	non-compiled	[CE]  cannot  find  symbol  state	87	None	replace
122	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicate  matchRemovableAssignsElimination  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssignsElimination  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }	  Predicate    matchRemovableAssignsElimination    &&!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
123	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination  &&!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicate  matchRemovableAssignsElimination  &&!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssignsElimination  &&!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }	  Predicate    matchRemovableAssignsElimination    &&!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
124	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child.getType()  ==  Token.NAME)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child.getType()  ==  Token.NAME)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child.getType()  ==  Token.NAME)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&    child.getType()    ==    Token.NAME)    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	55	None	replace
125	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state.getType()  ==  Token.NAME)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state.getType()  ==  Token.NAME)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state.getType()  ==  Token.NAME)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&    child.getType()    ==    Token.NAME)    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	55	None	replace
126	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  state.getType()  ==  Token.NAME)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  state  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  state.getType()  ==  Token.NAME)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  state.getType()  ==  Token.NAME)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&    child.getType()    ==    Token.NAME)    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	55	None	replace
127	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable.getType()  ==  Token.NAME)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable.getType()  ==  Token.NAME)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable.getType()  ==  Token.NAME)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&    child.getType()    ==    Token.NAME)    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
128	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  variable.getType()  ==  Token.NAME)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  variable.getType()  ==  Token.NAME)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  variable.getType()  ==  Token.NAME)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&    child.getType()    ==    Token.NAME)    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
129	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  child.getType()  ==  Token.NAME)  {  //  Not  a  FUNCTION  [CE]  cannot  find  symbol  state  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  child.getType()  ==  Token.NAME)  {  //  Not  a  FUNCTION  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  child.getType()  ==  Token.NAME)  {  //  Not  a  FUNCTION	  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&    child.getType()    ==    Token.NAME)    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	55	None	replace
130	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    variable!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	35	None	replace
131	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  VariableLiveness.KILL_LIVE)  {  [CE]  cannot  find  symbol  KILL_LIVE  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  VariableLiveness.KILL_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  VariableLiveness.KILL_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    variable!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  KILL_LIVE	35	None	replace
132	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  incomparable  types:  String  and  VariableLiveness  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable  ==  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    variable!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  incomparable  types:  String  and  VariableLiveness	35	None	replace
133	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  VariableLiveness.FOR_LIVE)  {  [CE]  cannot  find  symbol  FOR_LIVE  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  VariableLiveness.FOR_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  VariableLiveness.FOR_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    variable!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR_LIVE	35	None	replace
134	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    	non-compiled	[CE]  cannot  find  symbol  state	124	None	replace
135	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION,  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION,  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION,  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    	non-compiled	[CE]  cannot  find  symbol  state	124	None	replace
136	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    	non-compiled	[CE]  cannot  find  symbol  state	124	None	replace
137	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    	non-compiled	[CE]  cannot  find  symbol  state	124	None	replace
138	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state  ==  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state  ==  VariableLiveness.READ)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state  ==  VariableLiveness.READ)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||    state!=    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  state	9	None	replace
139	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(varable))  {  [CE]  cannot  find  symbol  varable  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(varable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(varable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(variable))    {    	non-compiled	[CE]  cannot  find  symbol  varable	125	None	replace
140	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!matchRemovableAssigns.contains(variable))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!matchRemovableAssigns.contains(variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!matchRemovableAssigns.contains(variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(variable))    {    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
141	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(variable)||  state.isVariableReadBeforeKill(child,  variable))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(variable)||  state.isVariableReadBeforeKill(child,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(variable)||  state.isVariableReadBeforeKill(child,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(variable))    {    	non-compiled	[CE]  cannot  find  symbol  	125	None	replace
142	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableLiveness.isEmpty(variable))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableLiveness.isEmpty(variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableLiveness.isEmpty(variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(variable))    {    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
143	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeAnalysis.isEmpty(variable))  {  [CE]  cannot  find  symbol  VariableReadBeforeAnalysis  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeAnalysis.isEmpty(variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeAnalysis.isEmpty(variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(variable))    {    	non-compiled	[CE]  cannot  find  symbol  VariableReadBeforeAnalysis	24	None	replace
144	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!VariableReadBeforeKill.isEmpty(variable))  {  [CE]  cannot  find  symbol  VariableReadBeforeKill  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!VariableReadBeforeKill.isEmpty(variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!VariableReadBeforeKill.isEmpty(variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(variable))    {    	non-compiled	[CE]  cannot  find  symbol  VariableReadBeforeKill	24	None	replace
145	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  FOR  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  VariableLiveness.FOR)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  VariableLiveness.FOR)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.FOR)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	10	None	replace
146	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  ==  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  state  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  ==  VariableLiveness.FOR)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  ==  VariableLiveness.FOR)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.FOR)    {    	non-compiled	[CE]  cannot  find  symbol  state	10	None	replace
147	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state!=  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  state  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state!=  VariableLiveness.FOR)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state!=  VariableLiveness.FOR)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.FOR)    {    	non-compiled	[CE]  cannot  find  symbol  state	10	None	replace
148	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable  ==  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  FOR  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable  ==  VariableLiveness.FOR)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable  ==  VariableLiveness.FOR)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.FOR)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	10	None	replace
149	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child!=  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  FOR  [FE]                                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child!=  VariableLiveness.FOR)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child!=  VariableLiveness.FOR)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.FOR)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	10	None	replace
150	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  ==  VariableLiveness.KILL_LIVE)  {  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  ==  VariableLiveness.KILL_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  ==  VariableLiveness.KILL_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  state	37	None	replace
151	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  ==  VariableLiveness.MOVED)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  ==  VariableLiveness.MOVED)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  state	37	None	replace
152	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(value))  {  [CE]  cannot  find  symbol  value  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(value))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(value))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(varvariable))    {    	non-compiled	[CE]  cannot  find  symbol  value	27	None	replace
153	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(variable)||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  VariableReadBeforeKill  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(variable)||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(variable)||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(varvariable))    {    	non-compiled	[CE]  cannot  find  symbol  VariableReadBeforeKill	27	None	replace
154	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(n))  {  [CE]  cannot  find  symbol  VariableReadBeforeKill  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(n))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(n))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(varvariable))    {    	non-compiled	[CE]  cannot  find  symbol  VariableReadBeforeKill	27	None	replace
155	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(variable)||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  VariableReadBeforeKill  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(variable)||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(variable)||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(varvariable))    {    	non-compiled	[CE]  cannot  find  symbol  VariableReadBeforeKill	27	None	replace
156	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  MayBE_LIVE))  {  [CE]  cannot  find  symbol  MayBE_LIVE  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  MayBE_LIVE))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  MayBE_LIVE))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable,    KILL))    {    	non-compiled	[CE]  cannot  find  symbol  MayBE_LIVE	139	None	replace
157	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  MAIBE_LIVE))  {  [CE]  cannot  find  symbol  MAIBE_LIVE  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  MAIBE_LIVE))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  MAIBE_LIVE))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable,    KILL))    {    	non-compiled	[CE]  cannot  find  symbol  MAIBE_LIVE	139	None	replace
158	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  maybe_LIVE))  {  [CE]  cannot  find  symbol  maybe_LIVE  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  maybe_LIVE))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  maybe_LIVE))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable,    KILL))    {    	non-compiled	[CE]  cannot  find  symbol  maybe_LIVE	139	None	replace
159	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  mayBE_LIVE))  {  [CE]  cannot  find  symbol  mayBE_LIVE  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  mayBE_LIVE))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  mayBE_LIVE))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable,    KILL))    {    	non-compiled	[CE]  cannot  find  symbol  mayBE_LIVE	139	None	replace
160	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  MILL))  {  [CE]  cannot  find  symbol  MILL  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  MILL))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  MILL))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable,    KILL))    {    	non-compiled	[CE]  cannot  find  symbol  MILL	139	None	replace
161	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  ==  VariableLiveness.FOR_LIVE)  {  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  ==  VariableLiveness.FOR_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  ==  VariableLiveness.FOR_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.FOR_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  state	39	None	replace
162	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state!=  VariableLiveness.FOR_LIVE)  {  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state!=  VariableLiveness.FOR_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state!=  VariableLiveness.FOR_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.FOR_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  state	39	None	replace
163	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child!=  VariableLiveness.FOR_LIVE)  {  [CE]  cannot  find  symbol  FOR_LIVE  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child!=  VariableLiveness.FOR_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child!=  VariableLiveness.FOR_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.FOR_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR_LIVE	39	None	replace
164	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  state!=  VariableLiveness.FOR_LIVE)  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  state!=  VariableLiveness.FOR_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  state!=  VariableLiveness.FOR_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.FOR_LIVE)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	39	None	replace
165	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.FOR_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  state  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.FOR_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.FOR_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.FOR_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  state	39	None	replace
166	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  variable  ==  VariableLiveness.KILL_LIVE)  {  [CE]  cannot  find  symbol  KILL_LIVE  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  variable  ==  VariableLiveness.KILL_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  variable  ==  VariableLiveness.KILL_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||    state    ==    VariableLiveness.KILL_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  KILL_LIVE	70	None	replace
167	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  variable!=  VariableLiveness.KILL_LIVE)  {  [CE]  cannot  find  symbol  KILL_LIVE  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  variable!=  VariableLiveness.KILL_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  variable!=  VariableLiveness.KILL_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||    state    ==    VariableLiveness.KILL_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  KILL_LIVE	70	None	replace
168	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  VariableLiveness.MILL)  {  [CE]  cannot  find  symbol  MILL  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  VariableLiveness.MILL)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  VariableLiveness.MILL)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.MILL)    {    	non-compiled	[CE]  cannot  find  symbol  MILL	117	None	replace
169	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  ==  VariableLiveness.MILL)  {  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  ==  VariableLiveness.MILL)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  ==  VariableLiveness.MILL)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.MILL)    {    	non-compiled	[CE]  cannot  find  symbol  state	117	None	replace
170	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state!=  VariableLiveness.MILL)  {  [CE]  cannot  find  symbol  state  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state!=  VariableLiveness.MILL)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state!=  VariableLiveness.MILL)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.MILL)    {    	non-compiled	[CE]  cannot  find  symbol  state	117	None	replace
171	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child!=  VariableLiveness.MILL)  {  [CE]  cannot  find  symbol  MILL  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child!=  VariableLiveness.MILL)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child!=  VariableLiveness.MILL)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.MILL)    {    	non-compiled	[CE]  cannot  find  symbol  MILL	117	None	replace
172	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable  ==  VariableLiveness.MILL)  {  [CE]  cannot  find  symbol  MILL  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable  ==  VariableLiveness.MILL)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable  ==  VariableLiveness.MILL)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.MILL)    {    	non-compiled	[CE]  cannot  find  symbol  MILL	117	None	replace
173	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  state!=  VariableLiveness.MILL)  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  state!=  VariableLiveness.MILL)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  state!=  VariableLiveness.MILL)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.MILL)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	117	None	replace
174	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MayBE_LIVE);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MayBE_LIVE);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MayBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    STRING);    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
175	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MOVED);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MOVED);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MOVED);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    STRING);    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
176	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  KILL);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  KILL);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  KILL);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    STRING);    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
177	[BUG]  [BUGGY]  &&!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!variable.equals(child.getString()))  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  &&!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!variable.equals(child.getString()))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	&&!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!variable.equals(child.getString()))  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable)&&!variable.equals(child.getString()))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
178	[BUG]  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!variable.equals(child.getString()))  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!variable.equals(child.getString()))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!variable.equals(child.getString()))  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable)&&!variable.equals(child.getString()))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
179	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!variable.equals(n.getString()))  {  return  state;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!variable.equals(n.getString()))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!variable.equals(n.getString()))  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable)&&!variable.equals(child.getString()))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
180	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||!variable.equals(child.getString()))  {  return  state;  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||!variable.equals(child.getString()))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||!variable.equals(child.getString()))  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable)&&!variable.equals(child.getString()))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
181	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.MAYBE_LIVE)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  state  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.MAYBE_LIVE)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.MAYBE_LIVE)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	51	None	replace
182	[BUG]  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);	  if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
183	[BUG]  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child)||!variable.equals(child.getString()))  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child)||!variable.equals(child.getString()))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||!ControlFlowGraph.isEnteringNewCfgNode(child)||!variable.equals(child.getString()))  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!variable.equals(child.getString()))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
184	[BUG]  [BUGGY]  &&!ControlFlowGraph.isEnteringNewCfgNode(child)||!variable.equals(child.getString()))  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  &&!ControlFlowGraph.isEnteringNewCfgNode(child)||!variable.equals(child.getString()))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	&&!ControlFlowGraph.isEnteringNewCfgNode(child)||!variable.equals(child.getString()))  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!variable.equals(child.getString()))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
185	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable),  isVariableReadBeforeKill)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable),  isVariableReadBeforeKill)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable),  isVariableReadBeforeKill)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable),    n)    {    	non-compiled	[CE]  ')'  expected	130	None	replace
186	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable),  state)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable),  state)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable),  state)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable),    n)    {    	non-compiled	[CE]  ')'  expected	130	None	replace
187	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  n.getType()  ==  Token.NAME)  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  n.getType()  ==  Token.NAME)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  n.getType()  ==  Token.NAME)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable),    n)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	130	None	replace
188	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable),  false)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable),  false)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable),  false)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable),    n)    {    	non-compiled	[CE]  ')'  expected	130	None	replace
189	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable),  isVariableReadBeforeKill())  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable),  isVariableReadBeforeKill())  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable),  isVariableReadBeforeKill())  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable),    n)    {    	non-compiled	[CE]  ')'  expected	130	None	replace
190	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  n!=  null)  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  n!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  n!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable),    n)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	130	None	replace
191	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FUNCTION  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FUNCTION  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FUNCTION	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION    	non-compiled	[CE]  cannot  find  symbol  state	41	None	replace
192	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  //  Not  a  FUNCTION  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  //  Not  a  FUNCTION  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  //  Not  a  FUNCTION	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	41	None	replace
193	[BUG]  [BUGGY]  Node  matchRemovableAssigns  =  child.getLastChild();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Node  matchRemovableAssigns  =  child.getLastChild();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Node  matchRemovableAssigns  =  child.getLastChild();	  Node    matchRemovableAssigns    =    child.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
194	[BUG]  [BUGGY]  Node  matchRemovableAssigns  =  child.getFirstChild(),  variable;  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Node  matchRemovableAssigns  =  child.getFirstChild(),  variable;  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Node  matchRemovableAssigns  =  child.getFirstChild(),  variable;	  Node    matchRemovableAssigns    =    child.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
195	[BUG]  [BUGGY]  Node  matchRemovableAssigns  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Node  matchRemovableAssigns  =  n.getFirstChild();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Node  matchRemovableAssigns  =  n.getFirstChild();	  Node    matchRemovableAssigns    =    child.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
196	[BUG]  [BUGGY]  Node  matchRemovableAssigns  =  child.getPreviousChild();  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Node  matchRemovableAssigns  =  child.getPreviousChild();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Node  matchRemovableAssigns  =  child.getPreviousChild();	  Node    matchRemovableAssigns    =    child.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
197	[BUG]  [BUGGY]  Node  variable  =  child.getParent();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Node  variable  =  child.getParent();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Node  variable  =  child.getParent();	  Node    variable    =    child.getNext();    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
198	[BUG]  [BUGGY]  Node  variable  =  child.getLastChild();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Node  variable  =  child.getLastChild();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Node  variable  =  child.getLastChild();	  Node    variable    =    child.getNext();    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
199	[BUG]  [BUGGY]  Node  variable  =  child.getQualifiedName();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Node  variable  =  child.getQualifiedName();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Node  variable  =  child.getQualifiedName();	  Node    variable    =    child.getNext();    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
200	[BUG]  [BUGGY]  Node  variable  =  child.getType();  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Node  variable  =  child.getType();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Node  variable  =  child.getType();	  Node    variable    =    child.getNext();    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
201	[BUG]  [BUGGY]  Node  variable  =  child.getNext()  -  1;  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Node  variable  =  child.getNext()  -  1;  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Node  variable  =  child.getNext()  -  1;	  Node    variable    =    child.getNext();    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
202	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  MILL_LIVE))  {  [CE]  cannot  find  symbol  MILL_LIVE  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  MILL_LIVE))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  MILL_LIVE))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable,    REGEXP))    {    	non-compiled	[CE]  cannot  find  symbol  MILL_LIVE	107	None	replace
203	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  MILLIS))  {  [CE]  cannot  find  symbol  MILLIS  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  MILLIS))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  MILLIS))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable,    REGEXP))    {    	non-compiled	[CE]  cannot  find  symbol  MILLIS	107	None	replace
204	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  MAYBE_LIVE);  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  MAYBE_LIVE);  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  MAYBE_LIVE);  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
205	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child);  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child);  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child);  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
206	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  variable.equals(child.getString()))  {  return  state;  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  variable.equals(child.getString()))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  variable.equals(child.getString()))  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
207	[BUG]  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable)&&    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
208	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||  isVariableReadBeforeKill(child,  variable))  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable)&&    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
209	[BUG]  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable)&&    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
210	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(n,  variable.getString()))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(n,  variable.getString()))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(n,  variable.getString()))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child,    variable.getString()))    {    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
211	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child,  child.getString()))  {  [CE]  no  suitable  method  found  for  equals(Node,String)  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child,  child.getString()))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child,  child.getString()))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child,    variable.getString()))    {    	non-compiled	[CE]  no  suitable  method  found  for  equals(Node,String)	104	None	replace
212	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child,  variable.getQualifiedName()))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child,  variable.getQualifiedName()))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child,  variable.getQualifiedName()))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child,    variable.getString()))    {    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
213	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforePosition.isEmpty(variable))  {  [CE]  cannot  find  symbol  VariableReadBeforePosition  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforePosition.isEmpty(variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforePosition.isEmpty(variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforePosition.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol  VariableReadBeforePosition	149	None	replace
214	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforePosition.isEmpty(varvariable))  {  [CE]  cannot  find  symbol  var  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforePosition.isEmpty(varvariable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforePosition.isEmpty(varvariable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforePosition.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol  var	149	None	replace
215	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!VariableReadBeforePosition.isEmpty(child))  {  [CE]  cannot  find  symbol  VariableReadBeforePosition  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!VariableReadBeforePosition.isEmpty(child))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!VariableReadBeforePosition.isEmpty(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforePosition.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol  VariableReadBeforePosition	149	None	replace
216	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableReadBeforePosition.isEmpty(child))  {  [CE]  cannot  find  symbol  VariableReadBeforePosition  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableReadBeforePosition.isEmpty(child))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableReadBeforePosition.isEmpty(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforePosition.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol  VariableReadBeforePosition	149	None	replace
217	[BUG]  [BUGGY]  Node  matchRemovableAssigns  =  child.getNext(),  variable;  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Node  matchRemovableAssigns  =  child.getNext(),  variable;  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Node  matchRemovableAssigns  =  child.getNext(),  variable;	  Node    matchRemovableAssigns    =    child.getNext();    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
218	[BUG]  [BUGGY]  Node  matchRemovableAssigns  =  child.getNext(),  variable);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Node  matchRemovableAssigns  =  child.getNext(),  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Node  matchRemovableAssigns  =  child.getNext(),  variable);	  Node    matchRemovableAssigns    =    child.getNext();    	non-compiled	[CE]  ';'  expected	137	None	replace
219	[BUG]  [BUGGY]  Node  matchRemovableAssigns  =  child.getNext()  -  1;  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Node  matchRemovableAssigns  =  child.getNext()  -  1;  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Node  matchRemovableAssigns  =  child.getNext()  -  1;	  Node    matchRemovableAssigns    =    child.getNext();    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
220	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MILL_LIVE,  MAYBE_LIVE);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MILL_LIVE,  MAYBE_LIVE);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MILL_LIVE,  MAYBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    MILL_LIVE);    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
221	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MILL_LIVE,  MAXBE_LIVE);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MILL_LIVE,  MAXBE_LIVE);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MILL_LIVE,  MAXBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    MILL_LIVE);    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
222	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MILL_LIVE,  n);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MILL_LIVE,  n);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MILL_LIVE,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    MILL_LIVE);    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
223	[BUG]  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
224	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
225	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  child);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
226	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child.getType());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child.getType());  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child.getType());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
227	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variables);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variables);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variables);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
228	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  module);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  module);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  module);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
229	[BUG]  [BUGGY]  VariableLiveness  state  =  hasVariableReadBeforeKill(child,  variable);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  hasVariableReadBeforeKill(child,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  hasVariableReadBeforeKill(child,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
230	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssignmentsElimination(child,  variable);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  matchRemovableAssignmentsElimination(child,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  matchRemovableAssignmentsElimination(child,  variable);	  VariableLiveness    state    =    matchRemovableAssignsElimination(child);    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
231	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child.getNext());  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child.getNext());  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  matchRemovableAssignsElimination(child.getNext());	  VariableLiveness    state    =    matchRemovableAssignsElimination(child);    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
232	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child.getFirstChild());  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child.getFirstChild());  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  matchRemovableAssignsElimination(child.getFirstChild());	  VariableLiveness    state    =    matchRemovableAssignsElimination(child);    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
233	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variables);  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variables);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variables);	  VariableLiveness    state    =    matchRemovableAssignsElimination(child);    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
234	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  child.getFirstChild());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  child.getFirstChild());  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  child.getFirstChild());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    child.getType());    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
235	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  child.getChildCount());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  child.getChildCount());  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  child.getChildCount());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    child.getType());    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
236	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  child.getParent());  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  child.getParent());  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  child.getParent());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    child.getType());    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
237	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  child.getLastChild());  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  child.getLastChild());  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  child.getLastChild());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    child.getType());    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
238	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  child.getNext());  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  child.getNext());  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  child.getNext());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    child.getType());    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
239	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  child.getType(),  MAYBE_LIVE);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  child.getType(),  MAYBE_LIVE);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  child.getType(),  MAYBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    child.getType());    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
240	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  child.getElementType());  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  child.getElementType());  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  child.getElementType());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    child.getType());    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
241	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FUNCTION  [CE]  cannot  find  symbol  state  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FUNCTION  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FUNCTION	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(n))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	45	None	replace
242	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  state  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(n))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	45	None	replace
243	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FUNCTION  [CE]  cannot  find  symbol  state  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FUNCTION  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FUNCTION	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(n))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	45	None	replace
244	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable)||  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable)||  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable)||  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable)||    state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
245	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)&&  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)&&  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)&&  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable)||    state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
246	[BUG]  [BUGGY]  &&  isVariableReadBeforeKill(child,  variable)||  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  &&  isVariableReadBeforeKill(child,  variable)||  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	&&  isVariableReadBeforeKill(child,  variable)||  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable)||    state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
247	[BUG]  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)||  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)||  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)||  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable)||    state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
248	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FUNCTION,  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  cannot  find  symbol  state  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FUNCTION,  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FUNCTION,  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION,    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  state	85	None	replace
249	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION,  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  cannot  find  symbol  state  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION,  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION,  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION,    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  state	85	None	replace
250	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FUNCTION,  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  state  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FUNCTION,  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FUNCTION,  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION,    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  state	85	None	replace
251	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION,  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  state  [FE]                                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION,  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION,  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION,    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  state	85	None	replace
252	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION,  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  cannot  find  symbol  state  [FE]                                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION,  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION,  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION,    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  state	85	None	replace
253	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION,  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  state  [FE]                                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION,  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION,  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION,    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  state	85	None	replace
254	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  child,  variable))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  child,  variable))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n,  child,  variable))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(n,    child))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	146	None	replace
255	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  child,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  child,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n,  child,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(n,    child))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	146	None	replace
256	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variables);  }  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variables);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variables);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(n,    child))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	146	None	replace
257	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  READ))  {  [CE]  cannot  find  symbol  READ  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  READ))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  READ))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable,    MAYBE_LIVE))    {    	non-compiled	[CE]  cannot  find  symbol  READ	57	None	replace
258	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  KILL_LIVE))  {  [CE]  cannot  find  symbol  KILL_LIVE  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  KILL_LIVE))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  KILL_LIVE))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable,    MAYBE_LIVE))    {    	non-compiled	[CE]  cannot  find  symbol  KILL_LIVE	57	None	replace
259	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  LIVE))  {  [CE]  cannot  find  symbol  LIVE  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  LIVE))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  LIVE))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable,    MAYBE_LIVE))    {    	non-compiled	[CE]  cannot  find  symbol  LIVE	57	None	replace
260	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  VAR_LEAD))  {  [CE]  cannot  find  symbol  VAR_LEAD  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  VAR_LEAD))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  VAR_LEAD))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable,    MAYBE_LIVE))    {    	non-compiled	[CE]  cannot  find  symbol  VAR_LEAD	57	None	replace
261	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  child.getFirstChild(),  variable;  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicate  matchRemovableAssigns  =  child.getFirstChild(),  variable;  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssigns  =  child.getFirstChild(),  variable;	  Predicate    matchRemovableAssigns    =    child.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
262	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  child.getLastChild();  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicate  matchRemovableAssigns  =  child.getLastChild();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssigns  =  child.getLastChild();	  Predicate    matchRemovableAssigns    =    child.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
263	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  child.getPreviousChild();  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicate  matchRemovableAssigns  =  child.getPreviousChild();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssigns  =  child.getPreviousChild();	  Predicate    matchRemovableAssigns    =    child.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
264	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  child.getFirstChild(),  variable);  [CE]  ';'  expected  [FE]                                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicate  matchRemovableAssigns  =  child.getFirstChild(),  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssigns  =  child.getFirstChild(),  variable);	  Predicate    matchRemovableAssigns    =    child.getFirstChild();    	non-compiled	[CE]  ';'  expected	138	None	replace
265	[BUG]  [BUGGY]  ||(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  ||(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }	  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
266	[BUG]  [BUGGY]  ||(ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  ||(ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||(ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }	  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
267	[BUG]  [BUGGY]  ||(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  ||(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  }	  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
268	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(n,  state,  variable))  {  [CE]  cannot  find  symbol  state  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(n,  state,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(n,  state,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(n,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  state	19	None	replace
269	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(parent,  variable))  {  [CE]  cannot  find  symbol  parent  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(parent,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(parent,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(n,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  parent	19	None	replace
270	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(n,  variable,  state))  {  [CE]  cannot  find  symbol  state  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(n,  variable,  state))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(n,  variable,  state))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(n,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  state	19	None	replace
271	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(n,  variable,  MAYBE_LIVE))  {  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(n,  variable,  MAYBE_LIVE))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(n,  variable,  MAYBE_LIVE))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(n,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	19	None	replace
272	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!variableRemovableAssigns.contains(n,  child))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!variableRemovableAssigns.contains(n,  child))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!variableRemovableAssigns.contains(n,  child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable)&&!variableRemovableAssigns.contains(child))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	89	None	replace
273	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!variableRemovableAssigns.contains(variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!variableRemovableAssigns.contains(variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!variableRemovableAssigns.contains(variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable)&&!variableRemovableAssigns.contains(child))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	89	None	replace
274	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||  variableRemovableAssigns.contains(child))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||  variableRemovableAssigns.contains(child))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||  variableRemovableAssigns.contains(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable)&&!variableRemovableAssigns.contains(child))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	89	None	replace
275	[BUG]  [BUGGY]  &&(!ControlFlowGraph.isEnteringNewCfgNode(child)||  variable.equals(child.getString()))  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  &&(!ControlFlowGraph.isEnteringNewCfgNode(child)||  variable.equals(child.getString()))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	&&(!ControlFlowGraph.isEnteringNewCfgNode(child)||  variable.equals(child.getString()))  {  return  state;  }	  &&!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
276	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  VariableLiveness.SEMI_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	96	None	replace
277	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  ==  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  state  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  ==  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  ==  VariableLiveness.SEMI_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  state	96	None	replace
278	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state!=  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state!=  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state!=  VariableLiveness.SEMI_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  state	96	None	replace
279	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child!=  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child!=  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child!=  VariableLiveness.SEMI_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	96	None	replace
280	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable  ==  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable  ==  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable  ==  VariableLiveness.SEMI_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	96	None	replace
281	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination(child,  variable)||!variable.equals(child.getString()))  {  return  state;  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicate  matchRemovableAssignsElimination(child,  variable)||!variable.equals(child.getString()))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssignsElimination(child,  variable)||!variable.equals(child.getString()))  {  return  state;  }	  Predicate    matchRemovableAssignsElimination(child,    variable)&&!variable.equals(child.getString()))    {    return    state;    }    	non-compiled	[CE]  ';'  expected	76	None	replace
282	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination(child,  variable)&&!variable.equals(n.getString()))  {  return  state;  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicate  matchRemovableAssignsElimination(child,  variable)&&!variable.equals(n.getString()))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssignsElimination(child,  variable)&&!variable.equals(n.getString()))  {  return  state;  }	  Predicate    matchRemovableAssignsElimination(child,    variable)&&!variable.equals(child.getString()))    {    return    state;    }    	non-compiled	[CE]  ';'  expected	76	None	replace
283	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination(child,  variable)&&!variable.equals(child.getString())||  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicate  matchRemovableAssignsElimination(child,  variable)&&!variable.equals(child.getString())||  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssignsElimination(child,  variable)&&!variable.equals(child.getString())||  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  Predicate    matchRemovableAssignsElimination(child,    variable)&&!variable.equals(child.getString()))    {    return    state;    }    	non-compiled	[CE]  ';'  expected	76	None	replace
284	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(variable,  child,  state))  {  [CE]  cannot  find  symbol  state  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(variable,  child,  state))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(variable,  child,  state))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(variable,    child))    {    	non-compiled	[CE]  cannot  find  symbol  state	21	None	replace
285	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(variable,  child))  {  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(variable,  child))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(variable,  child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(variable,    child))    {    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	21	None	replace
286	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(n,  variable,  child))  {  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(n,  variable,  child))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(n,  variable,  child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(variable,    child))    {    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	21	None	replace
287	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(variable,  child,  variable))  {  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(variable,  child,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(variable,  child,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(variable,    child))    {    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	21	None	replace
288	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  MAYBE_LIVE);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  MAYBE_LIVE);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  MAYBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
289	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  maybe_LIVE);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  maybe_LIVE);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  maybe_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
290	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  mayBE_LIVE);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  mayBE_LIVE);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  mayBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
291	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  n);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  n);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
292	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MAYBE_LIVE  -  1);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MAYBE_LIVE  -  1);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MAYBE_LIVE  -  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    -    1);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
293	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable.getType()  -  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable.getType()  -  1);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable.getType()  -  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    -    1);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
294	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  child.getType()  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  child.getType()  -  1);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  child.getType()  -  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    -    1);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
295	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  2);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  2);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  2);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    -    1);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
296	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||  variable!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||  variable!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||  variable!=  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||    variable    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	67	None	replace
297	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||    variable    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	67	None	replace
298	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||  variable  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||  variable  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||  variable  ==  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||    variable    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	67	None	replace
299	[BUG]  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  null)  {	  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&    variable!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
300	[BUG]  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable  ==  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable  ==  null)  {	  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&    variable!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
301	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFilled.isEmpty(variable))  {  [CE]  cannot  find  symbol  VariableReadBeforeFilled  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFilled.isEmpty(variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFilled.isEmpty(variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFilled.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol  VariableReadBeforeFilled	150	None	replace
302	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!VariableReadBeforeFilled.isEmpty(child))  {  [CE]  cannot  find  symbol  VariableReadBeforeFilled  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!VariableReadBeforeFilled.isEmpty(child))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!VariableReadBeforeFilled.isEmpty(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFilled.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol  VariableReadBeforeFilled	150	None	replace
303	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableReadBeforeFilled.isEmpty(child))  {  [CE]  cannot  find  symbol  VariableReadBeforeFilled  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableReadBeforeFilled.isEmpty(child))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableReadBeforeFilled.isEmpty(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFilled.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol  VariableReadBeforeFilled	150	None	replace
304	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFilled.isEmpty(varvariable))  {  [CE]  cannot  find  symbol  var  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFilled.isEmpty(varvariable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFilled.isEmpty(varvariable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFilled.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol  var	150	None	replace
305	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  MILL_LIVE))  {  [CE]  cannot  find  symbol  MILL_LIVE  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  MILL_LIVE))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  MILL_LIVE))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable,    HEAD))    {    	non-compiled	[CE]  cannot  find  symbol  MILL_LIVE	141	None	replace
306	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.MILL_LIVE)  {  [CE]  cannot  find  symbol  state  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.MILL_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.MILL_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.KILL_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  state	36	None	replace
307	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!VariableReadBeforeAnalysis.isEmpty(child))  {  [CE]  cannot  find  symbol  VariableReadBeforeAnalysis  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!VariableReadBeforeAnalysis.isEmpty(child))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!VariableReadBeforeAnalysis.isEmpty(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeAnalysis.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol  VariableReadBeforeAnalysis	26	None	replace
308	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableReadBeforeAnalysis.isEmpty(child))  {  [CE]  cannot  find  symbol  VariableReadBeforeAnalysis  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableReadBeforeAnalysis.isEmpty(child))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableReadBeforeAnalysis.isEmpty(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeAnalysis.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol  VariableReadBeforeAnalysis	26	None	replace
309	[BUG]  [BUGGY]  ||  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  ||  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||  isVariableReadBeforeKill(child,  variable))  {  return  state;  }	  &&    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
310	[BUG]  [BUGGY]  ||  isVariableReadBeforeKill(child,  variable))  {  return  state;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  ||  isVariableReadBeforeKill(child,  variable))  {  return  state;  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||  isVariableReadBeforeKill(child,  variable))  {  return  state;	  &&    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
311	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination  &&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicate  matchRemovableAssignsElimination  &&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssignsElimination  &&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }	  &&    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  ';'  expected	32	None	replace
312	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination(child,  variable))  {  return  state;  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicate  matchRemovableAssignsElimination(child,  variable))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssignsElimination(child,  variable))  {  return  state;  }	  &&    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  ';'  expected	32	None	replace
313	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination  &&  isVariableReadBeforeKill(child,  variable))  {  return  state;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicate  matchRemovableAssignsElimination  &&  isVariableReadBeforeKill(child,  variable))  {  return  state;  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssignsElimination  &&  isVariableReadBeforeKill(child,  variable))  {  return  state;	  &&    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  ';'  expected	32	None	replace
314	[BUG]  [BUGGY]  &&  isVariableReadBeforeKill(child,  variable)||  state.getType()  ==  Token.EXPR_RESULT)  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  &&  isVariableReadBeforeKill(child,  variable)||  state.getType()  ==  Token.EXPR_RESULT)  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	&&  isVariableReadBeforeKill(child,  variable)||  state.getType()  ==  Token.EXPR_RESULT)  {  return  state;  }	  &&    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
315	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  null,  state))  {  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  null,  state))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  null,  state))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable,    null))    {    	non-compiled	[CE]  cannot  find  symbol  state	59	None	replace
316	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  state,  null))  {  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  state,  null))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  state,  null))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable,    null))    {    	non-compiled	[CE]  cannot  find  symbol  state	59	None	replace
317	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  MAYBE_LIVE,  null))  {  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  MAYBE_LIVE,  null))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  MAYBE_LIVE,  null))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable,    null))    {    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	59	None	replace
318	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  null,  liveness))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  null,  liveness))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  null,  liveness))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable,    null))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	59	None	replace
319	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  null,  isVariableReadBeforeKill))  {  [CE]  cannot  find  symbol  isVariableReadBeforeKill  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  null,  isVariableReadBeforeKill))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  null,  isVariableReadBeforeKill))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable,    null))    {    	non-compiled	[CE]  cannot  find  symbol  isVariableReadBeforeKill	59	None	replace
320	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  isVariableReadBeforeKill))  {  [CE]  cannot  find  symbol  isVariableReadBeforeKill  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  isVariableReadBeforeKill))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  isVariableReadBeforeKill))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable,    null))    {    	non-compiled	[CE]  cannot  find  symbol  isVariableReadBeforeKill	59	None	replace
321	[BUG]  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)  {	  ||!ControlFlowGraph.isEnteringNewCfgNode(child),    variable)    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
322	[BUG]  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child),  variable,  isVariableReadBeforeKill)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child),  variable,  isVariableReadBeforeKill)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||!ControlFlowGraph.isEnteringNewCfgNode(child),  variable,  isVariableReadBeforeKill)  {	  ||!ControlFlowGraph.isEnteringNewCfgNode(child),    variable)    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
323	[BUG]  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable.isVariableReadBeforeKill())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable.isVariableReadBeforeKill())  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable.isVariableReadBeforeKill())  {	  ||!ControlFlowGraph.isEnteringNewCfgNode(child),    variable)    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
324	[BUG]  [BUGGY]  Node  variable  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Node  variable  =  n.getFirstChild();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Node  variable  =  n.getFirstChild();	  Node    variable    =    child.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
325	[BUG]  [BUGGY]  Node  variable  =  child.getString();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Node  variable  =  child.getString();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Node  variable  =  child.getString();	  Node    variable    =    child.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
326	[BUG]  [BUGGY]  Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }	  Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  ';'  expected	110	None	replace
327	[BUG]  [BUGGY]  Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)||  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)||  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)||  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  ';'  expected	110	None	replace
328	[BUG]  [BUGGY]  Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)||  state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)||  state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)||  state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  ';'  expected	110	None	replace
329	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFactory.isEmpty(variable))  {  [CE]  cannot  find  symbol  VariableReadBeforeFactory  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFactory.isEmpty(variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFactory.isEmpty(variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFactory.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol  VariableReadBeforeFactory	148	None	replace
330	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!VariableReadBeforeFactory.isEmpty(child))  {  [CE]  cannot  find  symbol  VariableReadBeforeFactory  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!VariableReadBeforeFactory.isEmpty(child))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!VariableReadBeforeFactory.isEmpty(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFactory.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol  VariableReadBeforeFactory	148	None	replace
331	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFactory.isEmpty(varvariable))  {  [CE]  cannot  find  symbol  var  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFactory.isEmpty(varvariable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFactory.isEmpty(varvariable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFactory.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol  var	148	None	replace
332	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableReadBeforeFactory.isEmpty(child))  {  [CE]  cannot  find  symbol  VariableReadBeforeFactory  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableReadBeforeFactory.isEmpty(child))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableReadBeforeFactory.isEmpty(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFactory.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol  VariableReadBeforeFactory	148	None	replace
333	[BUG]  [BUGGY]  &&!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  &&!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	&&!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable))  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
334	[BUG]  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
335	[BUG]  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable))  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
336	[BUG]  [BUGGY]  Node  matchRemovableAssigns  =  child.getParent(),  variable;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Node  matchRemovableAssigns  =  child.getParent(),  variable;  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Node  matchRemovableAssigns  =  child.getParent(),  variable;	  Node    matchRemovableAssigns    =    child.getParent();    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
337	[BUG]  [BUGGY]  Node  matchRemovableAssigns  =  child.getChildCount();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Node  matchRemovableAssigns  =  child.getChildCount();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Node  matchRemovableAssigns  =  child.getChildCount();	  Node    matchRemovableAssigns    =    child.getParent();    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
338	[BUG]  [BUGGY]  Node  matchRemovableAssigns  =  child.getParent(),  variable);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Node  matchRemovableAssigns  =  child.getParent(),  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Node  matchRemovableAssigns  =  child.getParent(),  variable);	  Node    matchRemovableAssigns    =    child.getParent();    	non-compiled	[CE]  ';'  expected	134	None	replace
339	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FOCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FOCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FOCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FOCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	119	None	replace
340	[BUG]  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FOCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FOCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FOCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FOCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
341	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.MAYBE_LIVE)  {  //  Not  a  FOCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.MAYBE_LIVE)  {  //  Not  a  FOCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.MAYBE_LIVE)  {  //  Not  a  FOCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FOCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	119	None	replace
342	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  //  Not  a  FOCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  //  Not  a  FOCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  //  Not  a  FOCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FOCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	119	None	replace
343	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(child))  {  //  Not  a  FOCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  VariableReadBeforeKill  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(child))  {  //  Not  a  FOCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(child))  {  //  Not  a  FOCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FOCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  VariableReadBeforeKill	119	None	replace
344	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  MOVED))  {  [CE]  cannot  find  symbol  MOVED  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  MOVED))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  MOVED))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable,    VAR))    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	140	None	replace
345	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  MILL_LEAD))  {  [CE]  cannot  find  symbol  MILL_LEAD  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  MILL_LEAD))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  MILL_LEAD))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable,    VAR))    {    	non-compiled	[CE]  cannot  find  symbol  MILL_LEAD	140	None	replace
346	[BUG]  [BUGGY]  Node  child  =  n.getLastChild();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Node  child  =  n.getLastChild();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Node  child  =  n.getLastChild();	  Node    child    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
347	[BUG]  [BUGGY]  Node  child  =  n.getNext();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Node  child  =  n.getNext();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Node  child  =  n.getNext();	  Node    child    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
348	[BUG]  [BUGGY]  Node  child  =  child.getFirstChild();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Node  child  =  child.getFirstChild();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Node  child  =  child.getFirstChild();	  Node    child    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
349	[BUG]  [BUGGY]  Node  child  =  n.getPreviousChild();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Node  child  =  n.getPreviousChild();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Node  child  =  n.getPreviousChild();	  Node    child    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
350	[BUG]  [BUGGY]  Node  child  =  parent.getFirstChild();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Node  child  =  parent.getFirstChild();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Node  child  =  parent.getFirstChild();	  Node    child    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
351	[BUG]  [BUGGY]  Node  child  =  n.getParent();  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Node  child  =  n.getParent();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Node  child  =  n.getParent();	  Node    child    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
352	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.containsKey(child,  variable))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.containsKey(child,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.containsKey(child,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.containsKey(child))    {    	non-compiled	[CE]  cannot  find  symbol  	94	None	replace
353	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!variableRemovableAssigns.containsKey(child))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!variableRemovableAssigns.containsKey(child))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!variableRemovableAssigns.containsKey(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.containsKey(child))    {    	non-compiled	[CE]  cannot  find  symbol  	94	None	replace
354	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!variableRemovableAssigns.containsKey(child))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!variableRemovableAssigns.containsKey(child))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!variableRemovableAssigns.containsKey(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.containsKey(child))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	94	None	replace
355	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!variableRemovableAssigns.containsKey(child))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!variableRemovableAssigns.containsKey(child))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!variableRemovableAssigns.containsKey(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.containsKey(child))    {    	non-compiled	[CE]  cannot  find  symbol  	94	None	replace
356	[BUG]  [BUGGY]  ||(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  ||(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;	  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable))    {    return    state;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
357	[BUG]  [BUGGY]  ||(ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  ||(ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||(ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;	  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable))    {    return    state;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
358	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  VariableLiveness.BOTTOM)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  VariableLiveness.BOTTOM)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	11	None	replace
359	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  state  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  ==  VariableLiveness.BOTTOM)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  state	11	None	replace
360	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state!=  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  state  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state!=  VariableLiveness.BOTTOM)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state!=  VariableLiveness.BOTTOM)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  state	11	None	replace
361	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child!=  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]                                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child!=  VariableLiveness.BOTTOM)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child!=  VariableLiveness.BOTTOM)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	11	None	replace
362	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]                                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable  ==  VariableLiveness.BOTTOM)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	11	None	replace
363	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  state!=  VariableLiveness.BOTTOM)  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  state!=  VariableLiveness.BOTTOM)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  state!=  VariableLiveness.BOTTOM)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	11	None	replace
364	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)&&  state)  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)&&  state)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)&&  state)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable),    state)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	22	None	replace
365	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  ==  isVariableReadBeforeKill(child,  variable),  variable)  {  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  ==  isVariableReadBeforeKill(child,  variable),  variable)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  ==  isVariableReadBeforeKill(child,  variable),  variable)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable),    state)    {    	non-compiled	[CE]  ')'  expected	22	None	replace
366	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  isVariableReadBeforeKill(child,  variable),  variable)  {  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  isVariableReadBeforeKill(child,  variable),  variable)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  isVariableReadBeforeKill(child,  variable),  variable)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable),    state)    {    	non-compiled	[CE]  ')'  expected	22	None	replace
367	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable),    state)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	22	None	replace
368	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable),  state)  {  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable),  state)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable),  state)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable),    state)    {    	non-compiled	[CE]  ')'  expected	22	None	replace
369	[BUG]  [BUGGY]  &&!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(n.getString()))  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  &&!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(n.getString()))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	&&!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(n.getString()))  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(n.getString()))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
370	[BUG]  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(n.getString()))  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(n.getString()))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(n.getString()))  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(n.getString()))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
371	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!variable.equals(n.getString()))  {  return  state;  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!variable.equals(n.getString()))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!variable.equals(n.getString()))  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(n.getString()))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
372	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||    variable!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	68	None	replace
373	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    	non-compiled	[CE]  cannot  find  symbol  state	102	None	replace
374	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  VariableLiveness.VARIABLE_LIVE)  {  [CE]  cannot  find  symbol  VARIABLE_LIVE  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  VariableLiveness.VARIABLE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  VariableLiveness.VARIABLE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.VARIABLE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  VARIABLE_LIVE	97	None	replace
375	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  ==  VariableLiveness.VARIABLE_LIVE)  {  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  ==  VariableLiveness.VARIABLE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  ==  VariableLiveness.VARIABLE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.VARIABLE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  state	97	None	replace
376	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state!=  VariableLiveness.VARIABLE_LIVE)  {  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state!=  VariableLiveness.VARIABLE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state!=  VariableLiveness.VARIABLE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.VARIABLE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  state	97	None	replace
377	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child!=  VariableLiveness.VARIABLE_LIVE)  {  [CE]  cannot  find  symbol  VARIABLE_LIVE  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child!=  VariableLiveness.VARIABLE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child!=  VariableLiveness.VARIABLE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.VARIABLE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  VARIABLE_LIVE	97	None	replace
378	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable  ==  VariableLiveness.VARIABLE_LIVE)  {  [CE]  cannot  find  symbol  VARIABLE_LIVE  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable  ==  VariableLiveness.VARIABLE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable  ==  VariableLiveness.VARIABLE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.VARIABLE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  VARIABLE_LIVE	97	None	replace
379	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  state!=  VariableLiveness.VARIABLE_LIVE)  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  state!=  VariableLiveness.VARIABLE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  state!=  VariableLiveness.VARIABLE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.VARIABLE_LIVE)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	97	None	replace
380	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child,  state))  {  [CE]  cannot  find  symbol  state  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child,  state))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child,  state))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  state	86	None	replace
381	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child,  VariableLiveness.MAYBE_LIVE))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child,  VariableLiveness.MAYBE_LIVE))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child,  VariableLiveness.MAYBE_LIVE))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  	86	None	replace
382	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(n,  variable))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(n,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(n,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  	86	None	replace
383	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child,  KILL))  {  [CE]  cannot  find  symbol  KILL  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child,  KILL))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child,  KILL))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  KILL	86	None	replace
384	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  state,  MAYBE_LIVE))  {  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  state,  MAYBE_LIVE))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  state,  MAYBE_LIVE))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    state,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  state	60	None	replace
385	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  parent,  variable))  {  [CE]  cannot  find  symbol  parent  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  parent,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  parent,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    state,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  parent	60	None	replace
386	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  child,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  child,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  child,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    state,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	60	None	replace
387	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  condition,  variable))  {  [CE]  cannot  find  symbol  condition  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  condition,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  condition,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    state,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  condition	60	None	replace
388	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  state,  MOVE_LIVE))  {  [CE]  cannot  find  symbol  state  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  state,  MOVE_LIVE))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  state,  MOVE_LIVE))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    state,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  state	60	None	replace
389	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(n,  child.getString()))  {  [CE]  no  suitable  method  found  for  equals(Node,String)  [FE]            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(n,  child.getString()))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(n,  child.getString()))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(n.getString()))    {    	non-compiled	[CE]  no  suitable  method  found  for  equals(Node,String)	47	None	replace
390	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(n.getString())||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  state  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(n.getString())||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(n.getString())||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(n.getString()))    {    	non-compiled	[CE]  cannot  find  symbol  state	47	None	replace
391	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  children.getFirstChild();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicate  matchRemovableAssigns  =  children.getFirstChild();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssigns  =  children.getFirstChild();	  Predicate    matchRemovableAssigns    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
392	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  :  child.getFirstChild();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicate  matchRemovableAssigns  :  child.getFirstChild();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssigns  :  child.getFirstChild();	  Predicate    matchRemovableAssigns    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	2	None	replace
393	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  child.getfirstChild();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicate  matchRemovableAssigns  =  child.getfirstChild();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssigns  =  child.getfirstChild();	  Predicate    matchRemovableAssigns    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
394	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  MAYBE_LIVE);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  MAYBE_LIVE);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  MAYBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    n);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
395	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MAXBE_LIVE);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MAXBE_LIVE);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MAXBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    n);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
396	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MAJBE_LIVE);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MAJBE_LIVE);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MAJBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    n);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
397	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  MOVE_LIVE);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  MOVE_LIVE);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  MOVE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    n);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
398	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child.getType()  ==  Token.FUNCTION)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child.getType()  ==  Token.FUNCTION)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child.getType()  ==  Token.FUNCTION)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&    child.getType()    ==    Token.FUNCTION)    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	56	None	replace
399	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state.getType()  ==  Token.FUNCTION)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  state  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state.getType()  ==  Token.FUNCTION)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state.getType()  ==  Token.FUNCTION)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&    child.getType()    ==    Token.FUNCTION)    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	56	None	replace
400	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  state.getType()  ==  Token.FUNCTION)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  state  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  state.getType()  ==  Token.FUNCTION)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  state.getType()  ==  Token.FUNCTION)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&    child.getType()    ==    Token.FUNCTION)    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	56	None	replace
401	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable.getType()  ==  Token.FUNCTION)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable.getType()  ==  Token.FUNCTION)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable.getType()  ==  Token.FUNCTION)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&    child.getType()    ==    Token.FUNCTION)    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
402	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  variable.getType()  ==  Token.FUNCTION)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  variable.getType()  ==  Token.FUNCTION)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  variable.getType()  ==  Token.FUNCTION)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&    child.getType()    ==    Token.FUNCTION)    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
403	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  child.getType()  ==  Token.FUNCTION)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  state  [FE]                                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  child.getType()  ==  Token.FUNCTION)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  child.getType()  ==  Token.FUNCTION)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&    child.getType()    ==    Token.FUNCTION)    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	56	None	replace
404	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  MOVE_LIVE))  {  [CE]  cannot  find  symbol  MOVE_LIVE  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  MOVE_LIVE))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  MOVE_LIVE))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable,    state))    {    	non-compiled	[CE]  cannot  find  symbol  MOVE_LIVE	58	None	replace
405	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  -=  child.getPredicate();  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicate  matchRemovableAssigns  -=  child.getPredicate();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssigns  -=  child.getPredicate();	  Predicate    matchRemovableAssigns    =    n.getPredicate();    	non-compiled	[CE]  ';'  expected	5	None	replace
406	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  children.getPredicate();  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicate  matchRemovableAssigns  =  children.getPredicate();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssigns  =  children.getPredicate();	  Predicate    matchRemovableAssigns    =    n.getPredicate();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
407	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  :  child.getPredicate();  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicate  matchRemovableAssigns  :  child.getPredicate();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssigns  :  child.getPredicate();	  Predicate    matchRemovableAssigns    =    n.getPredicate();    	non-compiled	[CE]  ';'  expected	5	None	replace
408	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  cannot  find  symbol  state  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);	  if(!ControlFlowGraph.isEnteringNewCfgNode(n)||!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  state	84	None	replace
409	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  cannot  find  symbol  state  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);	  if(!ControlFlowGraph.isEnteringNewCfgNode(n)||!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  state	84	None	replace
410	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  compiler.getPredicate(child,  variable);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicate  matchRemovableAssigns  =  compiler.getPredicate(child,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssigns  =  compiler.getPredicate(child,  variable);	  Predicate    matchRemovableAssigns    =    compiler.getPredicate(child);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
411	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  child.getPredicate(compiler);  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicate  matchRemovableAssigns  =  child.getPredicate(compiler);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssigns  =  child.getPredicate(compiler);	  Predicate    matchRemovableAssigns    =    compiler.getPredicate(child);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
412	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  compiler.getPredicate(child  +  1);  [CE]  illegal  start  of  type  [FE]                                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicate  matchRemovableAssigns  =  compiler.getPredicate(child  +  1);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssigns  =  compiler.getPredicate(child  +  1);	  Predicate    matchRemovableAssigns    =    compiler.getPredicate(child);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
413	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  compiler.getPredicate(child,  variables);  [CE]  illegal  start  of  type  [FE]                                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicate  matchRemovableAssigns  =  compiler.getPredicate(child,  variables);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssigns  =  compiler.getPredicate(child,  variables);	  Predicate    matchRemovableAssigns    =    compiler.getPredicate(child);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
414	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  compiler.getPredicate(child,  n);  [CE]  illegal  start  of  type  [FE]                                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicate  matchRemovableAssigns  =  compiler.getPredicate(child,  n);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssigns  =  compiler.getPredicate(child,  n);	  Predicate    matchRemovableAssigns    =    compiler.getPredicate(child);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
415	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  parent.getPredicate(child);  [CE]  illegal  start  of  type  [FE]                                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicate  matchRemovableAssigns  =  parent.getPredicate(child);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssigns  =  parent.getPredicate(child);	  Predicate    matchRemovableAssigns    =    compiler.getPredicate(child);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
416	[BUG]  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);	  ||!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
417	[BUG]  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  ||!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
418	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable),  liveness)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable),  liveness)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable),  liveness)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable)&&    isVariableReadBeforeKill(child,    variable))    {    	non-compiled	[CE]  ')'  expected	17	None	replace
419	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  state))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  state))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  state))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable)&&    isVariableReadBeforeKill(child,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	17	None	replace
420	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(n,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(n,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(n,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable)&&    isVariableReadBeforeKill(child,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	17	None	replace
421	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(new  VariableLiveness(child,  variable)))  {  [CE]  enum  types  may  not  be  instantiated  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(new  VariableLiveness(child,  variable)))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(new  VariableLiveness(child,  variable)))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(varvariable))    {    	non-compiled	[CE]  enum  types  may  not  be  instantiated	126	None	replace
422	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)&&  state.isVariableReadBeforeKill(child,  variable);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)&&  state.isVariableReadBeforeKill(child,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)&&  state.isVariableReadBeforeKill(child,  variable);	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||    state.isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  ')'  expected	90	None	replace
423	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!variableRemovableAssigns.contains(child)||  state.isVariableReadBeforeKill(child,  variable);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!variableRemovableAssigns.contains(child)||  state.isVariableReadBeforeKill(child,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!variableRemovableAssigns.contains(child)||  state.isVariableReadBeforeKill(child,  variable);	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||    state.isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  ')'  expected	90	None	replace
424	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!matchRemovableAssigns.contains(child)&&  state.isVariableReadBeforeKill(child,  variable);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!matchRemovableAssigns.contains(child)&&  state.isVariableReadBeforeKill(child,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!matchRemovableAssigns.contains(child)&&  state.isVariableReadBeforeKill(child,  variable);	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||    state.isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  ')'  expected	90	None	replace
425	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  variableRemovableAssigns.contains(child)||  state.isVariableReadBeforeKill(child,  variable);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  variableRemovableAssigns.contains(child)||  state.isVariableReadBeforeKill(child,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  variableRemovableAssigns.contains(child)||  state.isVariableReadBeforeKill(child,  variable);	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||    state.isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  ')'  expected	90	None	replace
426	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equalsIgnoreCase(n.getString()))  {  [CE]  cannot  find  symbol  state  [FE]            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equalsIgnoreCase(n.getString()))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equalsIgnoreCase(n.getString()))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equalsIgnoreCase(child.getString()))    {    	non-compiled	[CE]  cannot  find  symbol  state	151	None	replace
427	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!variable.equalsIgnoreCase(child.getString()))  {  [CE]  cannot  find  symbol  state  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!variable.equalsIgnoreCase(child.getString()))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!variable.equalsIgnoreCase(child.getString()))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equalsIgnoreCase(child.getString()))    {    	non-compiled	[CE]  cannot  find  symbol  state	151	None	replace
428	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(n,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(n,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(n,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(n))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	13	None	replace
429	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)||!variableRemovableAssigns.contains(child))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)||!variableRemovableAssigns.contains(child))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)||!variableRemovableAssigns.contains(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!variableRemovableAssigns.contains(child))    {    	non-compiled	[CE]  cannot  find  symbol  	95	None	replace
430	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!variableRemovableAssigns.contains(n))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!variableRemovableAssigns.contains(n))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!variableRemovableAssigns.contains(n))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!variableRemovableAssigns.contains(child))    {    	non-compiled	[CE]  cannot  find  symbol  	95	None	replace
431	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||!variableRemovableAssigns.contains(child))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||!variableRemovableAssigns.contains(child))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||!variableRemovableAssigns.contains(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!variableRemovableAssigns.contains(child))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	95	None	replace
432	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(n)||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(n)||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(n)||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  	93	None	replace
433	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||  state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||  state  ==  VariableLiveness.MOVED)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||  state  ==  VariableLiveness.MOVED)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  	93	None	replace
434	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable),  liveness)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable),  liveness)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable),  liveness)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable),    liveness)    {    	non-compiled	[CE]  ')'  expected	105	None	replace
435	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)&&  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)&&  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)&&  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable),    liveness)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	105	None	replace
436	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)&&  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)&&  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)&&  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable),    liveness)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	105	None	replace
437	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable),  maybe_LIVE)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable),  maybe_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable),  maybe_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable),    liveness)    {    	non-compiled	[CE]  ')'  expected	105	None	replace
438	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME,  variable);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME,  variable);	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
439	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME,  state);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME,  state);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME,  state);	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
440	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()!=  Token.NAME,  variable);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Preconditions.checkState(child.getType()!=  Token.NAME,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Preconditions.checkState(child.getType()!=  Token.NAME,  variable);	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
441	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.NAME);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.NAME);	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
442	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME,  child.getFirstChild());  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME,  child.getFirstChild());  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME,  child.getFirstChild());	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
443	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()!=  Token.NAME);  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Preconditions.checkState(child.getType()!=  Token.NAME);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Preconditions.checkState(child.getType()!=  Token.NAME);	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
444	[BUG]  [BUGGY]  &&!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  &&!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	&&!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||    state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
445	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||    state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
446	[BUG]  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||    state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
447	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!variable.equals(child.getString())||  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!variable.equals(child.getString())||  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!variable.equals(child.getString())||  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||    state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
448	[BUG]  [BUGGY]  &&!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  &&!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	&&!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||    state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
449	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||    state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
450	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	16	None	replace
451	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	16	None	replace
452	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||!ControlFlowGraph.isEnteringNewCfgNode(child,  state))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||!ControlFlowGraph.isEnteringNewCfgNode(child,  state))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||!ControlFlowGraph.isEnteringNewCfgNode(child,  state))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	16	None	replace
453	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state  >=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state  >=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state  >=  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  state	49	None	replace
454	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state!=  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state!=  VariableLiveness.MOVED)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state!=  VariableLiveness.MOVED)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  state	49	None	replace
455	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  child!=  VariableLiveness.READ)  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  child!=  VariableLiveness.READ)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  child!=  VariableLiveness.READ)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    child!=    VariableLiveness.READ)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	132	None	replace
456	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  child!=  VariableLiveness.READ)  {  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  child!=  VariableLiveness.READ)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  child!=  VariableLiveness.READ)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    child!=    VariableLiveness.READ)    {    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	132	None	replace
457	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child!=  VariableLiveness.KILL)  {  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child!=  VariableLiveness.KILL)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child!=  VariableLiveness.KILL)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    child!=    VariableLiveness.READ)    {    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	132	None	replace
458	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableLiveness.isEmpty(child))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableLiveness.isEmpty(child))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableLiveness.isEmpty(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableLiveness.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
459	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableLiveness.isEmpty(varvariable))  {  [CE]  cannot  find  symbol  var  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableLiveness.isEmpty(varvariable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableLiveness.isEmpty(varvariable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableLiveness.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol  var	100	None	replace
460	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableLiveness.isFunction(child))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableLiveness.isFunction(child))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableLiveness.isFunction(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableLiveness.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
461	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!VariableLiveness.isEmpty(child))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!VariableLiveness.isEmpty(child))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!VariableLiveness.isEmpty(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableLiveness.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
462	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableLivenessUtil.isEmpty(child))  {  [CE]  cannot  find  symbol  VariableLivenessUtil  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableLivenessUtil.isEmpty(child))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableLivenessUtil.isEmpty(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableLiveness.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol  VariableLivenessUtil	100	None	replace
463	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  child.getParent(),  variable;  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicate  matchRemovableAssigns  =  child.getParent(),  variable;  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssigns  =  child.getParent(),  variable;	  Predicate    matchRemovableAssigns    =    child.getParent();    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
464	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  child.getChildCount();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicate  matchRemovableAssigns  =  child.getChildCount();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssigns  =  child.getChildCount();	  Predicate    matchRemovableAssigns    =    child.getParent();    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
465	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
466	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  child.getType());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  child.getType());  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  child.getType());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
467	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1  -  child.getType());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1  -  child.getType());  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1  -  child.getType());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
468	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  3);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  3);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  3);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
469	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  state	83	None	replace
470	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  MOVE_LIST))  {  [CE]  cannot  find  symbol  MOVE_LIST  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  MOVE_LIST))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  MOVE_LIST))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable,    VARIABLE_LIVE))    {    	non-compiled	[CE]  cannot  find  symbol  MOVE_LIST	142	None	replace
471	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable)||  state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable)||  state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable)||  state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable)||    state    ==    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
472	[BUG]  [BUGGY]  &&  isVariableReadBeforeKill(child,  variable)||  state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  &&  isVariableReadBeforeKill(child,  variable)||  state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	&&  isVariableReadBeforeKill(child,  variable)||  state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable)||    state    ==    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
473	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)&&  state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)&&  state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)&&  state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable)||    state    ==    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
474	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  ==  VariableLiveness.KILL)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  ==  VariableLiveness.KILL)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  state	8	None	replace
475	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!variable.equals(n.getString()))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!variable.equals(n.getString()))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!variable.equals(n.getString()))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(n,    variable))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	53	None	replace
476	[BUG]  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(n,  variable))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(n,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||!ControlFlowGraph.isEnteringNewCfgNode(n,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(n,    variable))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
477	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  MOVED  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  VariableLiveness.MOVED)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  VariableLiveness.MOVED)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	38	None	replace
478	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state!=  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state!=  VariableLiveness.MOVED)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state!=  VariableLiveness.MOVED)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  state	38	None	replace
479	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child!=  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  MOVED  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child!=  VariableLiveness.MOVED)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child!=  VariableLiveness.MOVED)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	38	None	replace
480	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  MOVED  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable  ==  VariableLiveness.MOVED)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable  ==  VariableLiveness.MOVED)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	38	None	replace
481	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  state!=  VariableLiveness.MOVED)  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  state!=  VariableLiveness.MOVED)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  state!=  VariableLiveness.MOVED)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.MOVED)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	38	None	replace
482	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  MILL))  {  [CE]  cannot  find  symbol  MILL  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  MILL))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  MILL))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable,    LEAD))    {    	non-compiled	[CE]  cannot  find  symbol  MILL	131	None	replace
483	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!VariableReadBeforeKill.isEmpty(varvariable))  {  [CE]  cannot  find  symbol  var  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!VariableReadBeforeKill.isEmpty(varvariable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!VariableReadBeforeKill.isEmpty(varvariable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!VariableReadBeforeKill.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol  var	28	None	replace
484	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  1);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
485	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  *  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  *  1);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  *  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
486	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  n);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  n);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
487	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  child.getPredicates();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicate  matchRemovableAssigns  =  child.getPredicates();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssigns  =  child.getPredicates();	  Predicate    matchRemovableAssigns    =    n.getPredicate();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
488	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variables,  MAYBE_LIVE))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variables,  MAYBE_LIVE))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variables,  MAYBE_LIVE))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable,    KILL))    {    	non-compiled	[CE]  cannot  find  symbol  	139	None	replace
489	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!variableRemovableAssigns.contains(child,  state))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!variableRemovableAssigns.contains(child,  state))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!variableRemovableAssigns.contains(child,  state))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable)&&!variableRemovableAssigns.contains(child))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	89	None	replace
490	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!variableRemovableAssigns.contains(child),  liveness)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!variableRemovableAssigns.contains(child),  liveness)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!variableRemovableAssigns.contains(child),  liveness)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable)&&!variableRemovableAssigns.contains(child))    {    	non-compiled	[CE]  ')'  expected	89	None	replace
491	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child,  variable.getValue()))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child,  variable.getValue()))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child,  variable.getValue()))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child,    variable.getString()))    {    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
492	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child,  variable.toString()))  {  [CE]  no  suitable  method  found  for  equals(Node,String)  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child,  variable.toString()))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child,  variable.toString()))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child,    variable.getString()))    {    	non-compiled	[CE]  no  suitable  method  found  for  equals(Node,String)	104	None	replace
493	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child,  variable.getName()))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child,  variable.getName()))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child,  variable.getName()))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child,    variable.getString()))    {    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
494	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  STRING);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  STRING);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  STRING);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    n);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
495	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  MOVED);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  MOVED);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  MOVED);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    n);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
496	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  HEAD);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  HEAD);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  HEAD);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    n);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
497	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  MILL_LIVE);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  MILL_LIVE);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  MILL_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    n);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
498	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  >=  VariableLiveness.BOTTOM_LIVE)  {  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  >=  VariableLiveness.BOTTOM_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  >=  VariableLiveness.BOTTOM_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.BOTTOM_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  state	40	None	replace
499	[BUG]  [BUGGY]  &&!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  &&!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	&&!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }	  &&!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
500	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination  &&!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicate  matchRemovableAssignsElimination  &&!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssignsElimination  &&!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable))  {  return  state;  }	  Predicate    matchRemovableAssignsElimination    &&!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
501	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination  &&!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  ==  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicate  matchRemovableAssignsElimination  &&!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  ==  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssignsElimination  &&!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  ==  isVariableReadBeforeKill(child,  variable))  {  return  state;  }	  Predicate    matchRemovableAssignsElimination    &&!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
502	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable)&&  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable)&&  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable)&&  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable)||    state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
503	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&    child.getFirstChild().getType()    ==    Token.FUNCTION)    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	147	None	replace
504	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  STRING))  {  [CE]  cannot  find  symbol  STRING  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  STRING))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  STRING))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable,    MAYBE_LIVE))    {    	non-compiled	[CE]  cannot  find  symbol  STRING	57	None	replace
505	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  VARIABLE))  {  [CE]  cannot  find  symbol  VARIABLE  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  VARIABLE))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  VARIABLE))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable,    MAYBE_LIVE))    {    	non-compiled	[CE]  cannot  find  symbol  VARIABLE	57	None	replace
506	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  VARIABLE_KILL))  {  [CE]  cannot  find  symbol  VARIABLE_KILL  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  VARIABLE_KILL))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  VARIABLE_KILL))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable,    MAYBE_LIVE))    {    	non-compiled	[CE]  cannot  find  symbol  VARIABLE_KILL	57	None	replace
507	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable),  mayBE_LIVE)  {  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable),  mayBE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable),  mayBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||    isVariableReadBeforeKill(child,    variable))    {    	non-compiled	[CE]  ')'  expected	23	None	replace
508	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable),  maybe_LIVE)  {  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable),  maybe_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable),  maybe_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||    isVariableReadBeforeKill(child,    variable))    {    	non-compiled	[CE]  ')'  expected	23	None	replace
509	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  DEFAULT))  {  [CE]  cannot  find  symbol  DEFAULT  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  DEFAULT))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  DEFAULT))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    state,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  DEFAULT	60	None	replace
510	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  this);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  this);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  this);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
511	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  true);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  true);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  true);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
512	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(n),  variable)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(n),  variable)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(n),  variable)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(n))    {    	non-compiled	[CE]  ')'  expected	13	None	replace
513	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child.getType()!=  Token.FUNCTION)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child.getType()!=  Token.FUNCTION)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child.getType()!=  Token.FUNCTION)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&    child.getType()    ==    Token.FUNCTION)    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	56	None	replace
514	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child.getType()  ==  Token.FUNCTION)  {  [CE]  cannot  find  symbol  state  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child.getType()  ==  Token.FUNCTION)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child.getType()  ==  Token.FUNCTION)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&    child.getType()    ==    Token.FUNCTION)    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	56	None	replace
515	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child.getType()  ==  Token.NAME)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child.getType()  ==  Token.NAME)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&    child.getType()    ==    Token.NAME)    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	55	None	replace
516	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child.getType()!=  Token.NAME)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child.getType()!=  Token.NAME)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child.getType()!=  Token.NAME)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&    child.getType()    ==    Token.NAME)    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	55	None	replace
517	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  child.getType()  ==  Token.NAME)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  state  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  child.getType()  ==  Token.NAME)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  child.getType()  ==  Token.NAME)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&    child.getType()    ==    Token.NAME)    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	55	None	replace
518	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(n,    variable))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	19	None	replace
519	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(variable)||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(variable)||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(variable)||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(variable))    {    	non-compiled	[CE]  cannot  find  symbol  	125	None	replace
520	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(variable,  child))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(variable,  child))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(variable,  child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(variable))    {    	non-compiled	[CE]  cannot  find  symbol  	125	None	replace
521	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(variable)||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(variable)||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(variable)||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(variable))    {    	non-compiled	[CE]  cannot  find  symbol  	125	None	replace
522	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state!=  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state!=  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state!=  VariableLiveness.SEMI_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  state	49	None	replace
523	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state!=  VariableLiveness.KILL_LIVE)  {  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state!=  VariableLiveness.KILL_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state!=  VariableLiveness.KILL_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  state	49	None	replace
524	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state!=  VariableLiveness.MINUTE)  {  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state!=  VariableLiveness.MINUTE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state!=  VariableLiveness.MINUTE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  state	49	None	replace
525	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableLimit.isEmpty(child))  {  [CE]  cannot  find  symbol  VariableLimit  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableLimit.isEmpty(child))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableLimit.isEmpty(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforePosition.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol  VariableLimit	149	None	replace
526	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  VariableLiveness.MINUTE_LIVE)  {  [CE]  cannot  find  symbol  MINUTE_LIVE  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  VariableLiveness.MINUTE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  VariableLiveness.MINUTE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||    variable!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MINUTE_LIVE	68	None	replace
527	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.MINUTE_LIVE)  {  [CE]  cannot  find  symbol  state  [FE]            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.MINUTE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.MINUTE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  state	96	None	replace
528	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equalsIgnoreCase(child.getString())||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  state  [FE]            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equalsIgnoreCase(child.getString())||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equalsIgnoreCase(child.getString())||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equalsIgnoreCase(child.getString()))    {    	non-compiled	[CE]  cannot  find  symbol  state	151	None	replace
529	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equalsIgnoreCase(child.getString())||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  state  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equalsIgnoreCase(child.getString())||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equalsIgnoreCase(child.getString())||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equalsIgnoreCase(child.getString()))    {    	non-compiled	[CE]  cannot  find  symbol  state	151	None	replace
530	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equalsIgnoreCase(child.getQualifiedName()))  {  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equalsIgnoreCase(child.getQualifiedName()))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equalsIgnoreCase(child.getQualifiedName()))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equalsIgnoreCase(child.getString()))    {    	non-compiled	[CE]  cannot  find  symbol  state	151	None	replace
531	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!variable.equalsIgnoreCase(child.getString()))  {  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!variable.equalsIgnoreCase(child.getString()))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!variable.equalsIgnoreCase(child.getString()))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equalsIgnoreCase(child.getString()))    {    	non-compiled	[CE]  cannot  find  symbol  state	151	None	replace
532	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable)||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable)||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable)||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable)&&    isVariableReadBeforeKill(child,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	17	None	replace
533	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable)||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable)||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable)||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable)&&    isVariableReadBeforeKill(child,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	17	None	replace
534	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||!ControlFlowGraph.isEnteringNewCfgNode(child,  variables))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||!ControlFlowGraph.isEnteringNewCfgNode(child,  variables))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||!ControlFlowGraph.isEnteringNewCfgNode(child,  variables))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	16	None	replace
535	[BUG]  [BUGGY]  !ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!variable.equals(child.getString()))  {  return  state;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  !ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!variable.equals(child.getString()))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!variable.equals(child.getString()))  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable)&&!variable.equals(child.getString()))    {    return    state;    }    	non-compiled	[CE]  not  a  statement	123	None	replace
536	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!variable.equals(child.getString())||  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!variable.equals(child.getString())||  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!variable.equals(child.getString())||  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable)&&!variable.equals(child.getString()))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
537	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  child.getPredicate(variable);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicate  matchRemovableAssigns  =  child.getPredicate(variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssigns  =  child.getPredicate(variable);	  Predicate    matchRemovableAssigns    =    child.getPredicate();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
538	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  child.getNode();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicate  matchRemovableAssigns  =  child.getNode();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssigns  =  child.getNode();	  Predicate    matchRemovableAssigns    =    child.getPredicate();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
539	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(variable,  child))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(variable,  child))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(variable,  child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	14	None	replace
540	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  MOVED_FACTOR))  {  [CE]  cannot  find  symbol  MOVED_FACTOR  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  MOVED_FACTOR))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  MOVED_FACTOR))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable,    VARIABLE_LIVE))    {    	non-compiled	[CE]  cannot  find  symbol  MOVED_FACTOR	142	None	replace
541	[BUG]  [BUGGY]  Node  child  =  child.getLastChild();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Node  child  =  child.getLastChild();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Node  child  =  child.getLastChild();	  Node    child    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
542	[BUG]  [BUGGY]  Node  child  =  child.getNext();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Node  child  =  child.getNext();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Node  child  =  child.getNext();	  Node    child    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
543	[BUG]  [BUGGY]  &&!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable))  {  return  state;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  &&!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable))  {  return  state;  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	&&!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable))  {  return  state;	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
544	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  null,  VAR))  {  [CE]  cannot  find  symbol  VAR  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  null,  VAR))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  null,  VAR))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable,    null))    {    	non-compiled	[CE]  cannot  find  symbol  VAR	59	None	replace
545	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  null,  true))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  null,  true))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  null,  true))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable,    null))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	59	None	replace
546	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  null,  false))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  null,  false))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  null,  false))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable,    null))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	59	None	replace
547	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  null,  VARIABLE_KILL))  {  [CE]  cannot  find  symbol  VARIABLE_KILL  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  null,  VARIABLE_KILL))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  null,  VARIABLE_KILL))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable,    null))    {    	non-compiled	[CE]  cannot  find  symbol  VARIABLE_KILL	59	None	replace
548	[BUG]  [BUGGY]  ||(ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  ||(ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||(ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  }	  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
549	[BUG]  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;	  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
550	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state!=  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state!=  VariableLiveness.KILL)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state!=  VariableLiveness.KILL)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||    state!=    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  state	9	None	replace
551	[BUG]  [BUGGY]  Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable)||  state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable)||  state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable)||  state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable)||    state    ==    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  ';'  expected	128	None	replace
552	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable),  KILL)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable),  KILL)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable),  KILL)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable),    liveness)    {    	non-compiled	[CE]  ')'  expected	105	None	replace
553	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable),  this)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable),  this)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable),  this)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable),    liveness)    {    	non-compiled	[CE]  ')'  expected	105	None	replace
554	[BUG]  [BUGGY]  MutableControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  MutableControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	MutableControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable)&&    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  not  a  statement	129	None	replace
555	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME,  n);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME,  n);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME,  n);	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
556	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  &&  child.hasChildren());  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  &&  child.hasChildren());  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME  &&  child.hasChildren());	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
557	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    	non-compiled	[CE]  cannot  find  symbol  state	124	None	replace
558	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(new  VariableLiveness(child)))  {  [CE]  enum  types  may  not  be  instantiated  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(new  VariableLiveness(child)))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(new  VariableLiveness(child)))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(varvariable))    {    	non-compiled	[CE]  enum  types  may  not  be  instantiated	126	None	replace
559	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  HEAD))  {  [CE]  cannot  find  symbol  HEAD  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  HEAD))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  HEAD))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable,    state))    {    	non-compiled	[CE]  cannot  find  symbol  HEAD	58	None	replace
560	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  >=  VariableLiveness.VARIABLE_LIVE)  {  [CE]  cannot  find  symbol  state  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  >=  VariableLiveness.VARIABLE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  >=  VariableLiveness.VARIABLE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.VARIABLE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  state	97	None	replace
561	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1,  child);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1,  child);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1,  child);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    -    1);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
562	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1,  null);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1,  null);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    -    1);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
563	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)&&  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)&&  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)&&  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  	92	None	replace
564	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||  state!=  VariableLiveness.KILL_LIVE)  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||  state!=  VariableLiveness.KILL_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||  state!=  VariableLiveness.KILL_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  	92	None	replace
565	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)&&  state!=  VariableLiveness.KILL_LIVE)  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)&&  state!=  VariableLiveness.KILL_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)&&  state!=  VariableLiveness.KILL_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  	92	None	replace
566	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||  state!=  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||  state!=  VariableLiveness.BOTTOM)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||  state!=  VariableLiveness.BOTTOM)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  	92	None	replace
567	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||  state!=  VariableLiveness.MILLING)  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||  state!=  VariableLiveness.MILLING)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||  state!=  VariableLiveness.MILLING)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  	92	None	replace
568	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MILL);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MILL);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MILL);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    STRING);    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
569	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVari  [CE]  cannot  find  symbol  state  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVari  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVari	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(n))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	45	None	replace
570	[BUG]  [BUGGY]  Node  variable  =  child.getChildCount();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Node  variable  =  child.getChildCount();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Node  variable  =  child.getChildCount();	  Node    variable    =    child.getNext();    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
571	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  variable.equals(n.getString()))  {  [CE]  cannot  find  symbol  state  [FE]            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  variable.equals(n.getString()))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  variable.equals(n.getString()))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(n.getString()))    {    	non-compiled	[CE]  cannot  find  symbol  state	47	None	replace
572	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  	51	None	replace
573	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||    variable    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	67	None	replace
574	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(varvariable))  {  [CE]  cannot  find  symbol  var  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(varvariable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(varvariable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(parent))    {    	non-compiled	[CE]  cannot  find  symbol  var	91	None	replace
575	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(new  VariableName(child)))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(new  VariableName(child)))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(new  VariableName(child)))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(varVariableName))    {    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
576	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child,  variable)||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child,  variable)||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child,  variable)||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  	86	None	replace
577	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child,  variable)||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child,  variable)||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child,  variable)||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  	86	None	replace
578	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child,  VariableLiveness.SEMI_LIVE))  {  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child,  VariableLiveness.SEMI_LIVE))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child,  VariableLiveness.SEMI_LIVE))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	86	None	replace
579	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  REGEXP))  {  [CE]  cannot  find  symbol  REGEXP  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  REGEXP))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  REGEXP))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable,    MAYBE_LIVE))    {    	non-compiled	[CE]  cannot  find  symbol  REGEXP	18	None	replace
580	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  HOUR_LIVE))  {  [CE]  cannot  find  symbol  HOUR_LIVE  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  HOUR_LIVE))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  HOUR_LIVE))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable,    MAYBE_LIVE))    {    	non-compiled	[CE]  cannot  find  symbol  HOUR_LIVE	18	None	replace
581	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  >=  VariableLiveness.FOR_LIVE)  {  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  >=  VariableLiveness.FOR_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  >=  VariableLiveness.FOR_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.FOR_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  state	39	None	replace
582	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  variable  ==  null)  {  [CE]  cannot  find  symbol  state  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  variable  ==  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  variable  ==  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    	non-compiled	[CE]  cannot  find  symbol  state	118	None	replace
583	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child.getLastChild());  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child.getLastChild());  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  matchRemovableAssignsElimination(child.getLastChild());	  VariableLiveness    state    =    matchRemovableAssignsElimination(child);    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
584	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  null))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  null))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  null))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	54	None	replace
585	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  n  ==  child.getFirstChild())  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  n  ==  child.getFirstChild())  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  n  ==  child.getFirstChild())  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	54	None	replace
586	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)&&  state.isVariableReadBeforeKill(child,  variables);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)&&  state.isVariableReadBeforeKill(child,  variables);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)&&  state.isVariableReadBeforeKill(child,  variables);	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||    state.isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  ')'  expected	90	None	replace
587	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  VariableLiveness.MAYBE_LIVE))  {  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  VariableLiveness.MAYBE_LIVE))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  VariableLiveness.MAYBE_LIVE))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable,    VAR))    {    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	140	None	replace
588	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableLiveness.isFunction(variable))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableLiveness.isFunction(variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableLiveness.isFunction(variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableLiveness.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
589	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  child.getPrevious();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicate  matchRemovableAssigns  =  child.getPrevious();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssigns  =  child.getPrevious();	  Predicate    matchRemovableAssigns    =    child.getParent();    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
590	[BUG]  [BUGGY]  Node  matchRemovableAssigns  =  child.getPredicate();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Node  matchRemovableAssigns  =  child.getPredicate();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Node  matchRemovableAssigns  =  child.getPredicate();	  Node    matchRemovableAssigns    =    child.getNext();    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
591	[BUG]  [BUGGY]  If(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(variable))  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  If(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	If(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(varvariable))    {    	non-compiled	[CE]  ';'  expected	27	None	replace
592	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
593	[BUG]  [BUGGY]  VariableLiveness  state  =  asVariableReadBeforeKill(child,  variable);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  asVariableReadBeforeKill(child,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  asVariableReadBeforeKill(child,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
594	[BUG]  [BUGGY]  VariableLiveness  state  =  getVariableReadBeforeKill(child,  n);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  getVariableReadBeforeKill(child,  n);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  getVariableReadBeforeKill(child,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
595	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state  ==  VariableLiveness.KILL_LIVE)  {  [CE]  cannot  find  symbol  state  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state  ==  VariableLiveness.KILL_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state  ==  VariableLiveness.KILL_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  state	48	None	replace
596	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state  ==  VariableLiveness.MOVED)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state  ==  VariableLiveness.MOVED)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  state	48	None	replace
597	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state  ==  VariableLiveness.KILL)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state  ==  VariableLiveness.KILL)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  state	48	None	replace
598	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableFactory.isEmpty(varvariable))  {  [CE]  cannot  find  symbol  var  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableFactory.isEmpty(varvariable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableFactory.isEmpty(varvariable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableFactory.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol  var	101	None	replace
599	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableFactoryUtil.isEmpty(child))  {  [CE]  cannot  find  symbol  VariableFactoryUtil  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableFactoryUtil.isEmpty(child))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableFactoryUtil.isEmpty(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableFactory.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol  VariableFactoryUtil	101	None	replace
600	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  STRING);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  STRING);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  STRING);	  VariableLiveness    state    =    matchRemovableAssignsElimination(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
601	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  child);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  child);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  child);	  VariableLiveness    state    =    matchRemovableAssignsElimination(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
602	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state!=  null)  {  [CE]  cannot  find  symbol  state  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||    variable!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  state	152	None	replace
603	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  child!=  null)  {  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  child!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  child!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||    variable!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  state	152	None	replace
604	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  condition!=  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  condition  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  condition!=  VariableLiveness.BOTTOM)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  condition!=  VariableLiveness.BOTTOM)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  condition	11	None	replace
605	[BUG]  [BUGGY]  Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state  =  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state  =  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state  =  isVariableReadBeforeKill(child,  variable))  {  return  state;  }	  Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)||    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  ';'  expected	111	None	replace
606	[BUG]  [BUGGY]  Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable),  state);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable),  state);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable),  state);	  Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)||    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
607	[BUG]  [BUGGY]  PredicatesAssignment  matchRemovableAssignsElimination(child,  variable)&&!variable.equals(child.getString()))  {  return  state;  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  PredicatesAssignment  matchRemovableAssignsElimination(child,  variable)&&!variable.equals(child.getString()))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	PredicatesAssignment  matchRemovableAssignsElimination(child,  variable)&&!variable.equals(child.getString()))  {  return  state;  }	  Predicate    matchRemovableAssignsElimination(child,    variable)&&!variable.equals(child.getString()))    {    return    state;    }    	non-compiled	[CE]  ';'  expected	76	None	replace
608	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state!=  VariableLiveness.KILL_LIVE)  {  return  state;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state!=  VariableLiveness.KILL_LIVE)  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state!=  VariableLiveness.KILL_LIVE)  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||    state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
609	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state!=  VariableLiveness.KILL)  {  return  state;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state!=  VariableLiveness.KILL)  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state!=  VariableLiveness.KILL)  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||    state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
610	[BUG]  [BUGGY]  &&!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  &&!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	&&!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||    state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
611	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!variable.equals(child.getQualifiedName()))  {  [CE]  cannot  find  symbol  state  [FE]            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!variable.equals(child.getQualifiedName()))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!variable.equals(child.getQualifiedName()))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getQualifiedName()))    {    	non-compiled	[CE]  cannot  find  symbol  state	103	None	replace
612	[BUG]  [BUGGY]  Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable),  liveness)  {  return  state;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable),  liveness)  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable),  liveness)  {  return  state;  }	  Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  ';'  expected	110	None	replace
613	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  n!=  child.getLastChild())  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  n!=  child.getLastChild())  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  n!=  child.getLastChild())  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable),    n)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	130	None	replace
614	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable),  n  -  1)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable),  n  -  1)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable),  n  -  1)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable),    n)    {    	non-compiled	[CE]  ')'  expected	130	None	replace
615	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  n!=  child.getFirstChild())  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  n!=  child.getFirstChild())  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  n!=  child.getFirstChild())  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable),    n)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	130	None	replace
616	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  n!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  n!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  n!=  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable),    n)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	130	None	replace
617	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  KILL);  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  KILL);  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  KILL);  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
618	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  LIVE);  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  LIVE);  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  LIVE);  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
619	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  JSError.make(child,  variable));  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  JSError.make(child,  variable));  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  JSError.make(child,  variable));  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
620	[BUG]  [BUGGY]  Node  matchRemovableAssigns  =  child.getPrevious();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Node  matchRemovableAssigns  =  child.getPrevious();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Node  matchRemovableAssigns  =  child.getPrevious();	  Node    matchRemovableAssigns    =    child.getParent();    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
621	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!variableRemovableAssigns.contains(child,  variable))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!variableRemovableAssigns.contains(child,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!variableRemovableAssigns.contains(child,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!variableRemovableAssigns.contains(child))    {    	non-compiled	[CE]  cannot  find  symbol  	95	None	replace
622	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!VariableRemovableAssigns.contains(variable))  {  [CE]  cannot  find  symbol  VariableRemovableAssigns  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!VariableRemovableAssigns.contains(variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!VariableRemovableAssigns.contains(variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!variableRemovableAssigns.contains(child))    {    	non-compiled	[CE]  cannot  find  symbol  VariableRemovableAssigns	95	None	replace
623	[BUG]  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&  hasVariableReadBeforeKill(child,  variable))  {  return  state;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&  hasVariableReadBeforeKill(child,  variable))  {  return  state;  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||!ControlFlowGraph.isEnteringNewCfgNode(child)&&  hasVariableReadBeforeKill(child,  variable))  {  return  state;	  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable))    {    return    state;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
624	[BUG]  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable),  liveness)  {  return  state;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable),  liveness)  {  return  state;  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable),  liveness)  {  return  state;	  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable))    {    return    state;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
625	[BUG]  [BUGGY]  &&  isVariableReadBeforeKill(child,  variable)||  state.isRemovable())  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  &&  isVariableReadBeforeKill(child,  variable)||  state.isRemovable())  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	&&  isVariableReadBeforeKill(child,  variable)||  state.isRemovable())  {  return  state;  }	  &&    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
626	[BUG]  [BUGGY]  &&  isVariableReadBeforeKill(child,  variable)||  state;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  &&  isVariableReadBeforeKill(child,  variable)||  state;  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	&&  isVariableReadBeforeKill(child,  variable)||  state;	  &&    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
627	[BUG]  [BUGGY]  &&  isVariableReadBeforeKill(child,  variable)||  state.getType()  ==  Token.CALL)  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  &&  isVariableReadBeforeKill(child,  variable)||  state.getType()  ==  Token.CALL)  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	&&  isVariableReadBeforeKill(child,  variable)||  state.getType()  ==  Token.CALL)  {  return  state;  }	  &&    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
628	[BUG]  [BUGGY]  &&  isVariableReadBeforeKill(child,  variable)||  state.getType()  ==  Token.FUNCTION)  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  &&  isVariableReadBeforeKill(child,  variable)||  state.getType()  ==  Token.FUNCTION)  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	&&  isVariableReadBeforeKill(child,  variable)||  state.getType()  ==  Token.FUNCTION)  {  return  state;  }	  &&    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
629	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(new  VariableLiveness(child))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(new  VariableLiveness(child))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(new  VariableLiveness(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!variableRemovableAssigns.contains(child))    {    	non-compiled	[CE]  ')'  expected	88	None	replace
630	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  state  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.BLOCK)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.BLOCK)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.FOR)    {    	non-compiled	[CE]  cannot  find  symbol  state	10	None	replace
631	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  child,  state))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  state  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  child,  state))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n,  child,  state))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(n,    child))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	146	None	replace
632	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  return  state;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(n,    child))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
633	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variables!=  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variables!=  VariableLiveness.READ)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variables!=  VariableLiveness.READ)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    condition!=    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  	133	None	replace
634	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION,  VariableLiveness  state  =  isVariableReadBeforeKill(child,  [CE]  cannot  find  symbol  state  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION,  VariableLiveness  state  =  isVariableReadBeforeKill(child,  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION,  VariableLiveness  state  =  isVariableReadBeforeKill(child,	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION,    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  state	85	None	replace
635	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FUNCTION,  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  [CE]  cannot  find  symbol  state  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FUNCTION,  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FUNCTION,  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION,    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  state	85	None	replace
636	[BUG]  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable),  liveness)  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable),  liveness)  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable),  liveness)  {  return  state;  }	  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
637	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)&&  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)&&  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)&&  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  	93	None	replace
638	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)&&  state  ==  VariableLiveness.KILL_LIVE)  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)&&  state  ==  VariableLiveness.KILL_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)&&  state  ==  VariableLiveness.KILL_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  	93	None	replace
639	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||  state  ==  VariableLiveness.KILL_LIVE)  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||  state  ==  VariableLiveness.KILL_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||  state  ==  VariableLiveness.KILL_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  	93	None	replace
640	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariablesElimination.isEmpty(child))  {  [CE]  cannot  find  symbol  VariablesElimination  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariablesElimination.isEmpty(child))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariablesElimination.isEmpty(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeAnalysis.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol  VariablesElimination	26	None	replace
641	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableRemovableAnalysis.isEmpty(child))  {  [CE]  cannot  find  symbol  VariableRemovableAnalysis  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableRemovableAnalysis.isEmpty(child))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableRemovableAnalysis.isEmpty(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeAnalysis.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol  VariableRemovableAnalysis	26	None	replace
642	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  //  Not  a  FOCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  //  Not  a  FOCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  //  Not  a  FOCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FOCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	119	None	replace
643	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child))  {  //  Not  a  FOCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child))  {  //  Not  a  FOCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child))  {  //  Not  a  FOCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FOCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  	119	None	replace
644	[BUG]  [BUGGY]  &&!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  child!=  null)  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  &&!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  child!=  null)  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	&&!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  child!=  null)  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||    variable!=    null)    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
645	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state!=  MAYBE_LIVE)  {  return  state;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state!=  MAYBE_LIVE)  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state!=  MAYBE_LIVE)  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||    variable!=    null)    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
646	[BUG]  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  ==  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  ==  null)  {	  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&    variable!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
647	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  compiler.getPredicate(child),  variable;  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicate  matchRemovableAssigns  =  compiler.getPredicate(child),  variable;  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssigns  =  compiler.getPredicate(child),  variable;	  Predicate    matchRemovableAssigns    =    compiler.getPredicate(child);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
648	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  compiler.getPredicate(child,  child);  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicate  matchRemovableAssigns  =  compiler.getPredicate(child,  child);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssigns  =  compiler.getPredicate(child,  child);	  Predicate    matchRemovableAssigns    =    compiler.getPredicate(child);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
649	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.containsKey(child)||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.containsKey(child)||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.containsKey(child)||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.containsKey(child))    {    	non-compiled	[CE]  cannot  find  symbol  	94	None	replace
650	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.containsKey(child)||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.containsKey(child)||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.containsKey(child)||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.containsKey(child))    {    	non-compiled	[CE]  cannot  find  symbol  	94	None	replace
651	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVari  [CE]  cannot  find  symbol  state  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVari  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVari	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVari    	non-compiled	[CE]  cannot  find  symbol  state	46	None	replace
652	[BUG]  [BUGGY]  Predicates.checkState(child.getType()  ==  Token.NAME);  Predicate  matchRemovableAssigns  =  child.getFirstChild();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicates.checkState(child.getType()  ==  Token.NAME);  Predicate  matchRemovableAssigns  =  child.getFirstChild();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicates.checkState(child.getType()  ==  Token.NAME);  Predicate  matchRemovableAssigns  =  child.getFirstChild();	  Predicate    matchRemovableAssigns    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
653	[BUG]  [BUGGY]  Predicates.checkState(child.getType()  ==  Token.NAME);  Predicate  matchRemovableAssigns  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicates.checkState(child.getType()  ==  Token.NAME);  Predicate  matchRemovableAssigns  =  n.getFirstChild();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicates.checkState(child.getType()  ==  Token.NAME);  Predicate  matchRemovableAssigns  =  n.getFirstChild();	  Predicate    matchRemovableAssigns    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
654	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  MISSING))  {  [CE]  cannot  find  symbol  MISSING  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  MISSING))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  MISSING))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable,    VAR_LIVE))    {    	non-compiled	[CE]  cannot  find  symbol  MISSING	143	None	replace
655	[BUG]  [BUGGY]  Node  child  =  n.getFirstChild().getNext();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Node  child  =  n.getFirstChild().getNext();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Node  child  =  n.getFirstChild().getNext();	  Node    child    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
656	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n  -  1);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n  -  1);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n  -  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    -    1);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
657	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1,  n);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1,  n);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    -    1);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
658	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  compiler.getNodeForCodeInsertion(child);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicate  matchRemovableAssigns  =  compiler.getNodeForCodeInsertion(child);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssigns  =  compiler.getNodeForCodeInsertion(child);	  Predicate    matchRemovableAssigns    =    compiler.getPredicate(child);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
659	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  compiler.getNode(child);  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicate  matchRemovableAssigns  =  compiler.getNode(child);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssigns  =  compiler.getNode(child);	  Predicate    matchRemovableAssigns    =    compiler.getPredicate(child);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
660	[BUG]  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  state!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  state!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  state!=  null)  {	  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&    variable!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
661	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child.getType()  ==  Token.NAME  ||  variable!=  null)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child.getType()  ==  Token.NAME  ||  variable!=  null)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child.getType()  ==  Token.NAME  ||  variable!=  null)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&    child.getType()    ==    Token.NAME)    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	55	None	replace
662	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.CALL);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.CALL);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.CALL);	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
663	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.VAR);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.VAR);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.VAR);	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
664	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME,  child.getString());  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME,  child.getString());  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME,  child.getString());	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
665	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    	non-compiled	[CE]  cannot  find  symbol  state	102	None	replace
666	[BUG]  [BUGGY]  &&  isVariableReadBeforeKill(child,  variable)||  state  ==  VariableLiveness.MAYBE_LIVE;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  &&  isVariableReadBeforeKill(child,  variable)||  state  ==  VariableLiveness.MAYBE_LIVE;  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	&&  isVariableReadBeforeKill(child,  variable)||  state  ==  VariableLiveness.MAYBE_LIVE;	  &&    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
667	[BUG]  [BUGGY]  &&  isVariableReadBeforeKill(child,  variable)||  state!=  VariableLiveness.MAYBE_LIVE);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  &&  isVariableReadBeforeKill(child,  variable)||  state!=  VariableLiveness.MAYBE_LIVE);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	&&  isVariableReadBeforeKill(child,  variable)||  state!=  VariableLiveness.MAYBE_LIVE);	  &&    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
668	[BUG]  [BUGGY]  &&  isVariableReadBeforeKill(child,  variable)||  state!=  VariableLiveness.MAYBE_LIVE;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  &&  isVariableReadBeforeKill(child,  variable)||  state!=  VariableLiveness.MAYBE_LIVE;  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	&&  isVariableReadBeforeKill(child,  variable)||  state!=  VariableLiveness.MAYBE_LIVE;	  &&    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
669	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforePosition.isEmpty(parent))  {  [CE]  cannot  find  symbol  parent  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforePosition.isEmpty(parent))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforePosition.isEmpty(parent))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforePosition.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol  parent	149	None	replace
670	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforePosition.isEmpty(child,  variable))  {  [CE]  cannot  find  symbol  VariableReadBeforePosition  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforePosition.isEmpty(child,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforePosition.isEmpty(child,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforePosition.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol  VariableReadBeforePosition	149	None	replace
671	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||    state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
672	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child),  variable)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child),  variable)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child),  variable)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))    {    	non-compiled	[CE]  ')'  expected	12	None	replace
673	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!VariableLiveness.isEmpty(child))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!VariableLiveness.isEmpty(child))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!VariableLiveness.isEmpty(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableLiveness.isEmpty(child))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	100	None	replace
674	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child.getType()  ==  Token.VAR)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child.getType()  ==  Token.VAR)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child.getType()  ==  Token.VAR)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&    child.getType()    ==    Token.FUNCTION)    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	56	None	replace
675	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)&&  state  <  VariableLiveness.MAYBE_LIVE)  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)&&  state  <  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)&&  state  <  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable),    state)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	22	None	replace
676	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)&&  state  >=  VariableLiveness.MAYBE_LIVE)  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)&&  state  >=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)&&  state  >=  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable),    state)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	22	None	replace
677	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFactory.canBeEmpty(child))  {  [CE]  cannot  find  symbol  VariableReadBeforeFactory  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFactory.canBeEmpty(child))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFactory.canBeEmpty(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFactory.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol  VariableReadBeforeFactory	148	None	replace
678	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable)||  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable)||  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable)||  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable)&&    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
679	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable)||  state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable)||  state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable)||  state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable)&&    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
680	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  state))  {  return  state;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  state))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  state))  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable)&&    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
681	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MILL_LIVE,  READ);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MILL_LIVE,  READ);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MILL_LIVE,  READ);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    MILL_LIVE);    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
682	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  VEAD);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  VEAD);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  VEAD);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    MILL_LIVE);    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
683	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(new  Node(variable)))  {  [CE]  no  suitable  constructor  found  for  Node(String)  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(new  Node(variable)))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(new  Node(variable)))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(parent))    {    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(String)	91	None	replace
684	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(value))  {  [CE]  cannot  find  symbol  value  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(value))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(value))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(parent))    {    	non-compiled	[CE]  cannot  find  symbol  value	91	None	replace
685	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.matches(child.getString()))  {  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.matches(child.getString()))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.matches(child.getString()))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!variable.equals(child.getString()))    {    	non-compiled	[CE]  cannot  find  symbol  state	50	None	replace
686	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  //  Not  a  FUNCTION,  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  //  Not  a  FUNCTION,  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  //  Not  a  FUNCTION,  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION,    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	85	None	replace
687	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  //  Not  a  FUNCTION,  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  //  Not  a  FUNCTION,  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  //  Not  a  FUNCTION,  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION,    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	85	None	replace
688	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION,  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  state  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION,  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION,  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION,    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  state	85	None	replace
689	[BUG]  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;	  ||!ControlFlowGraph.isEnteringNewCfgNode(n))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
690	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getQualifiedName())||  variable!=  null)  {  [CE]  cannot  find  symbol  state  [FE]            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getQualifiedName())||  variable!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getQualifiedName())||  variable!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getQualifiedName()))    {    	non-compiled	[CE]  cannot  find  symbol  state	103	None	replace
691	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableName.equals(child.getQualifiedName()))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableName.equals(child.getQualifiedName()))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableName.equals(child.getQualifiedName()))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getQualifiedName()))    {    	non-compiled	[CE]  cannot  find  symbol  	103	None	replace
692	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child,  variable.getKey()))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child,  variable.getKey()))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child,  variable.getKey()))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child,    variable.getString()))    {    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
693	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(n,  child,  variable))  {  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(n,  child,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(n,  child,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(n,    variable))    {    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	19	None	replace
694	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(n,  variable,  variable))  {  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(n,  variable,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(n,  variable,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(n,    variable))    {    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	19	None	replace
695	[BUG]  [BUGGY]  VariableLiveness  state  =  hasVariableReadBeforeKill(child,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  hasVariableReadBeforeKill(child,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  hasVariableReadBeforeKill(child,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
696	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  VEAD);  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  VEAD);  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  VEAD);  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
697	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!varable.equals(child.getString()))  {  return  state;  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!varable.equals(child.getString()))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!varable.equals(child.getString()))  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
698	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  LEAD);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  LEAD);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  LEAD);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    MAYBE_LIVE);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
699	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  RETURN);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  RETURN);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  RETURN);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    MAYBE_LIVE);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
700	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  VariableLiveness.MAYBE_LIVE))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  VariableLiveness.MAYBE_LIVE))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  VariableLiveness.MAYBE_LIVE))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable,    VAR))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	61	None	replace
701	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(parent,  variable,  child))  {  [CE]  cannot  find  symbol  parent  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(parent,  variable,  child))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(parent,  variable,  child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(variable,    child))    {    	non-compiled	[CE]  cannot  find  symbol  parent	21	None	replace
702	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	42	None	replace
703	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	42	None	replace
704	[BUG]  [BUGGY]  Node  matchRemovableAssigns  =  child.getFirstChild().getNext();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Node  matchRemovableAssigns  =  child.getFirstChild().getNext();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Node  matchRemovableAssigns  =  child.getFirstChild().getNext();	  Node    matchRemovableAssigns    =    child.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
705	[BUG]  [BUGGY]  Node  matchRemovableAssigns  =  child.removeFirstChild();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Node  matchRemovableAssigns  =  child.removeFirstChild();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Node  matchRemovableAssigns  =  child.removeFirstChild();	  Node    matchRemovableAssigns    =    child.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
706	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  condition!=  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  condition  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  condition!=  VariableLiveness.FOR)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  condition!=  VariableLiveness.FOR)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.FOR)    {    	non-compiled	[CE]  cannot  find  symbol  condition	10	None	replace
707	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child,  VAR))  {  [CE]  cannot  find  symbol  VAR  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child,  VAR))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child,  VAR))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  VAR	86	None	replace
708	[BUG]  [BUGGY]  Node  variable  =  child.removeFirstChild();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Node  variable  =  child.removeFirstChild();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Node  variable  =  child.removeFirstChild();	  Node    variable    =    child.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
709	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(new  VariableLiveness(variable)))  {  [CE]  enum  types  may  not  be  instantiated  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(new  VariableLiveness(variable)))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(new  VariableLiveness(variable)))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(varvariable))    {    	non-compiled	[CE]  enum  types  may  not  be  instantiated	126	None	replace
710	[BUG]  [BUGGY]  VariableLiveness  state  =  matchesRemovableAssignsElimination(child,  variable);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  matchesRemovableAssignsElimination(child,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  matchesRemovableAssignsElimination(child,  variable);	  VariableLiveness    state    =    matchRemovableAssignsElimination(child);    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
711	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child.getString());  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child.getString());  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  matchRemovableAssignsElimination(child.getString());	  VariableLiveness    state    =    matchRemovableAssignsElimination(child);    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
712	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!variable.equalsIgnoreCase(child.getString()))  {  return  state;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!variable.equalsIgnoreCase(child.getString()))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!variable.equalsIgnoreCase(child.getString()))  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable)&&!variable.equals(child.getString()))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
713	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  child.removeFirstChild();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicate  matchRemovableAssigns  =  child.removeFirstChild();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssigns  =  child.removeFirstChild();	  Predicate    matchRemovableAssigns    =    child.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
714	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)&&  state.isVariableReadBeforeKill(child,  variable));  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)&&  state.isVariableReadBeforeKill(child,  variable));  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)&&  state.isVariableReadBeforeKill(child,  variable));	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||    state.isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
715	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)&&  state.isVariableReadBeforeKill(child,  variable))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)&&  state.isVariableReadBeforeKill(child,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)&&  state.isVariableReadBeforeKill(child,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||    state.isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  	90	None	replace
716	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equalsIgnoreCase(child.getString())||  variable!=  null)  {  [CE]  cannot  find  symbol  state  [FE]            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equalsIgnoreCase(child.getString())||  variable!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equalsIgnoreCase(child.getString())||  variable!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equalsIgnoreCase(child.getString()))    {    	non-compiled	[CE]  cannot  find  symbol  state	151	None	replace
717	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equalsIgnoreCase(child,  variable.getString()))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equalsIgnoreCase(child,  variable.getString()))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equalsIgnoreCase(child,  variable.getString()))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equalsIgnoreCase(child.getString()))    {    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
718	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  MISSING_VARIABLE_LIVE))  {  [CE]  cannot  find  symbol  MISSING_VARIABLE_LIVE  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  MISSING_VARIABLE_LIVE))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  MISSING_VARIABLE_LIVE))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable,    NO_VARIABLE_LIVE))    {    	non-compiled	[CE]  cannot  find  symbol  MISSING_VARIABLE_LIVE	63	None	replace
719	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  VAR);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  VAR);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  VAR);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    STRING);    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
720	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  state  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state  ==  VariableLiveness.BOTTOM)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  state	48	None	replace
721	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state  ==  VariableLiveness.MILLBE_LIVE)  {  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state  ==  VariableLiveness.MILLBE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state  ==  VariableLiveness.MILLBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  state	48	None	replace
722	[BUG]  [BUGGY]  Predicates.checkState(child.getType()  ==  Token.VAR);  Predicate  matchRemovableAssigns  =  child.getFirstChild();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicates.checkState(child.getType()  ==  Token.VAR);  Predicate  matchRemovableAssigns  =  child.getFirstChild();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicates.checkState(child.getType()  ==  Token.VAR);  Predicate  matchRemovableAssigns  =  child.getFirstChild();	  Predicate    matchRemovableAssigns    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
723	[BUG]  [BUGGY]  Predicates.checkState(child.getType()  ==  Token.VAR);  Predicate  matchRemovableAssigns  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicates.checkState(child.getType()  ==  Token.VAR);  Predicate  matchRemovableAssigns  =  n.getFirstChild();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicates.checkState(child.getType()  ==  Token.VAR);  Predicate  matchRemovableAssigns  =  n.getFirstChild();	  Predicate    matchRemovableAssigns    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
724	[BUG]  [BUGGY]  PredicatesAssignment  matchRemovableAssigns  =  child.getFirstChild();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  PredicatesAssignment  matchRemovableAssigns  =  child.getFirstChild();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	PredicatesAssignment  matchRemovableAssigns  =  child.getFirstChild();	  Predicate    matchRemovableAssigns    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
725	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  -=  child.getFirstChild();  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicate  matchRemovableAssigns  -=  child.getFirstChild();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssigns  -=  child.getFirstChild();	  Predicate    matchRemovableAssigns    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	2	None	replace
726	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(variable,  variable))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(variable,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(variable,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(variable))    {    	non-compiled	[CE]  cannot  find  symbol  	125	None	replace
727	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(variable,  state))  {  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(variable,  state))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(variable,  state))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(variable))    {    	non-compiled	[CE]  cannot  find  symbol  state	125	None	replace
728	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  VEAD))  {  [CE]  cannot  find  symbol  VEAD  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  VEAD))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  VEAD))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable,    state))    {    	non-compiled	[CE]  cannot  find  symbol  VEAD	20	None	replace
729	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.containsKey(variable))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.containsKey(variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.containsKey(variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.containsKey(child))    {    	non-compiled	[CE]  cannot  find  symbol  	94	None	replace
730	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.containsKey(varvariable))  {  [CE]  cannot  find  symbol  var  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.containsKey(varvariable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.containsKey(varvariable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.containsKey(child))    {    	non-compiled	[CE]  cannot  find  symbol  var	94	None	replace
731	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||  state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||  state  ==  VariableLiveness.BOTTOM)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  	93	None	replace
732	[BUG]  [BUGGY]  &&!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state!=  null)  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  &&!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state!=  null)  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	&&!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state!=  null)  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||    variable!=    null)    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
733	[BUG]  [BUGGY]  &&!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  child!=  null)  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  &&!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  child!=  null)  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	&&!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  child!=  null)  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||    variable!=    null)    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
734	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!matchRemovableAssigns.contains(child))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!matchRemovableAssigns.contains(child))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!matchRemovableAssigns.contains(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!variableRemovableAssigns.contains(child))    {    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
735	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  child);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  child);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  child);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
736	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable),  n)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable),  n)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable),  n)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable),    liveness)    {    	non-compiled	[CE]  ')'  expected	105	None	replace
737	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(variable)||  VariableLiveness.MAYBE_LIVE.equals(child))  {  [CE]  cannot  find  symbol  VariableReadBeforeKill  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(variable)||  VariableLiveness.MAYBE_LIVE.equals(child))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(variable)||  VariableLiveness.MAYBE_LIVE.equals(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(varvariable))    {    	non-compiled	[CE]  cannot  find  symbol  VariableReadBeforeKill	27	None	replace
738	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFill.isEmpty(variable))  {  [CE]  cannot  find  symbol  VariableReadBeforeFill  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFill.isEmpty(variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFill.isEmpty(variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(varvariable))    {    	non-compiled	[CE]  cannot  find  symbol  VariableReadBeforeFill	27	None	replace
739	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  VEAD);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  VEAD);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  VEAD);	  VariableLiveness    state    =    matchRemovableAssignsElimination(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
740	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable  +  1);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable  +  1);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable  +  1);	  VariableLiveness    state    =    matchRemovableAssignsElimination(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
741	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  REVISION);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  REVISION);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  REVISION);	  VariableLiveness    state    =    matchRemovableAssignsElimination(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
742	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  VariableLiveness.DEAD)  {  [CE]  cannot  find  symbol  DEAD  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  VariableLiveness.DEAD)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  VariableLiveness.DEAD)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    variable!=    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  DEAD	7	None	replace
743	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  null,  n))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  null,  n))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  null,  n))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable,    null))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	59	None	replace
744	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  null,  READ))  {  [CE]  cannot  find  symbol  READ  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  null,  READ))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  null,  READ))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable,    null))    {    	non-compiled	[CE]  cannot  find  symbol  READ	59	None	replace
745	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  null,  STRING))  {  [CE]  cannot  find  symbol  STRING  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  null,  STRING))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  null,  STRING))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable,    null))    {    	non-compiled	[CE]  cannot  find  symbol  STRING	59	None	replace
746	[BUG]  [BUGGY]  Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable),  state)  {  return  state;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable),  state)  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable),  state)  {  return  state;  }	  Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)||    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  ';'  expected	111	None	replace
747	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child.getFirstChild().getType()!=  Token.FUNCTION)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child.getFirstChild().getType()!=  Token.FUNCTION)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child.getFirstChild().getType()!=  Token.FUNCTION)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&    child.getFirstChild().getType()    ==    Token.FUNCTION)    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	147	None	replace
748	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  child.getFirstChild().getType()  ==  Token.FUNCTION)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  child.getFirstChild().getType()  ==  Token.FUNCTION)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  child.getFirstChild().getType()  ==  Token.FUNCTION)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&    child.getFirstChild().getType()    ==    Token.FUNCTION)    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	147	None	replace
749	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  variable!=  null)  {  [CE]  cannot  find  symbol  state  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  variable!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  variable!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||    variable!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  state	152	None	replace
750	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  child.getType()  ==  Token.FUNCTION)  {  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  child.getType()  ==  Token.FUNCTION)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  child.getType()  ==  Token.FUNCTION)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||    variable!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  state	152	None	replace
751	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableLimit.isEmpty(variable))  {  [CE]  cannot  find  symbol  VariableLimit  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableLimit.isEmpty(variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableLimit.isEmpty(variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(variable))    {    	non-compiled	[CE]  cannot  find  symbol  VariableLimit	24	None	replace
752	[BUG]  [BUGGY]  Predicates.checkState(child.getPredicate()  ==  null);  Predicate  matchRemovableAssigns  =  child.getPredicate();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicates.checkState(child.getPredicate()  ==  null);  Predicate  matchRemovableAssigns  =  child.getPredicate();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicates.checkState(child.getPredicate()  ==  null);  Predicate  matchRemovableAssigns  =  child.getPredicate();	  Predicate    matchRemovableAssigns    =    n.getPredicate();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
753	[BUG]  [BUGGY]  Predicates.checkState(child.getPredicate()  ==  null);  Predicate  matchRemovableAssigns  =  n.getPredicate();  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Predicates.checkState(child.getPredicate()  ==  null);  Predicate  matchRemovableAssigns  =  n.getPredicate();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicates.checkState(child.getPredicate()  ==  null);  Predicate  matchRemovableAssigns  =  n.getPredicate();	  Predicate    matchRemovableAssigns    =    n.getPredicate();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
754	[BUG]  [BUGGY]  PredicatesAssignment  matchRemovableAssigns  =  child.getPredicate();  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  PredicatesAssignment  matchRemovableAssigns  =  child.getPredicate();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	PredicatesAssignment  matchRemovableAssigns  =  child.getPredicate();	  Predicate    matchRemovableAssigns    =    n.getPredicate();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
755	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.VARIABLE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  state  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.VARIABLE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.VARIABLE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.VARIABLE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  state	97	None	replace
756	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||  child!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||  child!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||  child!=  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||    variable!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	68	None	replace
757	[BUG]  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  ||!ControlFlowGraph.isEnteringNewCfgNode(child,    variable))    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
758	[BUG]  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  n.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  n.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  n.getFirstChild().getType()  ==  Token.VAR)  {	  ||!ControlFlowGraph.isEnteringNewCfgNode(child,    variable))    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
759	[BUG]  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  n.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  n.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  n.getFirstChild().getType()  ==  Token.NAME)  {	  ||!ControlFlowGraph.isEnteringNewCfgNode(child,    variable))    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
760	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(variable))  {  //  Not  a  FUNCTION  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(variable))  {  //  Not  a  FUNCTION  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(variable))  {  //  Not  a  FUNCTION	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	41	None	replace
761	[BUG]  [BUGGY]  ||  child.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  ||  child.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||  child.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  }	  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
762	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  n!=  ')')  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  n!=  ')')  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  n!=  ')')  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable),    n)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	130	None	replace
763	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||  n)  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||  n)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)||  n)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable),    n)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	130	None	replace
764	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  n  instanceof  VariableLiveness)  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  n  instanceof  VariableLiveness)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  n  instanceof  VariableLiveness)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable),    n)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	130	None	replace
765	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  n  ==  ')')  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  n  ==  ')')  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  n  ==  ')')  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable),    n)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	130	None	replace
766	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  n  <=  1)  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  n  <=  1)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  n  <=  1)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable),    n)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	130	None	replace
767	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	83	None	replace
768	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state!=  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state!=  VariableLiveness.MOVED)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state!=  VariableLiveness.MOVED)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  state	49	None	replace
769	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state!=  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state!=  VariableLiveness.BOTTOM)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())&&  state!=  VariableLiveness.BOTTOM)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  state	49	None	replace
770	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFilled.contains(variable))  {  [CE]  cannot  find  symbol  VariableReadBeforeFilled  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFilled.contains(variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFilled.contains(variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFilled.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol  VariableReadBeforeFilled	150	None	replace
771	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFilled.matches(variable))  {  [CE]  cannot  find  symbol  VariableReadBeforeFilled  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFilled.matches(variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFilled.matches(variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFilled.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol  VariableReadBeforeFilled	150	None	replace
772	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  state  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	51	None	replace
773	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  child.getNodeType());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  child.getNodeType());  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  child.getNodeType());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    child.getType());    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
774	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  condition!=  VariableLiveness.BOTTOM_LIVE)  {  [CE]  cannot  find  symbol  condition  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  condition!=  VariableLiveness.BOTTOM_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  condition!=  VariableLiveness.BOTTOM_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.BOTTOM_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  condition	40	None	replace
775	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  language!=  VariableLiveness.BOTTOM_LIVE)  {  [CE]  cannot  find  symbol  language  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  language!=  VariableLiveness.BOTTOM_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  language!=  VariableLiveness.BOTTOM_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.BOTTOM_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  language	40	None	replace
776	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  LEAD))  {  [CE]  cannot  find  symbol  LEAD  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  LEAD))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  LEAD))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable,    MAYBE_LIVE))    {    	non-compiled	[CE]  cannot  find  symbol  LEAD	18	None	replace
777	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  VEAD))  {  [CE]  cannot  find  symbol  VEAD  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  VEAD))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  VEAD))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable,    state))    {    	non-compiled	[CE]  cannot  find  symbol  VEAD	58	None	replace
778	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  child.getType());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  child.getType());  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  child.getType());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    n);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
779	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  READ);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  READ);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  READ);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    n);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
780	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  VEAD);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  VEAD);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  VEAD);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    n);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
781	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  LEAD);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  LEAD);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  LEAD);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    n);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
782	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  MISSING);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  MISSING);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  MISSING);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    n);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
783	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  VEAD);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  VEAD);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  VEAD);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
784	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.SEMI_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  state  [FE]            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.SEMI_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.SEMI_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  state	96	None	replace
785	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(var2))  {  [CE]  cannot  find  symbol  var2  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(var2))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(var2))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(n))    {    	non-compiled	[CE]  cannot  find  symbol  var2	87	None	replace
786	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(varVariable,  child))  {  [CE]  cannot  find  symbol  varVariable  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(varVariable,  child))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(varVariable,  child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(n))    {    	non-compiled	[CE]  cannot  find  symbol  varVariable	87	None	replace
787	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(var,  variable))  {  [CE]  cannot  find  symbol  var  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(var,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(var,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(n))    {    	non-compiled	[CE]  cannot  find  symbol  var	87	None	replace
788	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVari  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVari  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVari	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVari    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	46	None	replace
789	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable);	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  ')'  expected	54	None	replace
790	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
791	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable)&&  state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable)&&  state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable)&&  state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable)||    state    ==    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
792	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeAnalysis.isEmpty(varvariable))  {  [CE]  cannot  find  symbol  var  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeAnalysis.isEmpty(varvariable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeAnalysis.isEmpty(varvariable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeAnalysis.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol  var	26	None	replace
793	[BUG]  [BUGGY]  Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)||  state!=  VariableLiveness.MAYBE_LIVE);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)||  state!=  VariableLiveness.MAYBE_LIVE);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)||  state!=  VariableLiveness.MAYBE_LIVE);	  Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
794	[BUG]  [BUGGY]  Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)||  state  ==  VariableLiveness.MAYBE_LIVE);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)||  state  ==  VariableLiveness.MAYBE_LIVE);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)||  state  ==  VariableLiveness.MAYBE_LIVE);	  Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
795	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableFunction.isEmpty(variable))  {  [CE]  cannot  find  symbol  VariableFunction  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableFunction.isEmpty(variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableFunction.isEmpty(variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFunction.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol  VariableFunction	25	None	replace
796	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable),  this)  {  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable),  this)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable),  this)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||    isVariableReadBeforeKill(child,    variable))    {    	non-compiled	[CE]  ')'  expected	23	None	replace
797	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable,  VAR))  {  [CE]  cannot  find  symbol  VAR  [FE]                                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable,  VAR))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable,  VAR))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||    isVariableReadBeforeKill(child,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  VAR	23	None	replace
798	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable,  VAR_LIVE))  {  [CE]  cannot  find  symbol  VAR_LIVE  [FE]                                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable,  VAR_LIVE))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable,  VAR_LIVE))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||    isVariableReadBeforeKill(child,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  VAR_LIVE	23	None	replace
799	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(n,  variable))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(n,  variable))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(n,  variable))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(n))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	45	None	replace
800	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  condition!=  VariableLiveness.FOR_LIVE)  {  [CE]  cannot  find  symbol  condition  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  condition!=  VariableLiveness.FOR_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  condition!=  VariableLiveness.FOR_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.FOR_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  condition	39	None	replace
801	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  language!=  VariableLiveness.FOR_LIVE)  {  [CE]  cannot  find  symbol  language  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  language!=  VariableLiveness.FOR_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  language!=  VariableLiveness.FOR_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.FOR_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  language	39	None	replace
802	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child.getType()  ==  Token.FUNCTION)  {  //  Not  a  FOCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child.getType()  ==  Token.FUNCTION)  {  //  Not  a  FOCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child.getType()  ==  Token.FUNCTION)  {  //  Not  a  FOCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FOCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	119	None	replace
803	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  condition!=  VariableLiveness.MILL)  {  [CE]  cannot  find  symbol  condition  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  condition!=  VariableLiveness.MILL)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  condition!=  VariableLiveness.MILL)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.MILL)    {    	non-compiled	[CE]  cannot  find  symbol  condition	117	None	replace
804	[BUG]  [BUGGY]  VariableLiveness  state  =  areVariableReadBeforeKill(child,  variable);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  VariableLiveness  state  =  areVariableReadBeforeKill(child,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  areVariableReadBeforeKill(child,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
805	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  condition!=  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  condition  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  condition!=  VariableLiveness.MOVED)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  condition!=  VariableLiveness.MOVED)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  condition	38	None	replace
806	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  HILL))  {  [CE]  cannot  find  symbol  HILL  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  HILL))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  HILL))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable,    VAR_LIVE))    {    	non-compiled	[CE]  cannot  find  symbol  HILL	62	None	replace
807	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child!=  VariableLiveness.KILL_LIVE)  {  [CE]  cannot  find  symbol  KILL_LIVE  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child!=  VariableLiveness.KILL_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child!=  VariableLiveness.KILL_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.KILL_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  KILL_LIVE	36	None	replace
808	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  condition!=  VariableLiveness.KILL_LIVE)  {  [CE]  cannot  find  symbol  condition  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  condition!=  VariableLiveness.KILL_LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  condition!=  VariableLiveness.KILL_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.KILL_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  condition	36	None	replace
