bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);	if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  	non-compiled	[CE]  illegal  start  of  type	9	None	replace
2	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  state  [FE]      AssertionFailedError  [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  	non-compiled	[CE]  cannot  find  symbol  state	9	None	replace
3	[BUG]  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||!ControlFlowGraph.isEnteringNewCfgNode(child))  {	if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
4	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  state  [FE]          AssertionFailedError  [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  	non-compiled	[CE]  cannot  find  symbol  state	9	None	replace
5	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  [CE]  cannot  find  symbol  state  [FE]            AssertionFailedError  [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child))  {	if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  	non-compiled	[CE]  cannot  find  symbol  state	9	None	replace
6	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]              AssertionFailedError  [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable))  {  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable))  {	if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	9	None	replace
7	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError  [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);	if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  	non-compiled	[CE]  cannot  find  symbol  state	9	None	replace
8	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]                  AssertionFailedError  [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  [BUGGY]    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	  	if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  	non-compiled	[CE]  illegal  start  of  type	9	None	replace
9	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  state  [FE]    AssertionFailedError  [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.MAYBE_LIVE)  {	if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  	non-compiled	[CE]  cannot  find  symbol  state	9	None	replace
10	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child))  {  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child))  {  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child))  {	if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  	non-compiled	[CE]  cannot  find  symbol  	9	None	replace
11	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(child))  {  [CE]  cannot  find  symbol  VariableReadBeforeKill  [FE]        AssertionFailedError  [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(child))  {  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(child))  {	if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  	non-compiled	[CE]  cannot  find  symbol  VariableReadBeforeKill	9	None	replace
12	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError  [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {	if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	9	None	replace
13	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  state  [FE]            AssertionFailedError  [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.READ)  {  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.READ)  {	if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  	non-compiled	[CE]  cannot  find  symbol  state	9	None	replace
14	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  [CE]  cannot  find  symbol  state  [FE]    AssertionFailedError  [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {	if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  	non-compiled	[CE]  cannot  find  symbol  state	9	None	replace
15	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  state  [FE]      AssertionFailedError  [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state  ==  VariableLiveness.MAYBE_LIVE)  {	if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  	non-compiled	[CE]  cannot  find  symbol  state	9	None	replace
16	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError  [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }	if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  	non-compiled	[CE]  illegal  start  of  type	9	None	replace
17	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError  [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  }  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  }	if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  	non-compiled	[CE]  illegal  start  of  type	9	None	replace
