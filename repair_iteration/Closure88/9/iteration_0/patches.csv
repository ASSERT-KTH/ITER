bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable))  {  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable))  {	if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	17	None	replace
2	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(sibling,  variable))  {  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(sibling,  variable))  {  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(sibling,  variable))  {	if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  	non-compiled	[CE]  cannot  find  symbol	17	None	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  	compilable	  [FE]  AssertionFailedError  	17	57	replace
4	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  	compilable	  [FE]  AssertionFailedError  	17	57	replace
5	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,  variable))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError  [CONTEXT]  private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,  variable))  {  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,  variable))  {	if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  	non-compiled	[CE]  cannot  find  symbol	17	None	replace
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  	compilable	  [FE]  AssertionFailedError  	17	57	replace
7	[BUG]  [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  	compilable	  [FE]  AssertionFailedError  	17	57	replace
8	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,  variable);  [CE]  ')'  expected  [FE]              AssertionFailedError  [CONTEXT]  private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,  variable);  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,  variable);	if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  	non-compiled	[CE]  ')'  expected	17	None	replace
9	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]                AssertionFailedError  [CONTEXT]  private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  [BUGGY]    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	  	if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
10	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  variable))  {  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  variable))  {  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  variable))  {	if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	17	None	replace
11	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling),  variable)  {  [CE]  ')'  expected  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling),  variable)  {  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling),  variable)  {	if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  	non-compiled	[CE]  ')'  expected	17	None	replace
12	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(sibling,  variable))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]        AssertionFailedError  [CONTEXT]  private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(sibling,  variable))  {  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(sibling,  variable))  {	if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	17	None	replace
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {	if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  	compilable	  [FE]  AssertionFailedError  	17	57	replace
14	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {	if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  	compilable	  [FE]  AssertionFailedError  	17	57	replace
15	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  	compilable	  [FE]  StackOverflowError  	17	63	replace
16	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [FE]  StackOverflowError  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  	compilable	  [FE]  StackOverflowError  	17	63	replace
