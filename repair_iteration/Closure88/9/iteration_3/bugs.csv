bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(variable!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(variable!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(variable!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling    >=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
2	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling    >=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
3	[BUG]  [BUGGY]  if(sibling!=  null)  {  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null)  {  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null)  {  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling    >=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
4	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(variable,  sibling);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(variable,  sibling);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(variable,  sibling);	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,    sibling);    	non-compiled	[CE]  ')'  expected	116	None	replace
5	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  sibling);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  sibling);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  sibling);	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,    sibling);    	non-compiled	[CE]  ')'  expected	116	None	replace
6	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(exprRoot,  sibling);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(exprRoot,  sibling);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(exprRoot,  sibling);	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,    sibling);    	non-compiled	[CE]  ')'  expected	116	None	replace
7	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot,  sibling);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot,  sibling);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot,  sibling);	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,    sibling);    	non-compiled	[CE]  ')'  expected	116	None	replace
8	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot  ==  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot  ==  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot  ==  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    exprRoot    ==    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	123	None	add
9	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot  ==  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot!=  null)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot  ==  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    exprRoot    ==    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	123	None	add
10	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot  ==  null)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot  ==  null)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot  ==  null)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot  ==  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    exprRoot    ==    null)    {    If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot  ==  null)  {	  	non-compiled	[CE]  ';'  expected	123	None	add
11	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot  ==  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot  >=  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot  ==  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot  >=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    exprRoot    ==    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot  >=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	123	None	add
12	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot  ==  null)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot!=  null)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot  ==  null)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    exprRoot    ==    null)    {    If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot!=  null)  {	  	non-compiled	[CE]  ';'  expected	123	None	add
13	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&  isVariableStillLiveWithinExpression(n,  exprRoot))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&  isVariableStillLiveWithinExpression(n,  exprRoot))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&  isVariableStillLiveWithinExpression(n,  exprRoot))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)&&    isVariableStillLiveWithinExpression(sibling,    exprRoot))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	92	None	replace
14	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  variable)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  variable)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  variable)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)&&    isVariableStillLiveWithinExpression(sibling,    exprRoot))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	92	None	replace
15	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&  isVariableStillLiveWithinExpression(v,  exprRoot))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&  isVariableStillLiveWithinExpression(v,  exprRoot))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&  isVariableStillLiveWithinExpression(v,  exprRoot))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)&&    isVariableStillLiveWithinExpression(sibling,    exprRoot))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	92	None	replace
16	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&  isVariableStillLiveWithinExpression(variable,  exprRoot))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&  isVariableStillLiveWithinExpression(variable,  exprRoot))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&  isVariableStillLiveWithinExpression(variable,  exprRoot))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)&&    isVariableStillLiveWithinExpression(sibling,    exprRoot))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	92	None	replace
17	[BUG]  [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.BLOCK,  variable);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.BLOCK,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Preconditions.checkState(sibling.getType()  ==  Token.BLOCK,  variable);	  Preconditions.checkState(sibling.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
18	[BUG]  [BUGGY]  Preconditions.checkState(sibling.getType()!=  Token.BLOCK);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Preconditions.checkState(sibling.getType()!=  Token.BLOCK);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Preconditions.checkState(sibling.getType()!=  Token.BLOCK);	  Preconditions.checkState(sibling.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
19	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(sibling.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
20	[BUG]  [BUGGY]  Preconditions.checkState(variable.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Preconditions.checkState(variable.getType()  ==  Token.BLOCK);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Preconditions.checkState(variable.getType()  ==  Token.BLOCK);	  Preconditions.checkState(sibling.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
21	[BUG]  [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.BLOCK  ||  sibling.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.BLOCK  ||  sibling.getType()  ==  Token.BLOCK);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Preconditions.checkState(sibling.getType()  ==  Token.BLOCK  ||  sibling.getType()  ==  Token.BLOCK);	  Preconditions.checkState(sibling.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
22	[BUG]  [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.BLOCK  ||  sibling.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.BLOCK  ||  sibling.getType()  ==  Token.NAME);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Preconditions.checkState(sibling.getType()  ==  Token.BLOCK  ||  sibling.getType()  ==  Token.NAME);	  Preconditions.checkState(sibling.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
23	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&    isVariableStillLiveWithinExpression(sibling,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
24	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&    isVariableStillLiveWithinExpression(sibling,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
25	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  If(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  If(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&    isVariableStillLiveWithinExpression(sibling,    exprRoot,    variable))    {    If(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {	  	non-compiled	[CE]  ';'  expected	12	None	add
26	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  if(!ControlFlowGraph.hasEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  if(!ControlFlowGraph.hasEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&    isVariableStillLiveWithinExpression(sibling,    exprRoot,    variable))    {    if(!ControlFlowGraph.hasEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
27	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  areVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  areVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&    isVariableStillLiveWithinExpression(sibling,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  areVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
28	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variables))  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variables))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&    isVariableStillLiveWithinExpression(sibling,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variables))  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
29	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  hasVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  hasVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&    isVariableStillLiveWithinExpression(sibling,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  hasVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
30	[BUG]  [BUGGY]  if(variable!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(variable!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(variable!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(variable!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(variable!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(variable!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  	non-compiled	[CE]  illegal  start  of  expression	107	None	add
31	[BUG]  [BUGGY]  if(variable!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(variable  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(variable!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(variable  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(variable!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(variable  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  	non-compiled	[CE]  illegal  start  of  expression	107	None	add
32	[BUG]  [BUGGY]  if(variable!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  If(variable!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(variable!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  If(variable!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(variable!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    If(variable!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  	non-compiled	[CE]  ';'  expected	107	None	add
33	[BUG]  [BUGGY]  if(variable!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(variable  >=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(variable!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(variable  >=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(variable!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(variable  >=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  	non-compiled	[CE]  illegal  start  of  expression	107	None	add
34	[BUG]  [BUGGY]  if(variable!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(variable  >>  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(variable!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(variable  >>  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(variable!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(variable  >>  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  	non-compiled	[CE]  illegal  start  of  expression	107	None	add
35	[BUG]  [BUGGY]  if(variable!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(variable  [Delete]  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(variable!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(variable  [Delete]  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(variable!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(variable  [Delete]  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  	non-compiled	[CE]  ')'  expected	107	None	add
36	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    exprRoot!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
37	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  null)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  null)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  null)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    exprRoot!=    null)    {    If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  null)  {	  	non-compiled	[CE]  ';'  expected	68	None	add
38	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot  ==  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot  ==  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    exprRoot!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
39	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot  >=  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot  >=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    exprRoot!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot  >=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
40	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot  >>  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot  >>  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    exprRoot!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot  >>  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
41	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot  [BUGGY]  null)  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot  [BUGGY]  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    exprRoot!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot  [BUGGY]  null)  {	  	non-compiled	[CE]  ')'  expected	68	None	add
42	[BUG]  [BUGGY]  if(sibling!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable    >>    null)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
43	[BUG]  [BUGGY]  if(sibling  ==  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling  ==  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling  ==  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable    >>    null)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
44	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.NAME)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling.getType()  ==  Token.NAME)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling.getType()  ==  Token.NAME)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable    >>    null)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
45	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.VAR)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling.getType()  ==  Token.VAR)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling.getType()  ==  Token.VAR)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable    >>    null)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
46	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  AssertionFailedError  	9	57	replace
47	[BUG]  [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [FE]  AssertionFailedError  [FE]    StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  AssertionFailedError  	9	57	replace
48	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	9	61	replace
49	[BUG]  [BUGGY]  if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	9	61	replace
50	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  AssertionFailedError  	9	57	replace
51	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [FE]  AssertionFailedError  [FE]        StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  AssertionFailedError  	9	57	replace
52	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variables))  {  [CE]  cannot  find  symbol  [FE]          StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variables))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variables))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  	9	None	replace
53	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(sibling,  variable));  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(sibling,  variable));  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(sibling,  variable));	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
54	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableStillLiveWithinExpression(sibling,  variable);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableStillLiveWithinExpression(sibling,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableStillLiveWithinExpression(sibling,  variable);	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  ')'  expected	42	None	replace
55	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(sibling,  exprRoot);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(sibling,  exprRoot);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(sibling,  exprRoot);	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  ')'  expected	42	None	replace
56	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(sibling,  variable))  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(sibling,  variable))  {  return  false;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(sibling,  variable))  {  return  false;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
57	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(sibling,  variable))  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
58	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  ==  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  ==  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  ==  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    sibling    ==    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	125	None	add
59	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  ==  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  ==  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    sibling    ==    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	125	None	add
60	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  ==  null)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  ==  null)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  ==  null)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  ==  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    sibling    ==    null)    {    If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  ==  null)  {	  	non-compiled	[CE]  ';'  expected	125	None	add
61	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  ==  null)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  ==  null)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    sibling    ==    null)    {    If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null)  {	  	non-compiled	[CE]  ';'  expected	125	None	add
62	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  ==  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  >=  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  ==  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  >=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    sibling    ==    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  >=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	125	None	add
63	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  >=  null)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  >=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  >=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    sibling!=    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	65	None	replace
64	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  sibling!=  null)  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  sibling!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  sibling!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)||    sibling!=    null)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	137	None	replace
65	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable)||  sibling!=  null)  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable)||  sibling!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable)||  sibling!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)||    sibling!=    null)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	137	None	replace
66	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable),  sibling!=  null)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable),  sibling!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable),  sibling!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)||    sibling!=    null)    {    	non-compiled	[CE]  ')'  expected	137	None	replace
67	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  sibling)||  sibling!=  null)  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  sibling)||  sibling!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  sibling)||  sibling!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)||    sibling!=    null)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	137	None	replace
68	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)||  sibling!=  null)  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)||  sibling!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)||  sibling!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)||    sibling!=    null)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	137	None	replace
69	[BUG]  [BUGGY]  if(isVariableReadBeforeKill(sibling,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null)  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(isVariableReadBeforeKill(sibling,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(isVariableReadBeforeKill(sibling,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    sibling!=    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	71	None	replace
70	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling  ==  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling  ==  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    sibling!=    null)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	71	61	replace
71	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling  ==  null)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling  ==  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling  ==  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    sibling!=    null)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	71	61	replace
72	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null  ||!VariableReadBeforeKill(sibling,  variable))  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null  ||!VariableReadBeforeKill(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null  ||!VariableReadBeforeKill(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    sibling!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
73	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
74	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
75	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  n);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  n);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
76	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  null);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  null);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
77	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  variable);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
78	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
79	[BUG]  [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable))  {	  if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	34	None	replace
80	[BUG]  [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(variable,  sibling))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(variable,  sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(variable,  sibling))  {	  if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	34	None	replace
81	[BUG]  [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(n,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(n,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(n,  variable))  {	  if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	34	None	replace
82	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&!VariableReadBeforeKill(sibling,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&!VariableReadBeforeKill(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&!VariableReadBeforeKill(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)&&!VariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	28	None	replace
83	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable)&&!VariableReadBeforeKill(sibling,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable)&&!VariableReadBeforeKill(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable)&&!VariableReadBeforeKill(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)&&!VariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	28	None	replace
84	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&!VariableReadBeforeKill(sibling,  exprRoot))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&!VariableReadBeforeKill(sibling,  exprRoot))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&!VariableReadBeforeKill(sibling,  exprRoot))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)&&!VariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	28	None	replace
85	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  variable)&&!VariableReadBeforeKill(sibling,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  variable)&&!VariableReadBeforeKill(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  variable)&&!VariableReadBeforeKill(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)&&!VariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	28	None	replace
86	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  module)&&!VariableReadBeforeKill(sibling,  variable))  {  [CE]  cannot  find  symbol  module  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  module)&&!VariableReadBeforeKill(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  module)&&!VariableReadBeforeKill(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)&&!VariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  module	28	None	replace
87	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&!VariableReadBeforeKill(n,  sibling,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&!VariableReadBeforeKill(n,  sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&!VariableReadBeforeKill(n,  sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)&&!VariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	28	None	replace
88	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  variable)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                  StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  variable)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n,  variable)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	14	None	replace
89	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                    StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	14	None	replace
90	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                      StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	14	None	replace
91	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  variable)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                        StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  variable)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  variable)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	14	None	replace
92	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  state  ==  VariableLiveness.KILL)  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                          StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  state  ==  VariableLiveness.KILL)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	14	None	replace
93	[BUG]  [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling    >=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
94	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling    >=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	compilable	  [FE]  AssertionFailedError  	51	57	replace
95	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling    >=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	compilable	  [FE]  AssertionFailedError  	51	57	replace
96	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableReadBeforeKill(n,  exprRoot,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableReadBeforeKill(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableReadBeforeKill(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(n,    sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	35	None	replace
97	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableReadBeforeKill(n,  exprRoot,  variable))  {  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableReadBeforeKill(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableReadBeforeKill(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(n,    sibling,    variable))    {    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	35	None	replace
98	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  exprRoot,  variables))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  exprRoot,  variables))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  exprRoot,  variables))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(n,    sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  	35	None	replace
99	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(exprRoot,  sibling,  variable))  {  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(exprRoot,  sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(exprRoot,  sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(n,    sibling,    variable))    {    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	35	None	replace
100	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableReadBeforeKill(sibling,  exprRoot,  variable))  {  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableReadBeforeKill(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableReadBeforeKill(sibling,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(n,    sibling,    variable))    {    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	35	None	replace
101	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  exprRoot,  sibling,  variable))  {  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  exprRoot,  sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  exprRoot,  sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(n,    sibling,    variable))    {    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	35	None	replace
102	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableReadBeforeKill(exprRoot,  variable))  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableReadBeforeKill(exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableReadBeforeKill(exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(exprRoot,    variable))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	112	None	replace
103	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(variable,  exprRoot))  {  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(variable,  exprRoot))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(variable,  exprRoot))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(exprRoot,    variable))    {    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	112	None	replace
104	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableReadBeforeKill(exprRoot,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableReadBeforeKill(exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableReadBeforeKill(exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(exprRoot,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	112	None	replace
105	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableReadBeforeKill(exprRoot,  variable))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableReadBeforeKill(exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableReadBeforeKill(exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(exprRoot,    variable))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	112	None	replace
106	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(exprRoot,  variable,  variable))  {  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(exprRoot,  variable,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(exprRoot,  variable,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(exprRoot,    variable))    {    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	112	None	replace
107	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(exprRoot,  variable),  state)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(exprRoot,  variable),  state)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(exprRoot,  variable),  state)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(exprRoot,    variable))    {    	non-compiled	[CE]  ')'  expected	112	None	replace
108	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination(sibling,  variable,  n);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicate  matchRemovableAssignsElimination(sibling,  variable,  n);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicate  matchRemovableAssignsElimination(sibling,  variable,  n);	  Predicate    matchRemovableAssignsElimination(sibling,    variable);    	non-compiled	[CE]  ';'  expected	102	None	replace
109	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination(sibling,  variable,  null);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicate  matchRemovableAssignsElimination(sibling,  variable,  null);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicate  matchRemovableAssignsElimination(sibling,  variable,  null);	  Predicate    matchRemovableAssignsElimination(sibling,    variable);    	non-compiled	[CE]  ';'  expected	102	None	replace
110	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination(sibling,  variable,  exprRoot);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicate  matchRemovableAssignsElimination(sibling,  variable,  exprRoot);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicate  matchRemovableAssignsElimination(sibling,  variable,  exprRoot);	  Predicate    matchRemovableAssignsElimination(sibling,    variable);    	non-compiled	[CE]  ';'  expected	102	None	replace
111	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination(sibling,  variable,  isVariableStillLiveWithinExpression);  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicate  matchRemovableAssignsElimination(sibling,  variable,  isVariableStillLiveWithinExpression);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicate  matchRemovableAssignsElimination(sibling,  variable,  isVariableStillLiveWithinExpression);	  Predicate    matchRemovableAssignsElimination(sibling,    variable);    	non-compiled	[CE]  ';'  expected	102	None	replace
112	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination(sibling,  variable,  true);  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicate  matchRemovableAssignsElimination(sibling,  variable,  true);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicate  matchRemovableAssignsElimination(sibling,  variable,  true);	  Predicate    matchRemovableAssignsElimination(sibling,    variable);    	non-compiled	[CE]  ';'  expected	102	None	replace
113	[BUG]  [BUGGY]  Predicates.matchRemovableAssignsElimination(sibling,  variable);  [CE]  illegal  start  of  type  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicates.matchRemovableAssignsElimination(sibling,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicates.matchRemovableAssignsElimination(sibling,  variable);	  Predicate    matchRemovableAssignsElimination(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
114	[BUG]  [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling),  variable)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling),  variable)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling),  variable)  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling),    variable)    {    	non-compiled	[CE]  ')'  expected	25	None	replace
115	[BUG]  [BUGGY]  if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling),  variable)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling),  variable)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling),  variable)  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling),    variable)    {    	non-compiled	[CE]  ')'  expected	25	None	replace
116	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]    StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    variable!=    null    &&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
117	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  ';'  expected  [FE]      StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    variable!=    null    &&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  	non-compiled	[CE]  ';'  expected	10	None	add
118	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  ==  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]        StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  ==  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    variable!=    null    &&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  ==  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
119	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  >=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]          StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  >=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    variable!=    null    &&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  >=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
120	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  areVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]            StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  areVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    variable!=    null    &&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  areVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
121	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variables!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]              StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variables!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    variable!=    null    &&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variables!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
122	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(exprRoot,  sibling))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(exprRoot,  sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(exprRoot,  sibling))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(exprRoot,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	98	None	replace
123	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(exprRoot,  variable))  {  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(exprRoot,    variable))    {    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	98	None	replace
124	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(exprRoot,  exprRoot))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(exprRoot,  exprRoot))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(exprRoot,  exprRoot))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(exprRoot,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	98	None	replace
125	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling)&&  isVariableStillLiveWithinExpression(exprRoot,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling)&&  isVariableStillLiveWithinExpression(exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling)&&  isVariableStillLiveWithinExpression(exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(exprRoot,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	98	None	replace
126	[BUG]  [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.NAME,  variable);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.NAME,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Preconditions.checkState(sibling.getType()  ==  Token.NAME,  variable);	  Preconditions.checkState(sibling.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
127	[BUG]  [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.NAME,  state);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.NAME,  state);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Preconditions.checkState(sibling.getType()  ==  Token.NAME,  state);	  Preconditions.checkState(sibling.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
128	[BUG]  [BUGGY]  Preconditions.checkState(variable.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Preconditions.checkState(variable.getType()  ==  Token.NAME);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Preconditions.checkState(variable.getType()  ==  Token.NAME);	  Preconditions.checkState(sibling.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
129	[BUG]  [BUGGY]  Preconditions.checkState(sibling.getType()!=  Token.NAME);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Preconditions.checkState(sibling.getType()!=  Token.NAME);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Preconditions.checkState(sibling.getType()!=  Token.NAME);	  Preconditions.checkState(sibling.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
130	[BUG]  [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.NAME,  sibling.getString());  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.NAME,  sibling.getString());  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Preconditions.checkState(sibling.getType()  ==  Token.NAME,  sibling.getString());	  Preconditions.checkState(sibling.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
131	[BUG]  [BUGGY]  Preconditions.checkState(sibling.getType()!=  Token.NAME,  variable);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Preconditions.checkState(sibling.getType()!=  Token.NAME,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Preconditions.checkState(sibling.getType()!=  Token.NAME,  variable);	  Preconditions.checkState(sibling.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
132	[BUG]  [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.CALL,  variable);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.CALL,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Preconditions.checkState(sibling.getType()  ==  Token.CALL,  variable);	  Preconditions.checkState(sibling.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
133	[BUG]  [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.CALL  ||  sibling.getType()  ==  Token.CALL);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.CALL  ||  sibling.getType()  ==  Token.CALL);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Preconditions.checkState(sibling.getType()  ==  Token.CALL  ||  sibling.getType()  ==  Token.CALL);	  Preconditions.checkState(sibling.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
134	[BUG]  [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.CALL  &&  variable.equals(sibling.getString()));  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.CALL  &&  variable.equals(sibling.getString()));  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Preconditions.checkState(sibling.getType()  ==  Token.CALL  &&  variable.equals(sibling.getString()));	  Preconditions.checkState(sibling.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
135	[BUG]  [BUGGY]  Preconditions.checkState(sibling.getType()!=  Token.CALL);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Preconditions.checkState(sibling.getType()!=  Token.CALL);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Preconditions.checkState(sibling.getType()!=  Token.CALL);	  Preconditions.checkState(sibling.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
136	[BUG]  [BUGGY]  Preconditions.checkState(variable.getType()  ==  Token.CALL);  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Preconditions.checkState(variable.getType()  ==  Token.CALL);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Preconditions.checkState(variable.getType()  ==  Token.CALL);	  Preconditions.checkState(sibling.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
137	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  [CE]  illegal  start  of  type  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Preconditions.checkState(n.getType()  ==  Token.CALL);	  Preconditions.checkState(sibling.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
138	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  hasVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  hasVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  hasVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
139	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(exprRoot,  sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(exprRoot,  sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    sibling,    variable))    {    	compilable	  [FE]  RuntimeException  	96	63	replace
140	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(exprRoot,  sibling,  variable))  {  [FE]  RuntimeException  [FE]      StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(exprRoot,  sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(exprRoot,  sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    sibling,    variable))    {    	compilable	  [FE]  RuntimeException  	96	63	replace
141	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(sibling,    variable,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	132	None	replace
142	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(sibling,  variable,  variable))  {  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(sibling,  variable,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(sibling,  variable,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(sibling,    variable,    variable))    {    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	132	None	replace
143	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(sibling,    variable,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	132	None	replace
144	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(variable,  sibling))  {  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(variable,  sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(variable,  sibling))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(variable,    sibling))    {    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	133	None	replace
145	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(variable,  sibling,  variable))  {  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(variable,  sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(variable,  sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(variable,    sibling))    {    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	133	None	replace
146	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  sibling))  {  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  sibling))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(variable,    sibling))    {    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	133	None	replace
147	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(sibling,    exprRoot,    variable))    {    	compilable	  [FE]  AssertionFailedError  	94	57	replace
148	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(sibling,    exprRoot,    variable))    {    	compilable	  [FE]  AssertionFailedError  	94	57	replace
149	[BUG]  [BUGGY]  if(isVariableReadBeforeKill(sibling,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(isVariableReadBeforeKill(sibling,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(isVariableReadBeforeKill(sibling,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(sibling,    exprRoot,    variable))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	94	None	replace
150	[BUG]  [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.VAR,  variable);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.VAR,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Preconditions.checkState(sibling.getType()  ==  Token.VAR,  variable);	  Preconditions.checkState(sibling.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
151	[BUG]  [BUGGY]  Preconditions.checkState(variable.getType()  ==  Token.VAR);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Preconditions.checkState(variable.getType()  ==  Token.VAR);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Preconditions.checkState(variable.getType()  ==  Token.VAR);	  Preconditions.checkState(sibling.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
152	[BUG]  [BUGGY]  Preconditions.checkState(sibling.getType()!=  Token.VAR);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Preconditions.checkState(sibling.getType()!=  Token.VAR);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Preconditions.checkState(sibling.getType()!=  Token.VAR);	  Preconditions.checkState(sibling.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
153	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);	  Preconditions.checkState(sibling.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
154	[BUG]  [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.VAR  &&  variable.equals(sibling.getString()));  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.VAR  &&  variable.equals(sibling.getString()));  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Preconditions.checkState(sibling.getType()  ==  Token.VAR  &&  variable.equals(sibling.getString()));	  Preconditions.checkState(sibling.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
155	[BUG]  [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.VAR,  state);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.VAR,  state);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Preconditions.checkState(sibling.getType()  ==  Token.VAR,  state);	  Preconditions.checkState(sibling.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
156	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&  isVariableReadBeforeKill(sibling,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&  isVariableReadBeforeKill(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&  isVariableReadBeforeKill(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)&&    isVariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	38	None	replace
157	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable)&&  isVariableReadBeforeKill(sibling,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable)&&  isVariableReadBeforeKill(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable)&&  isVariableReadBeforeKill(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)&&    isVariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	38	None	replace
158	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  module)&&  isVariableReadBeforeKill(sibling,  variable))  {  [CE]  cannot  find  symbol  module  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  module)&&  isVariableReadBeforeKill(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  module)&&  isVariableReadBeforeKill(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)&&    isVariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  module	38	None	replace
159	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling!=  null  &&!controlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling!=  null  &&!controlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling!=  null  &&!controlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling!=    null    &&!   "ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
160	[BUG]  [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling!=  null  &&!   "ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling!=  null  &&!   "ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling!=  null  &&!   "ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling!=    null    &&!   "ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  unclosed  string  literal	127	None	replace
161	[BUG]  [BUGGY]  if(variable!=  null)  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(variable!=  null)  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(variable!=  null)  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling!=    null    &&!   "ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
162	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.NAME)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]        StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling.getType()  ==  Token.NAME)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling.getType()  ==  Token.NAME)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariABLEStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
163	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.NAME)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariABLEStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]          StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling.getType()  ==  Token.NAME)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariABLEStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling.getType()  ==  Token.NAME)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariABLEStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariABLEStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
164	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]            StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  ==  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  ==  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariABLEStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	141	61	replace
165	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  ==  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]            StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  ==  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  ==  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariABLEStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	141	61	replace
166	[BUG]  [BUGGY]  if(isVariableReadBeforeKill(n,  sibling)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]          StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(isVariableReadBeforeKill(n,  sibling)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(isVariableReadBeforeKill(n,  sibling)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(isVariableReadBeforeKill(sibling,    variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	7	None	replace
167	[BUG]  [BUGGY]  if(!isVariableReadBeforeKill(sibling,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  bad  operand  type  VariableLiveness  for  unary  operator  '!'  [FE]            StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!isVariableReadBeforeKill(sibling,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!isVariableReadBeforeKill(sibling,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(isVariableReadBeforeKill(sibling,    variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  bad  operand  type  VariableLiveness  for  unary  operator  '!'	7	None	replace
168	[BUG]  [BUGGY]  if(isVariableReadBeforeKill(sibling,  exprRoot)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(isVariableReadBeforeKill(sibling,  exprRoot)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(isVariableReadBeforeKill(sibling,  exprRoot)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(isVariableReadBeforeKill(sibling,    variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	7	None	replace
169	[BUG]  [BUGGY]  if(isVariableReadBeforeKill(sibling,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(isVariableReadBeforeKill(sibling,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(isVariableReadBeforeKill(sibling,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(isVariableReadBeforeKill(sibling,    variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	7	None	replace
170	[BUG]  [BUGGY]  if(sibling!=  null  &&  isVariableReadBeforeKill(sibling,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                  StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&  isVariableReadBeforeKill(sibling,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&  isVariableReadBeforeKill(sibling,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(isVariableReadBeforeKill(sibling,    variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	7	None	replace
171	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  variable))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(v2,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
172	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(value,  variable))  {  [CE]  cannot  find  symbol  value  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(value,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(value,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(v2,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  value	105	None	replace
173	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(viable,  variable))  {  [CE]  cannot  find  symbol  viable  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(viable,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(viable,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(v2,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  viable	105	None	replace
174	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(expr,  variable))  {  [CE]  cannot  find  symbol  expr  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(expr,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(expr,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(v2,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  expr	105	None	replace
175	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  VAR_LIVE))  {  [CE]  cannot  find  symbol  VAR_LIVE  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  VAR_LIVE))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  VAR_LIVE))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  VAR_LIVE	139	None	replace
176	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  test))  {  [CE]  cannot  find  symbol  test  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  test))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  test))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  test	139	None	replace
177	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  VARIABLE_LIVE))  {  [CE]  cannot  find  symbol  VARIABLE_LIVE  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  VARIABLE_LIVE))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  VARIABLE_LIVE))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  VARIABLE_LIVE	139	None	replace
178	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination(n,  exprRoot,  variable,  sibling);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicate  matchRemovableAssignsElimination(n,  exprRoot,  variable,  sibling);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicate  matchRemovableAssignsElimination(n,  exprRoot,  variable,  sibling);	  Predicate    matchRemovableAssignsElimination(n,    exprRoot,    variable);    	non-compiled	[CE]  ';'  expected	80	None	replace
179	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination(n,  sibling,  variable);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicate  matchRemovableAssignsElimination(n,  sibling,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicate  matchRemovableAssignsElimination(n,  sibling,  variable);	  Predicate    matchRemovableAssignsElimination(n,    exprRoot,    variable);    	non-compiled	[CE]  ';'  expected	80	None	replace
180	[BUG]  [BUGGY]  Predicates.matchRemovableAssignsElimination(n,  exprRoot,  variable);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicates.matchRemovableAssignsElimination(n,  exprRoot,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicates.matchRemovableAssignsElimination(n,  exprRoot,  variable);	  Predicate    matchRemovableAssignsElimination(n,    exprRoot,    variable);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
181	[BUG]  [BUGGY]  Predicate  sibling  =  matchRemovableAssignsElimination(n,  exprRoot,  variable);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicate  sibling  =  matchRemovableAssignsElimination(n,  exprRoot,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicate  sibling  =  matchRemovableAssignsElimination(n,  exprRoot,  variable);	  Predicate    matchRemovableAssignsElimination(n,    exprRoot,    variable);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
182	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination(n,  exprRoot,  sibling);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicate  matchRemovableAssignsElimination(n,  exprRoot,  sibling);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicate  matchRemovableAssignsElimination(n,  exprRoot,  sibling);	  Predicate    matchRemovableAssignsElimination(n,    exprRoot,    variable);    	non-compiled	[CE]  ';'  expected	80	None	replace
183	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination(n,  exprRoot,  variable,  n);  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicate  matchRemovableAssignsElimination(n,  exprRoot,  variable,  n);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicate  matchRemovableAssignsElimination(n,  exprRoot,  variable,  n);	  Predicate    matchRemovableAssignsElimination(n,    exprRoot,    variable);    	non-compiled	[CE]  ';'  expected	80	None	replace
184	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||!VariableReadBeforeKill(variable,  sibling))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||!VariableReadBeforeKill(variable,  sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||!VariableReadBeforeKill(variable,  sibling))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(variable,    sibling))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	2	None	replace
185	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(disprRoot,  sibling))  {  [CE]  cannot  find  symbol  disprRoot  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(disprRoot,  sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(disprRoot,  sibling))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(variable,    sibling))    {    	non-compiled	[CE]  cannot  find  symbol  disprRoot	2	None	replace
186	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(n,  sibling))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(n,  sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(n,  sibling))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(variable,    sibling))    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
187	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    sibling!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
188	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    sibling!=    null)    {    If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null)  {	  	non-compiled	[CE]  ';'  expected	64	None	add
189	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  ==  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  ==  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    sibling!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
190	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  >=  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  >=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    sibling!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  >=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
191	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  >>  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  >>  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    sibling!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  >>  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
192	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]    StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
193	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]      StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
194	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  If(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  ';'  expected  [FE]        StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  If(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    If(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  	non-compiled	[CE]  ';'  expected	8	None	add
195	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(sibling  >=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]          StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(sibling  >=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(sibling  >=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
196	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  areVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]            StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  areVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  areVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
197	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  hasVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]              StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  hasVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  hasVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
198	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variables))  {  [CE]  illegal  start  of  expression  [FE]                StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variables))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variables))  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
199	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  n,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  n,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  n,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(n,    sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	55	None	replace
200	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  exprRoot,  sibling,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  exprRoot,  sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n,  exprRoot,  sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(n,    sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	55	None	replace
201	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  exprRoot,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(n,    sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	55	None	replace
202	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableReadBeforeKill(variable,  sibling))  {  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableReadBeforeKill(variable,  sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableReadBeforeKill(variable,  sibling))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    isVariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	39	None	replace
203	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableReadBeforeKill(n,  sibling,  variable))  {  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableReadBeforeKill(n,  sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableReadBeforeKill(n,  sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    isVariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	39	None	replace
204	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableReadBeforeKill(sibling,  exprRoot,  variable))  {  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableReadBeforeKill(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableReadBeforeKill(sibling,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    isVariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	39	None	replace
205	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableReadBeforeKill(sibling,  variable),  state)  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableReadBeforeKill(sibling,  variable),  state)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableReadBeforeKill(sibling,  variable),  state)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    isVariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  ')'  expected	39	None	replace
206	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariabilityStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariabilityStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariabilityStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariabilityStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
207	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.NAME)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariabilityStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]            StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling.getType()  ==  Token.NAME)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariabilityStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling.getType()  ==  Token.NAME)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariabilityStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariabilityStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
208	[BUG]  [BUGGY]  if(variable!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling!=  null  ||!   "ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(variable!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling!=  null  ||!   "ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(variable!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling!=  null  ||!   "ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling!=    null    ||!   "ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  unclosed  string  literal	120	None	replace
209	[BUG]  [BUGGY]  if(variable!=  null)  {  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(variable!=  null)  {  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(variable!=  null)  {  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling!=    null    ||!   "ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
210	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  sibling))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  sibling))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,    sibling))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
211	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(sibling,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	93	None	add
212	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(sibling,    exprRoot,    variable))    {    If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {	  	non-compiled	[CE]  ';'  expected	93	None	add
213	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  if(!ControlFlowGraph.hasEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  if(!ControlFlowGraph.hasEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(sibling,    exprRoot,    variable))    {    if(!ControlFlowGraph.hasEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	93	None	add
214	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  areVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  areVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(sibling,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  areVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	93	None	add
215	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(sibling,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	93	None	add
216	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variables))  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variables))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(sibling,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variables))  {	  	non-compiled	[CE]  illegal  start  of  expression	93	None	add
217	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    variable!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
218	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    variable!=    null)    {    If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null)  {	  	non-compiled	[CE]  ';'  expected	60	None	add
219	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  ==  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  ==  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    variable!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
220	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  >=  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  >=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    variable!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  >=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
221	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  >>  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  >>  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    variable!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  >>  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
222	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  [Delete]  null)  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  [Delete]  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    variable!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  [Delete]  null)  {	  	non-compiled	[CE]  ')'  expected	60	None	add
223	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  ==  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  ==  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable    ==    null)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	63	61	replace
224	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  ==  null)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  ==  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  ==  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable    ==    null)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	63	61	replace
225	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  variable,  exprRoot))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  variable,  exprRoot))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  variable,  exprRoot))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable,    exprRoot))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	117	None	replace
226	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  exprRoot,  state))  {  [CE]  cannot  find  symbol  state  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  exprRoot,  state))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  exprRoot,  state))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable,    exprRoot))    {    	non-compiled	[CE]  cannot  find  symbol  state	117	None	replace
227	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  module,  exprRoot))  {  [CE]  cannot  find  symbol  module  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  module,  exprRoot))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  module,  exprRoot))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable,    exprRoot))    {    	non-compiled	[CE]  cannot  find  symbol  module	117	None	replace
228	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  test,  variable,  exprRoot))  {  [CE]  cannot  find  symbol  test  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  test,  variable,  exprRoot))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  test,  variable,  exprRoot))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable,    exprRoot))    {    	non-compiled	[CE]  cannot  find  symbol  test	117	None	replace
229	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  exprRoot,  null))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  exprRoot,  null))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  exprRoot,  null))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable,    exprRoot))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	117	None	replace
230	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,  variable)||  state)  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,  variable)||  state)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,  variable)||  state)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,    variable),    state)    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
231	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&!VariableReadBeforeKill(sibling,  variable),  state)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&!VariableReadBeforeKill(sibling,  variable),  state)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&!VariableReadBeforeKill(sibling,  variable),  state)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,    variable),    state)    {    	non-compiled	[CE]  ')'  expected	18	None	replace
232	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot,  variable),  state)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot,  variable),  state)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot,  variable),  state)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,    variable),    state)    {    	non-compiled	[CE]  ')'  expected	18	None	replace
233	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(exprRoot,  variable),  state)  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(exprRoot,  variable),  state)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(exprRoot,  variable),  state)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,    variable),    state)    {    	non-compiled	[CE]  ')'  expected	18	None	replace
234	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||!VariableReadBeforeKill(n,  exprRoot,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||!VariableReadBeforeKill(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||!VariableReadBeforeKill(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(n,    exprRoot,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	3	None	replace
235	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)||!VariableReadBeforeKill(sibling,  exprRoot,  variable))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)||!VariableReadBeforeKill(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)||!VariableReadBeforeKill(sibling,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(n,    exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
236	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableReadBeforeKill(n,  exprRoot,  variable))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableReadBeforeKill(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableReadBeforeKill(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(n,    exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
237	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling)||!VariableReadBeforeKill(n,  exprRoot,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling)||!VariableReadBeforeKill(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling)||!VariableReadBeforeKill(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(n,    exprRoot,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	3	None	replace
238	[BUG]  [BUGGY]  if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling    ==    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
239	[BUG]  [BUGGY]  if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling    ==    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
240	[BUG]  [BUGGY]  if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  If(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  If(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling    ==    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    If(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  	non-compiled	[CE]  ';'  expected	20	None	add
241	[BUG]  [BUGGY]  if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling  >=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling  >=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling    ==    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling  >=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
242	[BUG]  [BUGGY]  if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  If(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  If(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling    ==    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    If(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  	non-compiled	[CE]  ';'  expected	20	None	add
243	[BUG]  [BUGGY]  if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling  ==  null  |&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling  ==  null  |&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling    ==    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling  ==  null  |&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
244	[BUG]  [BUGGY]  if(variable!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(variable!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(variable!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling    >>    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
245	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableReadBeforeKill(sibling,  variable))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableReadBeforeKill(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableReadBeforeKill(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,    sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
246	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(exprRoot,  sibling,  variable))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(exprRoot,  sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(exprRoot,  sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,    sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
247	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&!VariableReadBeforeKill(n,  exprRoot,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&!VariableReadBeforeKill(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&!VariableReadBeforeKill(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,    sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	17	None	replace
248	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(i,  sibling)&&!VariableReadBeforeKill(n,  exprRoot,  variable))  {  [CE]  cannot  find  symbol  i  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(i,  sibling)&&!VariableReadBeforeKill(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(i,  sibling)&&!VariableReadBeforeKill(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,    sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  i	17	None	replace
249	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot  ==  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot  ==  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    exprRoot!=    null)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	69	61	replace
250	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot  ==  null)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot  ==  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot  ==  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    exprRoot!=    null)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	69	61	replace
251	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  exprRoot!=  null)  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  exprRoot!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  exprRoot!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    exprRoot!=    null)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	69	None	replace
252	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  exprRoot!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  exprRoot!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    exprRoot!=    null)    {    	compilable	  [FE]  AssertionFailedError  	69	57	replace
253	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  exprRoot!=  null)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  exprRoot!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  exprRoot!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    exprRoot!=    null)    {    	compilable	  [FE]  AssertionFailedError  	69	57	replace
254	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)&&  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  state  [FE]          StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)&&  state  ==  VariableLiveness.KILL)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)&&  state  ==  VariableLiveness.KILL)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable)||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  state	110	None	replace
255	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  state  [FE]            StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  state  ==  VariableLiveness.KILL)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable)||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  state	110	None	replace
256	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  state!=  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  state  [FE]              StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  state!=  VariableLiveness.KILL)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  state!=  VariableLiveness.KILL)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable)||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  state	110	None	replace
257	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  state  ==  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  state  [FE]                StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  state  ==  VariableLiveness.FOR)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  state  ==  VariableLiveness.FOR)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable)||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  state	110	None	replace
258	[BUG]  [BUGGY]  if(sibling!=  null  ||  sibling.getType()  ==  Token.VAR)  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  ||  sibling.getType()  ==  Token.VAR)  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  ||  sibling.getType()  ==  Token.VAR)  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling    [Delete]    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
259	[BUG]  [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.FUNCTION)  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.FUNCTION)  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&  sibling.getType()  ==  Token.FUNCTION)  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling    [Delete]    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
260	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variables!=  null)  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variables!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variables!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variables!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  	111	None	replace
261	[BUG]  [BUGGY]  if(sibling!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variables!=  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variables!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variables!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variables!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
262	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variables!=  null)  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variables!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variables!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variables!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  	111	None	replace
263	[BUG]  [BUGGY]  if(sibling  ==  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variables!=  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling  ==  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variables!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling  ==  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variables!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variables!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
264	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variables  ==  null)  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variables  ==  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variables  ==  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variables!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  	111	None	replace
265	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&  isVariableReadBeforeKill(n,  exprRoot))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&  isVariableReadBeforeKill(n,  exprRoot))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&  isVariableReadBeforeKill(n,  exprRoot))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)&&    isVariableReadBeforeKill(sibling,    exprRoot))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	26	None	replace
266	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  variable)&&  isVariableReadBeforeKill(sibling,  exprRoot))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  variable)&&  isVariableReadBeforeKill(sibling,  exprRoot))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  variable)&&  isVariableReadBeforeKill(sibling,  exprRoot))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)&&    isVariableReadBeforeKill(sibling,    exprRoot))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	26	None	replace
267	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&  isVariableReadBeforeKill(variable,  exprRoot))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&  isVariableReadBeforeKill(variable,  exprRoot))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&  isVariableReadBeforeKill(variable,  exprRoot))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)&&    isVariableReadBeforeKill(sibling,    exprRoot))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	26	None	replace
268	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&  isVariableReadBeforeKill(exprRoot,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&  isVariableReadBeforeKill(exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&  isVariableReadBeforeKill(exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)&&    isVariableReadBeforeKill(sibling,    exprRoot))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	26	None	replace
269	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot,  variable));  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot,  variable));  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot,  variable));	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,    exprRoot,    variable);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
270	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(n,  exprRoot,  variable);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(n,  exprRoot,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(n,  exprRoot,  variable);	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,    exprRoot,    variable);    	non-compiled	[CE]  ')'  expected	43	None	replace
271	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot,  variable);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot,  variable);	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,    exprRoot,    variable);    	non-compiled	[CE]  ')'  expected	43	None	replace
272	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot,  variable))  {  return  false;  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot,  variable))  {  return  false;  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot,  variable))  {  return  false;	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,    exprRoot,    variable);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
273	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableReadBeforeKill(sibling,  exprRoot,  variable);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableReadBeforeKill(sibling,  exprRoot,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableReadBeforeKill(sibling,  exprRoot,  variable);	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,    exprRoot,    variable);    	non-compiled	[CE]  ')'  expected	43	None	replace
274	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling    ==    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
275	[BUG]  [BUGGY]  if(sibling!=  null)  {  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null)  {  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null)  {  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling    ==    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
276	[BUG]  [BUGGY]  if(sibling!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling    ==    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
277	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(sibling,  variable));  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(sibling,  variable));  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(sibling,  variable));	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
278	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)||!VariableReadBeforeKill(sibling,  variable);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)||!VariableReadBeforeKill(sibling,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)||!VariableReadBeforeKill(sibling,  variable);	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  ')'  expected	44	None	replace
279	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&!VariableReadBeforeKill(sibling,  variable);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&!VariableReadBeforeKill(sibling,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&!VariableReadBeforeKill(sibling,  variable);	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  ')'  expected	44	None	replace
280	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.CALL  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling),  variable)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling.getType()  ==  Token.CALL  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling),  variable)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling.getType()  ==  Token.CALL  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling),  variable)  {	  if(sibling.getType()    ==    Token.CALL    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling),    variable)    {    	non-compiled	[CE]  ')'  expected	143	None	replace
281	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.GETPROP  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling),  variable)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling.getType()  ==  Token.GETPROP  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling),  variable)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling.getType()  ==  Token.GETPROP  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling),  variable)  {	  if(sibling.getType()    ==    Token.CALL    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling),    variable)    {    	non-compiled	[CE]  ')'  expected	143	None	replace
282	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling),  variable)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling),  variable)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling),  variable)  {	  if(sibling.getType()    ==    Token.CALL    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling),    variable)    {    	non-compiled	[CE]  ')'  expected	143	None	replace
283	[BUG]  [BUGGY]  Predicates.matchRemovableAssignsElimination(n,  sibling);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicates.matchRemovableAssignsElimination(n,  sibling);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicates.matchRemovableAssignsElimination(n,  sibling);	  Predicate    matchRemovableAssignsElimination(n,    sibling);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
284	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination(sibling,  n);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicate  matchRemovableAssignsElimination(sibling,  n);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicate  matchRemovableAssignsElimination(sibling,  n);	  Predicate    matchRemovableAssignsElimination(n,    sibling);    	non-compiled	[CE]  ';'  expected	82	None	replace
285	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  variable)&&  isVariableStillLiveWithinExpression(exprRoot,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  variable)&&  isVariableStillLiveWithinExpression(exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  variable)&&  isVariableStillLiveWithinExpression(exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)&&    isVariableStillLiveWithinExpression(exprRoot,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	121	None	replace
286	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&  isVariableStillLiveWithinExpression(exprRoot,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&  isVariableStillLiveWithinExpression(exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&  isVariableStillLiveWithinExpression(exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)&&    isVariableStillLiveWithinExpression(exprRoot,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	121	None	replace
287	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  isVariableStillLiveWithinExpression(exprRoot,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  isVariableStillLiveWithinExpression(exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  isVariableStillLiveWithinExpression(exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)&&    isVariableStillLiveWithinExpression(exprRoot,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	121	None	replace
288	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    variable!=    null    &&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  StackOverflowError  	11	63	replace
289	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    variable!=    null    &&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  StackOverflowError  	11	63	replace
290	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    variable!=    null    &&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  AssertionFailedError  	11	57	replace
291	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [FE]  AssertionFailedError  [FE]      StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    variable!=    null    &&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  AssertionFailedError  	11	57	replace
292	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  ||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  ||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    variable!=    null    &&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  AssertionFailedError  	11	57	replace
293	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  ||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [FE]  AssertionFailedError  [FE]        StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  ||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  ||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    variable!=    null    &&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  AssertionFailedError  	11	57	replace
294	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    variable!=    null    &&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  StackOverflowError  	11	63	replace
295	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    variable!=    null    &&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  StackOverflowError  	11	63	replace
296	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variables!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  cannot  find  symbol  [FE]            StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variables!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variables!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    variable!=    null    &&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  	11	None	replace
297	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variables))  {  [CE]  cannot  find  symbol  [FE]              StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variables))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variables))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    variable!=    null    &&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  	11	None	replace
298	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  exprRoot,  variable,  variable))  {  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  exprRoot,  variable,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  exprRoot,  variable,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(n,    exprRoot,    variable))    {    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	40	None	replace
299	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  exprRoot,  variable,  state))  {  [CE]  cannot  find  symbol  state  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  exprRoot,  variable,  state))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  exprRoot,  variable,  state))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(n,    exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  state	40	None	replace
300	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  exprRoot,  variable,  variables))  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  exprRoot,  variable,  variables))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  exprRoot,  variable,  variables))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(n,    exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  	40	None	replace
301	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  exprRoot,  variable),  state)  {  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  exprRoot,  variable),  state)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  exprRoot,  variable),  state)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(n,    exprRoot,    variable))    {    	non-compiled	[CE]  ')'  expected	40	None	replace
302	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  exprRoot,  variable,  sibling))  {  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  exprRoot,  variable,  sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  exprRoot,  variable,  sibling))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(n,    exprRoot,    variable))    {    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	40	None	replace
303	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  exprRoot,  variable,  VARIABLE_LIVE))  {  [CE]  cannot  find  symbol  VARIABLE_LIVE  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  exprRoot,  variable,  VARIABLE_LIVE))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  exprRoot,  variable,  VARIABLE_LIVE))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(n,    exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  VARIABLE_LIVE	40	None	replace
304	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  variable!=  null  &&  isVariableStillLiveWithinExpression(sibling,  exprRoot))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  variable!=  null  &&  isVariableStillLiveWithinExpression(sibling,  exprRoot))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  variable!=  null  &&  isVariableStillLiveWithinExpression(sibling,  exprRoot))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null    &&    isVariableStillLiveWithinExpression(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	136	None	replace
305	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(sibling,  exprRoot))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(sibling,  exprRoot))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(sibling,  exprRoot))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null    &&    isVariableStillLiveWithinExpression(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	136	None	replace
306	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null  &&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null  &&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null    &&    isVariableStillLiveWithinExpression(sibling,    variable))    {    	compilable	  [FE]  AssertionFailedError  	136	57	replace
307	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null  &&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null  &&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null  &&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null    &&    isVariableStillLiveWithinExpression(sibling,    variable))    {    	compilable	  [FE]  AssertionFailedError  	136	57	replace
308	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null    &&    isVariableStillLiveWithinExpression(sibling,    variable))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	136	61	replace
309	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null    &&    isVariableStillLiveWithinExpression(sibling,    variable))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	136	61	replace
310	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  variable!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  variable!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  variable!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null    &&    isVariableStillLiveWithinExpression(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	136	None	replace
311	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(sibling,  exprRoot))  {  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(sibling,  exprRoot))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(sibling,  exprRoot))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null    &&    isVariableStillLiveWithinExpression(sibling,    variable))    {    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	136	None	replace
312	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(sibling,  variable))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(sibling,  variable))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    isVariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	146	None	replace
313	[BUG]  [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableReadBeforeKill(sibling,  variable))  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableReadBeforeKill(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableReadBeforeKill(sibling,  variable))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    isVariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	146	None	replace
314	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableReadBeforeKill(variable,  sibling))  {  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableReadBeforeKill(variable,  sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableReadBeforeKill(variable,  sibling))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    isVariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	146	None	replace
315	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  isVariableReadBeforeKill(sibling,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  isVariableReadBeforeKill(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  isVariableReadBeforeKill(sibling,  variable))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    isVariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	146	None	replace
316	[BUG]  [BUGGY]  if(isVariableReadBeforeKill(sibling,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(isVariableReadBeforeKill(sibling,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(isVariableReadBeforeKill(sibling,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&    isVariableStillLiveWithinExpression(sibling,    exprRoot,    variable))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	13	None	replace
317	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)||  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(n)||  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&    isVariableStillLiveWithinExpression(sibling,    exprRoot,    variable))    {    	compilable	  [FE]  AssertionFailedError  	13	57	replace
318	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)||  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)||  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)||  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&    isVariableStillLiveWithinExpression(sibling,    exprRoot,    variable))    {    	compilable	  [FE]  AssertionFailedError  	13	57	replace
319	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable)||!VariableReadBeforeKill(sibling,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable)||!VariableReadBeforeKill(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable)||!VariableReadBeforeKill(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)||!VariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	1	None	replace
320	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)||!VariableReadBeforeKill(sibling,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)||!VariableReadBeforeKill(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)||!VariableReadBeforeKill(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)||!VariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	1	None	replace
321	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  variable)||!VariableReadBeforeKill(sibling,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  variable)||!VariableReadBeforeKill(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  variable)||!VariableReadBeforeKill(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)||!VariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	1	None	replace
322	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||!VariableReadBeforeKill(sibling,  exprRoot))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||!VariableReadBeforeKill(sibling,  exprRoot))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||!VariableReadBeforeKill(sibling,  exprRoot))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)||!VariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	1	None	replace
323	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  module)||!VariableReadBeforeKill(sibling,  variable))  {  [CE]  cannot  find  symbol  module  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  module)||!VariableReadBeforeKill(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  module)||!VariableReadBeforeKill(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)||!VariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  module	1	None	replace
324	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable,  null))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable,  null))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable,  null))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable,    null))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	59	None	replace
325	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  null))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  null))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  null))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable,    null))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	59	None	replace
326	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  state,  null))  {  [CE]  cannot  find  symbol  state  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  state,  null))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  state,  null))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable,    null))    {    	non-compiled	[CE]  cannot  find  symbol  state	59	None	replace
327	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  variable,  null))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  variable,  null))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  variable,  null))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable,    null))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	59	None	replace
328	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  null,  state))  {  [CE]  cannot  find  symbol  state  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  null,  state))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  null,  state))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable,    null))    {    	non-compiled	[CE]  cannot  find  symbol  state	59	None	replace
329	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  null,  liveness))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  null,  liveness))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  null,  liveness))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable,    null))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	59	None	replace
330	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  VAR_LIVE,  null))  {  [CE]  cannot  find  symbol  VAR_LIVE  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  VAR_LIVE,  null))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  VAR_LIVE,  null))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable,    null))    {    	non-compiled	[CE]  cannot  find  symbol  VAR_LIVE	59	None	replace
331	[BUG]  [BUGGY]  Node  sibling  =  sibling.getFirstChild();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Node  sibling  =  sibling.getFirstChild();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Node  sibling  =  sibling.getFirstChild();	  Node    sibling    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
332	[BUG]  [BUGGY]  Node  sibling  =  n.getLastChild();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Node  sibling  =  n.getLastChild();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Node  sibling  =  n.getLastChild();	  Node    sibling    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
333	[BUG]  [BUGGY]  Node  sibling  =  sibling.getLastChild();  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Node  sibling  =  sibling.getLastChild();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Node  sibling  =  sibling.getLastChild();	  Node    sibling    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
334	[BUG]  [BUGGY]  Node  sibling  =  n.getNext();  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Node  sibling  =  n.getNext();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Node  sibling  =  n.getNext();	  Node    sibling    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
335	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||!VariableReadBeforeKill(exprRoot,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||!VariableReadBeforeKill(exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||!VariableReadBeforeKill(exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(exprRoot,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	114	None	replace
336	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(variable,  exprRoot))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(variable,  exprRoot))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(variable,  exprRoot))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
337	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)||!VariableReadBeforeKill(exprRoot,  variable))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)||!VariableReadBeforeKill(exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)||!VariableReadBeforeKill(exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
338	[BUG]  [BUGGY]  Node  sibling  =  sibling.getNext(),  variable;  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Node  sibling  =  sibling.getNext(),  variable;  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Node  sibling  =  sibling.getNext(),  variable;	  Node    sibling    =    sibling.getNext();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
339	[BUG]  [BUGGY]  Node  sibling  =  sibling.getNext()  -  1;  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Node  sibling  =  sibling.getNext()  -  1;  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Node  sibling  =  sibling.getNext()  -  1;	  Node    sibling    =    sibling.getNext();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
340	[BUG]  [BUGGY]  Node  sibling  =  sibling.getNext()  :  null;  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Node  sibling  =  sibling.getNext()  :  null;  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Node  sibling  =  sibling.getNext()  :  null;	  Node    sibling    =    sibling.getNext();    	non-compiled	[CE]  ';'  expected	81	None	replace
341	[BUG]  [BUGGY]  Node  sibling  =  sibling.getNext()  +  1;  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Node  sibling  =  sibling.getNext()  +  1;  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Node  sibling  =  sibling.getNext()  +  1;	  Node    sibling    =    sibling.getNext();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
342	[BUG]  [BUGGY]  Node  sibling  =  sibling.getParent();  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Node  sibling  =  sibling.getParent();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Node  sibling  =  sibling.getParent();	  Node    sibling    =    sibling.getNext();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
343	[BUG]  [BUGGY]  Node  sibling  =  sibling.getNext(),  variable);  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Node  sibling  =  sibling.getNext(),  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Node  sibling  =  sibling.getNext(),  variable);	  Node    sibling    =    sibling.getNext();    	non-compiled	[CE]  ';'  expected	81	None	replace
344	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  variable!=  null  ||  isVariableStillLiveWithinExpression(sibling,  exprRoot))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  variable!=  null  ||  isVariableStillLiveWithinExpression(sibling,  exprRoot))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  variable!=  null  ||  isVariableStillLiveWithinExpression(sibling,  exprRoot))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null    ||    isVariableStillLiveWithinExpression(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	138	None	replace
345	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  ||  isVariableStillLiveWithinExpression(sibling,  exprRoot))  {  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  ||  isVariableStillLiveWithinExpression(sibling,  exprRoot))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  ||  isVariableStillLiveWithinExpression(sibling,  exprRoot))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null    ||    isVariableStillLiveWithinExpression(sibling,    variable))    {    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	138	None	replace
346	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  variable!=  null  ||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  variable!=  null  ||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  variable!=  null  ||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null    ||    isVariableStillLiveWithinExpression(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	138	None	replace
347	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null  ||  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null  ||  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null    ||    isVariableStillLiveWithinExpression(sibling,    variable))    {    	compilable	  [FE]  AssertionFailedError  	138	57	replace
348	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null  ||  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null  ||  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null  ||  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null    ||    isVariableStillLiveWithinExpression(sibling,    variable))    {    	compilable	  [FE]  AssertionFailedError  	138	57	replace
349	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  variable!=  null  ||  isVariableStillLiveWithinExpression(sibling,  exprRoot))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  variable!=  null  ||  isVariableStillLiveWithinExpression(sibling,  exprRoot))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  variable!=  null  ||  isVariableStillLiveWithinExpression(sibling,  exprRoot))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null    ||    isVariableStillLiveWithinExpression(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	138	None	replace
350	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable);	  VariableLiveness    liveness    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
351	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  exprRoot);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  exprRoot);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  exprRoot);	  VariableLiveness    liveness    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
352	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable,  n);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable,  n);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable,  n);	  VariableLiveness    liveness    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
353	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable,  null);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable,  null);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable,  null);	  VariableLiveness    liveness    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
354	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(n,  sibling,  variable);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(n,  sibling,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(n,  sibling,  variable);	  VariableLiveness    liveness    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
355	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableStillLiveWithinExpression(sibling,  variable);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  VariableLiveness  liveness  =  isVariableStillLiveWithinExpression(sibling,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	VariableLiveness  liveness  =  isVariableStillLiveWithinExpression(sibling,  variable);	  VariableLiveness    liveness    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
356	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable,  state);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable,  state);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable,  state);	  VariableLiveness    liveness    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
357	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  exprRoot,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    exprRoot,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	54	None	replace
358	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable,  state))  {  [CE]  cannot  find  symbol  state  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable,  state))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable,  state))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  state	54	None	replace
359	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable),  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable),  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable),  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    exprRoot,    variable))    {    	non-compiled	[CE]  ')'  expected	54	None	replace
360	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable),  isVariableReadBeforeKill(n,  exprRoot,  variable))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable),  isVariableReadBeforeKill(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable),  isVariableReadBeforeKill(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    exprRoot,    variable))    {    	non-compiled	[CE]  ')'  expected	54	None	replace
361	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable,  false))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable,  false))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable,  false))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    exprRoot,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	54	None	replace
362	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable,  VAR))  {  [CE]  cannot  find  symbol  VAR  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable,  VAR))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable,  VAR))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  VAR	54	None	replace
363	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    	compilable	  [FE]  AssertionFailedError  	135	57	replace
364	[BUG]  [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    	compilable	  [FE]  AssertionFailedError  	135	57	replace
365	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  ==  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  ==  null)  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    	compilable	  [FE]  AssertionFailedError  	135	57	replace
366	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  ==  null)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  ==  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  ==  null)  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    	compilable	  [FE]  AssertionFailedError  	135	57	replace
367	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null)  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    	compilable	  [FE]  AssertionFailedError  	135	57	replace
368	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null)  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    	compilable	  [FE]  AssertionFailedError  	135	57	replace
369	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot);	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(exprRoot,    variable);    	non-compiled	[CE]  ')'  expected	115	None	replace
370	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(exprRoot,  variable);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(exprRoot,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(exprRoot,  variable);	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(exprRoot,    variable);    	non-compiled	[CE]  ')'  expected	115	None	replace
371	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableReadBeforeKill(exprRoot,  variable);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableReadBeforeKill(exprRoot,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableReadBeforeKill(exprRoot,  variable);	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(exprRoot,    variable);    	non-compiled	[CE]  ')'  expected	115	None	replace
372	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,  exprRoot);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,  exprRoot);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,  exprRoot);	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(exprRoot,    variable);    	non-compiled	[CE]  ')'  expected	115	None	replace
373	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)  &&  isVariableReadBeforeKill(sibling,  variable))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]          StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)  &&  isVariableReadBeforeKill(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)  &&  isVariableReadBeforeKill(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable)||    isVariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	150	None	replace
374	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  isVariableReadBeforeKill(sibling,  variable))  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]            StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  isVariableReadBeforeKill(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  isVariableReadBeforeKill(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable)||    isVariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	150	None	replace
375	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  isVariableReadBeforeKill(sibling,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]              StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  isVariableReadBeforeKill(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  isVariableReadBeforeKill(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable)||    isVariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	150	None	replace
376	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable.isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  isVariableReadBeforeKill(sibling,  variable))  {  [CE]  cannot  find  symbol  [FE]                StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable.isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  isVariableReadBeforeKill(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable.isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  isVariableReadBeforeKill(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable)||    isVariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
377	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable)||  isVariableReadBeforeKill(sibling,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable)||  isVariableReadBeforeKill(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable)||  isVariableReadBeforeKill(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)||    isVariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	27	None	replace
378	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)||  isVariableReadBeforeKill(sibling,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)||  isVariableReadBeforeKill(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)||  isVariableReadBeforeKill(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)||    isVariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	27	None	replace
379	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  isVariableReadBeforeKill(sibling,  exprRoot))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  isVariableReadBeforeKill(sibling,  exprRoot))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  isVariableReadBeforeKill(sibling,  exprRoot))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)||    isVariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	27	None	replace
380	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  module)||  isVariableReadBeforeKill(sibling,  variable))  {  [CE]  cannot  find  symbol  module  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  module)||  isVariableReadBeforeKill(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  module)||  isVariableReadBeforeKill(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)||    isVariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  module	27	None	replace
381	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  variable)||  isVariableReadBeforeKill(sibling,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  variable)||  isVariableReadBeforeKill(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  variable)||  isVariableReadBeforeKill(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)||    isVariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	27	None	replace
382	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(n,  exprRoot,  variable));  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(n,  exprRoot,  variable));  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(n,  exprRoot,  variable));	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(n,    exprRoot,    variable);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
383	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableStillLiveWithinExpression(n,  exprRoot,  variable);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableStillLiveWithinExpression(n,  exprRoot,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableStillLiveWithinExpression(n,  exprRoot,  variable);	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(n,    exprRoot,    variable);    	non-compiled	[CE]  ')'  expected	46	None	replace
384	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  return  false;  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  return  false;  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  return  false;	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(n,    exprRoot,    variable);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
385	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  return  false;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  return  false;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(n,    exprRoot,    variable);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
386	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(n,    exprRoot,    variable);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
387	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)||!VariableReadBeforeKill(sibling,  variable),  state)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)||!VariableReadBeforeKill(sibling,  variable),  state)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)||!VariableReadBeforeKill(sibling,  variable),  state)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(sibling,    variable),    state)    {    	non-compiled	[CE]  ')'  expected	4	None	replace
388	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null  ||  isVariableReadBeforeKill(sibling,  variable))  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null  ||  isVariableReadBeforeKill(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null  ||  isVariableReadBeforeKill(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    sibling    ==    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	126	None	replace
389	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
390	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  	non-compiled	[CE]  ';'  expected	5	None	add
391	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&|  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&|  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&|  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
392	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
393	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  areVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  areVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  areVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
394	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variables))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variables))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variables))  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
395	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableReadBeforeKill(sibling,  exprRoot,  variable))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableReadBeforeKill(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableReadBeforeKill(sibling,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,    exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
396	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot,  variable)||  state  ==  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot,  variable)||  state  ==  VariableLiveness.READ)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot,  variable)||  state  ==  VariableLiveness.READ)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,    exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
397	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot,  variables))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot,  variables))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot,  variables))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,    exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  	15	None	replace
398	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  KILL))  {  [CE]  cannot  find  symbol  KILL  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  KILL))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  KILL))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable,    VAR))    {    	non-compiled	[CE]  cannot  find  symbol  KILL	140	None	replace
399	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  MAYBE_LIVE))  {  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  MAYBE_LIVE))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  MAYBE_LIVE))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable,    VAR))    {    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	140	None	replace
400	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  MILLIS))  {  [CE]  cannot  find  symbol  MILLIS  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  MILLIS))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  MILLIS))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable,    VAR))    {    	non-compiled	[CE]  cannot  find  symbol  MILLIS	140	None	replace
401	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  MOVED))  {  [CE]  cannot  find  symbol  MOVED  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  MOVED))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  MOVED))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable,    VAR))    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	140	None	replace
402	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  MISSING))  {  [CE]  cannot  find  symbol  MISSING  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  MISSING))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  MISSING))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable,    VAR))    {    	non-compiled	[CE]  cannot  find  symbol  MISSING	140	None	replace
403	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,  state))  {  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,  state))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,  state))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  state	104	None	replace
404	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableReadBeforeKill(sibling,  variable));  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableReadBeforeKill(sibling,  variable));  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableReadBeforeKill(sibling,  variable));	  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
405	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    sibling!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
406	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    sibling!=    null)    {    If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null)  {	  	non-compiled	[CE]  ';'  expected	70	None	add
407	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling  ==  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling  ==  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    sibling!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
408	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling  >=  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling  >=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    sibling!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling  >=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
409	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling  >>  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling  >>  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    sibling!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling  >>  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
410	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling  [BUGGY]  null)  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling  [BUGGY]  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    sibling!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling  [BUGGY]  null)  {	  	non-compiled	[CE]  ')'  expected	70	None	add
411	[BUG]  [BUGGY]  if(isVariableReadBeforeKill(sibling,  variable)||!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(isVariableReadBeforeKill(sibling,  variable)||!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(isVariableReadBeforeKill(sibling,  variable)||!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	6	None	replace
412	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  StackOverflowError  	6	63	replace
413	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [FE]  StackOverflowError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  StackOverflowError  	6	63	replace
414	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  sibling,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    exrRoot,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	118	None	replace
415	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	22	None	replace
416	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  state))  {  [CE]  cannot  find  symbol  state  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  state))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  state))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  state	22	None	replace
417	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable),  state)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable),  state)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable),  state)  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable))    {    	non-compiled	[CE]  ')'  expected	22	None	replace
418	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  variable))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	22	None	replace
419	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  VAR_LIVE))  {  [CE]  cannot  find  symbol  VAR_LIVE  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  VAR_LIVE))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  VAR_LIVE))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  VAR_LIVE	22	None	replace
420	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  VAR))  {  [CE]  cannot  find  symbol  VAR  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  VAR))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  VAR))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  VAR	22	None	replace
421	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  exprRoot!=  null)  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  exprRoot!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  exprRoot!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    exprRoot!=    null)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	67	None	replace
422	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewcfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewcfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewcfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewcfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
423	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewcfgNode(sibling)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewcfgNode(sibling)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewcfgNode(sibling)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewcfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
424	[BUG]  [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  If(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  If(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  If(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    If(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  ';'  expected	74	None	replace
425	[BUG]  [BUGGY]  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  If(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  If(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  If(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    If(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  ';'  expected	74	None	replace
426	[BUG]  [BUGGY]  If(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  If(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	If(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    If(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  ';'  expected	74	None	replace
427	[BUG]  [BUGGY]  if(sibling!=  null)  {  If(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null)  {  If(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null)  {  If(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    If(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  ';'  expected	74	None	replace
428	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot!=  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    exprRoot!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
429	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot  ==  null)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot  ==  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    exprRoot!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
430	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot!=  null)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot!=  null)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot!=  null)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    exprRoot!=    null)    {    If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot!=  null)  {	  	non-compiled	[CE]  ';'  expected	66	None	add
431	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot  >=  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot  >=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    exprRoot!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot  >=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
432	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot  >>  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot  >>  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    exprRoot!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot  >>  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
433	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(descrRoot,  variable))  {  [CE]  cannot  find  symbol  descrRoot  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(descrRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(descrRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(v,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  descrRoot	19	None	replace
434	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	134	None	add
435	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  If(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  If(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    If(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {	  	non-compiled	[CE]  ';'  expected	134	None	add
436	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	134	None	add
437	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  ==  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  ==  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	134	None	add
438	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  >=  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  >=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  >=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	134	None	add
439	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  if(sibling  >=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  if(sibling  >=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    if(sibling  >=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	134	None	add
440	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  sibling.getFirstChild();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicate  matchRemovableAssigns  =  sibling.getFirstChild();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicate  matchRemovableAssigns  =  sibling.getFirstChild();	  Predicate    matchRemovableAssigns    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
441	[BUG]  [BUGGY]  Predicate  sibling  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicate  sibling  =  n.getFirstChild();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicate  sibling  =  n.getFirstChild();	  Predicate    matchRemovableAssigns    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
442	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  n.getLastChild();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicate  matchRemovableAssigns  =  n.getLastChild();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicate  matchRemovableAssigns  =  n.getLastChild();	  Predicate    matchRemovableAssigns    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
443	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  exprRoot.getFirstChild();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicate  matchRemovableAssigns  =  exprRoot.getFirstChild();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicate  matchRemovableAssigns  =  exprRoot.getFirstChild();	  Predicate    matchRemovableAssigns    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
444	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  sibling.getLastChild();  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicate  matchRemovableAssigns  =  sibling.getLastChild();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicate  matchRemovableAssigns  =  sibling.getLastChild();	  Predicate    matchRemovableAssigns    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
445	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  n.getFirstChild().getNext();  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicate  matchRemovableAssigns  =  n.getFirstChild().getNext();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicate  matchRemovableAssigns  =  n.getFirstChild().getNext();	  Predicate    matchRemovableAssigns    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
446	[BUG]  [BUGGY]  if(isVariableReadBeforeKill(sibling,  variable)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(isVariableReadBeforeKill(sibling,  variable)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(isVariableReadBeforeKill(sibling,  variable)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    hasVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	90	None	replace
447	[BUG]  [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  If(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  If(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  If(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    If(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  ';'  expected	50	None	replace
448	[BUG]  [BUGGY]  If(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  If(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	If(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    If(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  ';'  expected	50	None	replace
449	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  If(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  If(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  If(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    If(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  ';'  expected	50	None	replace
450	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(n,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(n,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(n,  variable))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	106	None	replace
451	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(variable,  sibling))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(variable,  sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(variable,  sibling))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	106	None	replace
452	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  VariableLiveness.KILL,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  VariableLiveness.KILL,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  VariableLiveness.KILL,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    VAR_LIVE,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	58	None	replace
453	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  DEFAULT_VAR_LIVE,  variable))  {  [CE]  cannot  find  symbol  DEFAULT_VAR_LIVE  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  DEFAULT_VAR_LIVE,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  DEFAULT_VAR_LIVE,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    VAR_LIVE,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_VAR_LIVE	58	None	replace
454	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  areVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  areVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  areVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    areVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
455	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.NAME)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  areVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]              StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling.getType()  ==  Token.NAME)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  areVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling.getType()  ==  Token.NAME)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  areVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    areVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
456	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  areVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  isVariableReadBeforeKill(sibling,  variable))  {  [CE]  cannot  find  symbol  [FE]                StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  areVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  isVariableReadBeforeKill(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  areVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  isVariableReadBeforeKill(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    areVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
457	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  sibling,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  sibling,  variable))  {  [CE]  illegal  start  of  expression  [FE]    StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  sibling,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    sibling,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  sibling,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	95	None	add
458	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  sibling,  variable))  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  sibling,  variable))  {  [CE]  ';'  expected  [FE]      StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  sibling,  variable))  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    sibling,    variable))    {    If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  sibling,  variable))  {	  	non-compiled	[CE]  ';'  expected	95	None	add
459	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  sibling,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  areVariableStillLiveWithinExpression(n,  sibling,  variable))  {  [CE]  illegal  start  of  expression  [FE]        StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  sibling,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  areVariableStillLiveWithinExpression(n,  sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    sibling,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  areVariableStillLiveWithinExpression(n,  sibling,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	95	None	add
460	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  sibling,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  sibling,  variables))  {  [CE]  illegal  start  of  expression  [FE]          StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  sibling,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  sibling,  variables))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    sibling,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  sibling,  variables))  {	  	non-compiled	[CE]  illegal  start  of  expression	95	None	add
461	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  sibling,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  hasVariableStillLiveWithinExpression(n,  sibling,  variable))  {  [CE]  illegal  start  of  expression  [FE]            StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  sibling,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  hasVariableStillLiveWithinExpression(n,  sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    sibling,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  hasVariableStillLiveWithinExpression(n,  sibling,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	95	None	add
462	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  sibling,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLivewithinExpression(n,  sibling,  variable))  {  [CE]  illegal  start  of  expression  [FE]              StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  sibling,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLivewithinExpression(n,  sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    sibling,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLivewithinExpression(n,  sibling,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	95	None	add
463	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,  exprRoot))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,  exprRoot))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,  exprRoot))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
464	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableReadBeforeKill(exprRoot,  variable))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableReadBeforeKill(exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableReadBeforeKill(exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
465	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(v,  exprRoot))  {  [CE]  cannot  find  symbol  v  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(v,  exprRoot))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(v,  exprRoot))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  v	103	None	replace
466	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  null,  exprRoot,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  null,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  null,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    null,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	119	None	replace
467	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  null,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  null,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  null,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    null,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	119	None	replace
468	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  null,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  null,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  null,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    null,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	119	None	replace
469	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variables))  {  [CE]  cannot  find  symbol  [FE]              StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variables))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variables))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variables))    {    	non-compiled	[CE]  cannot  find  symbol  	89	None	replace
470	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.NAME)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variables))  {  [CE]  illegal  start  of  expression  [FE]                StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling.getType()  ==  Token.NAME)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variables))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling.getType()  ==  Token.NAME)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variables))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variables))    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
471	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variables))  {  [CE]  cannot  find  symbol  [FE]                  StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variables))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variables))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variables))    {    	non-compiled	[CE]  cannot  find  symbol  	89	None	replace
472	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  ==  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variables))  {  [CE]  cannot  find  symbol  [FE]                    StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  ==  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variables))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  ==  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variables))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variables))    {    	non-compiled	[CE]  cannot  find  symbol  	89	None	replace
473	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(variable,  sibling,  state))  {  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(variable,  sibling,  state))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(variable,  sibling,  state))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(variable,    sibling))    {    	non-compiled	[CE]  cannot  find  symbol  state	37	None	replace
474	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(variable,  sibling,  variable))  {  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(variable,  sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(variable,  sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(variable,    sibling))    {    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	37	None	replace
475	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  ==  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  ==  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  ==  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable    ==    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
476	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  ==  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  ==  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable    ==    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
477	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  ==  null)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  ==  null)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  ==  null)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  ==  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable    ==    null)    {    If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  ==  null)  {	  	non-compiled	[CE]  ';'  expected	62	None	add
478	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  ==  null)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  ==  null)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable    ==    null)    {    If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {	  	non-compiled	[CE]  ';'  expected	62	None	add
479	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  ==  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  >=  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  ==  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  >=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable    ==    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  >=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
480	[BUG]  [BUGGY]  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling    ==    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
481	[BUG]  [BUGGY]  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling    ==    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
482	[BUG]  [BUGGY]  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  If(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  If(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling    ==    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    If(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  	non-compiled	[CE]  ';'  expected	23	None	add
483	[BUG]  [BUGGY]  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling  >=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling  >=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling    ==    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling  >=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
484	[BUG]  [BUGGY]  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling  ==  null  ||! "ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  unclosed  string  literal  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling  ==  null  ||! "ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling    ==    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling  ==  null  ||! "ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  	non-compiled	[CE]  unclosed  string  literal	23	None	add
485	[BUG]  [BUGGY]  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling  ==  null  ||?!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling  ==  null  ||?!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling    ==    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling  ==  null  ||?!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
486	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  state  ==  VariableLiveness.LIVE)  {  [CE]  cannot  find  symbol  state  [FE]        StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  state  ==  VariableLiveness.LIVE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  state  ==  VariableLiveness.LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable)||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  state	109	None	replace
487	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  variable))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(v,    variable))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	113	None	replace
488	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(variable,  variable))  {  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(variable,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(variable,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(v,    variable))    {    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	113	None	replace
489	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(viable,  variable))  {  [CE]  cannot  find  symbol  viable  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(viable,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(viable,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(v,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  viable	113	None	replace
490	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(descrRoot,  variable))  {  [CE]  cannot  find  symbol  descrRoot  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(descrRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(descrRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(v,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  descrRoot	113	None	replace
491	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  n  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  n  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    sibling!=    exprRoot    &&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  StackOverflowError  	149	63	replace
492	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  n  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  n  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  n  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    sibling!=    exprRoot    &&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  StackOverflowError  	149	63	replace
493	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    sibling!=    exprRoot    &&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  AssertionFailedError  	149	57	replace
494	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [FE]  AssertionFailedError  [FE]      StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    sibling!=    exprRoot    &&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  AssertionFailedError  	149	57	replace
495	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  sibling  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  sibling  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    sibling!=    exprRoot    &&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  StackOverflowError  	149	63	replace
496	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  sibling  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  sibling  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  sibling  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    sibling!=    exprRoot    &&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  StackOverflowError  	149	63	replace
497	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  incomparable  types:  String  and  Node  [FE]          StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    sibling!=    exprRoot    &&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  incomparable  types:  String  and  Node	149	None	replace
498	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]            StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling  ==  n  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling  ==  n  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    sibling!=    exprRoot    &&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	149	61	replace
499	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling  ==  n  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]            StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling  ==  n  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling  ==  n  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    sibling!=    exprRoot    &&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	149	61	replace
500	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  variable),  state)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  variable),  state)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  variable),  state)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(sibling,    variable),    state)    {    	non-compiled	[CE]  ')'  expected	41	None	replace
501	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(sibling,  variable),  liveness)  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(sibling,  variable),  liveness)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(sibling,  variable),  liveness)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(sibling,    variable),    state)    {    	non-compiled	[CE]  ')'  expected	41	None	replace
502	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable)&&  isVariableStillLiveWithinExpression(sibling,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable)&&  isVariableStillLiveWithinExpression(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable)&&  isVariableStillLiveWithinExpression(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    exprRoot)&&    isVariableStillLiveWithinExpression(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	122	None	replace
503	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    exprRoot)&&    isVariableStillLiveWithinExpression(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	122	None	replace
504	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  exprRoot)&&  isVariableStillLiveWithinExpression(sibling,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  exprRoot)&&  isVariableStillLiveWithinExpression(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  exprRoot)&&  isVariableStillLiveWithinExpression(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    exprRoot)&&    isVariableStillLiveWithinExpression(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	122	None	replace
505	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  test)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [CE]  cannot  find  symbol  test  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  test)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  test)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    exprRoot)&&    isVariableStillLiveWithinExpression(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  test	122	None	replace
506	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    	non-compiled	[CE]  ';'  expected	30	None	replace
507	[BUG]  [BUGGY]  if(!ControlFlowGraph.isVariableReadBeforeKill(sibling,  variable)||  variable!=  null)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isVariableReadBeforeKill(sibling,  variable)||  variable!=  null)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isVariableReadBeforeKill(sibling,  variable)||  variable!=  null)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    	non-compiled	[CE]  ';'  expected	30	None	replace
508	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  ==  null)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  ==  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  ==  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    	non-compiled	[CE]  ';'  expected	30	None	replace
509	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableReadBeforeKill(sibling,  exprRoot,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableReadBeforeKill(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableReadBeforeKill(sibling,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(sibling,    variable,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	145	None	replace
510	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableReadBeforeKill(sibling,  variable,  variable))  {  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableReadBeforeKill(sibling,  variable,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableReadBeforeKill(sibling,  variable,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(sibling,    variable,    variable))    {    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	145	None	replace
511	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable))  {	  if(sibling.getType()    ==    Token.CALL    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	144	None	replace
512	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  variable))  {	  if(sibling.getType()    ==    Token.CALL    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	144	None	replace
513	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(variable,  sibling))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(variable,  sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(variable,  sibling))  {	  if(sibling.getType()    ==    Token.CALL    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	144	None	replace
514	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.CALL  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling.getType()  ==  Token.CALL  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling.getType()  ==  Token.CALL  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable))  {	  if(sibling.getType()    ==    Token.CALL    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	144	None	replace
515	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  state))  {  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  state))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  state))  {	  if(sibling.getType()    ==    Token.CALL    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  state	144	None	replace
516	[BUG]  [BUGGY]  if(sibling!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  ==  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  ==  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  ==  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
517	[BUG]  [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(sibling,  variable))  {  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(sibling,  variable))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    isVariableStillLiveWithinExpression(sibling,    variable))    {    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	147	None	replace
518	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    isVariableStillLiveWithinExpression(sibling,    variable))    {    	compilable	  [FE]  AssertionFailedError  	147	57	replace
519	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    isVariableStillLiveWithinExpression(sibling,    variable))    {    	compilable	  [FE]  AssertionFailedError  	147	57	replace
520	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  variable))  {  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  variable))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    isVariableStillLiveWithinExpression(sibling,    variable))    {    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	147	None	replace
521	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  isVariableStillLiveWithinExpression(sibling,  exprRoot))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  isVariableStillLiveWithinExpression(sibling,  exprRoot))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  isVariableStillLiveWithinExpression(sibling,  exprRoot))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    isVariableStillLiveWithinExpression(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	147	None	replace
522	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(sibling,  variable),  state)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(sibling,  variable),  state)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(sibling,  variable),  state)  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    isVariableStillLiveWithinExpression(sibling,    variable))    {    	non-compiled	[CE]  ')'  expected	147	None	replace
523	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable)||  state  ==  VariableLiveness.KILL)  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable)||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable)||  state  ==  VariableLiveness.KILL)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	128	None	replace
524	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  state  ==  VariableLiveness.KILL)  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  state  ==  VariableLiveness.KILL)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  state  ==  VariableLiveness.KILL)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	128	None	replace
525	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)||  state  ==  VariableLiveness.KILL)  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)||  state  ==  VariableLiveness.KILL)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	128	None	replace
526	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable),  state  ==  VariableLiveness.KILL)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable),  state  ==  VariableLiveness.KILL)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable),  state  ==  VariableLiveness.KILL)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  ')'  expected	128	None	replace
527	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  state!=  VariableLiveness.KILL)  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  state!=  VariableLiveness.KILL)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  state!=  VariableLiveness.KILL)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	128	None	replace
528	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  variable)||  state  ==  VariableLiveness.KILL)  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  variable)||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  variable)||  state  ==  VariableLiveness.KILL)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	128	None	replace
529	[BUG]  [BUGGY]  Predicates.checkNotNull(variable);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicates.checkNotNull(variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicates.checkNotNull(variable);	  Predicates.checkNotNull(sibling);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
530	[BUG]  [BUGGY]  Predicates.checkNotNull(sibling,  variable);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicates.checkNotNull(sibling,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicates.checkNotNull(sibling,  variable);	  Predicates.checkNotNull(sibling);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
531	[BUG]  [BUGGY]  Predicates.checkState(sibling!=  null);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicates.checkState(sibling!=  null);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicates.checkState(sibling!=  null);	  Predicates.checkNotNull(sibling);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
532	[BUG]  [BUGGY]  Predicates.checkState(variable!=  null);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicates.checkState(variable!=  null);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicates.checkState(variable!=  null);	  Predicates.checkNotNull(sibling);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
533	[BUG]  [BUGGY]  Predicates.checkState(variable  ==  null);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicates.checkState(variable  ==  null);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicates.checkState(variable  ==  null);	  Predicates.checkNotNull(sibling);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
534	[BUG]  [BUGGY]  Predicates.checkState(sibling.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicates.checkState(sibling.getType()  ==  Token.NAME);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicates.checkState(sibling.getType()  ==  Token.NAME);	  Predicates.checkNotNull(sibling);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
535	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  isVariableStillLiveWithinExpression(sibling,  exprRoot))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  isVariableStillLiveWithinExpression(sibling,  exprRoot))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  isVariableStillLiveWithinExpression(sibling,  exprRoot))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    isVariableStillLiveWithinExpression(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	97	None	replace
536	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    isVariableStillLiveWithinExpression(sibling,    variable))    {    	compilable	  [FE]  AssertionFailedError  	97	57	replace
537	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  sibling,  variable))  {  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    isVariableStillLiveWithinExpression(sibling,    variable))    {    	compilable	  [FE]  AssertionFailedError  	97	57	replace
538	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLivewithinExpression(n,  exprRoot,  variable))  {  [CE]  cannot  find  symbol  [FE]                  StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLivewithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLivewithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLivewithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
539	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  sibling.getPredicate();  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicate  matchRemovableAssigns  =  sibling.getPredicate();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicate  matchRemovableAssigns  =  sibling.getPredicate();	  Predicate    matchRemovableAssigns    =    n.getPredicate();    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
540	[BUG]  [BUGGY]  Predicate  sibling  =  n.getPredicate();  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicate  sibling  =  n.getPredicate();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicate  sibling  =  n.getPredicate();	  Predicate    matchRemovableAssigns    =    n.getPredicate();    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
541	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  exprRoot.getPredicate();  [CE]  illegal  start  of  type  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicate  matchRemovableAssigns  =  exprRoot.getPredicate();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicate  matchRemovableAssigns  =  exprRoot.getPredicate();	  Predicate    matchRemovableAssigns    =    n.getPredicate();    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
542	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  n.getSibling();  [CE]  illegal  start  of  type  [FE]                                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicate  matchRemovableAssigns  =  n.getSibling();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicate  matchRemovableAssigns  =  n.getSibling();	  Predicate    matchRemovableAssigns    =    n.getPredicate();    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
543	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  n.getParent();  [CE]  illegal  start  of  type  [FE]                                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicate  matchRemovableAssigns  =  n.getParent();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicate  matchRemovableAssigns  =  n.getParent();	  Predicate    matchRemovableAssigns    =    n.getPredicate();    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
544	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.NAME)  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling.getType()  ==  Token.NAME)  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling.getType()  ==  Token.NAME)  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling    ==    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
545	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if(state  ==  VariableLiveness.READ)  {  [CE]  variable  state  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if(state  ==  VariableLiveness.READ)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if(state  ==  VariableLiveness.READ)  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling    ==    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)	49	None	replace
546	[BUG]  [BUGGY]  Predicates.matchRemovableAssignsElimination(n,  exprRoot);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicates.matchRemovableAssignsElimination(n,  exprRoot);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicates.matchRemovableAssignsElimination(n,  exprRoot);	  Predicate    matchRemovableAssignsElimination(n,    exprRoot);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
547	[BUG]  [BUGGY]  Predicate  sibling  =  matchRemovableAssignsElimination(n,  exprRoot);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicate  sibling  =  matchRemovableAssignsElimination(n,  exprRoot);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicate  sibling  =  matchRemovableAssignsElimination(n,  exprRoot);	  Predicate    matchRemovableAssignsElimination(n,    exprRoot);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
548	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination(sibling,  exprRoot);  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicate  matchRemovableAssignsElimination(sibling,  exprRoot);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicate  matchRemovableAssignsElimination(sibling,  exprRoot);	  Predicate    matchRemovableAssignsElimination(n,    exprRoot);    	non-compiled	[CE]  ';'  expected	84	None	replace
549	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot,  variable),  state);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot,  variable),  state);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot,  variable),  state);	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,    variable),    state);    	non-compiled	[CE]  ')'  expected	142	None	replace
550	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(sibling,  variable),  state);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(sibling,  variable),  state);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(sibling,  variable),  state);	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,    variable),    state);    	non-compiled	[CE]  ')'  expected	142	None	replace
551	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(sibling,  variable),  state);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(sibling,  variable),  state);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(sibling,  variable),  state);	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,    variable),    state);    	non-compiled	[CE]  ')'  expected	142	None	replace
552	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,  variable)||  state);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,  variable)||  state);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,  variable)||  state);	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,    variable),    state);    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
553	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&!VariableReadBeforeKill(sibling,  variable),  state);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&!VariableReadBeforeKill(sibling,  variable),  state);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&!VariableReadBeforeKill(sibling,  variable),  state);	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,    variable),    state);    	non-compiled	[CE]  ')'  expected	142	None	replace
554	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(exprRoot,  variable),  state);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(exprRoot,  variable),  state);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(exprRoot,  variable),  state);	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,    variable),    state);    	non-compiled	[CE]  ')'  expected	142	None	replace
555	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]    StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    sibling!=    exprRoot    &&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	148	None	add
556	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling  ==  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]      StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling  ==  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    sibling!=    exprRoot    &&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling  ==  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	148	None	add
557	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  ';'  expected  [FE]        StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    sibling!=    exprRoot    &&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  	non-compiled	[CE]  ';'  expected	148	None	add
558	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling  >=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]          StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling  >=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    sibling!=    exprRoot    &&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling  >=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	148	None	add
559	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  exprRoot  &&  areVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]            StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  exprRoot  &&  areVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    sibling!=    exprRoot    &&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  exprRoot  &&  areVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	148	None	add
560	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  exprRoot  &&  hasVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]              StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  exprRoot  &&  hasVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    sibling!=    exprRoot    &&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  exprRoot  &&  hasVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	148	None	add
561	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling  >>  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]                StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling  >>  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    sibling!=    exprRoot    &&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling  >>  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	148	None	add
562	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  sibling,  exprRoot,  variable))  {  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  sibling,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(sibling,    exprRoot,    variable))    {    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	36	None	replace
563	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  module)&&  isVariableReadBeforeKill(sibling,  exprRoot,  variable))  {  [CE]  cannot  find  symbol  module  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  module)&&  isVariableReadBeforeKill(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  module)&&  isVariableReadBeforeKill(sibling,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(sibling,    exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  module	36	None	replace
564	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(exprRoot,  variable));  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(exprRoot,  variable));  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(exprRoot,  variable));	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,    variable));    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
565	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&!VariableReadBeforeKill(sibling,  variable));  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&!VariableReadBeforeKill(sibling,  variable));  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&!VariableReadBeforeKill(sibling,  variable));	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,    variable));    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
566	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,  sibling));  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,  sibling));  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,  sibling));	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,    variable));    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
567	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  exprRoot,  variable),  liveness)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  exprRoot,  variable),  liveness)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  exprRoot,  variable),  liveness)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(n,    exprRoot,    variable))    {    	non-compiled	[CE]  ')'  expected	40	None	replace
568	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  exprRoot,  variable,  liveness))  {  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  exprRoot,  variable,  liveness))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  exprRoot,  variable,  liveness))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(n,    exprRoot,    variable))    {    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	40	None	replace
569	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  predicate))  {  [CE]  cannot  find  symbol  predicate  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  predicate))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  predicate))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  predicate	22	None	replace
570	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  false))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  false))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  false))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	22	None	replace
571	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling    ==    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
572	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(sibling!=  null)  {	  if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling    ==    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	compilable	  [FE]  AssertionFailedError  	73	57	replace
573	[BUG]  [BUGGY]  if(sibling!=  null)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null)  {	  if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling    ==    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	compilable	  [FE]  AssertionFailedError  	73	57	replace
574	[BUG]  [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(variable))  {  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(variable))  {  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(variable))  {  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling    ==    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
575	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  sibling  ==  null)  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  sibling  ==  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  sibling  ==  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)||    sibling!=    null)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	137	None	replace
576	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(v2,  variable))  {  [CE]  cannot  find  symbol  v2  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(v2,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(v2,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    isVariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  v2	39	None	replace
577	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(exprRoot,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(exprRoot,  variable))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	106	None	replace
578	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(n,  exprRoot))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(n,  exprRoot))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(n,  exprRoot))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	106	None	replace
579	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(variable),  sibling)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(variable),  sibling)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(variable),  sibling)  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(variable))    {    	non-compiled	[CE]  ')'  expected	106	None	replace
580	[BUG]  [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(variable),  sibling)  {  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(variable),  sibling)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(variable),  sibling)  {	  if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(variable))    {    	non-compiled	[CE]  ')'  expected	34	None	replace
581	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableLiveWithinKill(n,  exprRoot,  variable);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableLiveWithinKill(n,  exprRoot,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableLiveWithinKill(n,  exprRoot,  variable);	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,    exprRoot,    variable);    	non-compiled	[CE]  ')'  expected	43	None	replace
582	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot,  variable)&&  isVariableStillLiveWithinExpression(sibling,  variable);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot,  variable)&&  isVariableStillLiveWithinExpression(sibling,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot,  variable)&&  isVariableStillLiveWithinExpression(sibling,  variable);	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,    exprRoot,    variable);    	non-compiled	[CE]  ')'  expected	43	None	replace
583	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variables!=  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variables!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    variable!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variables!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
584	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  If(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  If(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  If(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    If(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  ';'  expected	74	None	replace
585	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  If(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  If(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  If(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    If(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  ';'  expected	74	None	replace
586	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(variable,  sibling))  {  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(variable,  sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(variable,  sibling))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    isVariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	146	None	replace
587	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableReadBeforeKill(variable,  variable))  {  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableReadBeforeKill(variable,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableReadBeforeKill(variable,  variable))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    isVariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	146	None	replace
588	[BUG]  [BUGGY]  Predicates.checkArgument(sibling!=  null);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicates.checkArgument(sibling!=  null);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicates.checkArgument(sibling!=  null);	  Predicates.checkNotNull(sibling);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
589	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable,  liveness))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable,  liveness))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable,  liveness))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    exprRoot,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	54	None	replace
590	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable)&&!VariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable)&&!VariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable)&&!VariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    exprRoot,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	54	None	replace
591	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  VARIABLE))  {  [CE]  cannot  find  symbol  VARIABLE  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  VARIABLE))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  VARIABLE))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    module,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  VARIABLE	57	None	replace
592	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable.equals(exprRoot))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable.equals(exprRoot))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariabilityStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	131	61	replace
593	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable.equals(exprRoot))  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable.equals(exprRoot))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable.equals(exprRoot))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariabilityStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	131	61	replace
594	[BUG]  [BUGGY]  if(!ControlFlowGraph.isVariableReadBeforeKill(sibling,  variable)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isVariableReadBeforeKill(sibling,  variable)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isVariableReadBeforeKill(sibling,  variable)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariabilityStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
595	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  MILL_LIVE))  {  [CE]  cannot  find  symbol  MILL_LIVE  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  MILL_LIVE))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  MILL_LIVE))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable,    VAR))    {    	non-compiled	[CE]  cannot  find  symbol  MILL_LIVE	140	None	replace
596	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  REGEXP))  {  [CE]  cannot  find  symbol  REGEXP  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  REGEXP))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  REGEXP))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable,    VAR))    {    	non-compiled	[CE]  cannot  find  symbol  REGEXP	140	None	replace
597	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  SHORT))  {  [CE]  cannot  find  symbol  SHORT  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  SHORT))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  SHORT))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable,    VAR))    {    	non-compiled	[CE]  cannot  find  symbol  SHORT	140	None	replace
598	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  state  [FE]    StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  state  ==  VariableLiveness.KILL)  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  state	9	None	replace
599	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(sibling,  variable),  state)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(sibling,  variable),  state)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(sibling,  variable),  state)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,    variable),    state)    {    	non-compiled	[CE]  ')'  expected	18	None	replace
600	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,  sibling),  state)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,  sibling),  state)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,  sibling),  state)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,    variable),    state)    {    	non-compiled	[CE]  ')'  expected	18	None	replace
601	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(variable,  sibling),  state)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(variable,  sibling),  state)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(variable,  sibling),  state)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,    variable),    state)    {    	non-compiled	[CE]  ')'  expected	18	None	replace
602	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.NAME)  {  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling.getType()  ==  Token.NAME)  {  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]    null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling.getType()  ==  Token.NAME)  {  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
603	[BUG]  [BUGGY]  if(!VariableReadBeforeKill(sibling,  variable))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!VariableReadBeforeKill(sibling,  variable))  {  [BUGGY]    null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!VariableReadBeforeKill(sibling,  variable))  {	  if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
604	[BUG]  [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(variable))  {  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(variable))  {  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]    null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(variable))  {  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
605	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isVariableStillLiveWithinExpression(sibling),  variable)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isVariableStillLiveWithinExpression(sibling),  variable)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isVariableStillLiveWithinExpression(sibling),  variable)  {	  if(sibling.getType()    ==    Token.CALL    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling),    variable)    {    	non-compiled	[CE]  ')'  expected	143	None	replace
606	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isVariableStillLiveWithinExpression(sibling,  variable))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isVariableStillLiveWithinExpression(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isVariableStillLiveWithinExpression(sibling,  variable))  {	  if(sibling.getType()    ==    Token.CALL    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling),    variable)    {    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
607	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(var,  variable))  {  [CE]  cannot  find  symbol  var  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(var,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(var,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(v,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  var	19	None	replace
608	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable)||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  state  [FE]        StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable)||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable)||  state  ==  VariableLiveness.KILL)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable)||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  state	109	None	replace
609	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  state  [FE]          StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  state  ==  VariableLiveness.KILL)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable)||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  state	109	None	replace
610	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewcfgNode(sibling)&&  variable.equals(exprRoot))  {  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewcfgNode(sibling)&&  variable.equals(exprRoot))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewcfgNode(sibling)&&  variable.equals(exprRoot))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewcfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
611	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable.equals(n.getString()))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable.equals(n.getString()))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewcfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  RuntimeException  	130	63	replace
612	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable.equals(n.getString()))  {  [FE]  RuntimeException  [FE]          StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable.equals(n.getString()))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable.equals(n.getString()))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewcfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  RuntimeException  	130	63	replace
613	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
614	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  hasVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  hasVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  hasVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
615	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  return  true;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  return  true;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(n,    exprRoot,    variable);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
616	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(n,  exprRoot,  variable)&&  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(n,  exprRoot,  variable)&&  state  ==  VariableLiveness.KILL)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(n,  exprRoot,  variable)&&  state  ==  VariableLiveness.KILL)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(n,    exprRoot,    variable);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
617	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot,  variable)||  state  ==  VariableLiveness.DEAD)  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot,  variable)||  state  ==  VariableLiveness.DEAD)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot,  variable)||  state  ==  VariableLiveness.DEAD)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,    exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
618	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot,  variable)||  state  ==  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot,  variable)||  state  ==  VariableLiveness.FALSE)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot,  variable)||  state  ==  VariableLiveness.FALSE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,    exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
619	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&  isVariableReadBeforeKill(variable,  sibling))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&  isVariableReadBeforeKill(variable,  sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&  isVariableReadBeforeKill(variable,  sibling))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)&&    isVariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	38	None	replace
620	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableReadBeforeKill(variable,  sibling))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableReadBeforeKill(variable,  sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableReadBeforeKill(variable,  sibling))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)&&    isVariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	38	None	replace
621	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableReadBeforeKill(exprRoot,  sibling))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableReadBeforeKill(exprRoot,  sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableReadBeforeKill(exprRoot,  sibling))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)&&    isVariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	38	None	replace
622	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(variable,  sibling))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(variable,  sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(variable,  sibling))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(variable,    sibling))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	133	None	replace
623	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(variable,  exprRoot,  sibling))  {  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(variable,  exprRoot,  sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(variable,  exprRoot,  sibling))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(variable,    sibling))    {    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	133	None	replace
624	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(variable,  exprRoot))  {  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(variable,  exprRoot))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(variable,  exprRoot))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(variable,    sibling))    {    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	133	None	replace
625	[BUG]  [BUGGY]  if(sibling!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variables!=  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variables!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variables!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variables!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
626	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination(sibling,  variable,  false);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicate  matchRemovableAssignsElimination(sibling,  variable,  false);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicate  matchRemovableAssignsElimination(sibling,  variable,  false);	  Predicate    matchRemovableAssignsElimination(sibling,    variable);    	non-compiled	[CE]  ';'  expected	102	None	replace
627	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variables))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]              StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variables))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variables))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variables))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	89	None	replace
628	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variables.isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  cannot  find  symbol  [FE]                StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variables.isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variables.isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variables))    {    	non-compiled	[CE]  cannot  find  symbol  	89	None	replace
629	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  <=VariableStillLiveWithinExpression(n,  exprRoot,  variables))  {  [CE]  cannot  find  symbol  [FE]                  StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  <=VariableStillLiveWithinExpression(n,  exprRoot,  variables))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  <=VariableStillLiveWithinExpression(n,  exprRoot,  variables))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variables))    {    	non-compiled	[CE]  cannot  find  symbol  	89	None	replace
630	[BUG]  [BUGGY]  Node  sibling  =  sibling.cloneTree();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Node  sibling  =  sibling.cloneTree();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Node  sibling  =  sibling.cloneTree();	  Node    sibling    =    sibling.getNext();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
631	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&!VariableReadBeforeKill(exprRoot,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&!VariableReadBeforeKill(exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&!VariableReadBeforeKill(exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)&&!VariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	28	None	replace
632	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&!VariableReadBeforeKill(variable,  sibling))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&!VariableReadBeforeKill(variable,  sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&!VariableReadBeforeKill(variable,  sibling))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)&&!VariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	28	None	replace
633	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&!VariableReadBeforeKill(variable,  sibling))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&!VariableReadBeforeKill(variable,  sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&!VariableReadBeforeKill(variable,  sibling))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)&&!VariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	28	None	replace
634	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variableVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  isVariableReadBeforeKill(sibling,  variable))  {  [CE]  cannot  find  symbolVariableStillLiveWithinExpression(Node,Node,String)  [FE]          StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variableVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  isVariableReadBeforeKill(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variableVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  isVariableReadBeforeKill(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable)||    isVariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbolVariableStillLiveWithinExpression(Node,Node,String)	150	None	replace
635	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variableIsVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  isVariableReadBeforeKill(sibling,  variable))  {  [CE]  cannot  find  symbolIsVariableStillLiveWithinExpression(Node,Node,String)  [FE]            StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variableIsVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  isVariableReadBeforeKill(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variableIsVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  isVariableReadBeforeKill(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable)||    isVariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbolIsVariableStillLiveWithinExpression(Node,Node,String)	150	None	replace
636	[BUG]  [BUGGY]  if(variable!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(variable!=  null  &&! "ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(variable!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(variable!=  null  &&! "ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(variable!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(variable!=  null  &&! "ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  	non-compiled	[CE]  unclosed  string  literal	107	None	add
637	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable)&&  state  ==  VariableLiveness.KILL)  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable)&&  state  ==  VariableLiveness.KILL)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable)&&  state  ==  VariableLiveness.KILL)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	128	None	replace
638	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  sibling  ==  VariableLiveness.KILL)  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  sibling  ==  VariableLiveness.KILL)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  sibling  ==  VariableLiveness.KILL)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	128	None	replace
639	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  sibling!=  VariableLiveness.KILL)  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  sibling!=  VariableLiveness.KILL)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  sibling!=  VariableLiveness.KILL)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	128	None	replace
640	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  null,  exprRoot))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  null,  exprRoot))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  null,  exprRoot))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable,    null))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	59	None	replace
641	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  module,  variable,  null))  {  [CE]  cannot  find  symbol  module  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  module,  variable,  null))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  module,  variable,  null))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable,    null))    {    	non-compiled	[CE]  cannot  find  symbol  module	59	None	replace
642	[BUG]  [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(variable))  {  if(sibling!=  null  ||!   "ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(variable))  {  if(sibling!=  null  ||!   "ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(variable))  {  if(sibling!=  null  ||!   "ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling!=    null    ||!   "ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  unclosed  string  literal	120	None	replace
643	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling!=  null  ||!   "ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling!=  null  ||!   "ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling!=  null  ||!   "ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling!=    null    ||!   "ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  unclosed  string  literal	120	None	replace
644	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  state  ==  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  state  [FE]          StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  state  ==  VariableLiveness.READ)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  state  ==  VariableLiveness.READ)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable)||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  state	110	None	replace
645	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  state  ==  VariableLiveness.LEAD)  {  [CE]  cannot  find  symbol  state  [FE]            StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  state  ==  VariableLiveness.LEAD)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  state  ==  VariableLiveness.LEAD)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable)||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  state	110	None	replace
646	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(variable,  exprRoot);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(variable,  exprRoot);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(variable,  exprRoot);	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(exprRoot,    variable);    	non-compiled	[CE]  ')'  expected	115	None	replace
647	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableLiveBeforeKill(n,  exprRoot,  variable);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableLiveBeforeKill(n,  exprRoot,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableLiveBeforeKill(n,  exprRoot,  variable);	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(exprRoot,    variable);    	non-compiled	[CE]  ')'  expected	115	None	replace
648	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(exprRoot,  variable);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(exprRoot,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(exprRoot,  variable);	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(exprRoot,    variable);    	non-compiled	[CE]  ')'  expected	115	None	replace
649	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(v,  exprRoot,  variable);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(v,  exprRoot,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(v,  exprRoot,  variable);	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(exprRoot,    variable);    	non-compiled	[CE]  ')'  expected	115	None	replace
650	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(v,  exprRoot,  variable))  {  [CE]  cannot  find  symbol  v  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(v,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(v,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,    sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  v	17	None	replace
651	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  n.getPredicate(variable);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicate  matchRemovableAssigns  =  n.getPredicate(variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicate  matchRemovableAssigns  =  n.getPredicate(variable);	  Predicate    matchRemovableAssigns    =    n.getPredicate();    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
652	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  variable);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
653	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
654	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  variable);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
655	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(variable,  sibling);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(variable,  sibling);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(variable,  sibling);	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,    sibling);    	non-compiled	[CE]  ')'  expected	116	None	replace
656	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  ==  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variables  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  ==  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variables  ==  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable    ==    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variables  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
657	[BUG]  [BUGGY]  if(!ControlFlowGraph.isVariableReadBeforeKill(sibling,  variable)||!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isVariableReadBeforeKill(sibling,  variable)||!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isVariableReadBeforeKill(sibling,  variable)||!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
658	[BUG]  [BUGGY]  if(sibling!=  null)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    	non-compiled	[CE]  ';'  expected	30	None	replace
659	[BUG]  [BUGGY]  if(!ControlFlowGraph.isVariableReadBeforeKill(sibling,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isVariableReadBeforeKill(sibling,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isVariableReadBeforeKill(sibling,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
660	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(sibling!=  null  &&ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]    StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(sibling!=  null  &&ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(sibling!=  null  &&ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
661	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(i,  sibling,  variable,  exprRoot))  {  [CE]  cannot  find  symbol  i  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(i,  sibling,  variable,  exprRoot))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(i,  sibling,  variable,  exprRoot))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable,    exprRoot))    {    	non-compiled	[CE]  cannot  find  symbol  i	117	None	replace
662	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variables))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variables))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variables))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable,    exprRoot))    {    	non-compiled	[CE]  cannot  find  symbol  	117	None	replace
663	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  module,  variable,  exprRoot))  {  [CE]  cannot  find  symbol  module  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  module,  variable,  exprRoot))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  module,  variable,  exprRoot))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable,    exprRoot))    {    	non-compiled	[CE]  cannot  find  symbol  module	117	None	replace
664	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot  ==  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot  ==  null)  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    	compilable	  [FE]  AssertionFailedError  	135	57	replace
665	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot  ==  null)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot  ==  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot  ==  null)  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    	compilable	  [FE]  AssertionFailedError  	135	57	replace
666	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  sibling,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariabilityStillLiveWithinExpression(n,  sibling,  variable))  {  [CE]  illegal  start  of  expression  [FE]    StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  sibling,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariabilityStillLiveWithinExpression(n,  sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    sibling,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariabilityStillLiveWithinExpression(n,  sibling,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	95	None	add
667	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  sibling,  variable))  {  if(!ControlFlowGraph.isEnteringNewcfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  sibling,  variable))  {  [CE]  illegal  start  of  expression  [FE]      StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  sibling,  variable))  {  if(!ControlFlowGraph.isEnteringNewcfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    sibling,    variable))    {    if(!ControlFlowGraph.isEnteringNewcfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  sibling,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	95	None	add
668	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(exprRoot,  variable,  sibling))  {  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(exprRoot,  variable,  sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(exprRoot,  variable,  sibling))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(variable,    sibling))    {    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	37	None	replace
669	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(variable,  exprRoot,  sibling))  {  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(variable,  exprRoot,  sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(variable,  exprRoot,  sibling))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(variable,    sibling))    {    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	37	None	replace
670	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  instanceof  VariableLiveness)  {  [CE]  inconvertible  types  [FE]        StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  instanceof  VariableLiveness)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  instanceof  VariableLiveness)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariABLEStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  inconvertible  types	141	None	replace
671	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    isVariableStillLiveWithinExpression(sibling,    variable))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	147	61	replace
672	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    isVariableStillLiveWithinExpression(sibling,    variable))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	147	61	replace
673	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(exprRoot,  variable))  {  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(exprRoot,  variable))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    isVariableStillLiveWithinExpression(sibling,    variable))    {    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	147	None	replace
674	[BUG]  [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.BLOCK  &&  variable.equals(sibling.getString()));  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.BLOCK  &&  variable.equals(sibling.getString()));  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Preconditions.checkState(sibling.getType()  ==  Token.BLOCK  &&  variable.equals(sibling.getString()));	  Preconditions.checkState(sibling.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
675	[BUG]  [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.BLOCK  ||  variable!=  null);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.BLOCK  ||  variable!=  null);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Preconditions.checkState(sibling.getType()  ==  Token.BLOCK  ||  variable!=  null);	  Preconditions.checkState(sibling.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
676	[BUG]  [BUGGY]  Preconditions.checkState(sibling.getType()!=  Token.BLOCK,  variable);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Preconditions.checkState(sibling.getType()!=  Token.BLOCK,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Preconditions.checkState(sibling.getType()!=  Token.BLOCK,  variable);	  Preconditions.checkState(sibling.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
677	[BUG]  [BUGGY]  if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling    ==    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
678	[BUG]  [BUGGY]  if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling  ==  null  &&! "ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  unclosed  string  literal  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling  ==  null  &&! "ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling    ==    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling  ==  null  &&! "ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  	non-compiled	[CE]  unclosed  string  literal	20	None	add
679	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  hasVariableReadBeforeKill(n,  exprRoot,  variable))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  hasVariableReadBeforeKill(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  hasVariableReadBeforeKill(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(n,    sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
680	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(exprRoot,  n,  variable))  {  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(exprRoot,  n,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(exprRoot,  n,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(n,    sibling,    variable))    {    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	35	None	replace
681	[BUG]  [BUGGY]  Node  sibling  =  n.getFirstChild().getNext();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Node  sibling  =  n.getFirstChild().getNext();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Node  sibling  =  n.getFirstChild().getNext();	  Node    sibling    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
682	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)||!VariableReadBeforeKill(variable,  sibling))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)||!VariableReadBeforeKill(variable,  sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)||!VariableReadBeforeKill(variable,  sibling))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)||!VariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	1	None	replace
683	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(n,  exprRoot))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(n,  exprRoot))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(n,  exprRoot))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)&&    isVariableStillLiveWithinExpression(sibling,    exprRoot))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	92	None	replace
684	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(variable,  sibling),  state);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(variable,  sibling),  state);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(variable,  sibling),  state);	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,    variable),    state);    	non-compiled	[CE]  ')'  expected	142	None	replace
685	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(n,  exprRoot,  variable),  state);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(n,  exprRoot,  variable),  state);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(n,  exprRoot,  variable),  state);	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,    variable),    state);    	non-compiled	[CE]  ')'  expected	142	None	replace
686	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,  sibling),  state);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,  sibling),  state);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,  sibling),  state);	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,    variable),    state);    	non-compiled	[CE]  ')'  expected	142	None	replace
687	[BUG]  [BUGGY]  if(sibling!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable    >=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
688	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableReadBeforeKill(exprRoot,  variable,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableReadBeforeKill(exprRoot,  variable,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableReadBeforeKill(exprRoot,  variable,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(sibling,    variable,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	145	None	replace
689	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(variable,  variable,  sibling))  {  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(variable,  variable,  sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(variable,  variable,  sibling))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(sibling,    variable,    variable))    {    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	145	None	replace
690	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&|  exprRoot!=  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&|  exprRoot!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    exprRoot!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&|  exprRoot!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
691	[BUG]  [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.CALL  &&  isVariableReadBeforeKill(sibling,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)  [CE]  ')'  expected  [FE]          StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.CALL  &&  isVariableReadBeforeKill(sibling,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&  sibling.getType()  ==  Token.CALL  &&  isVariableReadBeforeKill(sibling,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)	  if(isVariableReadBeforeKill(sibling,    variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  ')'  expected	7	None	replace
692	[BUG]  [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.CALL  &&  isVariableReadBeforeKill(sibling,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  [CE]  ')'  expected  [FE]            StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.CALL  &&  isVariableReadBeforeKill(sibling,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&  sibling.getType()  ==  Token.CALL  &&  isVariableReadBeforeKill(sibling,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,	  if(isVariableReadBeforeKill(sibling,    variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  ')'  expected	7	None	replace
693	[BUG]  [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.FUNCTION  &&  isVariableReadBeforeKill(sibling,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)  [CE]  ')'  expected  [FE]              StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.FUNCTION  &&  isVariableReadBeforeKill(sibling,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&  sibling.getType()  ==  Token.FUNCTION  &&  isVariableReadBeforeKill(sibling,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)	  if(isVariableReadBeforeKill(sibling,    variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  ')'  expected	7	None	replace
694	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  isVariableReadBeforeKill(exprRoot,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  isVariableReadBeforeKill(exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  isVariableReadBeforeKill(exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)||    isVariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	27	None	replace
695	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination(sibling,  exprRoot,  variable);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicate  matchRemovableAssignsElimination(sibling,  exprRoot,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicate  matchRemovableAssignsElimination(sibling,  exprRoot,  variable);	  Predicate    matchRemovableAssignsElimination(n,    exprRoot,    variable);    	non-compiled	[CE]  ';'  expected	80	None	replace
696	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination(n,  exprRoot,  variable,  liveness);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicate  matchRemovableAssignsElimination(n,  exprRoot,  variable,  liveness);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicate  matchRemovableAssignsElimination(n,  exprRoot,  variable,  liveness);	  Predicate    matchRemovableAssignsElimination(n,    exprRoot,    variable);    	non-compiled	[CE]  ';'  expected	80	None	replace
697	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination(n,  exprRoot,  variable,  false);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicate  matchRemovableAssignsElimination(n,  exprRoot,  variable,  false);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicate  matchRemovableAssignsElimination(n,  exprRoot,  variable,  false);	  Predicate    matchRemovableAssignsElimination(n,    exprRoot,    variable);    	non-compiled	[CE]  ';'  expected	80	None	replace
698	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  hasVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  hasVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(sibling,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  hasVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	93	None	add
699	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewcfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewcfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(sibling,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewcfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	93	None	add
700	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  ||  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  ||  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null    ||    isVariableStillLiveWithinExpression(sibling,    variable))    {    	compilable	  [FE]  AssertionFailedError  	138	57	replace
701	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  ||  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  ||  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  ||  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null    ||    isVariableStillLiveWithinExpression(sibling,    variable))    {    	compilable	  [FE]  AssertionFailedError  	138	57	replace
702	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null  ||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null  ||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null    ||    isVariableStillLiveWithinExpression(sibling,    variable))    {    	compilable	  [FE]  AssertionFailedError  	138	57	replace
703	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null  ||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null  ||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null  ||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null    ||    isVariableStillLiveWithinExpression(sibling,    variable))    {    	compilable	  [FE]  AssertionFailedError  	138	57	replace
704	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)  [CE]  ')'  expected  [FE]    StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    sibling!=    exprRoot    &&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)	  	non-compiled	[CE]  ')'  expected	148	None	add
705	[BUG]  [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.NAME,  variables);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.NAME,  variables);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Preconditions.checkState(sibling.getType()  ==  Token.NAME,  variables);	  Preconditions.checkState(sibling.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
706	[BUG]  [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.NAME  ||  variable!=  null);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.NAME  ||  variable!=  null);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Preconditions.checkState(sibling.getType()  ==  Token.NAME  ||  variable!=  null);	  Preconditions.checkState(sibling.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
707	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination(sibling,  null);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicate  matchRemovableAssignsElimination(sibling,  null);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicate  matchRemovableAssignsElimination(sibling,  null);	  Predicate    matchRemovableAssignsElimination(n,    sibling);    	non-compiled	[CE]  ';'  expected	82	None	replace
708	[BUG]  [BUGGY]  Predicates.matchRemovableAssignsElimination(sibling,  n);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicates.matchRemovableAssignsElimination(sibling,  n);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicates.matchRemovableAssignsElimination(sibling,  n);	  Predicate    matchRemovableAssignsElimination(n,    sibling);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
709	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  module,  variable)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  cannot  find  symbol  module  [FE]                  StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  module,  variable)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  module,  variable)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  module	14	None	replace
710	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable),  liveness)  {  [CE]  ')'  expected  [FE]                    StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable),  liveness)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable),  liveness)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  ')'  expected	14	None	replace
711	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(n,  exprRoot,  variable),  state)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(n,  exprRoot,  variable),  state)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(n,  exprRoot,  variable),  state)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(sibling,    variable),    state)    {    	non-compiled	[CE]  ')'  expected	4	None	replace
712	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(exprRoot,  variable),  state)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(exprRoot,  variable),  state)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(exprRoot,  variable),  state)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(sibling,    variable),    state)    {    	non-compiled	[CE]  ')'  expected	4	None	replace
713	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableStillLiveWithinExpression(sibling,  variable),  state)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableStillLiveWithinExpression(sibling,  variable),  state)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableStillLiveWithinExpression(sibling,  variable),  state)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(sibling,    variable),    state)    {    	non-compiled	[CE]  ')'  expected	4	None	replace
714	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(value,  variable))  {  [CE]  cannot  find  symbol  value  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(value,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(value,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(v,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  value	113	None	replace
715	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]    StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    variable!=    null    &&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	11	None	replace
716	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling    >=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
717	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(variable))  {  If(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(variable))  {  If(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(variable))  {  If(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    If(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  ';'  expected	50	None	replace
718	[BUG]  [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.CALL  ||  variable!=  null);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.CALL  ||  variable!=  null);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Preconditions.checkState(sibling.getType()  ==  Token.CALL  ||  variable!=  null);	  Preconditions.checkState(sibling.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
719	[BUG]  [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.CALL  ||  variable.equals(sibling.getString()));  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.CALL  ||  variable.equals(sibling.getString()));  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Preconditions.checkState(sibling.getType()  ==  Token.CALL  ||  variable.equals(sibling.getString()));	  Preconditions.checkState(sibling.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
720	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  variables))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  variables))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  variables))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(n,    sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  	55	None	replace
721	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  hasVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]    StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  hasVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    variable!=    null    &&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  hasVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
722	[BUG]  [BUGGY]  if(!ControlFlowGraph.isVariableStillLiveWithinExpression(sibling)||  variable!=  null)  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isVariableStillLiveWithinExpression(sibling)||  variable!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isVariableStillLiveWithinExpression(sibling)||  variable!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
723	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling  [Delete]  null)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling  [Delete]  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    sibling!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling  [Delete]  null)  {	  	non-compiled	[CE]  ')'  expected	70	None	add
724	[BUG]  [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.VAR  ||  variable!=  null);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.VAR  ||  variable!=  null);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Preconditions.checkState(sibling.getType()  ==  Token.VAR  ||  variable!=  null);	  Preconditions.checkState(sibling.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
725	[BUG]  [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.VAR  ||  variable.equals(sibling.getString()));  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.VAR  ||  variable.equals(sibling.getString()));  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Preconditions.checkState(sibling.getType()  ==  Token.VAR  ||  variable.equals(sibling.getString()));	  Preconditions.checkState(sibling.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
726	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(v2,  exprRoot,  variable))  {  [CE]  cannot  find  symbol  v2  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(v2,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(v2,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  v2	103	None	replace
727	[BUG]  [BUGGY]  Predicates.matchRemovableAssignsElimination(sibling,  exprRoot);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicates.matchRemovableAssignsElimination(sibling,  exprRoot);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicates.matchRemovableAssignsElimination(sibling,  exprRoot);	  Predicate    matchRemovableAssignsElimination(n,    exprRoot);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
728	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(v2,  exprRoot,  variable))  {  [CE]  cannot  find  symbol  v2  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(v2,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(v2,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&    isVariableStillLiveWithinExpression(sibling,    exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  v2	13	None	replace
729	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable),  state)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable),  state)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable),  state)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(sibling,    variable),    state)    {    	non-compiled	[CE]  ')'  expected	41	None	replace
730	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableReadBeforeKill(sibling,  variable),  state)  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableReadBeforeKill(sibling,  variable),  state)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableReadBeforeKill(sibling,  variable),  state)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(sibling,    variable),    state)    {    	non-compiled	[CE]  ')'  expected	41	None	replace
731	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    exprRoot!=    null)    {    	compilable	  [FE]  AssertionFailedError  	69	57	replace
732	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  null)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    exprRoot!=    null)    {    	compilable	  [FE]  AssertionFailedError  	69	57	replace
733	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&  isVariableReadBeforeKill(v,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&  isVariableReadBeforeKill(v,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&  isVariableReadBeforeKill(v,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)&&    isVariableReadBeforeKill(sibling,    exprRoot))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	26	None	replace
734	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&  isVariableReadBeforeKill(viable,  exprRoot))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&  isVariableReadBeforeKill(viable,  exprRoot))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&  isVariableReadBeforeKill(viable,  exprRoot))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)&&    isVariableReadBeforeKill(sibling,    exprRoot))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	26	None	replace
735	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  module,  variable)&&  isVariableStillLiveWithinExpression(exprRoot,  variable))  {  [CE]  cannot  find  symbol  module  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  module,  variable)&&  isVariableStillLiveWithinExpression(exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  module,  variable)&&  isVariableStillLiveWithinExpression(exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)&&    isVariableStillLiveWithinExpression(exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  module	121	None	replace
736	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(new  VariableLiveness(variable,  sibling)))  {  [CE]  enum  types  may  not  be  instantiated  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(new  VariableLiveness(variable,  sibling)))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(new  VariableLiveness(variable,  sibling)))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(v2,    variable))    {    	non-compiled	[CE]  enum  types  may  not  be  instantiated	105	None	replace
737	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot  ==  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&|  exprRoot  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot  ==  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&|  exprRoot  ==  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    exprRoot    ==    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&|  exprRoot  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	123	None	add
738	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  n);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  n);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  n);	  VariableLiveness    liveness    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
739	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  n,  variable);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  n,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  n,  variable);	  VariableLiveness    liveness    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
740	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  module,  null,  variable))  {  [CE]  cannot  find  symbol  module  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  module,  null,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  module,  null,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    null,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  module	119	None	replace
741	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(disprRoot,  sibling))  {  [CE]  cannot  find  symbol  disprRoot  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(disprRoot,  sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(disprRoot,  sibling))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,    sibling))    {    	non-compiled	[CE]  cannot  find  symbol  disprRoot	16	None	replace
742	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,  sibling)||  state  ==  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,  sibling)||  state  ==  VariableLiveness.READ)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,  sibling)||  state  ==  VariableLiveness.READ)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,    sibling))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
743	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableStillLiveWithinExpression(sibling,  variable);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableStillLiveWithinExpression(sibling,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableStillLiveWithinExpression(sibling,  variable);	  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  ')'  expected	47	None	replace
744	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,  n);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,  n);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,  n);	  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  ')'  expected	47	None	replace
745	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,  variable);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,  variable);	  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  ')'  expected	47	None	replace
746	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(d)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(d)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&    isVariableStillLiveWithinExpression(sibling,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(d)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
747	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  sibling.getfirstChild();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicate  matchRemovableAssigns  =  sibling.getfirstChild();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicate  matchRemovableAssigns  =  sibling.getfirstChild();	  Predicate    matchRemovableAssigns    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
748	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    exprRoot)&&    isVariableStillLiveWithinExpression(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	122	None	replace
749	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(exprRoot,  variable,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(exprRoot,  variable,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(exprRoot,  variable,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(sibling,    variable,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	132	None	replace
750	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(exprRoot,  variable,  variable))  {  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(exprRoot,  variable,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(exprRoot,  variable,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(sibling,    variable,    variable))    {    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	132	None	replace
751	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(v,  exprRoot,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(v,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(v,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(sibling,    variable,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	132	None	replace
752	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot))  {	  if(sibling.getType()    ==    Token.CALL    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	144	None	replace
753	[BUG]  [BUGGY]  if(sibling.getType()!=  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling.getType()!=  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling.getType()!=  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable))  {	  if(sibling.getType()    ==    Token.CALL    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	144	None	replace
754	[BUG]  [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.FUNCTION)  {  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.FUNCTION)  {  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&  sibling.getType()  ==  Token.FUNCTION)  {  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling    [Delete]    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
755	[BUG]  [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.VAR)  {  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.VAR)  {  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&  sibling.getType()  ==  Token.VAR)  {  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling    [Delete]    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
756	[BUG]  [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.CALL)  {  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.CALL)  {  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&  sibling.getType()  ==  Token.CALL)  {  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling    [Delete]    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
757	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null)  {  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null)  {  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    sibling!=    null)    {    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
758	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&  exprRoot!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(sibling!=  null  &&  exprRoot!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  StackOverflowError  	9	63	replace
759	[BUG]  [BUGGY]  if(sibling!=  null  &&  exprRoot!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&  exprRoot!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&  exprRoot!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  StackOverflowError  	9	63	replace
760	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(sibling!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  StackOverflowError  	9	63	replace
761	[BUG]  [BUGGY]  if(sibling!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  StackOverflowError  	9	63	replace
762	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    exprRoot!=    null)    {    	compilable	  [FE]  AssertionFailedError  	67	57	replace
763	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot!=  null)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    exprRoot!=    null)    {    	compilable	  [FE]  AssertionFailedError  	67	57	replace
764	[BUG]  [BUGGY]  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable))  {	  if(sibling    ==    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	24	None	replace
765	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(variable))  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(variable))  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(variable))  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling!=    null    &&!   "ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
766	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(variable))  {  if(sibling!=  null  &&!   "ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(variable))  {  if(sibling!=  null  &&!   "ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(variable))  {  if(sibling!=  null  &&!   "ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling!=    null    &&!   "ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  unclosed  string  literal	127	None	replace
767	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&  isVariableReadBeforeKill(n,  exprRoot,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&  isVariableReadBeforeKill(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&  isVariableReadBeforeKill(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)&&    isVariableReadBeforeKill(sibling,    exprRoot))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	26	None	replace
768	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  true);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  true);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  true);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
769	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  VAR);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  VAR);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  VAR);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
770	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot);	  VariableLiveness    liveness    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
771	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable,  true);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable,  true);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable,  true);	  VariableLiveness    liveness    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
772	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable,  VAR);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable,  VAR);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable,  VAR);	  VariableLiveness    liveness    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
773	[BUG]  [BUGGY]  Predicates.checkState(sibling.getType()  ==  Token.NAME);  Predicate  matchRemovableAssigns  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicates.checkState(sibling.getType()  ==  Token.NAME);  Predicate  matchRemovableAssigns  =  n.getFirstChild();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicates.checkState(sibling.getType()  ==  Token.NAME);  Predicate  matchRemovableAssigns  =  n.getFirstChild();	  Predicate    matchRemovableAssigns    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
774	[BUG]  [BUGGY]  Predicates.checkState(sibling.getType()  ==  Token.VAR);  Predicate  matchRemovableAssigns  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicates.checkState(sibling.getType()  ==  Token.VAR);  Predicate  matchRemovableAssigns  =  n.getFirstChild();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicates.checkState(sibling.getType()  ==  Token.VAR);  Predicate  matchRemovableAssigns  =  n.getFirstChild();	  Predicate    matchRemovableAssigns    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
775	[BUG]  [BUGGY]  Predicate  sibling  =  sibling.getFirstChild();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicate  sibling  =  sibling.getFirstChild();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicate  sibling  =  sibling.getFirstChild();	  Predicate    matchRemovableAssigns    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
776	[BUG]  [BUGGY]  Predicates.checkState(sibling.getType()  ==  Token.NAME);  Predicate  matchRemovableAssigns  =  sibling.getFirstChild();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicates.checkState(sibling.getType()  ==  Token.NAME);  Predicate  matchRemovableAssigns  =  sibling.getFirstChild();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicates.checkState(sibling.getType()  ==  Token.NAME);  Predicate  matchRemovableAssigns  =  sibling.getFirstChild();	  Predicate    matchRemovableAssigns    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
777	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null  &&  isVariableStillLiveWithinExpression(sibling,  variable))  {  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null  &&  isVariableStillLiveWithinExpression(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null  &&  isVariableStillLiveWithinExpression(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    sibling!=    null)    {    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	65	None	replace
778	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    sibling!=    null)    {    	compilable	  [FE]  AssertionFailedError  	65	57	replace
779	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    sibling!=    null)    {    	compilable	  [FE]  AssertionFailedError  	65	57	replace
780	[BUG]  [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.VAR  &&  isVariableReadBeforeKill(sibling,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)  [CE]  ')'  expected  [FE]          StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.VAR  &&  isVariableReadBeforeKill(sibling,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&  sibling.getType()  ==  Token.VAR  &&  isVariableReadBeforeKill(sibling,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)	  if(isVariableReadBeforeKill(sibling,    variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  ')'  expected	7	None	replace
781	[BUG]  [BUGGY]  if(isVariableStillLiveWithinExpression(sibling,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(isVariableStillLiveWithinExpression(sibling,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(isVariableStillLiveWithinExpression(sibling,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(isVariableReadBeforeKill(sibling,    variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	7	None	replace
782	[BUG]  [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.VAR  &&  isVariableReadBeforeKill(sibling,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  [CE]  ')'  expected  [FE]              StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.VAR  &&  isVariableReadBeforeKill(sibling,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&  sibling.getType()  ==  Token.VAR  &&  isVariableReadBeforeKill(sibling,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,	  if(isVariableReadBeforeKill(sibling,    variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  ')'  expected	7	None	replace
783	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.CALL  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(sibling!=  null  &&  sibling.getType()  ==  Token.CALL  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(isVariableReadBeforeKill(sibling,    variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	7	61	replace
784	[BUG]  [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.CALL  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.CALL  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&  sibling.getType()  ==  Token.CALL  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(isVariableReadBeforeKill(sibling,    variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	7	61	replace
785	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  sibling,  variable,  variable))  {  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  sibling,  variable,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  sibling,  variable,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(sibling,    variable,    variable))    {    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	145	None	replace
786	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(sibling,  variable,  exprRoot))  {  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(sibling,  variable,  exprRoot))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(sibling,  variable,  exprRoot))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(sibling,    variable,    variable))    {    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	145	None	replace
787	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  exprRoot,  variable,  VariableLiveness.KILL))  {  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  exprRoot,  variable,  VariableLiveness.KILL))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  exprRoot,  variable,  VariableLiveness.KILL))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(sibling,    variable,    variable))    {    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	145	None	replace
788	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  exprRoot,  true))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  exprRoot,  true))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  exprRoot,  true))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable,    exprRoot))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	117	None	replace
789	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  null,  isVariableStillLiveWithinExpression))  {  [CE]  cannot  find  symbol  isVariableStillLiveWithinExpression  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  null,  isVariableStillLiveWithinExpression))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  null,  isVariableStillLiveWithinExpression))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable,    null))    {    	non-compiled	[CE]  cannot  find  symbol  isVariableStillLiveWithinExpression	59	None	replace
790	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  null,  VAR))  {  [CE]  cannot  find  symbol  VAR  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  null,  VAR))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  null,  VAR))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable,    null))    {    	non-compiled	[CE]  cannot  find  symbol  VAR	59	None	replace
791	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable,  variable))  {  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(sibling,    variable,    variable))    {    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	132	None	replace
792	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  variable,  exprRoot))  {  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  variable,  exprRoot))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  variable,  exprRoot))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(sibling,    variable,    variable))    {    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	132	None	replace
793	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.CALL)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling.getType()  ==  Token.CALL)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling.getType()  ==  Token.CALL)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable    >=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
794	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  exprRoot  ==  VariableLiveness.KILL)  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  exprRoot  ==  VariableLiveness.KILL)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  exprRoot  ==  VariableLiveness.KILL)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	128	None	replace
795	[BUG]  [BUGGY]  Predicates.checkState(variable.equals(sibling));  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicates.checkState(variable.equals(sibling));  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicates.checkState(variable.equals(sibling));	  Predicates.checkNotNull(sibling);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
796	[BUG]  [BUGGY]  Predicates.checkArgument(sibling.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicates.checkArgument(sibling.getType()  ==  Token.BLOCK);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicates.checkArgument(sibling.getType()  ==  Token.BLOCK);	  Predicates.checkNotNull(sibling);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
797	[BUG]  [BUGGY]  Predicates.checkArgument(sibling.getType()  ==  Token.CALL);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicates.checkArgument(sibling.getType()  ==  Token.CALL);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicates.checkArgument(sibling.getType()  ==  Token.CALL);	  Predicates.checkNotNull(sibling);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
798	[BUG]  [BUGGY]  if(sibling!=  null  &&  exprRoot  ==  null)  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&  exprRoot  ==  null)  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&  exprRoot  ==  null)  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling    >=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
799	[BUG]  [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.CALL)  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.CALL)  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&  sibling.getType()  ==  Token.CALL)  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling    >=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
800	[BUG]  [BUGGY]  if(sibling!=  null  &&  isVariableReadBeforeKill(sibling,  variable))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&  isVariableReadBeforeKill(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&  isVariableReadBeforeKill(sibling,  variable))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling    >=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	51	None	replace
801	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling    >>    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	compilable	  [FE]  AssertionFailedError  	52	57	replace
802	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling    >>    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	compilable	  [FE]  AssertionFailedError  	52	57	replace
803	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.CALL)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variables!=  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling.getType()  ==  Token.CALL)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variables!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling.getType()  ==  Token.CALL)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variables!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variables!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
804	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.NAME)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variables!=  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling.getType()  ==  Token.NAME)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variables!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling.getType()  ==  Token.NAME)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variables!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variables!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
805	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  VAR))  {  [CE]  cannot  find  symbol  VAR  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  VAR))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  VAR))  {	  if(sibling.getType()    ==    Token.CALL    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  VAR	144	None	replace
806	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  null))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  null))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  null))  {	  if(sibling.getType()    ==    Token.CALL    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	144	None	replace
807	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  variable))  {	  if(sibling.getType()    ==    Token.CALL    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	144	None	replace
808	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  variables))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  variables))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  variables))  {	  if(sibling.getType()    ==    Token.CALL    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  	144	None	replace
809	[BUG]  [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.NAME)  {  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.NAME)  {  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&  sibling.getType()  ==  Token.NAME)  {  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
810	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  VariableLiveness.KILL))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  VariableLiveness.KILL))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  VariableLiveness.KILL))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    VAR_LIVE,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	58	None	replace
811	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  MILL))  {  [CE]  cannot  find  symbol  MILL  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  MILL))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  MILL))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    VAR_LIVE,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  MILL	58	None	replace
812	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(sibling,  variable),  liveness)  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(sibling,  variable),  liveness)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(sibling,  variable),  liveness)  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    isVariableStillLiveWithinExpression(sibling,    variable))    {    	non-compiled	[CE]  ')'  expected	147	None	replace
813	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null)  {  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null)  {  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    sibling!=    null)    {    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
814	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  asVariableReadBeforeKill(n,  exprRoot,  variable))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  asVariableReadBeforeKill(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  asVariableReadBeforeKill(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(n,    sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
815	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  VAR)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  cannot  find  symbol  VAR  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  VAR)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  VAR)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable,    VAR))    {    	non-compiled	[CE]  cannot  find  symbol  VAR	140	None	replace
816	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  HILL))  {  [CE]  cannot  find  symbol  HILL  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  HILL))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  HILL))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable,    VAR))    {    	non-compiled	[CE]  cannot  find  symbol  HILL	140	None	replace
817	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  STILL))  {  [CE]  cannot  find  symbol  STILL  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  STILL))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  STILL))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable,    VAR))    {    	non-compiled	[CE]  cannot  find  symbol  STILL	140	None	replace
818	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(n,  exprRoot,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(n,  exprRoot,  variable))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	106	None	replace
819	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(variable,  exprRoot))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(variable,  exprRoot))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(variable,  exprRoot))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	106	None	replace
820	[BUG]  [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.FUNCTION)  {  If(sibling!=  null  &&  sibling.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.FUNCTION)  {  If(sibling!=  null  &&  sibling.getType()  ==  Token.NAME)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&  sibling.getType()  ==  Token.FUNCTION)  {  If(sibling!=  null  &&  sibling.getType()  ==  Token.NAME)  {	  if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    If(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  ';'  expected	74	None	replace
821	[BUG]  [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.FUNCTION)  {  If(sibling!=  null  &&  sibling.getType()  ==  Token.BLOCK)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.FUNCTION)  {  If(sibling!=  null  &&  sibling.getType()  ==  Token.BLOCK)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&  sibling.getType()  ==  Token.FUNCTION)  {  If(sibling!=  null  &&  sibling.getType()  ==  Token.BLOCK)  {	  if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    If(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  ';'  expected	74	None	replace
822	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot,  variable)||  isVariableStillLiveWithinExpression(sibling,  variable))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot,  variable)||  isVariableStillLiveWithinExpression(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot,  variable)||  isVariableStillLiveWithinExpression(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,    exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
823	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null  &&  isVariableStillLiveWithinExpression(sibling,  variable))  {  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null  &&  isVariableStillLiveWithinExpression(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null  &&  isVariableStillLiveWithinExpression(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    sibling!=    null)    {    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	71	None	replace
824	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    sibling!=    null)    {    	compilable	  [FE]  AssertionFailedError  	71	57	replace
825	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    sibling!=    null)    {    	compilable	  [FE]  AssertionFailedError  	71	57	replace
826	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  ||  isVariableStillLiveWithinExpression(sibling,  variable))  {  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  ||  isVariableStillLiveWithinExpression(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  ||  isVariableStillLiveWithinExpression(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null    ||    isVariableStillLiveWithinExpression(sibling,    variable))    {    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	138	None	replace
827	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination(sibling,  variable,  predicate);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicate  matchRemovableAssignsElimination(sibling,  variable,  predicate);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicate  matchRemovableAssignsElimination(sibling,  variable,  predicate);	  Predicate    matchRemovableAssignsElimination(sibling,    variable);    	non-compiled	[CE]  ';'  expected	102	None	replace
828	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  module)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [CE]  cannot  find  symbol  module  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  module)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  module)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    exprRoot)&&    isVariableStillLiveWithinExpression(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  module	122	None	replace
829	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  ==  variable)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  ==  variable)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  AssertionFailedError  	86	57	replace
830	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  ==  variable)  {  [FE]  AssertionFailedError  [FE]        StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  ==  variable)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  ==  variable)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  AssertionFailedError  	86	57	replace
831	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  exprRoot)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  exprRoot)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	86	61	replace
832	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  exprRoot)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  exprRoot)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  exprRoot)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	86	61	replace
833	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot  ==  exprRoot)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot  ==  exprRoot)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  AssertionFailedError  	86	57	replace
834	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot  ==  exprRoot)  {  [FE]  AssertionFailedError  [FE]            StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot  ==  exprRoot)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot  ==  exprRoot)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  AssertionFailedError  	86	57	replace
835	[BUG]  [BUGGY]  if(sibling!=  null  &&  exprRoot!=  null)  {  if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&  exprRoot!=  null)  {  if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&  exprRoot!=  null)  {  if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling    ==    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
836	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling    ==    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	compilable	  [FE]  AssertionFailedError  	49	57	replace
837	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling    ==    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	compilable	  [FE]  AssertionFailedError  	49	57	replace
838	[BUG]  [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.CALL)  {  if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.CALL)  {  if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&  sibling.getType()  ==  Token.CALL)  {  if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling    ==    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
839	[BUG]  [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.FUNCTION)  {  if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.FUNCTION)  {  if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&  sibling.getType()  ==  Token.FUNCTION)  {  if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling    ==    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
840	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(vio,  exprRoot,  variable))  {  [CE]  cannot  find  symbol  vio  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(vio,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(vio,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&    isVariableStillLiveWithinExpression(sibling,    exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  vio	13	None	replace
841	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariabilityStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]          StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariabilityStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariabilityStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariabilityStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	131	None	replace
842	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  ==  variable)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  ';'  expected  [FE]          StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  ==  variable)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  ==  variable)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  ';'  expected	87	None	replace
843	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  ==  variable)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)  [CE]  ')'  expected  [FE]            StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  ==  variable)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  ==  variable)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  ')'  expected	87	None	replace
844	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  ==  variable)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  [CE]  ')'  expected  [FE]              StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  ==  variable)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable  ==  variable)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  ')'  expected	87	None	replace
845	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(sibling!=  null  &&  sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    sibling,    variable))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	96	61	replace
846	[BUG]  [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&  sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    sibling,    variable))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	96	61	replace
847	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  isVariableReadBeforeKill(sibling,  variables))  {  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  isVariableReadBeforeKill(sibling,  variables))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  isVariableReadBeforeKill(sibling,  variables))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable)||    isVariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  	150	None	replace
848	[BUG]  [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.BLOCK  ||  sibling.getType()  ==  Token.VAR);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.BLOCK  ||  sibling.getType()  ==  Token.VAR);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Preconditions.checkState(sibling.getType()  ==  Token.BLOCK  ||  sibling.getType()  ==  Token.VAR);	  Preconditions.checkState(sibling.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
849	[BUG]  [BUGGY]  Predicate  sibling  =  sibling.getPredicate();  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicate  sibling  =  sibling.getPredicate();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicate  sibling  =  sibling.getPredicate();	  Predicate    matchRemovableAssigns    =    n.getPredicate();    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
850	[BUG]  [BUGGY]  Predicate  testRemovableAssigns  =  sibling.getPredicate();  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicate  testRemovableAssigns  =  sibling.getPredicate();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicate  testRemovableAssigns  =  sibling.getPredicate();	  Predicate    matchRemovableAssigns    =    n.getPredicate();    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
851	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  sibling.getNext();  [CE]  illegal  start  of  type  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicate  matchRemovableAssigns  =  sibling.getNext();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicate  matchRemovableAssigns  =  sibling.getNext();	  Predicate    matchRemovableAssigns    =    n.getPredicate();    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
852	[BUG]  [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.CALL  ||  sibling.getType()  ==  Token.VAR);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.CALL  ||  sibling.getType()  ==  Token.VAR);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Preconditions.checkState(sibling.getType()  ==  Token.CALL  ||  sibling.getType()  ==  Token.VAR);	  Preconditions.checkState(sibling.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
853	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variables))  {  [CE]  illegal  start  of  expression  [FE]    StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variables))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    sibling!=    exprRoot    &&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variables))  {	  	non-compiled	[CE]  illegal  start  of  expression	148	None	add
854	[BUG]  [BUGGY]  if(sibling!=  null  &&  exprRoot!=  null)  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&  exprRoot!=  null)  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&  exprRoot!=  null)  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling    [Delete]    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
855	[BUG]  [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.NAME)  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.NAME)  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&  sibling.getType()  ==  Token.NAME)  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling    [Delete]    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
856	[BUG]  [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.BLOCK)  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.BLOCK)  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&  sibling.getType()  ==  Token.BLOCK)  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling    [Delete]    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
857	[BUG]  [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.GETPROP)  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.GETPROP)  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&  sibling.getType()  ==  Token.GETPROP)  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling    [Delete]    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
858	[BUG]  [BUGGY]  if(!isVariableReadBeforeKill(sibling,  variable))  {  [CE]  bad  operand  type  VariableLiveness  for  unary  operator  '!'  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!isVariableReadBeforeKill(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!isVariableReadBeforeKill(sibling,  variable))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling    [Delete]    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  bad  operand  type  VariableLiveness  for  unary  operator  '!'	53	None	replace
859	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  sibling!=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]    StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  sibling!=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  sibling!=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    sibling!=    exprRoot    &&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	149	None	replace
860	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling  ==  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling  ==  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    sibling!=    exprRoot    &&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	149	61	replace
861	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling  ==  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling  ==  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling  ==  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    sibling!=    exprRoot    &&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	149	61	replace
862	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  exprRoot  ||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  exprRoot  ||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    sibling!=    exprRoot    &&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  AssertionFailedError  	149	57	replace
863	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  exprRoot  ||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [FE]  AssertionFailedError  [FE]        StackOverflowError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  exprRoot  ||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  exprRoot  ||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    sibling!=    exprRoot    &&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  AssertionFailedError  	149	57	replace
864	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  ==  null)  {  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  ==  null)  {  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  ==  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    sibling    ==    null)    {    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	125	None	add
865	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(viable))  {  [CE]  cannot  find  symbol  viable  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(viable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(viable))  {	  if(variable!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  cannot  find  symbol  viable	108	None	replace
866	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  variable))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	22	None	replace
867	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  variables))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  variables))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  variables))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  	22	None	replace
868	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable),  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable),  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable),  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable))    {    	non-compiled	[CE]  ')'  expected	22	None	replace
869	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(v2,  exprRoot,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(v2,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(v2,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)&&    isVariableStillLiveWithinExpression(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	129	None	replace
870	[BUG]  [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.VAR)  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.VAR)  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&  sibling.getType()  ==  Token.VAR)  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling!=    null    ||!   "ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
871	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,  variable);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,  variable);	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  ')'  expected	44	None	replace
872	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable,  variables))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable,  variables))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable,  variables))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  	54	None	replace
873	[BUG]  [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.FUNCTION)  {  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.FUNCTION)  {  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&  sibling.getType()  ==  Token.FUNCTION)  {  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling    ==    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
874	[BUG]  [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.CALL)  {  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.CALL)  {  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&  sibling.getType()  ==  Token.CALL)  {  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling    ==    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
875	[BUG]  [BUGGY]  if(sibling!=  null  ||  variable!=  null)  {  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  ||  variable!=  null)  {  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  ||  variable!=  null)  {  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling    ==    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
876	[BUG]  [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.VAR)  {  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.VAR)  {  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&  sibling.getType()  ==  Token.VAR)  {  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling    ==    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
877	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot  ==  null  ||  variable!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot  ==  null  ||  variable!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    exprRoot    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	124	57	replace
878	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot  ==  null  ||  variable!=  null)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot  ==  null  ||  variable!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot  ==  null  ||  variable!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    exprRoot    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	124	57	replace
879	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,  variable))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,  variable))  {  return  true;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,  variable))  {  return  true;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,    variable),    state);    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
880	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(t,  sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(t,  sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&    isVariableStillLiveWithinExpression(sibling,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(t,  sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
881	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(dibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(dibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&    isVariableStillLiveWithinExpression(sibling,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(dibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
882	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  null)  {  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  null)  {  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    exprRoot!=    null)    {    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
883	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  exprRoot,  variable,  VAR))  {  [CE]  cannot  find  symbol  VAR  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  exprRoot,  variable,  VAR))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  exprRoot,  variable,  VAR))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(n,    exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  VAR	40	None	replace
884	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(sibling,  variable))  {  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null    &&    isVariableStillLiveWithinExpression(sibling,    variable))    {    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	136	None	replace
885	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  areVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  areVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  areVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    areVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
886	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]              StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    areVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  StackOverflowError  	88	63	replace
887	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [FE]  StackOverflowError  [FE]              StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    areVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  StackOverflowError  	88	63	replace
888	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  areVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)  [CE]  ')'  expected  [FE]                StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  areVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  areVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    areVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  ')'  expected	88	None	replace
889	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable),  sibling)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable),  sibling)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable),  sibling)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)||    sibling!=    null)    {    	non-compiled	[CE]  ')'  expected	137	None	replace
890	[BUG]  [BUGGY]  if(variable!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(variable!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(variable!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  	non-compiled	[CE]  illegal  start  of  expression	107	None	add
891	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&!VariableReadBeforeKill(n,  exprRoot,  variable);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&!VariableReadBeforeKill(n,  exprRoot,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&!VariableReadBeforeKill(n,  exprRoot,  variable);	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,    exprRoot,    variable);    	non-compiled	[CE]  ')'  expected	43	None	replace
892	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot,  variable)&&  state  ==  VariableLiveness.READ)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot,  variable)&&  state  ==  VariableLiveness.READ)  {  return  true;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot,  variable)&&  state  ==  VariableLiveness.READ)  {  return  true;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,    exprRoot,    variable);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
893	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  ==  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  ==  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    sibling    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	126	57	replace
894	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  ==  null)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  ==  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  ==  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    sibling    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	126	57	replace
895	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  state  ==  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  state  [FE]          StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  state  ==  VariableLiveness.BLOCK)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  state  ==  VariableLiveness.BLOCK)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable)||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  state	110	None	replace
896	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  module)&&  isVariableStillLiveWithinExpression(exprRoot,  exprRoot))  {  [CE]  cannot  find  symbol  module  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  module)&&  isVariableStillLiveWithinExpression(exprRoot,  exprRoot))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  module)&&  isVariableStillLiveWithinExpression(exprRoot,  exprRoot))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)&&    isVariableStillLiveWithinExpression(exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  module	121	None	replace
897	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(sibling,  variable))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(sibling,  variable))  {  return  true;  }  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(sibling,  variable))  {  return  true;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
898	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(exprRoot,  variable,  sibling))  {  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(exprRoot,  variable,  sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(exprRoot,  variable,  sibling))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(variable,    sibling))    {    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	133	None	replace
899	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(variable,  exprRoot))  {  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(variable,  exprRoot))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(variable,  exprRoot))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(variable,    sibling))    {    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	133	None	replace
900	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(viable,  exprRoot,  sibling))  {  [CE]  cannot  find  symbol  viable  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(viable,  exprRoot,  sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(viable,  exprRoot,  sibling))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(variable,    sibling))    {    	non-compiled	[CE]  cannot  find  symbol  viable	133	None	replace
901	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(d,  exprRoot,  variable))  {  [CE]  cannot  find  symbol  d  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(d,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(d,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,    sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  d	17	None	replace
902	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableLiveWithinExpression(sibling,  variable),  state)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableLiveWithinExpression(sibling,  variable),  state)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableLiveWithinExpression(sibling,  variable),  state)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(sibling,    variable),    state)    {    	non-compiled	[CE]  ')'  expected	41	None	replace
903	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableLiveWithinExpression(n,  exprRoot,  variable),  state)  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableLiveWithinExpression(n,  exprRoot,  variable),  state)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableLiveWithinExpression(n,  exprRoot,  variable),  state)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(sibling,    variable),    state)    {    	non-compiled	[CE]  ')'  expected	41	None	replace
904	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(n,  exprRoot,  variable)&&  isVariableStillLiveWithinExpression(sibling,  variable))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(n,  exprRoot,  variable)&&  isVariableStillLiveWithinExpression(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(n,  exprRoot,  variable)&&  isVariableStillLiveWithinExpression(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(n,    exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
905	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination(n,  exprRoot,  variables);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicate  matchRemovableAssignsElimination(n,  exprRoot,  variables);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicate  matchRemovableAssignsElimination(n,  exprRoot,  variables);	  Predicate    matchRemovableAssignsElimination(n,    exprRoot);    	non-compiled	[CE]  ';'  expected	84	None	replace
906	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&!VariableReadBeforeKill(sibling,  state))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&!VariableReadBeforeKill(sibling,  state))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&!VariableReadBeforeKill(sibling,  state))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)&&!VariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	28	None	replace
907	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&!VariableReadBeforeKill(sibling,  module))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&!VariableReadBeforeKill(sibling,  module))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&!VariableReadBeforeKill(sibling,  module))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable)&&!VariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	28	None	replace
908	[BUG]  [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.NAME  ||  variable.equals(sibling.getString()));  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.NAME  ||  variable.equals(sibling.getString()));  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Preconditions.checkState(sibling.getType()  ==  Token.NAME  ||  variable.equals(sibling.getString()));	  Preconditions.checkState(sibling.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
909	[BUG]  [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.NAME  &&  variable.equals(sibling.getString()));  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.NAME  &&  variable.equals(sibling.getString()));  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Preconditions.checkState(sibling.getType()  ==  Token.NAME  &&  variable.equals(sibling.getString()));	  Preconditions.checkState(sibling.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
910	[BUG]  [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.NAME  &&  sibling.getString().equals(variable));  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.NAME  &&  sibling.getString().equals(variable));  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Preconditions.checkState(sibling.getType()  ==  Token.NAME  &&  sibling.getString().equals(variable));	  Preconditions.checkState(sibling.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
911	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  variable!=  null)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  variable!=  null)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  variable!=  null)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    	non-compiled	[CE]  ';'  expected	30	None	replace
912	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    	non-compiled	[CE]  ';'  expected	30	None	replace
913	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination(n,  exprRoot,  variable,  null);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Predicate  matchRemovableAssignsElimination(n,  exprRoot,  variable,  null);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicate  matchRemovableAssignsElimination(n,  exprRoot,  variable,  null);	  Predicate    matchRemovableAssignsElimination(n,    exprRoot,    variable);    	non-compiled	[CE]  ';'  expected	80	None	replace
914	[BUG]  [BUGGY]  PredicatesAssignment  matchRemovableAssignsElimination(n,  exprRoot,  variable);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  PredicatesAssignment  matchRemovableAssignsElimination(n,  exprRoot,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	PredicatesAssignment  matchRemovableAssignsElimination(n,  exprRoot,  variable);	  Predicate    matchRemovableAssignsElimination(n,    exprRoot,    variable);    	non-compiled	[CE]  ';'  expected	80	None	replace
915	[BUG]  [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.FUNCTION)  {  If(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.FUNCTION)  {  If(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&  sibling.getType()  ==  Token.FUNCTION)  {  If(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    If(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  ';'  expected	50	None	replace
916	[BUG]  [BUGGY]  if(sibling!=  null  &&  sibling.hasChildren())  {  If(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&  sibling.hasChildren())  {  If(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&  sibling.hasChildren())  {  If(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    If(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  ';'  expected	50	None	replace
917	[BUG]  [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.CALL)  {  If(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.CALL)  {  If(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&  sibling.getType()  ==  Token.CALL)  {  If(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    If(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  ';'  expected	50	None	replace
918	[BUG]  [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.VAR)  {  If(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.VAR)  {  If(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&  sibling.getType()  ==  Token.VAR)  {  If(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    If(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  ';'  expected	50	None	replace
919	[BUG]  [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.VAR)  {  if(sibling!=  null  &&  sibling.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling!=  null  &&  sibling.getType()  ==  Token.VAR)  {  if(sibling!=  null  &&  sibling.getType()  ==  Token.BLOCK)  {  [BUGGY]    null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&  sibling.getType()  ==  Token.VAR)  {  if(sibling!=  null  &&  sibling.getType()  ==  Token.BLOCK)  {	  if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
920	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(variable,  sibling),  state)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(variable,  sibling),  state)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(variable,  sibling),  state)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(sibling,    variable),    state)    {    	non-compiled	[CE]  ')'  expected	4	None	replace
921	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  hasVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  cannot  find  symbol  [FE]                StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  hasVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  hasVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    hasVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
922	[BUG]  [BUGGY]  Node  sibling  =  sibling.removeFirstChild();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Node  sibling  =  sibling.removeFirstChild();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Node  sibling  =  sibling.removeFirstChild();	  Node    sibling    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
923	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewcfgNode(sibling)&&  exprRoot!=  exprRoot)  {  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewcfgNode(sibling)&&  exprRoot!=  exprRoot)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewcfgNode(sibling)&&  exprRoot!=  exprRoot)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewcfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
924	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewcfgNode(sibling)&&  exprRoot  ==  exprRoot)  {  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewcfgNode(sibling)&&  exprRoot  ==  exprRoot)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewcfgNode(sibling)&&  exprRoot  ==  exprRoot)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewcfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
925	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(sibling,    exprRoot,    variable))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	94	61	replace
926	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(sibling,    exprRoot,    variable))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	94	61	replace
927	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  StackOverflowError  	6	62	replace
928	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [FE]  StackOverflowError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  StackOverflowError  	6	62	replace
929	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  ==  null  ||  isVariableStillLiveWithinExpression(sibling,  variable))  {  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  ==  null  ||  isVariableStillLiveWithinExpression(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  ==  null  ||  isVariableStillLiveWithinExpression(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable    ==    null)    {    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	63	None	replace
930	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariABLEStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]        StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariABLEStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariABLEStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariABLEStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	141	None	replace
931	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {	  if(sibling.getType()    ==    Token.CALL    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling),    variable)    {    	compilable	  [FE]  AssertionFailedError  	143	57	replace
932	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {	  if(sibling.getType()    ==    Token.CALL    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling),    variable)    {    	compilable	  [FE]  AssertionFailedError  	143	57	replace
933	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&!VariableReadBeforeKill(exprRoot,  variable);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&!VariableReadBeforeKill(exprRoot,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&!VariableReadBeforeKill(exprRoot,  variable);	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(exprRoot,    variable);    	non-compiled	[CE]  ')'  expected	115	None	replace
934	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(exprRoot,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(exprRoot,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(exprRoot,    variable))    {    	compilable	  [FE]  AssertionFailedError  	98	57	replace
935	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(exprRoot,  exprRoot,  variable))  {  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(exprRoot,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(exprRoot,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(exprRoot,    variable))    {    	compilable	  [FE]  AssertionFailedError  	98	57	replace
936	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(exprRoot,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(exprRoot,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(exprRoot,    variable))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	98	61	replace
937	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(exprRoot,  exprRoot,  variable))  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(exprRoot,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(exprRoot,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(exprRoot,    variable))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	98	61	replace
938	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(sibling,  exprRoot,  variable),  state)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(sibling,  exprRoot,  variable),  state)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(sibling,  exprRoot,  variable),  state)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(sibling,    exprRoot,    variable))    {    	non-compiled	[CE]  ')'  expected	36	None	replace
939	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  variable))  {  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(sibling,    exprRoot,    variable))    {    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	36	None	replace
940	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variables)||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variables)||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variables)||  state  ==  VariableLiveness.KILL)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable)||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  	109	None	replace
941	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  null  &&  isVariableStillLiveWithinExpression(sibling,  variable))  {  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  null  &&  isVariableStillLiveWithinExpression(sibling,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  null  &&  isVariableStillLiveWithinExpression(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    exprRoot!=    null)    {    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	69	None	replace
942	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&!VariableStillLiveWithinExpression(n,  exprRoot,  variable);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&!VariableStillLiveWithinExpression(n,  exprRoot,  variable);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&!VariableStillLiveWithinExpression(n,  exprRoot,  variable);	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(n,    exprRoot,    variable);    	non-compiled	[CE]  ')'  expected	46	None	replace
943	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(n,  exprRoot,  variable),  sibling);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(n,  exprRoot,  variable),  sibling);  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(n,  exprRoot,  variable),  sibling);	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(n,    exprRoot,    variable);    	non-compiled	[CE]  ')'  expected	46	None	replace
944	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(v,  exprRoot,  variable))  {  [CE]  cannot  find  symbol  v  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(v,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(v,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  v	112	None	replace
945	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(v2,  exprRoot,  variable))  {  [CE]  cannot  find  symbol  v2  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(v2,  exprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(v2,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  v2	112	None	replace
946	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(disprRoot,  variable))  {  [CE]  cannot  find  symbol  disprRoot  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(disprRoot,  variable))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(disprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,    sibling))    {    	non-compiled	[CE]  cannot  find  symbol  disprRoot	16	None	replace
947	[BUG]  [BUGGY]  Node  sibling  =  sibling.removeFirst();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  Node  sibling  =  sibling.removeFirst();  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Node  sibling  =  sibling.removeFirst();	  Node    sibling    =    sibling.getNext();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
948	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,  test))  {  [CE]  cannot  find  symbol  test  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,  test))  {  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,  test))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  test	104	None	replace
