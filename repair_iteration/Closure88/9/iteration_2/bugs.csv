bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||!VariableReadBeforeKill(sibling,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||!VariableReadBeforeKill(sibling,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||!VariableReadBeforeKill(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	2	None	replace
2	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(variable,  sibling))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(variable,  sibling))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(variable,  sibling))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
3	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(n,  exprRoot,  variable))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(n,  exprRoot,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
4	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(sibling,  variable),  state)  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(sibling,  variable),  state)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(sibling,  variable),  state)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  ')'  expected	2	None	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    StackOverflowError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  AssertionFailedError  	16	57	replace
6	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [FE]  AssertionFailedError  [FE]    StackOverflowError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  AssertionFailedError  	16	57	replace
7	[BUG]  [BUGGY]  if(isVariableReadBeforeKill(sibling,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]      StackOverflowError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(isVariableReadBeforeKill(sibling,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(isVariableReadBeforeKill(sibling,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	16	None	replace
8	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  StackOverflowError  	16	63	replace
9	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  StackOverflowError  	16	63	replace
10	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  StackOverflowError  	16	63	replace
11	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  StackOverflowError  	16	63	replace
12	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]            StackOverflowError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	16	61	replace
13	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]            StackOverflowError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	16	61	replace
14	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]              StackOverflowError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	16	None	replace
15	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot,  variable))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
16	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,  sibling))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,  sibling))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,  sibling))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
17	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  sibling,  variable))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  sibling,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
18	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,  variable),  state)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,  variable),  state)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,  variable),  state)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  ')'  expected	5	None	replace
19	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(v,  variable))  {  [CE]  cannot  find  symbol  v  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(v,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(v,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  v	5	None	replace
20	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	4	61	replace
21	[BUG]  [BUGGY]  if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	4	61	replace
22	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	4	None	replace
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	compilable	  [FE]  AssertionFailedError  	4	57	replace
24	[BUG]  [BUGGY]  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	compilable	  [FE]  AssertionFailedError  	4	57	replace
25	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling),  variable)  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling),  variable)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling),  variable)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling),    variable)    {    	non-compiled	[CE]  ')'  expected	11	None	replace
26	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableReadBeforeKill(sibling,  exprRoot))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableReadBeforeKill(sibling,  exprRoot))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableReadBeforeKill(sibling,  exprRoot))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling),    variable)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	11	None	replace
27	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  isVariableReadBeforeKill(sibling,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  isVariableReadBeforeKill(sibling,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  isVariableReadBeforeKill(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling),    variable)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	11	None	replace
28	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&!VariableReadBeforeKill(sibling,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&!VariableReadBeforeKill(sibling,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&!VariableReadBeforeKill(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling),    variable)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	11	None	replace
29	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
30	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {	  	non-compiled	[CE]  ';'  expected	13	None	add
31	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  ==  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  ==  null)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
32	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  >=  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  >=  null)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  >=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
33	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  >>  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  >>  null)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  >>  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
34	[BUG]  [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(variable))  {	  if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	7	None	replace
35	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  sibling,  variable))  {  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  sibling,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	12	None	replace
36	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(sibling,  exprRoot,  variable))  {  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(sibling,  exprRoot,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(sibling,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	12	None	replace
37	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(variable,  sibling))  {  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(variable,  sibling))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(variable,  sibling))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	12	None	replace
38	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableReadBeforeKill(sibling,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableReadBeforeKill(sibling,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableReadBeforeKill(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	12	None	replace
39	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableReadBeforeKill(sibling,  variable))  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableReadBeforeKill(sibling,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableReadBeforeKill(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	12	None	replace
40	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  exprRoot,  variable))  {  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  exprRoot,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	12	None	replace
41	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(sibling,  variable),  state)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(sibling,  variable),  state)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(sibling,  variable),  state)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  ')'  expected	12	None	replace
42	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(sibling,  variable);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(sibling,  variable);  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(sibling,  variable);	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  ')'  expected	8	None	replace
43	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot,  variable);  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot,  variable);  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(n,  exprRoot,  variable);	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  ')'  expected	8	None	replace
44	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(sibling,  variable);  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(sibling,  variable);  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(sibling,  variable);	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  ')'  expected	8	None	replace
45	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,  variable));  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,  variable));  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,  variable));	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
46	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(n,  exprRoot,  variable);  [CE]  ')'  expected  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(n,  exprRoot,  variable);  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableStillLiveWithinExpression(n,  exprRoot,  variable);	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  ')'  expected	8	None	replace
47	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableReadBeforeKill(sibling,  variable);  [CE]  ')'  expected  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableReadBeforeKill(sibling,  variable);  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!VariableReadBeforeKill(sibling,  variable);	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  ')'  expected	8	None	replace
48	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
49	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling  ==  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
50	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  If(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  If(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    If(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  	non-compiled	[CE]  ';'  expected	3	None	add
51	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling  >=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling  >=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling  >=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
52	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling  >>  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling  >>  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling  >>  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
53	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling  [Delete]  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling  [Delete]  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling  [Delete]  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  	non-compiled	[CE]  ')'  expected	3	None	add
54	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	1	None	replace
55	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n,  sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	1	None	replace
56	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  test,  variable))  {  [CE]  cannot  find  symbol  test  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  test,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  test,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  test	1	None	replace
57	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  module,  variable))  {  [CE]  cannot  find  symbol  module  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  module,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  module,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  module	1	None	replace
58	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  VAR_LIVE,  variable))  {  [CE]  cannot  find  symbol  VAR_LIVE  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  VAR_LIVE,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  VAR_LIVE,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  VAR_LIVE	1	None	replace
59	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  null))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  null))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  null))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	1	None	replace
60	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    	compilable	  [FE]  AssertionFailedError  	14	57	replace
61	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  variable!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    	compilable	  [FE]  AssertionFailedError  	14	57	replace
62	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  ==  null)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  ==  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    	compilable	  [FE]  AssertionFailedError  	14	57	replace
63	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  ==  null)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  ==  null)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable  ==  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    	compilable	  [FE]  AssertionFailedError  	14	57	replace
64	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    	compilable	  [FE]  AssertionFailedError  	14	57	replace
65	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    	compilable	  [FE]  AssertionFailedError  	14	57	replace
66	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot!=  null)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    	compilable	  [FE]  AssertionFailedError  	14	57	replace
67	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot!=  null)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot!=  null)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    	compilable	  [FE]  AssertionFailedError  	14	57	replace
68	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  null)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    	compilable	  [FE]  AssertionFailedError  	14	57	replace
69	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  null)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  null)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  exprRoot!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    	compilable	  [FE]  AssertionFailedError  	14	57	replace
70	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    	compilable	  [FE]  AssertionFailedError  	14	57	replace
71	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    	compilable	  [FE]  AssertionFailedError  	14	57	replace
72	[BUG]  [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
73	[BUG]  [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling  ==  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
74	[BUG]  [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  If(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  If(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    If(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  	non-compiled	[CE]  ';'  expected	6	None	add
75	[BUG]  [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling  >=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling  >=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling  >=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
76	[BUG]  [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling  >>  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling  >>  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling  >>  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
77	[BUG]  [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling  [Delete]  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling  [Delete]  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling  [Delete]  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  	non-compiled	[CE]  ')'  expected	6	None	add
78	[BUG]  [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling  [BUGGY]  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling  [BUGGY]  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling  [BUGGY]  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  	non-compiled	[CE]  ')'  expected	6	None	add
79	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
80	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination(n,  exprRoot,  variable);  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  Predicate  matchRemovableAssignsElimination(n,  exprRoot,  variable);  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicate  matchRemovableAssignsElimination(n,  exprRoot,  variable);	      	non-compiled	[CE]  ';'  expected	9	None	replace
81	[BUG]  [BUGGY]  Node  sibling  =  sibling.getNext();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  Node  sibling  =  sibling.getNext();  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Node  sibling  =  sibling.getNext();	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
82	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination(n,  sibling);  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  Predicate  matchRemovableAssignsElimination(n,  sibling);  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicate  matchRemovableAssignsElimination(n,  sibling);	      	non-compiled	[CE]  ';'  expected	9	None	replace
83	[BUG]  [BUGGY]  Node  sibling  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  Node  sibling  =  n.getFirstChild();  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Node  sibling  =  n.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
84	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination(n,  exprRoot);  [CE]  ';'  expected  [FE]                              AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  Predicate  matchRemovableAssignsElimination(n,  exprRoot);  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicate  matchRemovableAssignsElimination(n,  exprRoot);	      	non-compiled	[CE]  ';'  expected	9	None	replace
85	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  n.getPredicate();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  Predicate  matchRemovableAssigns  =  n.getPredicate();  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicate  matchRemovableAssigns  =  n.getPredicate();	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
86	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]    StackOverflowError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
87	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  ';'  expected  [FE]      StackOverflowError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    If(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  	non-compiled	[CE]  ';'  expected	15	None	add
88	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  areVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]        StackOverflowError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  areVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  areVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
89	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variables))  {  [CE]  illegal  start  of  expression  [FE]          StackOverflowError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variables))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variables))  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
90	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  hasVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]            StackOverflowError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  hasVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  hasVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
91	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLivewithinExpression(n,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]              StackOverflowError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLivewithinExpression(n,  exprRoot,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLivewithinExpression(n,  exprRoot,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
92	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	10	None	replace
93	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(sibling,    variable))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	10	61	replace
94	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(sibling,    variable))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	10	61	replace
95	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  sibling,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(sibling,    variable))    {    	compilable	  [FE]  StackOverflowError  	10	63	replace
96	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  sibling,  variable))  {  [FE]  StackOverflowError  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  sibling,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(sibling,    variable))    {    	compilable	  [FE]  StackOverflowError  	10	63	replace
97	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(sibling,  variable))  {  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(sibling,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(sibling,    variable))    {    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	10	None	replace
98	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(exprRoot,  variable))  {  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(exprRoot,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(sibling,    variable))    {    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	10	None	replace
99	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable);  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable);	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
100	[BUG]  [BUGGY]  Predicates.checkNotNull(sibling);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  Predicates.checkNotNull(sibling);  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicates.checkNotNull(sibling);	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
101	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  Predicate  matchRemovableAssigns  =  n.getFirstChild();  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicate  matchRemovableAssigns  =  n.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
102	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination(sibling,  variable);  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  Predicate  matchRemovableAssignsElimination(sibling,  variable);  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Predicate  matchRemovableAssignsElimination(sibling,  variable);	      	non-compiled	[CE]  ';'  expected	9	None	replace
103	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(exprRoot,  variable))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(exprRoot,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
104	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,  variable))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
105	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(v2,  variable))  {  [CE]  cannot  find  symbol  v2  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(v2,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(v2,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  v2	5	None	replace
106	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(variable))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	4	None	replace
107	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(variable!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(variable!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	compilable	  [FE]  AssertionFailedError  	4	57	replace
108	[BUG]  [BUGGY]  if(variable!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(variable!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(variable!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	compilable	  [FE]  AssertionFailedError  	4	57	replace
109	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  state  [FE]    StackOverflowError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  state  ==  VariableLiveness.KILL)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  state  ==  VariableLiveness.KILL)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  state	16	None	replace
110	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  state  ==  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  state  [FE]      StackOverflowError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  state  ==  VariableLiveness.READ)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  state  ==  VariableLiveness.READ)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  state	16	None	replace
111	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variables!=  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variables!=  null)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variables!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
112	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(exprRoot,  variable))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(exprRoot,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	12	None	replace
113	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(v,  variable))  {  [CE]  cannot  find  symbol  v  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(v,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(v,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  v	12	None	replace
114	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(exprRoot,  variable))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(exprRoot,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||!VariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
115	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(exprRoot,  variable);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(exprRoot,  variable);  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(exprRoot,  variable);	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  ')'  expected	8	None	replace
116	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,  sibling);  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,  sibling);  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(variable,  sibling);	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  ')'  expected	8	None	replace
117	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  exprRoot))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  exprRoot))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  exprRoot))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	1	None	replace
118	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exrRoot,  variable))  {  [CE]  cannot  find  symbol  exrRoot  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exrRoot,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exrRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  exrRoot	1	None	replace
119	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  null,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  null,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  null,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	1	None	replace
120	[BUG]  [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling!=  null  ||! "ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(sibling!=  null  ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling!=  null  ||! "ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=    null    ||!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling!=  null  ||! "ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  	non-compiled	[CE]  unclosed  string  literal	6	None	add
121	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(exprRoot,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(exprRoot,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	10	None	replace
122	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&  isVariableStillLiveWithinExpression(sibling,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&  isVariableStillLiveWithinExpression(sibling,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  exprRoot)&&  isVariableStillLiveWithinExpression(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	10	None	replace
123	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot  ==  null)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot  ==  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    	compilable	  [FE]  AssertionFailedError  	14	57	replace
124	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot  ==  null)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot  ==  null)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  exprRoot  ==  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    	compilable	  [FE]  AssertionFailedError  	14	57	replace
125	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  ==  null)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  ==  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    	compilable	  [FE]  AssertionFailedError  	14	57	replace
126	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  ==  null)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  ==  null)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  sibling  ==  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    	compilable	  [FE]  AssertionFailedError  	14	57	replace
127	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling!=  null  &&! "ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  if(sibling!=  null  &&! "ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    if(sibling!=  null  &&! "ControlFlowGraph.isEnteringNewCfgNode(sibling))  {	  	non-compiled	[CE]  unclosed  string  literal	3	None	add
128	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  state  ==  VariableLiveness.KILL)  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  state  ==  VariableLiveness.KILL)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  state  ==  VariableLiveness.KILL)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling),    variable)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	11	None	replace
129	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(sibling,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(sibling,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)&&  isVariableStillLiveWithinExpression(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling),    variable)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	11	None	replace
130	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewcfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]    StackOverflowError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewcfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewcfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
131	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariabilityStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]      StackOverflowError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariabilityStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariabilityStillLiveWithinExpression(n,  exprRoot,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
132	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  variable,  variable))  {  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  variable,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(sibling,  variable,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(sibling,    variable))    {    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	10	None	replace
133	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(variable,  sibling))  {  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(variable,  sibling))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(variable,  sibling))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(sibling,    variable))    {    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	10	None	replace
134	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    	compilable	  [FE]  AssertionFailedError  	14	57	replace
135	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    	compilable	  [FE]  AssertionFailedError  	14	57	replace
136	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null  &&  isVariableStillLiveWithinExpression(sibling,  variable))  {  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null  &&  isVariableStillLiveWithinExpression(sibling,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null  &&  isVariableStillLiveWithinExpression(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	14	None	replace
137	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  sibling!=  null)  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  sibling!=  null)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable)||  sibling!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	14	None	replace
138	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null  ||  isVariableStillLiveWithinExpression(sibling,  variable))  {  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null  ||  isVariableStillLiveWithinExpression(sibling,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  variable!=  null  ||  isVariableStillLiveWithinExpression(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)||    variable!=    null)    {    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	14	None	replace
139	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	1	None	replace
140	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  VAR))  {  [CE]  cannot  find  symbol  VAR  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  VAR))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable,  VAR))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  VAR	1	None	replace
141	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariABLEStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  illegal  start  of  expression  [FE]    StackOverflowError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariABLEStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariABLEStillLiveWithinExpression(n,  exprRoot,  variable))  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
142	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,  variable),  state);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,  variable),  state);  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,  variable),  state);	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&!VariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  ')'  expected	8	None	replace
143	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling),  variable)  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling),  variable)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling),  variable)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling),    variable)    {    	non-compiled	[CE]  ')'  expected	11	None	replace
144	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling.getType()  ==  Token.CALL  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling),    variable)    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	11	None	replace
145	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(sibling,  variable,  variable))  {  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(sibling,  variable,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableReadBeforeKill(sibling,  variable,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableReadBeforeKill(sibling,    variable))    {    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	12	None	replace
146	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableReadBeforeKill(sibling,  variable))  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableReadBeforeKill(sibling,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableReadBeforeKill(sibling,  variable))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	4	None	replace
147	[BUG]  [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(sibling,  variable))  {  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(sibling,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(sibling!=  null  &&!ControlFlowGraph.isEnteringNewCfgNode(sibling)||  isVariableStillLiveWithinExpression(sibling,  variable))  {	  if(sibling!=    null    &&!ControlFlowGraph.isEnteringNewCfgNode(sibling))    {    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	4	None	replace
148	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  StackOverflowError  	16	63	replace
149	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  sibling!=  exprRoot  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	compilable	  [FE]  StackOverflowError  	16	63	replace
150	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  isVariableReadBeforeKill(sibling,  variable))  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]      StackOverflowError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  isVariableReadBeforeKill(sibling,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable)||  isVariableReadBeforeKill(sibling,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(sibling)&&    isVariableStillLiveWithinExpression(n,    exprRoot,    variable))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	16	None	replace
151	[BUG]  [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.NAME);  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Preconditions.checkState(sibling.getType()  ==  Token.NAME);	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
152	[BUG]  [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.VAR);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.VAR);  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Preconditions.checkState(sibling.getType()  ==  Token.VAR);	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
153	[BUG]  [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.BLOCK);  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Preconditions.checkState(sibling.getType()  ==  Token.BLOCK);	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
154	[BUG]  [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.CALL);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {    [BUGGY]  Preconditions.checkState(sibling.getType()  ==  Token.CALL);  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	295	295	6	replace	Preconditions.checkState(sibling.getType()  ==  Token.CALL);	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
