bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(Node  child  :  n.getFirstChild())  {  for(Node  child  =  n.getLastChild();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  :  n.getFirstChild())  {  for(Node  child  =  n.getLastChild();  }  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  :  n.getFirstChild())  {  for(Node  child  =  n.getLastChild();  }	  for(Node    child    =    n.getLastChild();    for(Node    child    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
2	[BUG]  [BUGGY]  for(Node  child  =  n.getLastChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getLastChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;  }  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getLastChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;  }	  for(Node    child    =    n.getLastChild();    for(Node    child    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	24	None	replace
3	[BUG]  [BUGGY]  For(Node  child  :  n.getFirstChild())  {  for(Node  child  =  n.getLastChild();  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  :  n.getFirstChild())  {  for(Node  child  =  n.getLastChild();  }  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  :  n.getFirstChild())  {  for(Node  child  =  n.getLastChild();  }	  for(Node    child    =    n.getLastChild();    for(Node    child    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	24	None	replace
4	[BUG]  [BUGGY]  for(Node  child  =  n.getLastChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  continue;  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getLastChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  continue;  }  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getLastChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  continue;  }	  for(Node    child    =    n.getLastChild();    for(Node    child    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	24	None	replace
5	[BUG]  [BUGGY]  for(Node  child  =  n.getLastChild();  child!=  null;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getLastChild();  child!=  null;  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getLastChild();  child!=  null;	  for(Node    child    =    n.getLastChild();    for(Node    child    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	24	None	replace
6	[BUG]  [BUGGY]  For  (Node  child  =  n.getChildCount()  -  1;  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For  (Node  child  =  n.getChildCount()  -  1;  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For  (Node  child  =  n.getChildCount()  -  1;	  For    (Node    child    =    n.getChildCount();    	non-compiled	[CE]  ')'  expected	17	None	replace
7	[BUG]  [BUGGY]  For  (Node  child  =  n.getChildCount()  -  2;  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For  (Node  child  =  n.getChildCount()  -  2;  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For  (Node  child  =  n.getChildCount()  -  2;	  For    (Node    child    =    n.getChildCount();    	non-compiled	[CE]  ')'  expected	17	None	replace
8	[BUG]  [BUGGY]  For  (Node  child  =  n.getChildCount()  +  1;  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For  (Node  child  =  n.getChildCount()  +  1;  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For  (Node  child  =  n.getChildCount()  +  1;	  For    (Node    child    =    n.getChildCount();    	non-compiled	[CE]  ')'  expected	17	None	replace
9	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child  =  n.getNext();  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child  =  n.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child  =  n.getNext();	  for(Node    child    =    n.getNext();    Node    n    =    child.getNext();    	non-compiled	[CE]  not  a  statement	6	None	replace
10	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  n  =  child.getNext();  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  n  =  child.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  n  =  child.getNext();	  for(Node    child    =    n.getNext();    Node    n    =    child.getNext();    	non-compiled	[CE]  not  a  statement	6	None	replace
11	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  Node  n  =  child.getNext();  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  Node  n  =  child.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  Node  n  =  child.getNext();	  for(Node    child    =    n.getNext();    Node    n    =    child.getNext();    	non-compiled	[CE]  ';'  expected	6	None	replace
12	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child!=  null?  child.getNext()  :  n.getNext();  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child!=  null?  child.getNext()  :  n.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child!=  null?  child.getNext()  :  n.getNext();	  for(Node    child    =    n.getNext();    Node    n    =    child.getNext();    	non-compiled	[CE]  not  a  statement	6	None	replace
13	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child!=  null  &&  n.getNext().getType()  ==  Token.EXPR_RESULT);  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child!=  null  &&  n.getNext().getType()  ==  Token.EXPR_RESULT);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child!=  null  &&  n.getNext().getType()  ==  Token.EXPR_RESULT);	  for(Node    child    =    n.getNext();    Node    n    =    child.getNext();    	non-compiled	[CE]  ';'  expected	6	None	replace
14	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child!=  null  &&  n.getNext().getType()  ==  Token.NAME);  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child!=  null  &&  n.getNext().getType()  ==  Token.NAME);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child!=  null  &&  n.getNext().getType()  ==  Token.NAME);	  for(Node    child    =    n.getNext();    Node    n    =    child.getNext();    	non-compiled	[CE]  ';'  expected	6	None	replace
15	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION);	  for(Node    child    =    n.getNext();    Node    n    =    child.getNext();    	non-compiled	[CE]  ';'  expected	6	None	replace
16	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child  =  n.getLastChild();  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child  =  n.getLastChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child  =  n.getLastChild();	  for(Node    child    =    n.getLastChild();    Node    child    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	19	None	replace
17	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  Node  child  =  n.getLastChild();  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  Node  child  =  n.getLastChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  Node  child  =  n.getLastChild();	  for(Node    child    =    n.getLastChild();    Node    child    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	19	None	replace
18	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  Child  child  =  n.getLastChild();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  Child  child  =  n.getLastChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  Child  child  =  n.getLastChild();	  for(Node    child    =    n.getLastChild();    Node    child    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	19	None	replace
19	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child  =  n.getFirstChild();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child  =  n.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child  =  n.getFirstChild();	  for(Node    child    =    n.getLastChild();    Node    child    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	19	None	replace
20	[BUG]  [BUGGY]  for(Node  child  =  n.getLastChild();  child  =  n.getFirstChild();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getLastChild();  child  =  n.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getLastChild();  child  =  n.getFirstChild();	  for(Node    child    =    n.getLastChild();    Node    child    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	19	None	replace
21	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  Node  child  =  n.getFirstChild();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  Node  child  =  n.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  Node  child  =  n.getFirstChild();	  for(Node    child    =    n.getLastChild();    Node    child    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	19	None	replace
22	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  Child  child  =  n.getFirstChild();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  Child  child  =  n.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  Child  child  =  n.getFirstChild();	  for(Node    child    =    n.getLastChild();    Node    child    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	19	None	replace
23	[BUG]  [BUGGY]  Node  child  =  n.getParent();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Node  child  =  n.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Node  child  =  n.getParent();	  Node    child    =    n.getNext();    	non-compiled	[CE]  not  a  statement	33	None	replace
24	[BUG]  [BUGGY]  Node  child  =  n.getPrevious();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Node  child  =  n.getPrevious();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Node  child  =  n.getPrevious();	  Node    child    =    n.getNext();    	non-compiled	[CE]  not  a  statement	33	None	replace
25	[BUG]  [BUGGY]  Node  child  =  n.getChildren();  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Node  child  =  n.getChildren();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Node  child  =  n.getChildren();	  Node    child    =    n.getNext();    	non-compiled	[CE]  not  a  statement	33	None	replace
26	[BUG]  [BUGGY]  Node  child  =  n.getCurrentNode();  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Node  child  =  n.getCurrentNode();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Node  child  =  n.getCurrentNode();	  Node    child    =    n.getNext();    	non-compiled	[CE]  not  a  statement	33	None	replace
27	[BUG]  [BUGGY]  for(Node  child  =  n.removeFirstChild();  Node  child  =  n.getFirstChild();  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.removeFirstChild();  Node  child  =  n.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.removeFirstChild();    Node  child  =  n.getFirstChild();	  	non-compiled	[CE]  ';'  expected	41	None	add
28	[BUG]  [BUGGY]  for(Node  child  =  n.removeFirstChild();  Node  child  =  n.removeFirstChild();  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.removeFirstChild();  Node  child  =  n.removeFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.removeFirstChild();    Node  child  =  n.removeFirstChild();	  	non-compiled	[CE]  ';'  expected	41	None	add
29	[BUG]  [BUGGY]  for(Node  child  =  n.removeFirstChild();  for(Node  child  =  n.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.removeFirstChild();  for(Node  child  =  n.removeFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.removeFirstChild();    for(Node  child  =  n.removeFirstChild();	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
30	[BUG]  [BUGGY]  for(Node  child  =  n.removeFirstChild();  Node  child  =  n.getLastChild();  [CE]  ';'  expected  [FE]          RuntimeException    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.removeFirstChild();  Node  child  =  n.getLastChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.removeFirstChild();    Node  child  =  n.getLastChild();	  	non-compiled	[CE]  ';'  expected	41	None	add
31	[BUG]  [BUGGY]  for(Node  child  =  n.removeFirstChild();  Node  parent  =  n.getParent();  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.removeFirstChild();  Node  parent  =  n.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.removeFirstChild();    Node  parent  =  n.getParent();	  	non-compiled	[CE]  ';'  expected	41	None	add
32	[BUG]  [BUGGY]  for(Node  child  =  n.removeFirstChild();  NodeTraversal.traverse(compiler,  n,  this);  [CE]  illegal  start  of  expression  [FE]              RuntimeException    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.removeFirstChild();  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.removeFirstChild();    NodeTraversal.traverse(compiler,  n,  this);	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
33	[BUG]  [BUGGY]  for(Node  child  =  n.removeFirstChild();  NodeTraversal.traverse(compiler,  child,  this);  [CE]  illegal  start  of  expression  [FE]                RuntimeException    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.removeFirstChild();  NodeTraversal.traverse(compiler,  child,  this);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.removeFirstChild();    NodeTraversal.traverse(compiler,  child,  this);	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
34	[BUG]  [BUGGY]  for(Node  child  =  n.removeFirstChild();  Node  child  =  n.getNext();  [CE]  ';'  expected  [FE]                  RuntimeException    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.removeFirstChild();  Node  child  =  n.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.removeFirstChild();    Node  child  =  n.getNext();	  	non-compiled	[CE]  ';'  expected	41	None	add
35	[BUG]  [BUGGY]  for(Node  child  =  n.getParent();  for(Node  child  =  n.getParent();  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getParent();  for(Node  child  =  n.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.getParent();    for(Node  child  =  n.getParent();	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
36	[BUG]  [BUGGY]  for(Node  child  =  n.getParent();  Node  n  =  child.getFirstChild();  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getParent();  Node  n  =  child.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.getParent();    Node  n  =  child.getFirstChild();	  	non-compiled	[CE]  ';'  expected	34	None	add
37	[BUG]  [BUGGY]  for(Node  child  =  n.getParent();  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  ==  return  VariableLiveness.KILL;  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getParent();  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  ==  return  VariableLiveness.KILL;  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.getParent();    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  ==  return  VariableLiveness.KILL;	  	non-compiled	[CE]  ';'  expected	34	None	add
38	[BUG]  [BUGGY]  for(Node  child  =  n.getParent();  Node  n  =  child.getParent();  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getParent();  Node  n  =  child.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.getParent();    Node  n  =  child.getParent();	  	non-compiled	[CE]  ';'  expected	34	None	add
39	[BUG]  [BUGGY]  for(Node  child  =  n.getParent();  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  ==  return  VariableLiveness.KILL);  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getParent();  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  ==  return  VariableLiveness.KILL);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.getParent();    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  ==  return  VariableLiveness.KILL);	  	non-compiled	[CE]  ';'  expected	34	None	add
40	[BUG]  [BUGGY]  for(Node  child  =  n.getParent();  junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getType()  ==  Token.NAME);  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getParent();  junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getType()  ==  Token.NAME);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.getParent();    junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getType()  ==  Token.NAME);	  	non-compiled	[CE]  ';'  expected	34	None	add
41	[BUG]  [BUGGY]  for(Node  child  =  n.getParent();  Node  child  =  n.getParent();  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getParent();  Node  child  =  n.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.getParent();    Node  child  =  n.getParent();	  	non-compiled	[CE]  ';'  expected	34	None	add
42	[BUG]  [BUGGY]  for(Node  child  =  n.getParent();  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1!=  return  VariableLiveness.KILL;  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getParent();  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1!=  return  VariableLiveness.KILL;  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.getParent();    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1!=  return  VariableLiveness.KILL;	  	non-compiled	[CE]  ';'  expected	34	None	add
43	[BUG]  [BUGGY]  for(Node  child  =  this.n.getChildren();  [CE]  cannot  find  symbol  n  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  this.n.getChildren();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  this.n.getChildren();	  for(Node    child    =    n.getChildren();    	non-compiled	[CE]  cannot  find  symbol  n	3	None	replace
44	[BUG]  [BUGGY]  For(Node  child  =  n.getChildren();  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  n.getChildren();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getChildren();	  for(Node    child    =    n.getChildren();    	non-compiled	[CE]  ')'  expected	3	None	replace
45	[BUG]  [BUGGY]  for(Node  child  :  n.getChildren();  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  :  n.getChildren();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  :  n.getChildren();	  for(Node    child    =    n.getChildren();    	non-compiled	[CE]  ')'  expected	3	None	replace
46	[BUG]  [BUGGY]  for(Node  child  =  n.getAssignments();  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getAssignments();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getAssignments();	  for(Node    child    =    n.getChildren();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
47	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child  =  n.getParent();  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child  =  n.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child  =  n.getParent();	  for(Node    child    =    n.getNext();    Node    child    =    n.getParent();    	non-compiled	[CE]  not  a  statement	39	None	replace
48	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child  =  n.getNext();  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child  =  n.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child  =  n.getNext();	  for(Node    child    =    n.getNext();    Node    child    =    n.getParent();    	non-compiled	[CE]  not  a  statement	39	None	replace
49	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child  =  n.getParent();  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child  =  n.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child  =  n.getParent();	  for(Node    child    =    n.getNext();    Node    child    =    n.getParent();    	non-compiled	[CE]  not  a  statement	39	None	replace
50	[BUG]  [BUGGY]  for(Node  child  =  n.getChildCount();  child  =  n.getParent();  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getChildCount();  child  =  n.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getChildCount();  child  =  n.getParent();	  for(Node    child    =    n.getNext();    Node    child    =    n.getParent();    	non-compiled	[CE]  not  a  statement	39	None	replace
51	[BUG]  [BUGGY]  For(Node  child  =  n.getFirstChild();  child  =  n.getParent();  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  n.getFirstChild();  child  =  n.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getFirstChild();  child  =  n.getParent();	  for(Node    child    =    n.getNext();    Node    child    =    n.getParent();    	non-compiled	[CE]  ')'  expected	39	None	replace
52	[BUG]  [BUGGY]  for(Node  child  =  n.getCurrentNode();  child  =  n.getParent();  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getCurrentNode();  child  =  n.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getCurrentNode();  child  =  n.getParent();	  for(Node    child    =    n.getNext();    Node    child    =    n.getParent();    	non-compiled	[CE]  not  a  statement	39	None	replace
53	[BUG]  [BUGGY]  for(Node  child  =  n.cloneTree();  Node  child  =  n.cloneTree();  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.cloneTree();  Node  child  =  n.cloneTree();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.cloneTree();    Node  child  =  n.cloneTree();	  	non-compiled	[CE]  ';'  expected	54	None	add
54	[BUG]  [BUGGY]  for(Node  child  =  n.cloneTree();  for(Node  child  =  n.cloneTree();  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.cloneTree();  for(Node  child  =  n.cloneTree();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.cloneTree();    for(Node  child  =  n.cloneTree();	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
55	[BUG]  [BUGGY]  for(Node  child  =  n.cloneTree();  Node  n  =  child.getNext();  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.cloneTree();  Node  n  =  child.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.cloneTree();    Node  n  =  child.getNext();	  	non-compiled	[CE]  ';'  expected	54	None	add
56	[BUG]  [BUGGY]  for(Node  child  =  n.cloneTree();  NodeTraversal.traverse(compiler,  n,  this);  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.cloneTree();  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.cloneTree();    NodeTraversal.traverse(compiler,  n,  this);	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
57	[BUG]  [BUGGY]  for(Node  child  =  n.cloneTree();  Node  n  =  child.getFirstChild();  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.cloneTree();  Node  n  =  child.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.cloneTree();    Node  n  =  child.getFirstChild();	  	non-compiled	[CE]  ';'  expected	54	None	add
58	[BUG]  [BUGGY]  for(Node  child  =  n.cloneTree();  NodeTraversal.traverse(compiler,  child,  this);  [CE]  illegal  start  of  expression  [FE]              RuntimeException    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.cloneTree();  NodeTraversal.traverse(compiler,  child,  this);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.cloneTree();    NodeTraversal.traverse(compiler,  child,  this);	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
59	[BUG]  [BUGGY]  for(Node  child  =  n.cloneTree();  Node  child  =  n.getNext();  [CE]  ';'  expected  [FE]                RuntimeException    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.cloneTree();  Node  child  =  n.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.cloneTree();    Node  child  =  n.getNext();	  	non-compiled	[CE]  ';'  expected	54	None	add
60	[BUG]  [BUGGY]  for(Node  child  =  n.cloneTree();  Node  parent  =  child.getParent();  [CE]  ';'  expected  [FE]                  RuntimeException    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.cloneTree();  Node  parent  =  child.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.cloneTree();    Node  parent  =  child.getParent();	  	non-compiled	[CE]  ';'  expected	54	None	add
61	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  not  a  statement	28	None	replace
62	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  not  a  statement	28	None	replace
63	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MAYBE_LIVE);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MAYBE_LIVE);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MAYBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  not  a  statement	28	None	replace
64	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  not  a  statement	28	None	replace
65	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  not  a  statement	28	None	replace
66	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  n.getLastChild();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Predicate  matchRemovableAssigns  =  n.getLastChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Predicate  matchRemovableAssigns  =  n.getLastChild();	  Predicate    matchRemovableAssigns    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	31	None	replace
67	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  state.getFirstChild();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Predicate  matchRemovableAssigns  =  state.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Predicate  matchRemovableAssigns  =  state.getFirstChild();	  Predicate    matchRemovableAssigns    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	31	None	replace
68	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  n.getChildCount();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Predicate  matchRemovableAssigns  =  n.getChildCount();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Predicate  matchRemovableAssigns  =  n.getChildCount();	  Predicate    matchRemovableAssigns    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	31	None	replace
69	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  n.getNext();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Predicate  matchRemovableAssigns  =  n.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Predicate  matchRemovableAssigns  =  n.getNext();	  Predicate    matchRemovableAssigns    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	31	None	replace
70	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  child.getFirstChild();  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Predicate  matchRemovableAssigns  =  child.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Predicate  matchRemovableAssigns  =  child.getFirstChild();	  Predicate    matchRemovableAssigns    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	31	None	replace
71	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  n.getParent();  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Predicate  matchRemovableAssigns  =  n.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Predicate  matchRemovableAssigns  =  n.getParent();	  Predicate    matchRemovableAssigns    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	31	None	replace
72	[BUG]  [BUGGY]  for(Node  child  =  n.getType();  [CE]  incompatible  types  [FE]    RuntimeException    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getType();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getType();	  for(Node    child    =    n.cloneTree();    	non-compiled	[CE]  incompatible  types	55	None	replace
73	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;)  {  for(Node  child  =  child.getLastChild();  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;)  {  for(Node  child  =  child.getLastChild();  }  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child!=  null;)  {  for(Node  child  =  child.getLastChild();  }	  for(Node    child    =    n.getLastChild();    Node    n    =    child.getFirstChild();    for(Node    child    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
74	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  for(Node  child  =  n.getLastChild();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  for(Node  child  =  n.getLastChild();  }  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  for(Node  child  =  n.getLastChild();  }	  for(Node    child    =    n.getLastChild();    Node    n    =    child.getFirstChild();    for(Node    child    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
75	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;)  {  for(Node  child  =  n.getLastChild();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;)  {  for(Node  child  =  n.getLastChild();  }  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child!=  null;)  {  for(Node  child  =  n.getLastChild();  }	  for(Node    child    =    n.getLastChild();    Node    n    =    child.getFirstChild();    for(Node    child    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
76	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getLastChild());  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getLastChild());  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getLastChild());	  for(Node    child    =    n.getLastChild();    Node    n    =    child.getFirstChild();    for(Node    child    =    n.getLastChild();    	non-compiled	[CE]  not  a  statement	46	None	replace
77	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getLastChild())  {  for(Node  child  =  n.getLastChild();  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getLastChild())  {  for(Node  child  =  n.getLastChild();  }  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getLastChild())  {  for(Node  child  =  n.getLastChild();  }	  for(Node    child    =    n.getLastChild();    Node    n    =    child.getFirstChild();    for(Node    child    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
78	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  for(Node  child  =  child.getLastChild();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  for(Node  child  =  child.getLastChild();  }  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  for(Node  child  =  child.getLastChild();  }	  for(Node    child    =    n.getLastChild();    Node    n    =    child.getFirstChild();    for(Node    child    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
79	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child!=  null;	  for(Node    child    =    n.getLastChild();    for(Node    child    =    n.getLastChild();    	non-compiled	[CE]  not  a  statement	20	None	replace
80	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getLastChild();  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getLastChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getLastChild();	  for(Node    child    =    n.getLastChild();    for(Node    child    =    n.getLastChild();    	non-compiled	[CE]  ')'  expected	20	None	replace
81	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child  ==  null;  child  =  child.getLastChild());  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child  ==  null;  child  =  child.getLastChild());  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child  ==  null;  child  =  child.getLastChild());	  for(Node    child    =    n.getLastChild();    for(Node    child    =    n.getLastChild();    	non-compiled	[CE]  not  a  statement	20	None	replace
82	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child  =  n.getFirstChild();  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child  =  n.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child  =  n.getFirstChild();	  for(Node    child    =    n.getNext();    Node    child    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	37	None	replace
83	[BUG]  [BUGGY]  for(Node  child  =  n.getChildCount();  child  =  n.getFirstChild();  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getChildCount();  child  =  n.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getChildCount();  child  =  n.getFirstChild();	  for(Node    child    =    n.getNext();    Node    child    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	37	None	replace
84	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child  =  n.getLastChild();  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child  =  n.getLastChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child  =  n.getLastChild();	  for(Node    child    =    n.getNext();    Node    child    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	37	None	replace
85	[BUG]  [BUGGY]  for(Node  child  =  n.getParent();  child  =  n.getFirstChild();  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getParent();  child  =  n.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getParent();  child  =  n.getFirstChild();	  for(Node    child    =    n.getNext();    Node    child    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	37	None	replace
86	[BUG]  [BUGGY]  For(Node  child  =  n.getFirstChild();  child!=  null;  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  n.getFirstChild();  child!=  null;  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getFirstChild();  child!=  null;	  for(Node    child    =    n.getNext();    Node    child    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	37	None	replace
87	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child  <  n.getNext();  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child  <  n.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child  <  n.getNext();	  for(Node    child    =    n.getNext();    Node    child    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	37	None	replace
88	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child!=  null?  child.getFirstChild()  :  n.getFirstChild();  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child!=  null?  child.getFirstChild()  :  n.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child!=  null?  child.getFirstChild()  :  n.getFirstChild();	  for(Node    child    =    n.getNext();    Node    n    =    child.getFirstChild();    	non-compiled	[CE]  not  a  statement	7	None	replace
89	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child!=  null  &&  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child!=  null  &&  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child!=  null  &&  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);	  for(Node    child    =    n.getNext();    Node    n    =    child.getFirstChild();    	non-compiled	[CE]  ';'  expected	7	None	replace
90	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child!=  null  &&  n.getFirstChild().getType()  ==  Token.NAME);  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child!=  null  &&  n.getFirstChild().getType()  ==  Token.NAME);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child!=  null  &&  n.getFirstChild().getType()  ==  Token.NAME);	  for(Node    child    =    n.getNext();    Node    n    =    child.getFirstChild();    	non-compiled	[CE]  ';'  expected	7	None	replace
91	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION);	  for(Node    child    =    n.getNext();    Node    n    =    child.getFirstChild();    	non-compiled	[CE]  ';'  expected	7	None	replace
92	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext();  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext();	  for(Node    child    =    n.getNext();    for(Node    child    =    n.getNext();    	non-compiled	[CE]  ')'  expected	5	None	replace
93	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext());  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext());  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext());	  for(Node    child    =    n.getNext();    for(Node    child    =    n.getNext();    	non-compiled	[CE]  not  a  statement	5	None	replace
94	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {	  for(Node    child    =    n.getNext();    for(Node    child    =    n.getNext();    	non-compiled	[CE]  not  a  statement	5	None	replace
95	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  Node  parent  =  child.getParent();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  Node  parent  =  child.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  Node  parent  =  child.getParent();	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    	non-compiled	[CE]  ';'  expected	26	None	replace
96	[BUG]  [BUGGY]  For(Node  child  =  n.getFirstChild();  Node  parent  =  child.getParent();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  n.getFirstChild();  Node  parent  =  child.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getFirstChild();  Node  parent  =  child.getParent();	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    	non-compiled	[CE]  ')'  expected	26	None	replace
97	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  Node  parent  =  child.getNext();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  Node  parent  =  child.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  Node  parent  =  child.getNext();	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    	non-compiled	[CE]  ';'  expected	26	None	replace
98	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  node  =  parent.getParent();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  node  =  parent.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  node  =  parent.getParent();	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    	non-compiled	[CE]  not  a  statement	26	None	replace
99	[BUG]  [BUGGY]  Node  child  =  n.getFirstChild();  Node  parent  =  child.getParent();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Node  child  =  n.getFirstChild();  Node  parent  =  child.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Node  child  =  n.getFirstChild();  Node  parent  =  child.getParent();	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    	non-compiled	[CE]  not  a  statement	26	None	replace
100	[BUG]  [BUGGY]  for(Node  child  =  n.getChildCount()  -  1;  [CE]  incompatible  types  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getChildCount()  -  1;  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getChildCount()  -  1;	  for(Node    child    =    n.getChildCount();    	non-compiled	[CE]  incompatible  types	1	None	replace
101	[BUG]  [BUGGY]  for(Node  child  =  n.getChildCount()  -  2;  [CE]  incompatible  types  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getChildCount()  -  2;  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getChildCount()  -  2;	  for(Node    child    =    n.getChildCount();    	non-compiled	[CE]  incompatible  types	1	None	replace
102	[BUG]  [BUGGY]  for(Node  child  :  n.getChildCount(),  variable;  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  :  n.getChildCount(),  variable;  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  :  n.getChildCount(),  variable;	  for(Node    child    =    n.getChildCount();    	non-compiled	[CE]  ')'  expected	1	None	replace
103	[BUG]  [BUGGY]  for(Node  child  :  n.getChildCount(),  variable);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  :  n.getChildCount(),  variable);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  :  n.getChildCount(),  variable);	  for(Node    child    =    n.getChildCount();    	non-compiled	[CE]  ')'  expected	1	None	replace
104	[BUG]  [BUGGY]  For(Node  child  =  n.getLastChild().getNext();  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  n.getLastChild().getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getLastChild().getNext();	  For(Node    child    =    n.getFirstChild().getNext();    	non-compiled	[CE]  ')'  expected	53	None	replace
105	[BUG]  [BUGGY]  For(Node  child  =  n.getFirstChild().getNext(),  variable);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  n.getFirstChild().getNext(),  variable);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getFirstChild().getNext(),  variable);	  For(Node    child    =    n.getFirstChild().getNext();    	non-compiled	[CE]  ')'  expected	53	None	replace
106	[BUG]  [BUGGY]  For(Node  child  =  n.getFirstChild().getNext()  +  1;  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  n.getFirstChild().getNext()  +  1;  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getFirstChild().getNext()  +  1;	  For(Node    child    =    n.getFirstChild().getNext();    	non-compiled	[CE]  ')'  expected	53	None	replace
107	[BUG]  [BUGGY]  For(Node  child  =  n.getFirstChild().getParent();  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  n.getFirstChild().getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getFirstChild().getParent();	  For(Node    child    =    n.getFirstChild().getNext();    	non-compiled	[CE]  ')'  expected	53	None	replace
108	[BUG]  [BUGGY]  For(Node  child  =  n.getFirstChild().getNext()  ||  variable.equals(n.getString()));  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  n.getFirstChild().getNext()  ||  variable.equals(n.getString()));  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getFirstChild().getNext()  ||  variable.equals(n.getString()));	  For(Node    child    =    n.getFirstChild().getNext();    	non-compiled	[CE]  ')'  expected	53	None	replace
109	[BUG]  [BUGGY]  for(Node  child  =  this.assignmentsElimination.getFirstChild();  [CE]  cannot  find  symbol  assignmentsElimination  [FE]          AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  this.assignmentsElimination.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  this.assignmentsElimination.getFirstChild();	  for(Node    child    =    this.n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  assignmentsElimination	14	None	replace
110	[BUG]  [BUGGY]  for(Node  child  =  this.assignments.getFirstChild();  [CE]  cannot  find  symbol  assignments  [FE]            AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  this.assignments.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  this.assignments.getFirstChild();	  for(Node    child    =    this.n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  assignments	14	None	replace
111	[BUG]  [BUGGY]  for(Node  child  =  this.symbol.getFirstChild();  [CE]  cannot  find  symbol  symbol  [FE]              AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  this.symbol.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  this.symbol.getFirstChild();	  for(Node    child    =    this.n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  symbol	14	None	replace
112	[BUG]  [BUGGY]  for(Node  child  =  this.assignment.getFirstChild();  [CE]  cannot  find  symbol  assignment  [FE]                AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  this.assignment.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  this.assignment.getFirstChild();	  for(Node    child    =    this.n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  assignment	14	None	replace
113	[BUG]  [BUGGY]  for(Node  child  =  this.mv.getFirstChild();  [CE]  cannot  find  symbol  mv  [FE]                  AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  this.mv.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  this.mv.getFirstChild();	  for(Node    child    =    this.n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  mv	14	None	replace
114	[BUG]  [BUGGY]  Node  child  =  n.getPreviousChild();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Node  child  =  n.getPreviousChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Node  child  =  n.getPreviousChild();	  Node    child    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	27	None	replace
115	[BUG]  [BUGGY]  Node  child  =  n.getAncestor(1);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Node  child  =  n.getAncestor(1);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Node  child  =  n.getAncestor(1);	  Node    child    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	27	None	replace
116	[BUG]  [BUGGY]  Node  child  =  state.getFirstChild();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Node  child  =  state.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Node  child  =  state.getFirstChild();	  Node    child    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	27	None	replace
117	[BUG]  [BUGGY]  for(Node  child  =  n.getLastChild();  child!=  null;  child  =  child.getNext())  {  for(Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getLastChild();  child!=  null;  child  =  child.getNext())  {  for(Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  }  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getLastChild();  child!=  null;  child  =  child.getNext())  {  for(Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  }	  for(Node    child    =    n.getLastChild();    Node    parent    =    n.getParent();    for(Node    child    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
118	[BUG]  [BUGGY]  for(Node  child  =  parent.getLastChild();  child!=  null;)  {  for(Node  parent  =  n.getParent();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  parent.getLastChild();  child!=  null;)  {  for(Node  parent  =  n.getParent();  }  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  parent.getLastChild();  child!=  null;)  {  for(Node  parent  =  n.getParent();  }	  for(Node    child    =    n.getLastChild();    Node    parent    =    n.getParent();    for(Node    child    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
119	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]              AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	add	Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();	  for(Node    child    =    n.getLastChild();    Node    parent    =    n.getParent();    for(Node    child    =    parent.getFirstChild();    	compilable	  [FE]  StackOverflowError  	47	63	replace
120	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  [FE]  StackOverflowError  [FE]              AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();	  for(Node    child    =    n.getLastChild();    Node    parent    =    n.getParent();    for(Node    child    =    parent.getFirstChild();    	compilable	  [FE]  StackOverflowError  	47	63	replace
121	[BUG]  [BUGGY]  for(Node  child  =  parent.getLastChild();  child!=  null;  child  =  child.getNext())  {  for(Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  parent.getLastChild();  child!=  null;  child  =  child.getNext())  {  for(Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  }  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  parent.getLastChild();  child!=  null;  child  =  child.getNext())  {  for(Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  }	  for(Node    child    =    n.getLastChild();    Node    parent    =    n.getParent();    for(Node    child    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
122	[BUG]  [BUGGY]  for(Node  child  =  n.getLastChild();  child!=  null;  child  =  child.getNext())  {  for(Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getLastChild();  child!=  null;  child  =  child.getNext())  {  for(Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getLastChild();  child!=  null;  child  =  child.getNext())  {  for(Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();	  for(Node    child    =    n.getLastChild();    Node    parent    =    n.getParent();    for(Node    child    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
123	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  return  state;  }  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  return  state;  }  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  return  state;  }	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    for(Node    child    =    parent.getFirstChild();    child!=    null;    child    =    child.getNext())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable))    {    return    state;    }    	non-compiled	[CE]  not  a  statement	49	None	replace
124	[BUG]  [BUGGY]  For(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  return  state;  }  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  return  state;  }  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  return  state;  }	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    for(Node    child    =    parent.getFirstChild();    child!=    null;    child    =    child.getNext())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable))    {    return    state;    }    	non-compiled	[CE]  ')'  expected	49	None	replace
125	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  return  state;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  return  state;  }  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  return  state;  }	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    for(Node    child    =    parent.getFirstChild();    child!=    null;    child    =    child.getNext())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable))    {    return    state;    }    	non-compiled	[CE]  not  a  statement	49	None	replace
126	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(parent,  variable))  {  return  state;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(parent,  variable))  {  return  state;  }  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(parent,  variable))  {  return  state;  }	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    for(Node    child    =    parent.getFirstChild();    child!=    null;    child    =    child.getNext())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable))    {    return    state;    }    	non-compiled	[CE]  not  a  statement	49	None	replace
127	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  return  state  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  return  state  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  return  state	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    for(Node    child    =    parent.getFirstChild();    child!=    null;    child    =    child.getNext())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable))    {    return    state;    }    	non-compiled	[CE]  ';'  expected	49	None	replace
128	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  return  state  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  return  state  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  return  state	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    for(Node    child    =    parent.getFirstChild();    child!=    null;    child    =    child.getNext())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable))    {    return    state;    }    	non-compiled	[CE]  ';'  expected	49	None	replace
129	[BUG]  [BUGGY]  for(Node  child  =  n.firstChild();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.firstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.firstChild();	  for(Node    child    =    n.getfirstChild();    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
130	[BUG]  [BUGGY]  For(Node  child  =  n.getLastChild(),  variable);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  n.getLastChild(),  variable);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getLastChild(),  variable);	  For(Node    child    =    n.getFirstChild(),    variable);    	non-compiled	[CE]  ')'  expected	18	None	replace
131	[BUG]  [BUGGY]  For(Node  child  =  n.getFirstChild(),  variable  +  1);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  n.getFirstChild(),  variable  +  1);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getFirstChild(),  variable  +  1);	  For(Node    child    =    n.getFirstChild(),    variable);    	non-compiled	[CE]  ')'  expected	18	None	replace
132	[BUG]  [BUGGY]  For(Node  child  =  n.getFirstChild(),  variable,  state);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  n.getFirstChild(),  variable,  state);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getFirstChild(),  variable,  state);	  For(Node    child    =    n.getFirstChild(),    variable);    	non-compiled	[CE]  ')'  expected	18	None	replace
133	[BUG]  [BUGGY]  For(Node  child  =  n.getFirstChild(),  variable),  state);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  n.getFirstChild(),  variable),  state);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getFirstChild(),  variable),  state);	  For(Node    child    =    n.getFirstChild(),    variable);    	non-compiled	[CE]  ')'  expected	18	None	replace
134	[BUG]  [BUGGY]  For(Node  child  =  n.getFirstChild(),  variable,  VAR_LIVE);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  n.getFirstChild(),  variable,  VAR_LIVE);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getFirstChild(),  variable,  VAR_LIVE);	  For(Node    child    =    n.getFirstChild(),    variable);    	non-compiled	[CE]  ')'  expected	18	None	replace
135	[BUG]  [BUGGY]  For(Node  child  =  n.getNext(),  variable);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  n.getNext(),  variable);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getNext(),  variable);	  For(Node    child    =    n.getFirstChild(),    variable);    	non-compiled	[CE]  ')'  expected	18	None	replace
136	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  NodeTraversal.traverse(compiler,  n,  variable);  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  NodeTraversal.traverse(compiler,  n,  variable);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  NodeTraversal.traverse(compiler,  n,  variable);	  for(Node    child    =    n.getNext();    NodeTraversal.traverse(compiler,    n,    variable);    	non-compiled	[CE]  not  a  statement	12	None	replace
137	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  NodeTraversal.traverse(compiler,  n,  KILL);  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  NodeTraversal.traverse(compiler,  n,  KILL);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  NodeTraversal.traverse(compiler,  n,  KILL);	  for(Node    child    =    n.getNext();    NodeTraversal.traverse(compiler,    n,    variable);    	non-compiled	[CE]  not  a  statement	12	None	replace
138	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  NodeTraversal.traverse(compiler,  n,  state);  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  NodeTraversal.traverse(compiler,  n,  state);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  NodeTraversal.traverse(compiler,  n,  state);	  for(Node    child    =    n.getNext();    NodeTraversal.traverse(compiler,    n,    variable);    	non-compiled	[CE]  not  a  statement	12	None	replace
139	[BUG]  [BUGGY]  For(Node  child  =  n.getFirstChild();  NodeTraversal.traverse(compiler,  n,  variable);  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  n.getFirstChild();  NodeTraversal.traverse(compiler,  n,  variable);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getFirstChild();  NodeTraversal.traverse(compiler,  n,  variable);	  for(Node    child    =    n.getNext();    NodeTraversal.traverse(compiler,    n,    variable);    	non-compiled	[CE]  ')'  expected	12	None	replace
140	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  NodeTraversal.traverse(compiler,  n,  this.variable);  [CE]  not  a  statement  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  NodeTraversal.traverse(compiler,  n,  this.variable);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  NodeTraversal.traverse(compiler,  n,  this.variable);	  for(Node    child    =    n.getNext();    NodeTraversal.traverse(compiler,    n,    variable);    	non-compiled	[CE]  not  a  statement	12	None	replace
141	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  NodeTraversal.traverse(compiler,  n,  parameter);  [CE]  not  a  statement  [FE]                                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  NodeTraversal.traverse(compiler,  n,  parameter);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  NodeTraversal.traverse(compiler,  n,  parameter);	  for(Node    child    =    n.getNext();    NodeTraversal.traverse(compiler,    n,    variable);    	non-compiled	[CE]  not  a  statement	12	None	replace
142	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  NodeTraversal.traverse(compiler,  n,  variable,  null);  [CE]  not  a  statement  [FE]                                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  NodeTraversal.traverse(compiler,  n,  variable,  null);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  NodeTraversal.traverse(compiler,  n,  variable,  null);	  for(Node    child    =    n.getNext();    NodeTraversal.traverse(compiler,    n,    variable);    	non-compiled	[CE]  not  a  statement	12	None	replace
143	[BUG]  [BUGGY]  For(Node  child  =  n.getFirstChild();  child  =  n.getLastChild();  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  n.getFirstChild();  child  =  n.getLastChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getFirstChild();  child  =  n.getLastChild();	  for(Node    child    =    n.getLastChild();    Node    child    =    n.getLastChild();    	non-compiled	[CE]  ')'  expected	21	None	replace
144	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);	  for(Node    child    =    n.getLastChild();    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  ';'  expected	25	None	replace
145	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  state  =  isVariableReadBeforeKill(child,  variable);	  for(Node    child    =    n.getLastChild();    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  not  a  statement	25	None	replace
146	[BUG]  [BUGGY]  For(Node  child  =  n.getFirstChild();  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  n.getFirstChild();  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getFirstChild();  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);	  for(Node    child    =    n.getLastChild();    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  ')'  expected	25	None	replace
147	[BUG]  [BUGGY]  for(VariableLiveness  child  =  n.getFirstChild();  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(VariableLiveness  child  =  n.getFirstChild();  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(VariableLiveness  child  =  n.getFirstChild();  state  =  isVariableReadBeforeKill(child,  variable);	  for(Node    child    =    n.getLastChild();    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  not  a  statement	25	None	replace
148	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  variable  =  isVariableReadBeforeKill(child,  variable);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  variable  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  variable  =  isVariableReadBeforeKill(child,  variable);	  for(Node    child    =    n.getLastChild();    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  not  a  statement	25	None	replace
149	[BUG]  [BUGGY]  for(VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  cannot  find  symbol  child  [FE]                              AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);	  for(Node    child    =    n.getLastChild();    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  child	25	None	replace
150	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  State  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  State  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  State  state  =  isVariableReadBeforeKill(child,  variable);	  for(Node    child    =    n.getLastChild();    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  ';'  expected	25	None	replace
151	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  Node  next  =  child.getNext();  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  Node  next  =  child.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  Node  next  =  child.getNext();	  for(Node    child    =    n.getNext();    Node    next    =    child.getNext();    	non-compiled	[CE]  ';'  expected	40	None	replace
152	[BUG]  [BUGGY]  for(Node  child  =  n.getChildCount();  Node  next  =  child.getNext();  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getChildCount();  Node  next  =  child.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getChildCount();  Node  next  =  child.getNext();	  for(Node    child    =    n.getNext();    Node    next    =    child.getNext();    	non-compiled	[CE]  ';'  expected	40	None	replace
153	[BUG]  [BUGGY]  for(Node  child  =  n.getParent();  Node  next  =  child.getNext();  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getParent();  Node  next  =  child.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getParent();  Node  next  =  child.getNext();	  for(Node    child    =    n.getNext();    Node    next    =    child.getNext();    	non-compiled	[CE]  ';'  expected	40	None	replace
154	[BUG]  [BUGGY]  for(Node  child  =  n.getChildren();  Node  next  =  child.getNext();  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getChildren();  Node  next  =  child.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getChildren();  Node  next  =  child.getNext();	  for(Node    child    =    n.getNext();    Node    next    =    child.getNext();    	non-compiled	[CE]  ';'  expected	40	None	replace
155	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  node  =  child.getNext();  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  node  =  child.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  node  =  child.getNext();	  for(Node    child    =    n.getNext();    Node    next    =    child.getNext();    	non-compiled	[CE]  not  a  statement	40	None	replace
156	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child  =  next.getNext();  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child  =  next.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child  =  next.getNext();	  for(Node    child    =    n.getNext();    Node    next    =    child.getNext();    	non-compiled	[CE]  not  a  statement	40	None	replace
157	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;  }  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;  }  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;  }	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    for(Node    child    =    parent.getFirstChild();    child!=    null;    child    =    child.getNext())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    return    state;    }    	non-compiled	[CE]  not  a  statement	48	None	replace
158	[BUG]  [BUGGY]  For(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;  }  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;  }  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;  }	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    for(Node    child    =    parent.getFirstChild();    child!=    null;    child    =    child.getNext())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    return    state;    }    	non-compiled	[CE]  ')'  expected	48	None	replace
159	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(parent))  {  return  state;  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(parent))  {  return  state;  }  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(parent))  {  return  state;  }	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    for(Node    child    =    parent.getFirstChild();    child!=    null;    child    =    child.getNext())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    return    state;    }    	non-compiled	[CE]  not  a  statement	48	None	replace
160	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;  }  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;  }	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    for(Node    child    =    parent.getFirstChild();    child!=    null;    child    =    child.getNext())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    return    state;    }    	non-compiled	[CE]  not  a  statement	48	None	replace
161	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    for(Node    child    =    parent.getFirstChild();    child!=    null;    child    =    child.getNext())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    return    state;    }    	non-compiled	[CE]  ';'  expected	48	None	replace
162	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(parent))  {  return  state;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(parent))  {  return  state;  }  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(parent))  {  return  state;  }	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    for(Node    child    =    parent.getFirstChild();    child!=    null;    child    =    child.getNext())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    return    state;    }    	non-compiled	[CE]  not  a  statement	48	None	replace
163	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  For(Node  child  =  n.getNext();  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  For(Node  child  =  n.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  For(Node  child  =  n.getNext();	  for(Node    child    =    n.getNext();    For(Node    child    =    n.getNext();    	non-compiled	[CE]  ')'  expected	11	None	replace
164	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  Child  child  =  n.getNext();  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  Child  child  =  n.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  Child  child  =  n.getNext();	  for(Node    child    =    n.getNext();    For(Node    child    =    n.getNext();    	non-compiled	[CE]  ';'  expected	11	None	replace
165	[BUG]  [BUGGY]  for(Node  child  =  n.getCurrentNode();  For(Node  child  =  n.getNext();  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getCurrentNode();  For(Node  child  =  n.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getCurrentNode();  For(Node  child  =  n.getNext();	  for(Node    child    =    n.getNext();    For(Node    child    =    n.getNext();    	non-compiled	[CE]  ')'  expected	11	None	replace
166	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  Child  child  =  n.getNext();  [CE]  ';'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  Child  child  =  n.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  Child  child  =  n.getNext();	  for(Node    child    =    n.getNext();    For(Node    child    =    n.getNext();    	non-compiled	[CE]  ';'  expected	11	None	replace
167	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  Child  child  =  child.getNext();  [CE]  ';'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  Child  child  =  child.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  Child  child  =  child.getNext();	  for(Node    child    =    n.getNext();    For(Node    child    =    n.getNext();    	non-compiled	[CE]  ';'  expected	11	None	replace
168	[BUG]  [BUGGY]  for(Node  child  =  n.getChildCount();  Node  parent  =  child.getParent();  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getChildCount();  Node  parent  =  child.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getChildCount();  Node  parent  =  child.getParent();	  for(Node    child    =    n.getNext();    Node    parent    =    child.getParent();    	non-compiled	[CE]  ';'  expected	36	None	replace
169	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child!=  null  &&  child.getParent().getType()  ==  Token.EXPR_RESULT)  {  parent  =  child.getParent();  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child!=  null  &&  child.getParent().getType()  ==  Token.EXPR_RESULT)  {  parent  =  child.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child!=  null  &&  child.getParent().getType()  ==  Token.EXPR_RESULT)  {  parent  =  child.getParent();	  for(Node    child    =    n.getNext();    Node    parent    =    child.getParent();    	non-compiled	[CE]  ';'  expected	36	None	replace
170	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child!=  null  &&  child.getParent().getType()  ==  Token.EXPR_RESULT)  {  parent  =  child.getParent();  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child!=  null  &&  child.getParent().getType()  ==  Token.EXPR_RESULT)  {  parent  =  child.getParent();  }  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child!=  null  &&  child.getParent().getType()  ==  Token.EXPR_RESULT)  {  parent  =  child.getParent();  }	  for(Node    child    =    n.getNext();    Node    parent    =    child.getParent();    	non-compiled	[CE]  ';'  expected	36	None	replace
171	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child!=  null  &&  child.getParent().getType()  ==  Token.EXPR_RESULT)  {  Node  parent  =  child.getParent();  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child!=  null  &&  child.getParent().getType()  ==  Token.EXPR_RESULT)  {  Node  parent  =  child.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child!=  null  &&  child.getParent().getType()  ==  Token.EXPR_RESULT)  {  Node  parent  =  child.getParent();	  for(Node    child    =    n.getNext();    Node    parent    =    child.getParent();    	non-compiled	[CE]  ';'  expected	36	None	replace
172	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child!=  null  &&  child.getParent().getType()  ==  Token.FUNCTION)  {  Node  parent  =  child.getParent();  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child!=  null  &&  child.getParent().getType()  ==  Token.FUNCTION)  {  Node  parent  =  child.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child!=  null  &&  child.getParent().getType()  ==  Token.FUNCTION)  {  Node  parent  =  child.getParent();	  for(Node    child    =    n.getNext();    Node    parent    =    child.getParent();    	non-compiled	[CE]  ';'  expected	36	None	replace
173	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  continue;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  continue;  }  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  continue;  }	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    for(Node    child    =    parent.getFirstChild();    child!=    null;    child    =    child.getNext())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    continue;    }    	non-compiled	[CE]  not  a  statement	51	None	replace
174	[BUG]  [BUGGY]  For(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  continue;  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  continue;  }  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  continue;  }	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    for(Node    child    =    parent.getFirstChild();    child!=    null;    child    =    child.getNext())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    continue;    }    	non-compiled	[CE]  ')'  expected	51	None	replace
175	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(parent))  {  continue;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(parent))  {  continue;  }  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(parent))  {  continue;  }	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    for(Node    child    =    parent.getFirstChild();    child!=    null;    child    =    child.getNext())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    continue;    }    	non-compiled	[CE]  not  a  statement	51	None	replace
176	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  continue;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  continue;  }  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  continue;  }	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    for(Node    child    =    parent.getFirstChild();    child!=    null;    child    =    child.getNext())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    continue;    }    	non-compiled	[CE]  not  a  statement	51	None	replace
177	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  continue;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  continue;  }  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  continue;  }	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    for(Node    child    =    parent.getFirstChild();    child!=    null;    child    =    child.getNext())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    continue;    }    	non-compiled	[CE]  not  a  statement	51	None	replace
178	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  continue  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  continue  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  continue	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    for(Node    child    =    parent.getFirstChild();    child!=    null;    child    =    child.getNext())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    continue;    }    	non-compiled	[CE]  ';'  expected	51	None	replace
179	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(parent))  {  continue  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(parent))  {  continue  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(parent))  {  continue	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    for(Node    child    =    parent.getFirstChild();    child!=    null;    child    =    child.getNext())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    continue;    }    	non-compiled	[CE]  ';'  expected	51	None	replace
180	[BUG]  [BUGGY]  for(Node  child  :  n.getFirstChild().getNext();  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  :  n.getFirstChild().getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  :  n.getFirstChild().getNext();	  for(Node    child    :    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	13	None	replace
181	[BUG]  [BUGGY]  for(Node  child  :  n.getFirstChild().cloneTree();  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  :  n.getFirstChild().cloneTree();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  :  n.getFirstChild().cloneTree();	  for(Node    child    :    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	13	None	replace
182	[BUG]  [BUGGY]  for(Node  child  :  n.getLastChild();  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  :  n.getLastChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  :  n.getLastChild();	  for(Node    child    :    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	13	None	replace
183	[BUG]  [BUGGY]  for(Node  child  :  n.getFirstChild().getNext());  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  :  n.getFirstChild().getNext());  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  :  n.getFirstChild().getNext());	  for(Node    child    :    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	13	None	replace
184	[BUG]  [BUGGY]  for(Node  child  :  n.getFirstChild().removeFirstChild());  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  :  n.getFirstChild().removeFirstChild());  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  :  n.getFirstChild().removeFirstChild());	  for(Node    child    :    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	13	None	replace
185	[BUG]  [BUGGY]  for(Node  child  :  n.getNext();  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  :  n.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  :  n.getNext();	  for(Node    child    :    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	13	None	replace
186	[BUG]  [BUGGY]  for(Node  child  =  n.getCurrentNode(),  variable;  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getCurrentNode(),  variable;  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getCurrentNode(),  variable;	  for(Node    child    =    n.getCurrentNode();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
187	[BUG]  [BUGGY]  For(Node  child  =  n.getCurrentNode();  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  n.getCurrentNode();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getCurrentNode();	  for(Node    child    =    n.getCurrentNode();    	non-compiled	[CE]  ')'  expected	4	None	replace
188	[BUG]  [BUGGY]  for(Node  child  =  this.n.getCurrentNode();  [CE]  cannot  find  symbol  n  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  this.n.getCurrentNode();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  this.n.getCurrentNode();	  for(Node    child    =    n.getCurrentNode();    	non-compiled	[CE]  cannot  find  symbol  n	4	None	replace
189	[BUG]  [BUGGY]  for(Node  child  =  n.getCurrentNode(),  variable);  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getCurrentNode(),  variable);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getCurrentNode(),  variable);	  for(Node    child    =    n.getCurrentNode();    	non-compiled	[CE]  ';'  expected	4	None	replace
190	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.BLOCK);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.BLOCK);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.BLOCK);	  Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  not  a  statement	57	None	replace
191	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK,  variable);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK,  variable);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkState(child.getType()  ==  Token.BLOCK,  variable);	  Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  not  a  statement	57	None	replace
192	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK,  state);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK,  state);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkState(child.getType()  ==  Token.BLOCK,  state);	  Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  not  a  statement	57	None	replace
193	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()!=  Token.BLOCK);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Preconditions.checkState(child.getType()!=  Token.BLOCK);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkState(child.getType()!=  Token.BLOCK);	  Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  not  a  statement	57	None	replace
194	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  not  a  statement	57	None	replace
195	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.GETPROP);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.GETPROP);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.GETPROP);	  Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  not  a  statement	57	None	replace
196	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  For(Node  child  =  n.getLastChild();  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  For(Node  child  =  n.getLastChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  For(Node  child  =  n.getLastChild();	  for(Node    child    =    n.getLastChild();    For(Node    child    =    n.getLastChild();    	non-compiled	[CE]  ')'  expected	23	None	replace
197	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  And(Node  child  =  n.getLastChild();  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  And(Node  child  =  n.getLastChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  And(Node  child  =  n.getLastChild();	  for(Node    child    =    n.getLastChild();    For(Node    child    =    n.getLastChild();    	non-compiled	[CE]  ')'  expected	23	None	replace
198	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  Token  child  =  n.getLastChild();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  Token  child  =  n.getLastChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  Token  child  =  n.getLastChild();	  for(Node    child    =    n.getLastChild();    For(Node    child    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	23	None	replace
199	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  FOR(Node  child  =  n.getLastChild();  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  FOR(Node  child  =  n.getLastChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  FOR(Node  child  =  n.getLastChild();	  for(Node    child    =    n.getLastChild();    For(Node    child    =    n.getLastChild();    	non-compiled	[CE]  ')'  expected	23	None	replace
200	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  Node  n  =  child.getParent();  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  Node  n  =  child.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  Node  n  =  child.getParent();	  for(Node    child    =    n.getNext();    Node    n    =    child.getParent();    	non-compiled	[CE]  ';'  expected	8	None	replace
201	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  n  =  child.getParent();  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  n  =  child.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  n  =  child.getParent();	  for(Node    child    =    n.getNext();    Node    n    =    child.getParent();    	non-compiled	[CE]  not  a  statement	8	None	replace
202	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child!=  null  &&  n.getParent().getType()  ==  Token.NAME);  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child!=  null  &&  n.getParent().getType()  ==  Token.NAME);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child!=  null  &&  n.getParent().getType()  ==  Token.NAME);	  for(Node    child    =    n.getNext();    Node    n    =    child.getParent();    	non-compiled	[CE]  ';'  expected	8	None	replace
203	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child!=  null  &&  n.getParent().getType()  ==  Token.EXPR_RESULT);  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child!=  null  &&  n.getParent().getType()  ==  Token.EXPR_RESULT);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child!=  null  &&  n.getParent().getType()  ==  Token.EXPR_RESULT);	  for(Node    child    =    n.getNext();    Node    n    =    child.getParent();    	non-compiled	[CE]  ';'  expected	8	None	replace
204	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child!=  null  &&  n.getParent().getType()  ==  Token.VAR);  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child!=  null  &&  n.getParent().getType()  ==  Token.VAR);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child!=  null  &&  n.getParent().getType()  ==  Token.VAR);	  for(Node    child    =    n.getNext();    Node    n    =    child.getParent();    	non-compiled	[CE]  ';'  expected	8	None	replace
205	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child!=  null?  child.getNext()  :  n.getParent();  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child!=  null?  child.getNext()  :  n.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child!=  null?  child.getNext()  :  n.getParent();	  for(Node    child    =    n.getNext();    Node    n    =    child.getParent();    	non-compiled	[CE]  not  a  statement	8	None	replace
206	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION);	  for(Node    child    =    n.getNext();    Node    n    =    child.getParent();    	non-compiled	[CE]  ';'  expected	8	None	replace
207	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  Node  n  =  child.getFirstChild();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  Node  n  =  child.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  Node  n  =  child.getFirstChild();	  for(Node    child    =    n.getLastChild();    Node    n    =    child.getFirstChild();    	non-compiled	[CE]  ';'  expected	22	None	replace
208	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  Node  n  =  n.getFirstChild();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  Node  n  =  n.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  Node  n  =  n.getFirstChild();	  for(Node    child    =    n.getLastChild();    Node    n    =    child.getFirstChild();    	non-compiled	[CE]  ';'  expected	22	None	replace
209	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  Node  n  =  child.getLastChild();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  Node  n  =  child.getLastChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  Node  n  =  child.getLastChild();	  for(Node    child    =    n.getLastChild();    Node    n    =    child.getFirstChild();    	non-compiled	[CE]  ';'  expected	22	None	replace
210	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  n  =  child.getFirstChild();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  n  =  child.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  n  =  child.getFirstChild();	  for(Node    child    =    n.getLastChild();    Node    n    =    child.getFirstChild();    	non-compiled	[CE]  not  a  statement	22	None	replace
211	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  Node  n  =  n.getLastChild();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  Node  n  =  n.getLastChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  Node  n  =  n.getLastChild();	  for(Node    child    =    n.getLastChild();    Node    n    =    child.getFirstChild();    	non-compiled	[CE]  ';'  expected	22	None	replace
212	[BUG]  [BUGGY]  For(Node  child  =  n.getFirstChild();  Node  n  =  child.getFirstChild();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  n.getFirstChild();  Node  n  =  child.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getFirstChild();  Node  n  =  child.getFirstChild();	  for(Node    child    =    n.getLastChild();    Node    n    =    child.getFirstChild();    	non-compiled	[CE]  ')'  expected	22	None	replace
213	[BUG]  [BUGGY]  For  (Node  child  :  n.getFirstChild();  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For  (Node  child  :  n.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For  (Node  child  :  n.getFirstChild();	  For    (Node    child    =    n.getLastChild();    	non-compiled	[CE]  ')'  expected	15	None	replace
214	[BUG]  [BUGGY]  For  (Node  child  =  variable.getFirstChild();  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For  (Node  child  =  variable.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For  (Node  child  =  variable.getFirstChild();	  For    (Node    child    =    n.getLastChild();    	non-compiled	[CE]  ')'  expected	15	None	replace
215	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME,  variable);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME,  variable);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME,  variable);	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	56	None	replace
216	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME,  state);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME,  state);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME,  state);	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	56	None	replace
217	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME,  n);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME,  n);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME,  n);	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	56	None	replace
218	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.NAME);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.NAME);	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	56	None	replace
219	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	56	None	replace
220	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()!=  Token.NAME);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Preconditions.checkState(child.getType()!=  Token.NAME);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkState(child.getType()!=  Token.NAME);	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	56	None	replace
221	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.EXPR_RESULT);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkState(child.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkNotNull(variable);    	non-compiled	[CE]  not  a  statement	44	None	replace
222	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.FUNCTION);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkState(child.getType()  ==  Token.FUNCTION);	  Preconditions.checkNotNull(variable);    	non-compiled	[CE]  not  a  statement	44	None	replace
223	[BUG]  [BUGGY]  Preconditions.checkNotNull(n);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Preconditions.checkNotNull(n);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkNotNull(n);	  Preconditions.checkNotNull(variable);    	non-compiled	[CE]  not  a  statement	44	None	replace
224	[BUG]  [BUGGY]  Preconditions.checkNotNull(child);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Preconditions.checkNotNull(child);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkNotNull(child);	  Preconditions.checkNotNull(variable);    	non-compiled	[CE]  not  a  statement	44	None	replace
225	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.CALL);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.CALL);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.CALL);	  Preconditions.checkState(child.getType()    ==    Token.CALL);    	non-compiled	[CE]  not  a  statement	58	None	replace
226	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL,  variable);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL,  variable);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkState(child.getType()  ==  Token.CALL,  variable);	  Preconditions.checkState(child.getType()    ==    Token.CALL);    	non-compiled	[CE]  not  a  statement	58	None	replace
227	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()!=  Token.CALL);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Preconditions.checkState(child.getType()!=  Token.CALL);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkState(child.getType()!=  Token.CALL);	  Preconditions.checkState(child.getType()    ==    Token.CALL);    	non-compiled	[CE]  not  a  statement	58	None	replace
228	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL,  state);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL,  state);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkState(child.getType()  ==  Token.CALL,  state);	  Preconditions.checkState(child.getType()    ==    Token.CALL);    	non-compiled	[CE]  not  a  statement	58	None	replace
229	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.BLOCK);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.BLOCK);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.BLOCK);	  Preconditions.checkState(child.getType()    ==    Token.CALL);    	non-compiled	[CE]  not  a  statement	58	None	replace
230	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkState(n.getType()  ==  Token.CALL);	  Preconditions.checkState(child.getType()    ==    Token.CALL);    	non-compiled	[CE]  not  a  statement	58	None	replace
231	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    for(Node    child    =    parent.getFirstChild();    child!=    null;    child    =    child.getNext())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    return    	non-compiled	[CE]  ';'  expected	50	None	replace
232	[BUG]  [BUGGY]  For(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    for(Node    child    =    parent.getFirstChild();    child!=    null;    child    =    child.getNext())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    return    	non-compiled	[CE]  ')'  expected	50	None	replace
233	[BUG]  [BUGGY]  for(Node  child  =  parent.getLastChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  parent.getLastChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  parent.getLastChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    for(Node    child    =    parent.getFirstChild();    child!=    null;    child    =    child.getNext())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    return    	non-compiled	[CE]  ';'  expected	50	None	replace
234	[BUG]  [BUGGY]  for(Node  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    for(Node    child    =    parent.getFirstChild();    child!=    null;    child    =    child.getNext())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    return    	non-compiled	[CE]  ';'  expected	50	None	replace
235	[BUG]  [BUGGY]  for(Node  child  =  n.getLastChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getLastChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getLastChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    for(Node    child    =    parent.getFirstChild();    child!=    null;    child    =    child.getNext())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    return    	non-compiled	[CE]  ';'  expected	50	None	replace
236	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  return  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  return  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  return	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    for(Node    child    =    parent.getFirstChild();    child!=    null;    child    =    child.getNext())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    return    	non-compiled	[CE]  ';'  expected	50	None	replace
237	[BUG]  [BUGGY]  for(Node  child  =  n.getCfgNode(),  variable;  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getCfgNode(),  variable;  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getCfgNode(),  variable;	  for(Node    child    =    n.getCfgNode();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
238	[BUG]  [BUGGY]  For(Node  child  =  n.getCfgNode();  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  n.getCfgNode();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getCfgNode();	  for(Node    child    =    n.getCfgNode();    	non-compiled	[CE]  ')'  expected	2	None	replace
239	[BUG]  [BUGGY]  for(Node  child  =  n.getAssignedChild();  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getAssignedChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getAssignedChild();	  for(Node    child    =    n.getCfgNode();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
240	[BUG]  [BUGGY]  for(Node  child  =  n.getImmediateParentNode();  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getImmediateParentNode();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getImmediateParentNode();	  for(Node    child    =    n.getCfgNode();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
241	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR,  variable);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR,  variable);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkState(child.getType()  ==  Token.VAR,  variable);	  Preconditions.checkState(child.getType()    ==    Token.VAR);    	non-compiled	[CE]  not  a  statement	59	None	replace
242	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR,  state);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR,  state);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkState(child.getType()  ==  Token.VAR,  state);	  Preconditions.checkState(child.getType()    ==    Token.VAR);    	non-compiled	[CE]  not  a  statement	59	None	replace
243	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()!=  Token.VAR);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Preconditions.checkState(child.getType()!=  Token.VAR);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkState(child.getType()!=  Token.VAR);	  Preconditions.checkState(child.getType()    ==    Token.VAR);    	non-compiled	[CE]  not  a  statement	59	None	replace
244	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);	  Preconditions.checkState(child.getType()    ==    Token.VAR);    	non-compiled	[CE]  not  a  statement	59	None	replace
245	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.getType()  ==  Token.VAR);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.getType()  ==  Token.VAR);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.getType()  ==  Token.VAR);	  Preconditions.checkState(child.getType()    ==    Token.VAR);    	non-compiled	[CE]  not  a  statement	59	None	replace
246	[BUG]  [BUGGY]  Preconditions.checkState(variable.getType()  ==  Token.VAR);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Preconditions.checkState(variable.getType()  ==  Token.VAR);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkState(variable.getType()  ==  Token.VAR);	  Preconditions.checkState(child.getType()    ==    Token.VAR);    	non-compiled	[CE]  not  a  statement	59	None	replace
247	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  Node  parent  =  n.getParent();  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  Node  parent  =  n.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  Node  parent  =  n.getParent();	  for(Node    child    =    n.getNext();    Node    parent    =    n.getParent();    	non-compiled	[CE]  ';'  expected	38	None	replace
248	[BUG]  [BUGGY]  for(Node  child  =  n.getChildCount();  Node  parent  =  n.getParent();  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getChildCount();  Node  parent  =  n.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getChildCount();  Node  parent  =  n.getParent();	  for(Node    child    =    n.getNext();    Node    parent    =    n.getParent();    	non-compiled	[CE]  ';'  expected	38	None	replace
249	[BUG]  [BUGGY]  for(Node  child  =  n.getParent();  Node  parent  =  n.getParent();  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getParent();  Node  parent  =  n.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getParent();  Node  parent  =  n.getParent();	  for(Node    child    =    n.getNext();    Node    parent    =    n.getParent();    	non-compiled	[CE]  ';'  expected	38	None	replace
250	[BUG]  [BUGGY]  For(Node  child  =  n.getFirstChild();  Node  parent  =  n.getParent();  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  n.getFirstChild();  Node  parent  =  n.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getFirstChild();  Node  parent  =  n.getParent();	  for(Node    child    =    n.getNext();    Node    parent    =    n.getParent();    	non-compiled	[CE]  ')'  expected	38	None	replace
251	[BUG]  [BUGGY]  for(Node  child  =  n.getCurrentNode();  Node  parent  =  n.getParent();  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getCurrentNode();  Node  parent  =  n.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getCurrentNode();  Node  parent  =  n.getParent();	  for(Node    child    =    n.getNext();    Node    parent    =    n.getParent();    	non-compiled	[CE]  ';'  expected	38	None	replace
252	[BUG]  [BUGGY]  for(Node  child  =  n.getChildren();  Node  parent  =  n.getParent();  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getChildren();  Node  parent  =  n.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getChildren();  Node  parent  =  n.getParent();	  for(Node    child    =    n.getNext();    Node    parent    =    n.getParent();    	non-compiled	[CE]  ';'  expected	38	None	replace
253	[BUG]  [BUGGY]  for(Node  child  =  n.getChildCount();  child  =  n.getNext();  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getChildCount();  child  =  n.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getChildCount();  child  =  n.getNext();	  for(Node    child    =    n.getNext();    Node    child    =    n.getNext();    	non-compiled	[CE]  not  a  statement	10	None	replace
254	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child!=  n.getNext();  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child!=  n.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child!=  n.getNext();	  for(Node    child    =    n.getNext();    Node    child    =    n.getNext();    	non-compiled	[CE]  not  a  statement	10	None	replace
255	[BUG]  [BUGGY]  For(Node  child  =  n.getFirstChild();  child  =  n.getNext();  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  n.getFirstChild();  child  =  n.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getFirstChild();  child  =  n.getNext();	  for(Node    child    =    n.getNext();    Node    child    =    n.getNext();    	non-compiled	[CE]  ')'  expected	10	None	replace
256	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child  ==  n.getNext();  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child  ==  n.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child  ==  n.getNext();	  for(Node    child    =    n.getNext();    Node    child    =    n.getNext();    	non-compiled	[CE]  not  a  statement	10	None	replace
257	[BUG]  [BUGGY]  for(Node  child  =  n.getParent();  child  =  n.getNext();  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getParent();  child  =  n.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getParent();  child  =  n.getNext();	  for(Node    child    =    n.getNext();    Node    child    =    n.getNext();    	non-compiled	[CE]  not  a  statement	10	None	replace
258	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child!=  null;  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child!=  null;  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child!=  null;	  for(Node    child    =    n.getNext();    Node    child    =    n.getNext();    	non-compiled	[CE]  not  a  statement	10	None	replace
259	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  MAYBE_LIVE);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  MAYBE_LIVE);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  MAYBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  not  a  statement	29	None	replace
260	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable  +  1);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable  +  1);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable  +  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  not  a  statement	29	None	replace
261	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable  -  1);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable  -  1);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable  -  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  not  a  statement	29	None	replace
262	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  null);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  null);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  not  a  statement	29	None	replace
263	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  child);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  child);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  child);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  not  a  statement	29	None	replace
264	[BUG]  [BUGGY]  For(Node  child  =  n.getLastChild().cloneTree();  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  n.getLastChild().cloneTree();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getLastChild().cloneTree();	  For(Node    child    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  ')'  expected	52	None	replace
265	[BUG]  [BUGGY]  For(Node  child  =  n.getFirstChild().cloneTree(),  variable);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  n.getFirstChild().cloneTree(),  variable);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getFirstChild().cloneTree(),  variable);	  For(Node    child    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  ')'  expected	52	None	replace
266	[BUG]  [BUGGY]  For(Node  child  =  n.getFirstChild().cloneTree(),  variable;  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  n.getFirstChild().cloneTree(),  variable;  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getFirstChild().cloneTree(),  variable;	  For(Node    child    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  ')'  expected	52	None	replace
267	[BUG]  [BUGGY]  For(Node  child  =  n.getFirstChild().clonePosition();  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  n.getFirstChild().clonePosition();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getFirstChild().clonePosition();	  For(Node    child    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  ')'  expected	52	None	replace
268	[BUG]  [BUGGY]  For(Node  child  =  n.getNext().cloneTree();  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  n.getNext().cloneTree();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getNext().cloneTree();	  For(Node    child    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  ')'  expected	52	None	replace
269	[BUG]  [BUGGY]  Node  child  =  state.getLastChild();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Node  child  =  state.getLastChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Node  child  =  state.getLastChild();	  Node    child    =    n.getLastChild();    	non-compiled	[CE]  not  a  statement	32	None	replace
270	[BUG]  [BUGGY]  Node  child  =  n.removeFirstChild();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Node  child  =  n.removeFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Node  child  =  n.removeFirstChild();	  Node    child    =    n.getLastChild();    	non-compiled	[CE]  not  a  statement	32	None	replace
271	[BUG]  [BUGGY]  Node  child  =  n.getfirstChild();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Node  child  =  n.getfirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Node  child  =  n.getfirstChild();	  Node    child    =    n.getLastChild();    	non-compiled	[CE]  not  a  statement	32	None	replace
272	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  Compiler.getInstance(variable);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Predicate  matchRemovableAssigns  =  Compiler.getInstance(variable);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Predicate  matchRemovableAssigns  =  Compiler.getInstance(variable);	  Predicate    matchRemovableAssigns    =    Compiler.getInstance();    	non-compiled	[CE]  not  a  statement	30	None	replace
273	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  Compiler.getInstance(),  variable;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Predicate  matchRemovableAssigns  =  Compiler.getInstance(),  variable;  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Predicate  matchRemovableAssigns  =  Compiler.getInstance(),  variable;	  Predicate    matchRemovableAssigns    =    Compiler.getInstance();    	non-compiled	[CE]  not  a  statement	30	None	replace
274	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  Compiler.getInstanceUTC();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Predicate  matchRemovableAssigns  =  Compiler.getInstanceUTC();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Predicate  matchRemovableAssigns  =  Compiler.getInstanceUTC();	  Predicate    matchRemovableAssigns    =    Compiler.getInstance();    	non-compiled	[CE]  not  a  statement	30	None	replace
275	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  Compiler.newInstance();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Predicate  matchRemovableAssigns  =  Compiler.newInstance();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Predicate  matchRemovableAssigns  =  Compiler.newInstance();	  Predicate    matchRemovableAssigns    =    Compiler.getInstance();    	non-compiled	[CE]  not  a  statement	30	None	replace
276	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  Compiler.getInstanceType();  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Predicate  matchRemovableAssigns  =  Compiler.getInstanceType();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Predicate  matchRemovableAssigns  =  Compiler.getInstanceType();	  Predicate    matchRemovableAssigns    =    Compiler.getInstance();    	non-compiled	[CE]  not  a  statement	30	None	replace
277	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  compiler.getInstance();  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Predicate  matchRemovableAssigns  =  compiler.getInstance();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Predicate  matchRemovableAssigns  =  compiler.getInstance();	  Predicate    matchRemovableAssigns    =    Compiler.getInstance();    	non-compiled	[CE]  not  a  statement	30	None	replace
278	[BUG]  [BUGGY]  Predicates.checkNotNull(child);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Predicates.checkNotNull(child);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Predicates.checkNotNull(child);	  Predicates.checkNotNull(variable);    	non-compiled	[CE]  not  a  statement	45	None	replace
279	[BUG]  [BUGGY]  Predicates.checkNotNull(n);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Predicates.checkNotNull(n);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Predicates.checkNotNull(n);	  Predicates.checkNotNull(variable);    	non-compiled	[CE]  not  a  statement	45	None	replace
280	[BUG]  [BUGGY]  Predicates.checkState(child.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Predicates.checkState(child.getType()  ==  Token.NAME);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Predicates.checkState(child.getType()  ==  Token.NAME);	  Predicates.checkNotNull(variable);    	non-compiled	[CE]  not  a  statement	45	None	replace
281	[BUG]  [BUGGY]  Predicates.checkState(variable!=  null);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Predicates.checkState(variable!=  null);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Predicates.checkState(variable!=  null);	  Predicates.checkNotNull(variable);    	non-compiled	[CE]  not  a  statement	45	None	replace
282	[BUG]  [BUGGY]  Predicates.checkState(child.getType()  ==  Token.EXPR_RESULT);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Predicates.checkState(child.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Predicates.checkState(child.getType()  ==  Token.EXPR_RESULT);	  Predicates.checkNotNull(variable);    	non-compiled	[CE]  not  a  statement	45	None	replace
283	[BUG]  [BUGGY]  Predicates.checkState(child.getType()  ==  Token.VAR);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Predicates.checkState(child.getType()  ==  Token.VAR);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Predicates.checkState(child.getType()  ==  Token.VAR);	  Predicates.checkNotNull(variable);    	non-compiled	[CE]  not  a  statement	45	None	replace
284	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  n  =  child.getLastChild();  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  n  =  child.getLastChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  n  =  child.getLastChild();	  for(Node    child    =    n.getNext();    Node    n    =    child.getLastChild();    	non-compiled	[CE]  not  a  statement	9	None	replace
285	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child!=  null  &&  n.getLastChild().getString().equals(variable));  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child!=  null  &&  n.getLastChild().getString().equals(variable));  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child!=  null  &&  n.getLastChild().getString().equals(variable));	  for(Node    child    =    n.getNext();    Node    n    =    child.getLastChild();    	non-compiled	[CE]  ';'  expected	9	None	replace
286	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child!=  null  &&  n.getLastChild().getType()  ==  Token.EXPR_RESULT);  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child!=  null  &&  n.getLastChild().getType()  ==  Token.EXPR_RESULT);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child!=  null  &&  n.getLastChild().getType()  ==  Token.EXPR_RESULT);	  for(Node    child    =    n.getNext();    Node    n    =    child.getLastChild();    	non-compiled	[CE]  ';'  expected	9	None	replace
287	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child!=  null  &&  n.getLastChild().getString().equals(variable);  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child!=  null  &&  n.getLastChild().getString().equals(variable);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child!=  null  &&  n.getLastChild().getString().equals(variable);	  for(Node    child    =    n.getNext();    Node    n    =    child.getLastChild();    	non-compiled	[CE]  not  a  statement	9	None	replace
288	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child!=  null  &&  n.getLastChild().getType()  ==  Token.NAME);  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child!=  null  &&  n.getLastChild().getType()  ==  Token.NAME);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child!=  null  &&  n.getLastChild().getType()  ==  Token.NAME);	  for(Node    child    =    n.getNext();    Node    n    =    child.getLastChild();    	non-compiled	[CE]  ';'  expected	9	None	replace
289	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child  =  child.getNext();  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child  =  child.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child  =  child.getNext();	  for(Node    child    =    n.getNext();    Node    child    =    n.getNext();    	non-compiled	[CE]  not  a  statement	10	None	replace
290	[BUG]  [BUGGY]  for(Node  child  =  n.getCurrentNode();  child  =  n.getNext();  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getCurrentNode();  child  =  n.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getCurrentNode();  child  =  n.getNext();	  for(Node    child    =    n.getNext();    Node    child    =    n.getNext();    	non-compiled	[CE]  not  a  statement	10	None	replace
291	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  Node  child  =  child.getNext();  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  Node  child  =  child.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  Node  child  =  child.getNext();	  for(Node    child    =    n.getNext();    Node    child    =    n.getNext();    	non-compiled	[CE]  ';'  expected	10	None	replace
292	[BUG]  [BUGGY]  for(Node  child  =  n.getPrevious();  child  =  child.getNext();  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getPrevious();  child  =  child.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getPrevious();  child  =  child.getNext();	  for(Node    child    =    n.getNext();    Node    child    =    n.getNext();    	non-compiled	[CE]  not  a  statement	10	None	replace
293	[BUG]  [BUGGY]  for(Node  child  =  n,  variable.getCurrentNode();  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n,  variable.getCurrentNode();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n,  variable.getCurrentNode();	  for(Node    child    =    n.getCurrentNode();    	non-compiled	[CE]  ';'  expected	4	None	replace
294	[BUG]  [BUGGY]  for(Node  child  =  n,  state.getCurrentNode();  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n,  state.getCurrentNode();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n,  state.getCurrentNode();	  for(Node    child    =    n.getCurrentNode();    	non-compiled	[CE]  ';'  expected	4	None	replace
295	[BUG]  [BUGGY]  for(Node  child  =  n.getSecondNode();  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getSecondNode();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getSecondNode();	  for(Node    child    =    n.getCurrentNode();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
296	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child  <  parent.getParent();  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  continue;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child  <  parent.getParent();  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  continue;  }  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child  <  parent.getParent();  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  continue;  }	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    for(Node    child    =    parent.getFirstChild();    child!=    null;    child    =    child.getNext())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    continue;    }    	non-compiled	[CE]  not  a  statement	51	None	replace
297	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child  ==  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  continue;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child  ==  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  continue;  }  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child  ==  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  continue;  }	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    for(Node    child    =    parent.getFirstChild();    child!=    null;    child    =    child.getNext())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    continue;    }    	non-compiled	[CE]  not  a  statement	51	None	replace
298	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child  >=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  continue;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child  >=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  continue;  }  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child  >=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  continue;  }	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    for(Node    child    =    parent.getFirstChild();    child!=    null;    child    =    child.getNext())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    continue;    }    	non-compiled	[CE]  not  a  statement	51	None	replace
299	[BUG]  [BUGGY]  for(Node  child  =  n.getParent();  NodeTraversal.traverse(compiler,  n,  variable);  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getParent();  NodeTraversal.traverse(compiler,  n,  variable);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getParent();  NodeTraversal.traverse(compiler,  n,  variable);	  for(Node    child    =    n.getNext();    NodeTraversal.traverse(compiler,    n,    variable);    	non-compiled	[CE]  not  a  statement	12	None	replace
300	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  NodeTraversal.traverse(compiler,  n,  parameters);  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  NodeTraversal.traverse(compiler,  n,  parameters);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  NodeTraversal.traverse(compiler,  n,  parameters);	  for(Node    child    =    n.getNext();    NodeTraversal.traverse(compiler,    n,    variable);    	non-compiled	[CE]  not  a  statement	12	None	replace
301	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  NodeTraversal.traverse(compiler,  n,  KILL_LIVE);  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  NodeTraversal.traverse(compiler,  n,  KILL_LIVE);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  NodeTraversal.traverse(compiler,  n,  KILL_LIVE);	  for(Node    child    =    n.getNext();    NodeTraversal.traverse(compiler,    n,    variable);    	non-compiled	[CE]  not  a  statement	12	None	replace
302	[BUG]  [BUGGY]  for(Node  child  =  n.getPrevious();  Node  parent  =  n.getParent();  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getPrevious();  Node  parent  =  n.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getPrevious();  Node  parent  =  n.getParent();	  for(Node    child    =    n.getNext();    Node    parent    =    n.getParent();    	non-compiled	[CE]  ';'  expected	38	None	replace
303	[BUG]  [BUGGY]  Predicates.checkNotNull(matchRemovableAssignsElimination);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Predicates.checkNotNull(matchRemovableAssignsElimination);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Predicates.checkNotNull(matchRemovableAssignsElimination);	  Predicates.checkNotNull(variable);    	non-compiled	[CE]  not  a  statement	45	None	replace
304	[BUG]  [BUGGY]  Predicates.checkState(child!=  null);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Predicates.checkState(child!=  null);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Predicates.checkState(child!=  null);	  Predicates.checkNotNull(variable);    	non-compiled	[CE]  not  a  statement	45	None	replace
305	[BUG]  [BUGGY]  Predicates.checkNotNull(matchRemovableAssignsElimination,  variable);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Predicates.checkNotNull(matchRemovableAssignsElimination,  variable);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Predicates.checkNotNull(matchRemovableAssignsElimination,  variable);	  Predicates.checkNotNull(variable);    	non-compiled	[CE]  not  a  statement	45	None	replace
306	[BUG]  [BUGGY]  For  (Node  child  =  n.getParent();  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For  (Node  child  =  n.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For  (Node  child  =  n.getParent();	  For    (Node    child    =    n.getNext();    	non-compiled	[CE]  ')'  expected	16	None	replace
307	[BUG]  [BUGGY]  for(Node  child  =  n.getCurrentNode();  child!=  null;  child  =  child.getNext();  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getCurrentNode();  child!=  null;  child  =  child.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getCurrentNode();  child!=  null;  child  =  child.getNext();	  for(Node    child    =    n.getNext();    for(Node    child    =    n.getNext();    	non-compiled	[CE]  ')'  expected	5	None	replace
308	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  For(Node  child  =  child.getLastChild();  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  For(Node  child  =  child.getLastChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  For(Node  child  =  child.getLastChild();	  for(Node    child    =    n.getLastChild();    For(Node    child    =    n.getLastChild();    	non-compiled	[CE]  ')'  expected	23	None	replace
309	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  To(Node  child  =  n.getLastChild();  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  To(Node  child  =  n.getLastChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  To(Node  child  =  n.getLastChild();	  for(Node    child    =    n.getLastChild();    For(Node    child    =    n.getLastChild();    	non-compiled	[CE]  ')'  expected	23	None	replace
310	[BUG]  [BUGGY]  for(Node  child  =  n.getLastChild();  For(Node  child  =  n.getFirstChild();  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getLastChild();  For(Node  child  =  n.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getLastChild();  For(Node  child  =  n.getFirstChild();	  for(Node    child    =    n.getLastChild();    For(Node    child    =    n.getLastChild();    	non-compiled	[CE]  ')'  expected	23	None	replace
311	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  Node  child  =  child.getParent();  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  Node  child  =  child.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  Node  child  =  child.getParent();	  for(Node    child    =    n.getNext();    Node    n    =    child.getParent();    	non-compiled	[CE]  ';'  expected	8	None	replace
312	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  Node  child  =  child.getFirstChild();  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  Node  child  =  child.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  Node  child  =  child.getFirstChild();	  for(Node    child    =    n.getNext();    Node    n    =    child.getParent();    	non-compiled	[CE]  ';'  expected	8	None	replace
313	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  Child  n  =  child.getParent();  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  Child  n  =  child.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  Child  n  =  child.getParent();	  for(Node    child    =    n.getNext();    Node    n    =    child.getParent();    	non-compiled	[CE]  ';'  expected	8	None	replace
314	[BUG]  [BUGGY]  For(Node  child  =  n.getNext();  Node  child  =  child.getParent();  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  n.getNext();  Node  child  =  child.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getNext();  Node  child  =  child.getParent();	  for(Node    child    =    n.getNext();    Node    n    =    child.getParent();    	non-compiled	[CE]  ')'  expected	8	None	replace
315	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()!=  Token.NAME,  variable);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Preconditions.checkState(child.getType()!=  Token.NAME,  variable);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkState(child.getType()!=  Token.NAME,  variable);	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	56	None	replace
316	[BUG]  [BUGGY]  Preconditions.checkState(child!=  null);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Preconditions.checkState(child!=  null);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkState(child!=  null);	  Preconditions.checkNotNull(variable);    	non-compiled	[CE]  not  a  statement	44	None	replace
317	[BUG]  [BUGGY]  Preconditions.checkState(variable!=  null);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Preconditions.checkState(variable!=  null);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkState(variable!=  null);	  Preconditions.checkNotNull(variable);    	non-compiled	[CE]  not  a  statement	44	None	replace
318	[BUG]  [BUGGY]  Preconditions.checkState(!variable.isEmpty());  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Preconditions.checkState(!variable.isEmpty());  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkState(!variable.isEmpty());	  Preconditions.checkNotNull(variable);    	non-compiled	[CE]  not  a  statement	44	None	replace
319	[BUG]  [BUGGY]  For(Node  child  =  n.getFirstChild();  Node  n  =  child.getLastChild();  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  n.getFirstChild();  Node  n  =  child.getLastChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getFirstChild();  Node  n  =  child.getLastChild();	  for(Node    child    =    n.getLastChild();    Node    n    =    child.getFirstChild();    	non-compiled	[CE]  ')'  expected	22	None	replace
320	[BUG]  [BUGGY]  for(Node  child  =  n.getfirstChild();  Node  n  =  child.getFirstChild();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getfirstChild();  Node  n  =  child.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getfirstChild();  Node  n  =  child.getFirstChild();	  for(Node    child    =    n.getLastChild();    Node    n    =    child.getFirstChild();    	non-compiled	[CE]  ';'  expected	22	None	replace
321	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  node  =  child.getFirstChild();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  node  =  child.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  node  =  child.getFirstChild();	  for(Node    child    =    n.getLastChild();    Node    n    =    child.getFirstChild();    	non-compiled	[CE]  not  a  statement	22	None	replace
322	[BUG]  [BUGGY]  for(Node  child  =  n.getCurrentNode();  Node  next  =  child.getNext();  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getCurrentNode();  Node  next  =  child.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getCurrentNode();  Node  next  =  child.getNext();	  for(Node    child    =    n.getNext();    Node    next    =    child.getNext();    	non-compiled	[CE]  ';'  expected	40	None	replace
323	[BUG]  [BUGGY]  for(Node  child  =  n.getPrevious();  Node  next  =  child.getNext();  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getPrevious();  Node  next  =  child.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getPrevious();  Node  next  =  child.getNext();	  for(Node    child    =    n.getNext();    Node    next    =    child.getNext();    	non-compiled	[CE]  ';'  expected	40	None	replace
324	[BUG]  [BUGGY]  for(Node  child  =  n.getChildCount()  -  4;  [CE]  incompatible  types  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getChildCount()  -  4;  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getChildCount()  -  4;	  for(Node    child    =    n.getChildCount();    	non-compiled	[CE]  incompatible  types	1	None	replace
325	[BUG]  [BUGGY]  For  (Node  child  =  n.removeFirstChild();  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For  (Node  child  =  n.removeFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For  (Node  child  =  n.removeFirstChild();	  For    (Node    child    =    n.getLastChild();    	non-compiled	[CE]  ')'  expected	15	None	replace
326	[BUG]  [BUGGY]  For  (Node  child  =  n.getfirstChild();  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For  (Node  child  =  n.getfirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For  (Node  child  =  n.getfirstChild();	  For    (Node    child    =    n.getLastChild();    	non-compiled	[CE]  ')'  expected	15	None	replace
327	[BUG]  [BUGGY]  For  (Node  child  =  state.getFirstChild();  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For  (Node  child  =  state.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For  (Node  child  =  state.getFirstChild();	  For    (Node    child    =    n.getLastChild();    	non-compiled	[CE]  ')'  expected	15	None	replace
328	[BUG]  [BUGGY]  For  (Node  child  =  n.getOneChild();  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For  (Node  child  =  n.getOneChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For  (Node  child  =  n.getOneChild();	  For    (Node    child    =    n.getLastChild();    	non-compiled	[CE]  ')'  expected	15	None	replace
329	[BUG]  [BUGGY]  for(Node  child  =  n,  variable.getCfgNode();  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n,  variable.getCfgNode();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n,  variable.getCfgNode();	  for(Node    child    =    n.getCfgNode();    	non-compiled	[CE]  ';'  expected	2	None	replace
330	[BUG]  [BUGGY]  For(Node  child  =  n.getFirstChild(),  variable)  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  n.getFirstChild(),  variable)  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getFirstChild(),  variable)	  For(Node    child    =    n.getFirstChild(),    variable);    	non-compiled	[CE]  ')'  expected	18	None	replace
331	[BUG]  [BUGGY]  For(Node  child  =  n.getFirstChild(),  variable;  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  n.getFirstChild(),  variable;  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getFirstChild(),  variable;	  For(Node    child    =    n.getFirstChild(),    variable);    	non-compiled	[CE]  ')'  expected	18	None	replace
332	[BUG]  [BUGGY]  For(Node  child  =  n.getFirstChild(),  variable)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  n.getFirstChild(),  variable)  {  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getFirstChild(),  variable)  {	  For(Node    child    =    n.getFirstChild(),    variable);    	non-compiled	[CE]  ')'  expected	18	None	replace
333	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  node  =  child.getLastChild();  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  node  =  child.getLastChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  node  =  child.getLastChild();	  for(Node    child    =    n.getNext();    Node    n    =    child.getLastChild();    	non-compiled	[CE]  not  a  statement	9	None	replace
334	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child  <  n.getLastChild();  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child  <  n.getLastChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child  <  n.getLastChild();	  for(Node    child    =    n.getNext();    Node    n    =    child.getLastChild();    	non-compiled	[CE]  not  a  statement	9	None	replace
335	[BUG]  [BUGGY]  for(Node  child  =  state.getFirstChild();  [CE]  cannot  find  symbol  state  [FE]          AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  state.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  state.getFirstChild();	  for(Node    child    =    this.n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  state	14	None	replace
336	[BUG]  [BUGGY]  for(Node  child  =  this.n.getLastChild();  [CE]  cannot  find  symbol  n  [FE]            AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  this.n.getLastChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  this.n.getLastChild();	  for(Node    child    =    this.n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  n	14	None	replace
337	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  Child  n  =  child.getFirstChild();  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  Child  n  =  child.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  Child  n  =  child.getFirstChild();	  for(Node    child    =    n.getNext();    Node    n    =    child.getFirstChild();    	non-compiled	[CE]  ';'  expected	7	None	replace
338	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child  =  child.getFirstChild();  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child  =  child.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child  =  child.getFirstChild();	  for(Node    child    =    n.getNext();    Node    n    =    child.getFirstChild();    	non-compiled	[CE]  not  a  statement	7	None	replace
339	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  &&  isVariableReadBeforeKill(child,  variable));  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  &&  isVariableReadBeforeKill(child,  variable));  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkState(child.getType()  ==  Token.CALL  &&  isVariableReadBeforeKill(child,  variable));	  Preconditions.checkState(child.getType()    ==    Token.CALL);    	non-compiled	[CE]  not  a  statement	58	None	replace
340	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child  =  child.getParent();  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child  =  child.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child  =  child.getParent();	  for(Node    child    =    n.getNext();    Node    child    =    n.getParent();    	non-compiled	[CE]  not  a  statement	39	None	replace
341	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  Node  child  =  n.getParent();  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  Node  child  =  n.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  Node  child  =  n.getParent();	  for(Node    child    =    n.getNext();    Node    child    =    n.getParent();    	non-compiled	[CE]  ';'  expected	39	None	replace
342	[BUG]  [BUGGY]  for(Node  child  =  n.getParent();  child  =  child.getNext();  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getParent();  child  =  child.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getParent();  child  =  child.getNext();	  for(Node    child    =    n.getNext();    Node    child    =    n.getParent();    	non-compiled	[CE]  not  a  statement	39	None	replace
343	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child  =  child.getLastChild();  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child  =  child.getLastChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child  =  child.getLastChild();	  for(Node    child    =    n.getLastChild();    for(Node    child    =    n.getLastChild();    	non-compiled	[CE]  not  a  statement	20	None	replace
344	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  Child  child  =  child.getLastChild();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  Child  child  =  child.getLastChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  Child  child  =  child.getLastChild();	  for(Node    child    =    n.getLastChild();    for(Node    child    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	20	None	replace
345	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child  =  child.getLeastChild();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child  =  child.getLeastChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child  =  child.getLeastChild();	  for(Node    child    =    n.getLastChild();    for(Node    child    =    n.getLastChild();    	non-compiled	[CE]  not  a  statement	20	None	replace
346	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  child);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  not  a  statement	29	None	replace
347	[BUG]  [BUGGY]  VariableLiveness  state  =  getVariableReadBeforeKill(n,  variable);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  VariableLiveness  state  =  getVariableReadBeforeKill(n,  variable);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	VariableLiveness  state  =  getVariableReadBeforeKill(n,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  not  a  statement	29	None	replace
348	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.NAME);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.NAME);	  Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  not  a  statement	57	None	replace
349	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK,  n);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK,  n);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkState(child.getType()  ==  Token.BLOCK,  n);	  Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  not  a  statement	57	None	replace
350	[BUG]  [BUGGY]  For(Node  child  =  n.getFirstChild().getLastChild();  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  n.getFirstChild().getLastChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getFirstChild().getLastChild();	  For(Node    child    =    n.getFirstChild().getNext();    	non-compiled	[CE]  ')'  expected	53	None	replace
351	[BUG]  [BUGGY]  for(Node  child  :  n.getFirstChild().removeFirstChild();  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  :  n.getFirstChild().removeFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  :  n.getFirstChild().removeFirstChild();	  for(Node    child    :    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	13	None	replace
352	[BUG]  [BUGGY]  for(Node  child  :  n.getChildCount();  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  :  n.getChildCount();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  :  n.getChildCount();	  for(Node    child    :    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	13	None	replace
353	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child  ==  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child  ==  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child  ==  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    for(Node    child    =    parent.getFirstChild();    child!=    null;    child    =    child.getNext())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    return    	non-compiled	[CE]  ';'  expected	50	None	replace
354	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child  >=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child  >=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child  >=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    for(Node    child    =    parent.getFirstChild();    child!=    null;    child    =    child.getNext())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    return    	non-compiled	[CE]  ';'  expected	50	None	replace
355	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  parent  =  child.getParent();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  parent  =  child.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  parent  =  child.getParent();	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    	non-compiled	[CE]  not  a  statement	26	None	replace
356	[BUG]  [BUGGY]  for(Node  child  =  n.cloneTree();  Node  n  =  n.cloneTree();  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.cloneTree();  Node  n  =  n.cloneTree();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.cloneTree();    Node  n  =  n.cloneTree();	  	non-compiled	[CE]  ';'  expected	54	None	add
357	[BUG]  [BUGGY]  for(Node  child  =  n.cloneTree();  Node  n  =  child.cloneTree();  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.cloneTree();  Node  n  =  child.cloneTree();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.cloneTree();    Node  n  =  child.cloneTree();	  	non-compiled	[CE]  ';'  expected	54	None	add
358	[BUG]  [BUGGY]  for(Node  child  =  n.cloneTree();  Node  n  =  n.getFirstChild();  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.cloneTree();  Node  n  =  n.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.cloneTree();    Node  n  =  n.getFirstChild();	  	non-compiled	[CE]  ';'  expected	54	None	add
359	[BUG]  [BUGGY]  for(Node  child  =  n.getPrevious();  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getPrevious();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getPrevious();	  for(Node    child    =    n.getParent();    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
360	[BUG]  [BUGGY]  for(Node  child  =  n.removeFirstChild();  Predicate  matchRemovableAssignsElimination  =  matchRemovableAssigns.get(child);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.removeFirstChild();  Predicate  matchRemovableAssignsElimination  =  matchRemovableAssigns.get(child);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.removeFirstChild();    Predicate  matchRemovableAssignsElimination  =  matchRemovableAssigns.get(child);	  	non-compiled	[CE]  ';'  expected	41	None	add
361	[BUG]  [BUGGY]  for(Node  child  =  n.removeFirstChild();  Node  n  =  child.getFirstChild();  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.removeFirstChild();  Node  n  =  child.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.removeFirstChild();    Node  n  =  child.getFirstChild();	  	non-compiled	[CE]  ';'  expected	41	None	add
362	[BUG]  [BUGGY]  for(Node  child  =  n.removeFirstChild();  Predicate  matchRemovableAssignsElimination  =  matchRemovableAssigns(child);  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.removeFirstChild();  Predicate  matchRemovableAssignsElimination  =  matchRemovableAssigns(child);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.removeFirstChild();    Predicate  matchRemovableAssignsElimination  =  matchRemovableAssigns(child);	  	non-compiled	[CE]  ';'  expected	41	None	add
363	[BUG]  [BUGGY]  For(Node  child  =  n.getFirstChild();  Node  child  =  n.getLastChild();  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  n.getFirstChild();  Node  child  =  n.getLastChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getFirstChild();  Node  child  =  n.getLastChild();	  for(Node    child    =    n.getLastChild();    Node    child    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	19	None	replace
364	[BUG]  [BUGGY]  for(Node  child  =  n.getLastChild();  child  =  child.getFirstChild();  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getLastChild();  child  =  child.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getLastChild();  child  =  child.getFirstChild();	  for(Node    child    =    n.getLastChild();    Node    child    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	19	None	replace
365	[BUG]  [BUGGY]  For(Node  child  =  n.getFirstChild().cloneFunctionDeclaration();  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  n.getFirstChild().cloneFunctionDeclaration();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getFirstChild().cloneFunctionDeclaration();	  For(Node    child    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  ')'  expected	52	None	replace
366	[BUG]  [BUGGY]  Node  child  =  n.getChildCount();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Node  child  =  n.getChildCount();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Node  child  =  n.getChildCount();	  Node    child    =    n.getNext();    	non-compiled	[CE]  not  a  statement	33	None	replace
367	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child  =  child.getParent();  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child)  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child  =  child.getParent();  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child)  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child  =  child.getParent();  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child)	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    for(Node    child    =    parent.getFirstChild();    child!=    null;    child    =    child.getNext())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    return    state;    }    	non-compiled	[CE]  ')'  expected	48	None	replace
368	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child  =  child.getParent();  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child  =  child.getParent();  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child  =  child.getParent();  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    for(Node    child    =    parent.getFirstChild();    child!=    null;    child    =    child.getNext())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    return    state;    }    	non-compiled	[CE]  ')'  expected	48	None	replace
369	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child  =  child.getParent();  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child  =  child.getParent();  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child  =  child.getParent();  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    for(Node    child    =    parent.getFirstChild();    child!=    null;    child    =    child.getNext())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    return    state;    }    	non-compiled	[CE]  ')'  expected	48	None	replace
370	[BUG]  [BUGGY]  for(Node  child  =  n.getParent();  Node  n  =  child.getNext();  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getParent();  Node  n  =  child.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getParent();  Node  n  =  child.getNext();	  for(Node    child    =    n.getNext();    Node    n    =    child.getNext();    	non-compiled	[CE]  ';'  expected	6	None	replace
371	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child!=  null;  child  =  child.getNext();  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child!=  null;  child  =  child.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child!=  null;  child  =  child.getNext();	  for(Node    child    =    n.getNext();    Node    n    =    child.getNext();    	non-compiled	[CE]  ')'  expected	6	None	replace
372	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  Child  n  =  child.getNext();  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  Child  n  =  child.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  Child  n  =  child.getNext();	  for(Node    child    =    n.getNext();    Node    n    =    child.getNext();    	non-compiled	[CE]  ';'  expected	6	None	replace
373	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  new  Node(child  =  n.getLastChild());  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  new  Node(child  =  n.getLastChild());  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  new  Node(child  =  n.getLastChild());	  for(Node    child    =    n.getLastChild();    Node    child    =    n.getLastChild();    	non-compiled	[CE]  not  a  statement	21	None	replace
374	[BUG]  [BUGGY]  Predicate  child  =  n.getFirstChild();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Predicate  child  =  n.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Predicate  child  =  n.getFirstChild();	  Predicate    matchRemovableAssigns    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	31	None	replace
375	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  n.getPreviousChild();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Predicate  matchRemovableAssigns  =  n.getPreviousChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Predicate  matchRemovableAssigns  =  n.getPreviousChild();	  Predicate    matchRemovableAssigns    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	31	None	replace
376	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getFirstChild();  child  =  child.getLastChild();  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getFirstChild();  child  =  child.getLastChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getFirstChild();  child  =  child.getLastChild();	  for(Node    child    =    n.getLastChild();    Node    n    =    child.getFirstChild();    for(Node    child    =    n.getLastChild();    	non-compiled	[CE]  ')'  expected	46	None	replace
377	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;)  {  for(Node  child  =  child.getLastChild();  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;)  {  for(Node  child  =  child.getLastChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child!=  null;)  {  for(Node  child  =  child.getLastChild();	  for(Node    child    =    n.getLastChild();    Node    n    =    child.getFirstChild();    for(Node    child    =    n.getLastChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
378	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getLastChild();  }  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getLastChild();  }  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getLastChild();  }	  for(Node    child    =    n.getLastChild();    Node    n    =    child.getFirstChild();    for(Node    child    =    n.getLastChild();    	non-compiled	[CE]  ')'  expected	46	None	replace
379	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  not  a  statement	28	None	replace
380	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  n);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  n);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  not  a  statement	28	None	replace
381	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child  =  child.getParent();  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child  =  child.getParent();  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child  =  child.getParent();  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    for(Node    child    =    parent.getFirstChild();    child!=    null;    child    =    child.getNext())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable))    {    return    state;    }    	non-compiled	[CE]  ')'  expected	49	None	replace
382	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child  =  child.getParent();  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child  =  child.getParent();  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child  =  child.getParent();  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    for(Node    child    =    parent.getFirstChild();    child!=    null;    child    =    child.getNext())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable))    {    return    state;    }    	non-compiled	[CE]  ')'  expected	49	None	replace
383	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child  =  child.getParent();  child  =  child.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child  =  child.getParent();  child  =  child.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child  =  child.getParent();  child  =  child.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    for(Node    child    =    parent.getFirstChild();    child!=    null;    child    =    child.getNext())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable))    {    return    state;    }    	non-compiled	[CE]  ')'  expected	49	None	replace
384	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child  =  child.getParent();  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child  =  child.getParent();  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child  =  child.getParent();  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    for(Node    child    =    parent.getFirstChild();    child!=    null;    child    =    child.getNext())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable))    {    return    state;    }    	non-compiled	[CE]  ')'  expected	49	None	replace
385	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child  =  child.getParent();  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child  =  child.getParent();  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child  =  child.getParent();  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    for(Node    child    =    parent.getFirstChild();    child!=    null;    child    =    child.getNext())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable))    {    return    state;    }    	non-compiled	[CE]  ')'  expected	49	None	replace
386	[BUG]  [BUGGY]  for(Node  child  =  n,  variable.getChildren();  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n,  variable.getChildren();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n,  variable.getChildren();	  for(Node    child    =    n.getChildren();    	non-compiled	[CE]  ';'  expected	3	None	replace
387	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  Compiler.getInstance(variable,  n);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Predicate  matchRemovableAssigns  =  Compiler.getInstance(variable,  n);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Predicate  matchRemovableAssigns  =  Compiler.getInstance(variable,  n);	  Predicate    matchRemovableAssigns    =    Compiler.getInstance();    	non-compiled	[CE]  not  a  statement	30	None	replace
388	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  Compiler.getInstance(0);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Predicate  matchRemovableAssigns  =  Compiler.getInstance(0);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Predicate  matchRemovableAssigns  =  Compiler.getInstance(0);	  Predicate    matchRemovableAssigns    =    Compiler.getInstance();    	non-compiled	[CE]  not  a  statement	30	None	replace
389	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  Compiler.getInstance2();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Predicate  matchRemovableAssigns  =  Compiler.getInstance2();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Predicate  matchRemovableAssigns  =  Compiler.getInstance2();	  Predicate    matchRemovableAssigns    =    Compiler.getInstance();    	non-compiled	[CE]  not  a  statement	30	None	replace
390	[BUG]  [BUGGY]  Predicate  child  =  Compiler.getInstance();  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Predicate  child  =  Compiler.getInstance();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Predicate  child  =  Compiler.getInstance();	  Predicate    matchRemovableAssigns    =    Compiler.getInstance();    	non-compiled	[CE]  not  a  statement	30	None	replace
391	[BUG]  [BUGGY]  for(Node  child  =  n.getChildCount();  child  =  child.getFirstChild();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getChildCount();  child  =  child.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getChildCount();  child  =  child.getFirstChild();	  for(Node    child    =    n.getLastChild();    for(Node    child    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	24	None	replace
392	[BUG]  [BUGGY]  for(Node  child  =  n.getOneChild();  child  =  child.getFirstChild();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getOneChild();  child  =  child.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getOneChild();  child  =  child.getFirstChild();	  for(Node    child    =    n.getLastChild();    for(Node    child    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	24	None	replace
393	[BUG]  [BUGGY]  for(Node  child  =  n.getOneChild();  child  =  child.getLastChild();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getOneChild();  child  =  child.getLastChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getOneChild();  child  =  child.getLastChild();	  for(Node    child    =    n.getLastChild();    for(Node    child    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	24	None	replace
394	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;)  {  for(Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;)  {  for(Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child!=  null;)  {  for(Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();	  for(Node    child    =    n.getLastChild();    Node    parent    =    n.getParent();    for(Node    child    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
395	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;)  {  for(Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;)  {  for(Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  }  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child!=  null;)  {  for(Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  }	  for(Node    child    =    n.getLastChild();    Node    parent    =    n.getParent();    for(Node    child    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
396	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  for(Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  for(Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  for(Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();	  for(Node    child    =    n.getLastChild();    Node    parent    =    n.getParent();    for(Node    child    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
397	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  for(Node  parent  =  n.getLastChild();  for(Node  child  =  parent.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  for(Node  parent  =  n.getLastChild();  for(Node  child  =  parent.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  for(Node  parent  =  n.getLastChild();  for(Node  child  =  parent.getFirstChild();	  for(Node    child    =    n.getLastChild();    Node    parent    =    n.getParent();    for(Node    child    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
398	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  for(Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  for(Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  }  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  for(Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  }	  for(Node    child    =    n.getLastChild();    Node    parent    =    n.getParent();    for(Node    child    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
399	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();	  for(Node    child    =    n.getLastChild();    Node    parent    =    n.getParent();    for(Node    child    =    parent.getFirstChild();    	non-compiled	[CE]  ';'  expected	47	None	replace
400	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;)  {  for(Node  parent  =  n.getLastChild();  for(Node  child  =  parent.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;)  {  for(Node  parent  =  n.getLastChild();  for(Node  child  =  parent.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child!=  null;)  {  for(Node  parent  =  n.getLastChild();  for(Node  child  =  parent.getFirstChild();	  for(Node    child    =    n.getLastChild();    Node    parent    =    n.getParent();    for(Node    child    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
401	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.getType()  ==  Token.BLOCK);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.getType()  ==  Token.BLOCK);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.getType()  ==  Token.BLOCK);	  Preconditions.checkState(child.getType()    ==    Token.VAR);    	non-compiled	[CE]  not  a  statement	59	None	replace
402	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.getType()  ==  Token.FUNCTION);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(child.getType()    ==    Token.VAR);    	non-compiled	[CE]  not  a  statement	59	None	replace
403	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  For(Node  child  =  child.getNext();  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  For(Node  child  =  child.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  For(Node  child  =  child.getNext();	  for(Node    child    =    n.getNext();    For(Node    child    =    n.getNext();    	non-compiled	[CE]  ')'  expected	11	None	replace
404	[BUG]  [BUGGY]  for(Node  child  =  n.getChildCount();  For(Node  child  =  n.getNext();  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getChildCount();  For(Node  child  =  n.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getChildCount();  For(Node  child  =  n.getNext();	  for(Node    child    =    n.getNext();    For(Node    child    =    n.getNext();    	non-compiled	[CE]  ')'  expected	11	None	replace
405	[BUG]  [BUGGY]  for(Node  child  =  n.getParent();  For(Node  child  =  n.getNext();  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getParent();  For(Node  child  =  n.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getParent();  For(Node  child  =  n.getNext();	  for(Node    child    =    n.getNext();    For(Node    child    =    n.getNext();    	non-compiled	[CE]  ')'  expected	11	None	replace
406	[BUG]  [BUGGY]  for(Node  child  =  n.getParent();  Node  parent  =  child.getParent();  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getParent();  Node  parent  =  child.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getParent();  Node  parent  =  child.getParent();	  for(Node    child    =    n.getNext();    Node    parent    =    child.getParent();    	non-compiled	[CE]  ';'  expected	36	None	replace
407	[BUG]  [BUGGY]  for(Node  child  =  n.getPrevious();  Node  parent  =  child.getParent();  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getPrevious();  Node  parent  =  child.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getPrevious();  Node  parent  =  child.getParent();	  for(Node    child    =    n.getNext();    Node    parent    =    child.getParent();    	non-compiled	[CE]  ';'  expected	36	None	replace
408	[BUG]  [BUGGY]  For(Node  child  =  n.getNext();  Node  parent  =  child.getParent();  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  n.getNext();  Node  parent  =  child.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getNext();  Node  parent  =  child.getParent();	  for(Node    child    =    n.getNext();    Node    parent    =    child.getParent();    	non-compiled	[CE]  ')'  expected	36	None	replace
409	[BUG]  [BUGGY]  for(Node  child  =  n.getParent();  Node  child  =  n.getFirstChild();  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getParent();  Node  child  =  n.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.getParent();    Node  child  =  n.getFirstChild();	  	non-compiled	[CE]  ';'  expected	34	None	add
410	[BUG]  [BUGGY]  for(Node  child  =  n.getParent();  Node  child  =  n.getNext();  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getParent();  Node  child  =  n.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.getParent();    Node  child  =  n.getNext();	  	non-compiled	[CE]  ';'  expected	34	None	add
411	[BUG]  [BUGGY]  Node  child  =  node.getLastChild();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Node  child  =  node.getLastChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Node  child  =  node.getLastChild();	  Node    child    =    n.getLastChild();    	non-compiled	[CE]  not  a  statement	32	None	replace
412	[BUG]  [BUGGY]  for(VariableLiveness  state  :  n.getFirstChild())  {  for(Node  child  =  n.getLastChild();  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(VariableLiveness  state  :  n.getFirstChild())  {  for(Node  child  =  n.getLastChild();  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(VariableLiveness  state  :  n.getFirstChild())  {  for(Node  child  =  n.getLastChild();  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  for(Node    child    =    n.getLastChild();    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  ';'  expected	25	None	replace
413	[BUG]  [BUGGY]  for(VariableLiveness  child  =  n.getFirstChild();  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(VariableLiveness  child  =  n.getFirstChild();  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(VariableLiveness  child  =  n.getFirstChild();  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);	  for(Node    child    =    n.getLastChild();    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  ';'  expected	25	None	replace
414	[BUG]  [BUGGY]  for(VariableLiveness  state  :  n.getFirstChild())  {  for(Node  child  =  n.getLastChild();  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(VariableLiveness  state  :  n.getFirstChild())  {  for(Node  child  =  n.getLastChild();  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(VariableLiveness  state  :  n.getFirstChild())  {  for(Node  child  =  n.getLastChild();  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);	  for(Node    child    =    n.getLastChild();    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  ';'  expected	25	None	replace
415	[BUG]  [BUGGY]  for(VariableLiveness  state  :  n.getFirstChild();  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(VariableLiveness  state  :  n.getFirstChild();  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(VariableLiveness  state  :  n.getFirstChild();  state  =  isVariableReadBeforeKill(child,  variable);	  for(Node    child    =    n.getLastChild();    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  ')'  expected	25	None	replace
416	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child  =  child.getNext();  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child  =  child.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child  =  child.getNext();	  for(Node    child    =    n.getNext();    Node    child    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	37	None	replace
417	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child  =  child.getLastChild();  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child  =  child.getLastChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child  =  child.getLastChild();	  for(Node    child    =    n.getNext();    Node    child    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	37	None	replace
418	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  Node  child  =  n.getNext();  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  Node  child  =  n.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  Node  child  =  n.getNext();	  for(Node    child    =    n.getNext();    Node    child    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	37	None	replace
419	[BUG]  [BUGGY]  for(Node  child  =  n.getPrevious();  child  =  child.getFirstChild();  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getPrevious();  child  =  child.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getPrevious();  child  =  child.getFirstChild();	  for(Node    child    =    n.getNext();    Node    child    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	37	None	replace
420	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  NodeTraversal.traverse(compiler,  n,  HEAD);  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  NodeTraversal.traverse(compiler,  n,  HEAD);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  NodeTraversal.traverse(compiler,  n,  HEAD);	  for(Node    child    =    n.getNext();    NodeTraversal.traverse(compiler,    n,    variable);    	non-compiled	[CE]  not  a  statement	12	None	replace
421	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  for(Node  child  =  n.getLastChild();  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  for(Node  child  =  n.getLastChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  for(Node  child  =  n.getLastChild();	  for(Node    child    =    n.getLastChild();    for(Node    child    =    n.getLastChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
422	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child  <=  n.getLastChild();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child  <=  n.getLastChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child  <=  n.getLastChild();	  for(Node    child    =    n.getLastChild();    for(Node    child    =    n.getLastChild();    	non-compiled	[CE]  not  a  statement	20	None	replace
423	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child!=  parent.getParent();  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child!=  parent.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child!=  parent.getParent();	  for(Node    child    =    n.getNext();    Node    parent    =    child.getParent();    	non-compiled	[CE]  not  a  statement	36	None	replace
424	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child!=  null  &&  child.getParent().getType()  ==  Token.VAR;  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child!=  null  &&  child.getParent().getType()  ==  Token.VAR;  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child!=  null  &&  child.getParent().getType()  ==  Token.VAR;	  for(Node    child    =    n.getNext();    Node    parent    =    child.getParent();    	non-compiled	[CE]  not  a  statement	36	None	replace
425	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child  <  n.getNext();  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child  <  n.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child  <  n.getNext();	  for(Node    child    =    n.getNext();    Node    child    =    n.getNext();    	non-compiled	[CE]  not  a  statement	10	None	replace
426	[BUG]  [BUGGY]  For(Node  child  =  n.getFirstChild();  Node  next  =  child.getNext();  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  n.getFirstChild();  Node  next  =  child.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getFirstChild();  Node  next  =  child.getNext();	  for(Node    child    =    n.getNext();    Node    next    =    child.getNext();    	non-compiled	[CE]  ')'  expected	40	None	replace
427	[BUG]  [BUGGY]  for(Node  child  =  this.in.getFirstChild();  [CE]  cannot  find  symbol  in  [FE]          AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  this.in.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  this.in.getFirstChild();	  for(Node    child    =    this.n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  in	14	None	replace
428	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  0xff);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  0xff);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  0xff);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  not  a  statement	28	None	replace
429	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  n.getType());  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  n.getType());  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  n.getType());	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  not  a  statement	29	None	replace
430	[BUG]  [BUGGY]  for(Node  child  =  n.getChildCount()  +  1;  [CE]  incompatible  types  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getChildCount()  +  1;  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getChildCount()  +  1;	  for(Node    child    =    n.getChildCount();    	non-compiled	[CE]  incompatible  types	1	None	replace
431	[BUG]  [BUGGY]  Predicates.checkState(child.getType()  ==  Token.CALL);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Predicates.checkState(child.getType()  ==  Token.CALL);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Predicates.checkState(child.getType()  ==  Token.CALL);	  Predicates.checkNotNull(variable);    	non-compiled	[CE]  not  a  statement	45	None	replace
432	[BUG]  [BUGGY]  Predicates.checkState(child.getType()  ==  Token.BLOCK);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Predicates.checkState(child.getType()  ==  Token.BLOCK);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Predicates.checkState(child.getType()  ==  Token.BLOCK);	  Predicates.checkNotNull(variable);    	non-compiled	[CE]  not  a  statement	45	None	replace
433	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  Compiler.instance;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Predicate  matchRemovableAssigns  =  Compiler.instance;  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Predicate  matchRemovableAssigns  =  Compiler.instance;	  Predicate    matchRemovableAssigns    =    Compiler.getInstance();    	non-compiled	[CE]  not  a  statement	30	None	replace
434	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child  =  isVariableReadBeforeKill(child,  variable);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child  =  isVariableReadBeforeKill(child,  variable);	  for(Node    child    =    n.getLastChild();    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  not  a  statement	25	None	replace
435	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  ChildVariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  ChildVariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  ChildVariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);	  for(Node    child    =    n.getLastChild();    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  ';'  expected	25	None	replace
436	[BUG]  [BUGGY]  for(Node  child  =  n.getCfgNode(0);  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getCfgNode(0);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getCfgNode(0);	  for(Node    child    =    n.getCfgNode();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
437	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    for(Node    child    =    parent.getFirstChild();    child!=    null;    child    =    child.getNext())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    return    	non-compiled	[CE]  not  a  statement	50	None	replace
438	[BUG]  [BUGGY]  For(Node  child  =  n.getFirstChild().getFirstChild();  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  n.getFirstChild().getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getFirstChild().getFirstChild();	  For(Node    child    =    n.getFirstChild().getNext();    	non-compiled	[CE]  ')'  expected	53	None	replace
439	[BUG]  [BUGGY]  For(Node  child  =  n.getFirstChild().getNext()  ||  variable!=  null  &&  variable.equals(n.getString());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  n.getFirstChild().getNext()  ||  variable!=  null  &&  variable.equals(n.getString());  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getFirstChild().getNext()  ||  variable!=  null  &&  variable.equals(n.getString());	  For(Node    child    =    n.getFirstChild().getNext();    	non-compiled	[CE]  ')'  expected	53	None	replace
440	[BUG]  [BUGGY]  for(Node  child  =  n.getLastChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  return  state;  }  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getLastChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  return  state;  }  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getLastChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  return  state;  }	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    for(Node    child    =    parent.getFirstChild();    child!=    null;    child    =    child.getNext())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable))    {    return    state;    }    	non-compiled	[CE]  not  a  statement	49	None	replace
441	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child!=  null  &&  child.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child!=  null  &&  child.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child!=  null  &&  child.getLastChild().getType()  ==  Token.FUNCTION;	  for(Node    child    =    n.getNext();    Node    n    =    child.getLastChild();    	non-compiled	[CE]  not  a  statement	9	None	replace
442	[BUG]  [BUGGY]  for(Node  child  =  n.getChildCount();  child  =  n.getLastChild();  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getChildCount();  child  =  n.getLastChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getChildCount();  child  =  n.getLastChild();	  for(Node    child    =    n.getNext();    Node    n    =    child.getLastChild();    	non-compiled	[CE]  not  a  statement	9	None	replace
443	[BUG]  [BUGGY]  for(Node  child  =  n.getLastChild();  child!=  null;  child  =  child.getNext())  {  for(Node  child  =  n.getFirstChild();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getLastChild();  child!=  null;  child  =  child.getNext())  {  for(Node  child  =  n.getFirstChild();  }  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getLastChild();  child!=  null;  child  =  child.getNext())  {  for(Node  child  =  n.getFirstChild();  }	  for(Node    child    =    n.getLastChild();    for(Node    child    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
444	[BUG]  [BUGGY]  for(Node  child  =  n.getLastChild();  child!=  null;  child  =  child.getNext())  {  for(Node  child  =  n.getFirstChild();  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getLastChild();  child!=  null;  child  =  child.getNext())  {  for(Node  child  =  n.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getLastChild();  child!=  null;  child  =  child.getNext())  {  for(Node  child  =  n.getFirstChild();	  for(Node    child    =    n.getLastChild();    for(Node    child    =    n.getFirstChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	replace
445	[BUG]  [BUGGY]  for(Node  child  =  n.getOneChild();  child!=  null;  child  =  child.getLastChild();  child  =  child.getFirstChild();  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getOneChild();  child!=  null;  child  =  child.getLastChild();  child  =  child.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getOneChild();  child!=  null;  child  =  child.getLastChild();  child  =  child.getFirstChild();	  for(Node    child    =    n.getLastChild();    for(Node    child    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	24	None	replace
446	[BUG]  [BUGGY]  for(Node  child  =  n.getChildCount();  child!=  null;  child  =  child.getNext())  {  for(Node  child  =  n.getLastChild();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getChildCount();  child!=  null;  child  =  child.getNext())  {  for(Node  child  =  n.getLastChild();  }  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getChildCount();  child!=  null;  child  =  child.getNext())  {  for(Node  child  =  n.getLastChild();  }	  for(Node    child    =    n.getLastChild();    for(Node    child    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
447	[BUG]  [BUGGY]  for(Node  child  =  n.getLastChild();  child!=  null;  child  =  child.getFirstChild();  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getLastChild();  child!=  null;  child  =  child.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getLastChild();  child!=  null;  child  =  child.getFirstChild();	  for(Node    child    =    n.getLastChild();    for(Node    child    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	24	None	replace
448	[BUG]  [BUGGY]  for(Node  child  =  n.getChildCount();  child!=  null;  child  =  child.getNext())  {  for(Node  child  =  n.getFirstChild();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getChildCount();  child!=  null;  child  =  child.getNext())  {  for(Node  child  =  n.getFirstChild();  }  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getChildCount();  child!=  null;  child  =  child.getNext())  {  for(Node  child  =  n.getFirstChild();  }	  for(Node    child    =    n.getLastChild();    for(Node    child    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
449	[BUG]  [BUGGY]  for(Node  child  :  n.getFirstChild();  child  =  child.getLastChild();  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  :  n.getFirstChild();  child  =  child.getLastChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  :  n.getFirstChild();  child  =  child.getLastChild();	  for(Node    child    =    n.getLastChild();    Node    child    =    n.getLastChild();    	non-compiled	[CE]  ')'  expected	21	None	replace
450	[BUG]  [BUGGY]  Node  child  =  n.getFirstChild().getNext();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Node  child  =  n.getFirstChild().getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Node  child  =  n.getFirstChild().getNext();	  Node    child    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	27	None	replace
451	[BUG]  [BUGGY]  Node  child  =  n.getAncestor(2);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Node  child  =  n.getAncestor(2);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Node  child  =  n.getAncestor(2);	  Node    child    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	27	None	replace
452	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child!=  null  &&  child.getNext().getType()  ==  Token.VAR;  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child!=  null  &&  child.getNext().getType()  ==  Token.VAR;  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child!=  null  &&  child.getNext().getType()  ==  Token.VAR;	  for(Node    child    =    n.getNext();    Node    n    =    child.getNext();    	non-compiled	[CE]  not  a  statement	6	None	replace
453	[BUG]  [BUGGY]  For(Node  child  =  this.node.getFirstChild();  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  this.node.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  this.node.getFirstChild();	  For    (Node    child    =    n.getLastChild();    	non-compiled	[CE]  ')'  expected	15	None	replace
454	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  For(Node  child  =  n.getFirstChild();  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  For(Node  child  =  n.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  For(Node  child  =  n.getFirstChild();	  for(Node    child    =    n.getNext();    For(Node    child    =    n.getNext();    	non-compiled	[CE]  ')'  expected	11	None	replace
455	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  And(Node  child  =  n.getNext();  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  And(Node  child  =  n.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  And(Node  child  =  n.getNext();	  for(Node    child    =    n.getNext();    For(Node    child    =    n.getNext();    	non-compiled	[CE]  ')'  expected	11	None	replace
456	[BUG]  [BUGGY]  for(Node  child  =  n.cloneChildren();  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.cloneChildren();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.cloneChildren();	  for(Node    child    =    n.cloneTree();    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
457	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  n.removeFirstChild();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Predicate  matchRemovableAssigns  =  n.removeFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Predicate  matchRemovableAssigns  =  n.removeFirstChild();	  Predicate    matchRemovableAssigns    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	31	None	replace
458	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  n.getFirstChild().getNext();  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Predicate  matchRemovableAssigns  =  n.getFirstChild().getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Predicate  matchRemovableAssigns  =  n.getFirstChild().getNext();	  Predicate    matchRemovableAssigns    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	31	None	replace
459	[BUG]  [BUGGY]  for(Node  child  =  n.getChildCount();  child!=  null;  child  =  child.getNext();  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getChildCount();  child!=  null;  child  =  child.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getChildCount();  child!=  null;  child  =  child.getNext();	  for(Node    child    =    n.getNext();    for(Node    child    =    n.getNext();    	non-compiled	[CE]  ')'  expected	5	None	replace
460	[BUG]  [BUGGY]  for(Node  child  =  n.getChildren();  child!=  null;  child  =  child.getNext();  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getChildren();  child!=  null;  child  =  child.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getChildren();  child!=  null;  child  =  child.getNext();	  for(Node    child    =    n.getNext();    for(Node    child    =    n.getNext();    	non-compiled	[CE]  ')'  expected	5	None	replace
461	[BUG]  [BUGGY]  for(Node  child  =  n.getParent();  child!=  null;  child  =  child.getNext();  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getParent();  child!=  null;  child  =  child.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getParent();  child!=  null;  child  =  child.getNext();	  for(Node    child    =    n.getNext();    for(Node    child    =    n.getNext();    	non-compiled	[CE]  ')'  expected	5	None	replace
462	[BUG]  [BUGGY]  for(Node  child  =  n.getLastChild();  child!=  null;  child  =  child.getNext();  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getLastChild();  child!=  null;  child  =  child.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getLastChild();  child!=  null;  child  =  child.getNext();	  for(Node    child    =    n.getNext();    for(Node    child    =    n.getNext();    	non-compiled	[CE]  ')'  expected	5	None	replace
463	[BUG]  [BUGGY]  For(Node  child  =  n.getFirstChild().clonePath();  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  n.getFirstChild().clonePath();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getFirstChild().clonePath();	  For(Node    child    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  ')'  expected	52	None	replace
464	[BUG]  [BUGGY]  For(Node  child  =  n.getFirstChild().cloneBlock();  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  For(Node  child  =  n.getFirstChild().cloneBlock();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getFirstChild().cloneBlock();	  For(Node    child    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  ')'  expected	52	None	replace
465	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.CALL);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.CALL);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.CALL);	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	56	None	replace
466	[BUG]  [BUGGY]  for(Node  child  =  n.cloneTree();  Node  next  =  child.getNext();  for(Node  child  =  n.cloneTree();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;  }  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.cloneTree();  Node  next  =  child.getNext();  for(Node  child  =  n.cloneTree();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;  }  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.cloneTree();    Node  next  =  child.getNext();  for(Node  child  =  n.cloneTree();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;  }	  	non-compiled	[CE]  ';'  expected	54	None	add
467	[BUG]  [BUGGY]  for(Node  child  =  n.cloneTree();  Node  parent  =  child.getParent();  for(Node  child  =  parent.cloneTree();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;  }  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.cloneTree();  Node  parent  =  child.getParent();  for(Node  child  =  parent.cloneTree();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;  }  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.cloneTree();    Node  parent  =  child.getParent();  for(Node  child  =  parent.cloneTree();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;  }	  	non-compiled	[CE]  ';'  expected	54	None	add
468	[BUG]  [BUGGY]  for(Node  child  =  n.cloneTree();  Node  next  =  child.getNext();  for(Node  child  =  n.cloneTree();  child!=  null;)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;  }  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.cloneTree();  Node  next  =  child.getNext();  for(Node  child  =  n.cloneTree();  child!=  null;)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;  }  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.cloneTree();    Node  next  =  child.getNext();  for(Node  child  =  n.cloneTree();  child!=  null;)  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;  }	  	non-compiled	[CE]  ';'  expected	54	None	add
469	[BUG]  [BUGGY]  for(Node  child  =  n.cloneTree();  Node  next  =  child.getNext();  for(Node  child  =  n.cloneTree();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  continue;  }  [CE]  ';'  expected  [FE]          RuntimeException    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.cloneTree();  Node  next  =  child.getNext();  for(Node  child  =  n.cloneTree();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  continue;  }  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.cloneTree();    Node  next  =  child.getNext();  for(Node  child  =  n.cloneTree();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  continue;  }	  	non-compiled	[CE]  ';'  expected	54	None	add
470	[BUG]  [BUGGY]  for(Node  child  =  n.cloneTree();  Node  parent  =  child.getParent();  for(Node  child  =  parent.cloneTree();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  return  state;  }  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.cloneTree();  Node  parent  =  child.getParent();  for(Node  child  =  parent.cloneTree();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  return  state;  }  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.cloneTree();    Node  parent  =  child.getParent();  for(Node  child  =  parent.cloneTree();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  return  state;  }	  	non-compiled	[CE]  ';'  expected	54	None	add
471	[BUG]  [BUGGY]  for(Node  child  =  n.cloneTree();  Node  next  =  child.getNext();  for(Node  child  =  n.cloneTree();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  return  state;  }  [CE]  ';'  expected  [FE]              RuntimeException    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.cloneTree();  Node  next  =  child.getNext();  for(Node  child  =  n.cloneTree();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  return  state;  }  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.cloneTree();    Node  next  =  child.getNext();  for(Node  child  =  n.cloneTree();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  return  state;  }	  	non-compiled	[CE]  ';'  expected	54	None	add
472	[BUG]  [BUGGY]  for(Node  child  =  n,  variable.getFirstChild();  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n,  variable.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n,  variable.getFirstChild();	  for(Node    child    =    n.getfirstChild();    	non-compiled	[CE]  ';'  expected	43	None	replace
473	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child  =  child.getFirstChild();  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child  =  child.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child  =  child.getFirstChild();	  for(Node    child    =    n.getLastChild();    Node    child    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	19	None	replace
474	[BUG]  [BUGGY]  for(Node  child  =  n.getParent();  For(Node  child  =  n.getParent();  [CE]  ')'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getParent();  For(Node  child  =  n.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.getParent();    For(Node  child  =  n.getParent();	  	non-compiled	[CE]  ')'  expected	34	None	add
475	[BUG]  [BUGGY]  for(Node  child  =  n.getParent();  for(Node  child  =  n.getNext();  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getParent();  for(Node  child  =  n.getNext();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.getParent();    for(Node  child  =  n.getNext();	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
476	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child  <  n.getFirstChild();  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child  <  n.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child  <  n.getFirstChild();	  for(Node    child    =    n.getNext();    Node    n    =    child.getFirstChild();    	non-compiled	[CE]  not  a  statement	7	None	replace
477	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child!=  null  &&  n.getFirstChild().getType()  ==  Token.FUNCTION;	  for(Node    child    =    n.getNext();    Node    n    =    child.getFirstChild();    	non-compiled	[CE]  not  a  statement	7	None	replace
478	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child!=  null  &&  n.getFirstChild().getType()  ==  Token.VAR;  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child!=  null  &&  n.getFirstChild().getType()  ==  Token.VAR;  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child!=  null  &&  n.getFirstChild().getType()  ==  Token.VAR;	  for(Node    child    =    n.getNext();    Node    n    =    child.getFirstChild();    	non-compiled	[CE]  not  a  statement	7	None	replace
479	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  node  =  child.getParent();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  node  =  child.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  node  =  child.getParent();	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    	non-compiled	[CE]  not  a  statement	26	None	replace
480	[BUG]  [BUGGY]  for(Node  child  :  n.getFirstChild();  Node  parent  =  child.getParent();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  :  n.getFirstChild();  Node  parent  =  child.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  :  n.getFirstChild();  Node  parent  =  child.getParent();	  for(Node    child    =    n.getLastChild();    Node    parent    =    child.getParent();    	non-compiled	[CE]  ')'  expected	26	None	replace
481	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child!=  n.getParent();  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child!=  n.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child!=  n.getParent();	  for(Node    child    =    n.getNext();    Node    child    =    n.getParent();    	non-compiled	[CE]  not  a  statement	39	None	replace
482	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child  <  n.getParent();  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child  <  n.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child  <  n.getParent();	  for(Node    child    =    n.getNext();    Node    child    =    n.getParent();    	non-compiled	[CE]  not  a  statement	39	None	replace
483	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child  ==  n.getParent();  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child  ==  n.getParent();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child  ==  n.getParent();	  for(Node    child    =    n.getNext();    Node    child    =    n.getParent();    	non-compiled	[CE]  not  a  statement	39	None	replace
484	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child!=  n.getFirstChild();  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child!=  n.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child!=  n.getFirstChild();	  for(Node    child    =    n.getNext();    Node    child    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	37	None	replace
485	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child  ==  n.getFirstChild();  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child  ==  n.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child  ==  n.getFirstChild();	  for(Node    child    =    n.getNext();    Node    child    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	37	None	replace
486	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  child  <  n.getFirstChild();  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getNext();  child  <  n.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getNext();  child  <  n.getFirstChild();	  for(Node    child    =    n.getNext();    Node    child    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	37	None	replace
487	[BUG]  [BUGGY]  for(Node  child  =  n.removeFirstChild();  for(Node  child  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.removeFirstChild();  for(Node  child  =  n.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.removeFirstChild();    for(Node  child  =  n.getFirstChild();	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
488	[BUG]  [BUGGY]  for(Node  child  =  n.removeFirstChild();  Preconditions.checkState(child.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.removeFirstChild();  Preconditions.checkState(child.getType()  ==  Token.NAME);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.removeFirstChild();    Preconditions.checkState(child.getType()  ==  Token.NAME);	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
489	[BUG]  [BUGGY]  for(Node  child  =  n.removeFirstChild();  Preconditions.checkState(child.getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.removeFirstChild();  Preconditions.checkState(child.getType()  ==  Token.CALL);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.removeFirstChild();    Preconditions.checkState(child.getType()  ==  Token.CALL);	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
490	[BUG]  [BUGGY]  for(Node  child  =  n.removeFirstChild();  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.removeFirstChild();  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.removeFirstChild();    Preconditions.checkState(child.getType()  ==  Token.BLOCK);	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
491	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getFirstChild();)  {  for(Node  child  =  n.getLastChild();  }  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getFirstChild();)  {  for(Node  child  =  n.getLastChild();  }  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getFirstChild();)  {  for(Node  child  =  n.getLastChild();  }	  for(Node    child    =    n.getLastChild();    Node    n    =    child.getFirstChild();    for(Node    child    =    n.getLastChild();    	non-compiled	[CE]  ')'  expected	46	None	replace
492	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getFirstChild();)  {  for(Node  child  =  n.getLastChild();  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getFirstChild();)  {  for(Node  child  =  n.getLastChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getFirstChild();)  {  for(Node  child  =  n.getLastChild();	  for(Node    child    =    n.getLastChild();    Node    n    =    child.getFirstChild();    for(Node    child    =    n.getLastChild();    	non-compiled	[CE]  ')'  expected	46	None	replace
493	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getFirstChild());  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getFirstChild());  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getFirstChild());	  for(Node    child    =    n.getLastChild();    Node    n    =    child.getFirstChild();    for(Node    child    =    n.getLastChild();    	non-compiled	[CE]  not  a  statement	46	None	replace
494	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getFirstChild())  {  for(Node  child  =  n.getLastChild();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getFirstChild())  {  for(Node  child  =  n.getLastChild();  }  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getFirstChild())  {  for(Node  child  =  n.getLastChild();  }	  for(Node    child    =    n.getLastChild();    Node    n    =    child.getFirstChild();    for(Node    child    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
495	[BUG]  [BUGGY]  for(Node  child  =  n.getFirstChild();  parent  <  n.getParent();  for(Node  child  =  parent.getFirstChild();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  =  n.getFirstChild();  parent  <  n.getParent();  for(Node  child  =  parent.getFirstChild();  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getFirstChild();  parent  <  n.getParent();  for(Node  child  =  parent.getFirstChild();	  for(Node    child    =    n.getLastChild();    Node    parent    =    n.getParent();    for(Node    child    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
496	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  &&  child.getFirstChild()  ==  n);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  &&  child.getFirstChild()  ==  n);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkState(child.getType()  ==  Token.CALL  &&  child.getFirstChild()  ==  n);	  Preconditions.checkState(child.getType()    ==    Token.CALL);    	non-compiled	[CE]  not  a  statement	58	None	replace
497	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.NAME);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.NAME);	  Preconditions.checkState(child.getType()    ==    Token.CALL);    	non-compiled	[CE]  not  a  statement	58	None	replace
498	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.CATCH);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.CATCH);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.CATCH);	  Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  not  a  statement	57	None	replace
499	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.SCRIPT);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.SCRIPT);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.SCRIPT);	  Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  not  a  statement	57	None	replace
500	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.getType()  ==  Token.CATCH);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.getType()  ==  Token.CATCH);  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.getType()  ==  Token.CATCH);	  Preconditions.checkState(child.getType()    ==    Token.VAR);    	non-compiled	[CE]  not  a  statement	59	None	replace
501	[BUG]  [BUGGY]  for(Node  child  :  n.getFirstChild().cloneTree());  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]          return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }        [BUGGY]  for(Node  child  :  n.getFirstChild().cloneTree());  [BUGGY]      child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  :  n.getFirstChild().cloneTree());	  for(Node    child    :    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	13	None	replace
