bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(Node  child  =  n.getChildCount();  [CE]  incompatible  types  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  for(Node  child  =  n.getChildCount();  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getChildCount();	  for(Node    child    =    n.getNext();    	non-compiled	[CE]  incompatible  types	5	None	replace
2	[BUG]  [BUGGY]  for(Node  child  =  n.getCfgNode();  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  for(Node  child  =  n.getCfgNode();  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getCfgNode();	  for(Node    child    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
3	[BUG]  [BUGGY]  for(Node  child  =  n.getChildren();  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  for(Node  child  =  n.getChildren();  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getChildren();	  for(Node    child    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
4	[BUG]  [BUGGY]  for(Node  child  =  n.getCurrentNode();  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  for(Node  child  =  n.getCurrentNode();  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getCurrentNode();	  for(Node    child    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
5	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  for(Node  child  =  n.getNext();  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  for(Node  child  =  n.getNext();  for(Node  child  =  n.getNext();  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.getNext();    for(Node  child  =  n.getNext();	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
6	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  Node  n  =  child.getNext();  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  for(Node  child  =  n.getNext();  Node  n  =  child.getNext();  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.getNext();    Node  n  =  child.getNext();	  	non-compiled	[CE]  ';'  expected	4	None	add
7	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  Node  n  =  child.getFirstChild();  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  for(Node  child  =  n.getNext();  Node  n  =  child.getFirstChild();  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.getNext();    Node  n  =  child.getFirstChild();	  	non-compiled	[CE]  ';'  expected	4	None	add
8	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  Node  n  =  child.getParent();  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  for(Node  child  =  n.getNext();  Node  n  =  child.getParent();  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.getNext();    Node  n  =  child.getParent();	  	non-compiled	[CE]  ';'  expected	4	None	add
9	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  Node  n  =  child.getLastChild();  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  for(Node  child  =  n.getNext();  Node  n  =  child.getLastChild();  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.getNext();    Node  n  =  child.getLastChild();	  	non-compiled	[CE]  ';'  expected	4	None	add
10	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  Node  child  =  n.getNext();  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  for(Node  child  =  n.getNext();  Node  child  =  n.getNext();  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.getNext();    Node  child  =  n.getNext();	  	non-compiled	[CE]  ';'  expected	4	None	add
11	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  For(Node  child  =  n.getNext();  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  for(Node  child  =  n.getNext();  For(Node  child  =  n.getNext();  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.getNext();    For(Node  child  =  n.getNext();	  	non-compiled	[CE]  ')'  expected	4	None	add
12	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  NodeTraversal.traverse(compiler,  n,  variable);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  for(Node  child  =  n.getNext();  NodeTraversal.traverse(compiler,  n,  variable);  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.getNext();    NodeTraversal.traverse(compiler,  n,  variable);	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
13	[BUG]  [BUGGY]  for(Node  child  :  n.getFirstChild();  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  for(Node  child  :  n.getFirstChild();  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  :  n.getFirstChild();	  for(Node    child    =    n.getLastChild();    	non-compiled	[CE]  ')'  expected	2	None	replace
14	[BUG]  [BUGGY]  for(Node  child  =  this.n.getFirstChild();  [CE]  cannot  find  symbol  n  [FE]      AssertionFailedError    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  for(Node  child  =  this.n.getFirstChild();  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  this.n.getFirstChild();	  for(Node    child    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  n	2	None	replace
15	[BUG]  [BUGGY]  For  (Node  child  =  n.getLastChild();  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  For  (Node  child  =  n.getLastChild();  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For  (Node  child  =  n.getLastChild();	  For    (Node    child    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	3	None	replace
16	[BUG]  [BUGGY]  For  (Node  child  =  n.getNext();  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  For  (Node  child  =  n.getNext();  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For  (Node  child  =  n.getNext();	  For    (Node    child    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	3	None	replace
17	[BUG]  [BUGGY]  For  (Node  child  =  n.getChildCount();  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  For  (Node  child  =  n.getChildCount();  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For  (Node  child  =  n.getChildCount();	  For    (Node    child    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	3	None	replace
18	[BUG]  [BUGGY]  For(Node  child  =  n.getFirstChild(),  variable);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  For(Node  child  =  n.getFirstChild(),  variable);  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getFirstChild(),  variable);	  For    (Node    child    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	3	None	replace
19	[BUG]  [BUGGY]  for(Node  child  =  n.getLastChild();  Node  child  =  n.getFirstChild();  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  for(Node  child  =  n.getLastChild();  Node  child  =  n.getFirstChild();  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.getLastChild();    Node  child  =  n.getFirstChild();	  	non-compiled	[CE]  ';'  expected	1	None	add
20	[BUG]  [BUGGY]  for(Node  child  =  n.getLastChild();  for(Node  child  =  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  for(Node  child  =  n.getLastChild();  for(Node  child  =  n.getLastChild();  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.getLastChild();    for(Node  child  =  n.getLastChild();	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
21	[BUG]  [BUGGY]  for(Node  child  =  n.getLastChild();  Node  child  =  n.getLastChild();  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  for(Node  child  =  n.getLastChild();  Node  child  =  n.getLastChild();  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.getLastChild();    Node  child  =  n.getLastChild();	  	non-compiled	[CE]  ';'  expected	1	None	add
22	[BUG]  [BUGGY]  for(Node  child  =  n.getLastChild();  Node  n  =  child.getFirstChild();  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  for(Node  child  =  n.getLastChild();  Node  n  =  child.getFirstChild();  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.getLastChild();    Node  n  =  child.getFirstChild();	  	non-compiled	[CE]  ';'  expected	1	None	add
23	[BUG]  [BUGGY]  for(Node  child  =  n.getLastChild();  For(Node  child  =  n.getLastChild();  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  for(Node  child  =  n.getLastChild();  For(Node  child  =  n.getLastChild();  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.getLastChild();    For(Node  child  =  n.getLastChild();	  	non-compiled	[CE]  ')'  expected	1	None	add
24	[BUG]  [BUGGY]  for(Node  child  =  n.getLastChild();  for(Node  child  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  for(Node  child  =  n.getLastChild();  for(Node  child  =  n.getFirstChild();  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.getLastChild();    for(Node  child  =  n.getFirstChild();	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
25	[BUG]  [BUGGY]  for(Node  child  =  n.getLastChild();  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  for(Node  child  =  n.getLastChild();  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.getLastChild();    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);	  	non-compiled	[CE]  ';'  expected	1	None	add
26	[BUG]  [BUGGY]  for(Node  child  =  n.getLastChild();  Node  parent  =  child.getParent();  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  for(Node  child  =  n.getLastChild();  Node  parent  =  child.getParent();  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.getLastChild();    Node  parent  =  child.getParent();	  	non-compiled	[CE]  ';'  expected	1	None	add
27	[BUG]  [BUGGY]  Node  child  =  n.getFirstChild();  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  Node  child  =  n.getFirstChild();  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Node  child  =  n.getFirstChild();	      	non-compiled	[CE]  not  a  statement	6	None	replace
28	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);	      	non-compiled	[CE]  not  a  statement	6	None	replace
29	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);	      	non-compiled	[CE]  not  a  statement	6	None	replace
30	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  Compiler.getInstance();  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  Predicate  matchRemovableAssigns  =  Compiler.getInstance();  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Predicate  matchRemovableAssigns  =  Compiler.getInstance();	      	non-compiled	[CE]  not  a  statement	6	None	replace
31	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  n.getFirstChild();  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  Predicate  matchRemovableAssigns  =  n.getFirstChild();  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Predicate  matchRemovableAssigns  =  n.getFirstChild();	      	non-compiled	[CE]  not  a  statement	6	None	replace
32	[BUG]  [BUGGY]  Node  child  =  n.getLastChild();  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  Node  child  =  n.getLastChild();  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Node  child  =  n.getLastChild();	      	non-compiled	[CE]  not  a  statement	6	None	replace
33	[BUG]  [BUGGY]  Node  child  =  n.getNext();  [CE]  not  a  statement  [FE]                          AssertionFailedError    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  Node  child  =  n.getNext();  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Node  child  =  n.getNext();	      	non-compiled	[CE]  not  a  statement	6	None	replace
34	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  for(Node  child  =  n.getParent();  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	add	for(Node  child  =  n.getParent();	  for(Node    child    =    n.getNext();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	5	61	replace
35	[BUG]  [BUGGY]  for(Node  child  =  n.getParent();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  for(Node  child  =  n.getParent();  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getParent();	  for(Node    child    =    n.getNext();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	5	61	replace
36	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  Node  parent  =  child.getParent();  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  for(Node  child  =  n.getNext();  Node  parent  =  child.getParent();  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.getNext();    Node  parent  =  child.getParent();	  	non-compiled	[CE]  ';'  expected	4	None	add
37	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  Node  child  =  n.getFirstChild();  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  for(Node  child  =  n.getNext();  Node  child  =  n.getFirstChild();  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.getNext();    Node  child  =  n.getFirstChild();	  	non-compiled	[CE]  ';'  expected	4	None	add
38	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  Node  parent  =  n.getParent();  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  for(Node  child  =  n.getNext();  Node  parent  =  n.getParent();  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.getNext();    Node  parent  =  n.getParent();	  	non-compiled	[CE]  ';'  expected	4	None	add
39	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  Node  child  =  n.getParent();  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  for(Node  child  =  n.getNext();  Node  child  =  n.getParent();  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.getNext();    Node  child  =  n.getParent();	  	non-compiled	[CE]  ';'  expected	4	None	add
40	[BUG]  [BUGGY]  for(Node  child  =  n.getNext();  Node  next  =  child.getNext();  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  for(Node  child  =  n.getNext();  Node  next  =  child.getNext();  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.getNext();    Node  next  =  child.getNext();	  	non-compiled	[CE]  ';'  expected	4	None	add
41	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  for(Node  child  =  n.removeFirstChild();  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	add	for(Node  child  =  n.removeFirstChild();	  for(Node    child    =    n.getLastChild();    	compilable	  [FE]  RuntimeException  	2	61	replace
42	[BUG]  [BUGGY]  for(Node  child  =  n.removeFirstChild();  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  for(Node  child  =  n.removeFirstChild();  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.removeFirstChild();	  for(Node    child    =    n.getLastChild();    	compilable	  [FE]  RuntimeException  	2	61	replace
43	[BUG]  [BUGGY]  for(Node  child  =  n.getfirstChild();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  for(Node  child  =  n.getfirstChild();  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.getfirstChild();	  for(Node    child    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
44	[BUG]  [BUGGY]  Preconditions.checkNotNull(variable);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  Preconditions.checkNotNull(variable);  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkNotNull(variable);	      	non-compiled	[CE]  not  a  statement	6	None	replace
45	[BUG]  [BUGGY]  Predicates.checkNotNull(variable);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  Predicates.checkNotNull(variable);  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Predicates.checkNotNull(variable);	      	non-compiled	[CE]  not  a  statement	6	None	replace
46	[BUG]  [BUGGY]  for(Node  child  =  n.getLastChild();  Node  n  =  child.getFirstChild();  for(Node  child  =  n.getLastChild();  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  for(Node  child  =  n.getLastChild();  Node  n  =  child.getFirstChild();  for(Node  child  =  n.getLastChild();  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.getLastChild();    Node  n  =  child.getFirstChild();  for(Node  child  =  n.getLastChild();	  	non-compiled	[CE]  ';'  expected	1	None	add
47	[BUG]  [BUGGY]  for(Node  child  =  n.getLastChild();  Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  for(Node  child  =  n.getLastChild();  Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.getLastChild();    Node  parent  =  n.getParent();  for(Node  child  =  parent.getFirstChild();	  	non-compiled	[CE]  ';'  expected	1	None	add
48	[BUG]  [BUGGY]  for(Node  child  =  n.getLastChild();  Node  parent  =  child.getParent();  for(Node  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  for(Node  child  =  n.getLastChild();  Node  parent  =  child.getParent();  for(Node  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;  }  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.getLastChild();    Node  parent  =  child.getParent();  for(Node  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;  }	  	non-compiled	[CE]  ';'  expected	1	None	add
49	[BUG]  [BUGGY]  for(Node  child  =  n.getLastChild();  Node  parent  =  child.getParent();  for(Node  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  return  state;  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  for(Node  child  =  n.getLastChild();  Node  parent  =  child.getParent();  for(Node  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  return  state;  }  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.getLastChild();    Node  parent  =  child.getParent();  for(Node  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  return  state;  }	  	non-compiled	[CE]  ';'  expected	1	None	add
50	[BUG]  [BUGGY]  for(Node  child  =  n.getLastChild();  Node  parent  =  child.getParent();  for(Node  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  for(Node  child  =  n.getLastChild();  Node  parent  =  child.getParent();  for(Node  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.getLastChild();    Node  parent  =  child.getParent();  for(Node  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return	  	non-compiled	[CE]  ';'  expected	1	None	add
51	[BUG]  [BUGGY]  for(Node  child  =  n.getLastChild();  Node  parent  =  child.getParent();  for(Node  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  continue;  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  for(Node  child  =  n.getLastChild();  Node  parent  =  child.getParent();  for(Node  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  continue;  }  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node    child    =    n.getLastChild();    Node  parent  =  child.getParent();  for(Node  child  =  parent.getFirstChild();  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  continue;  }	  	non-compiled	[CE]  ';'  expected	1	None	add
52	[BUG]  [BUGGY]  For(Node  child  =  n.getFirstChild().cloneTree();  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  For(Node  child  =  n.getFirstChild().cloneTree();  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getFirstChild().cloneTree();	  For    (Node    child    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	3	None	replace
53	[BUG]  [BUGGY]  For(Node  child  =  n.getFirstChild().getNext();  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  For(Node  child  =  n.getFirstChild().getNext();  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	For(Node  child  =  n.getFirstChild().getNext();	  For    (Node    child    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	3	None	replace
54	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  for(Node  child  =  n.cloneTree();  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	add	for(Node  child  =  n.cloneTree();	  for(Node    child    =    n.getLastChild();    	compilable	  [FE]  RuntimeException  	2	63	replace
55	[BUG]  [BUGGY]  for(Node  child  =  n.cloneTree();  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  for(Node  child  =  n.cloneTree();  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	for(Node  child  =  n.cloneTree();	  for(Node    child    =    n.getLastChild();    	compilable	  [FE]  RuntimeException  	2	63	replace
56	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME);  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME);	      	non-compiled	[CE]  not  a  statement	6	None	replace
57	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkState(child.getType()  ==  Token.BLOCK);	      	non-compiled	[CE]  not  a  statement	6	None	replace
58	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL);  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkState(child.getType()  ==  Token.CALL);	      	non-compiled	[CE]  not  a  statement	6	None	replace
59	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR);  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR);  [BUGGY]    child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	337	337	6	replace	Preconditions.checkState(child.getType()  ==  Token.VAR);	      	non-compiled	[CE]  not  a  statement	6	None	replace
