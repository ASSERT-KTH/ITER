bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren()  ||  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren()  ||  n.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren()  ||  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    &&    n.getFirstChild()!=    null    &&    n.hasChildren()    ||    n.hasChildren())    {    if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren()  ||  n.hasChildren())  {	  	non-compiled	[CE]  illegal  start  of  expression	167	None	add
2	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren()  ||  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild()  ==  null  &&  n.hasChildren()  ||  n.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren()  ||  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild()  ==  null  &&  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    &&    n.getFirstChild()!=    null    &&    n.hasChildren()    ||    n.hasChildren())    {    if(n.hasChildren()  &&  n.getFirstChild()  ==  null  &&  n.hasChildren()  ||  n.hasChildren())  {	  	non-compiled	[CE]  illegal  start  of  expression	167	None	add
3	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren()  ||  n.hasChildren())  {  If(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren()  ||  n.hasChildren())  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren()  ||  n.hasChildren())  {  If(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    &&    n.getFirstChild()!=    null    &&    n.hasChildren()    ||    n.hasChildren())    {    If(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren()  ||  n.hasChildren())  {	  	non-compiled	[CE]  ';'  expected	167	None	add
4	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren()  ||  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild()  >=  null  &&  n.hasChildren()  ||  n.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren()  ||  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild()  >=  null  &&  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    &&    n.getFirstChild()!=    null    &&    n.hasChildren()    ||    n.hasChildren())    {    if(n.hasChildren()  &&  n.getFirstChild()  >=  null  &&  n.hasChildren()  ||  n.hasChildren())  {	  	non-compiled	[CE]  illegal  start  of  expression	167	None	add
5	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren()  ||  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild()  >>  null  &&  n.hasChildren()  ||  n.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren()  ||  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild()  >>  null  &&  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    &&    n.getFirstChild()!=    null    &&    n.hasChildren()    ||    n.hasChildren())    {    if(n.hasChildren()  &&  n.getFirstChild()  >>  null  &&  n.hasChildren()  ||  n.hasChildren())  {	  	non-compiled	[CE]  illegal  start  of  expression	167	None	add
6	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren()  ||  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild()  [Delete]  null  &&  n.hasChildren()  ||  n.hasChildren())  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren()  ||  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild()  [Delete]  null  &&  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    &&    n.getFirstChild()!=    null    &&    n.hasChildren()    ||    n.hasChildren())    {    if(n.hasChildren()  &&  n.getFirstChild()  [Delete]  null  &&  n.hasChildren()  ||  n.hasChildren())  {	  	non-compiled	[CE]  ')'  expected	167	None	add
7	[BUG]  [BUGGY]  if(n.getFirstChild().hasChildren()  ||  n.getFirstChild().hasChildren())  {  if(n.getFirstChild().hasChildren()  ||  n.getFirstChild().hasChildren())  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.getFirstChild().hasChildren()  ||  n.getFirstChild().hasChildren())  {  if(n.getFirstChild().hasChildren()  ||  n.getFirstChild().hasChildren())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild().hasChildren()    ||    n.getFirstChild().hasChildren())    {    if(n.getFirstChild().hasChildren()  ||  n.getFirstChild().hasChildren())  {	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
8	[BUG]  [BUGGY]  if(n.getFirstChild().hasChildren()  ||  n.getFirstChild().hasChildren())  {  If(n.getFirstChild().hasChildren()  ||  n.getFirstChild().hasChildren())  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.getFirstChild().hasChildren()  ||  n.getFirstChild().hasChildren())  {  If(n.getFirstChild().hasChildren()  ||  n.getFirstChild().hasChildren())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild().hasChildren()    ||    n.getFirstChild().hasChildren())    {    If(n.getFirstChild().hasChildren()  ||  n.getFirstChild().hasChildren())  {	  	non-compiled	[CE]  ';'  expected	47	None	add
9	[BUG]  [BUGGY]  if(n.getFirstChild().hasChildren()  ||  n.getFirstChild().hasChildren())  {  if(n.getFirstChild().hasChildren()  ||  n.getLastChild().hasChildren())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.getFirstChild().hasChildren()  ||  n.getFirstChild().hasChildren())  {  if(n.getFirstChild().hasChildren()  ||  n.getLastChild().hasChildren())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild().hasChildren()    ||    n.getFirstChild().hasChildren())    {    if(n.getFirstChild().hasChildren()  ||  n.getLastChild().hasChildren())  {	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
10	[BUG]  [BUGGY]  if(n.getFirstChild().hasChildren()  ||  n.getFirstChild().hasChildren())  {  if(n.getFirstChild().hasChildren()  ||  n.getfirstChild().hasChildren())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.getFirstChild().hasChildren()  ||  n.getFirstChild().hasChildren())  {  if(n.getFirstChild().hasChildren()  ||  n.getfirstChild().hasChildren())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild().hasChildren()    ||    n.getFirstChild().hasChildren())    {    if(n.getFirstChild().hasChildren()  ||  n.getfirstChild().hasChildren())  {	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
11	[BUG]  [BUGGY]  if(n.getFirstChild().hasChildren()  ||  n.getFirstChild().hasChildren())  {  if(N.getFirstChild().hasChildren()  ||  n.getFirstChild().hasChildren())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.getFirstChild().hasChildren()  ||  n.getFirstChild().hasChildren())  {  if(N.getFirstChild().hasChildren()  ||  n.getFirstChild().hasChildren())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild().hasChildren()    ||    n.getFirstChild().hasChildren())    {    if(N.getFirstChild().hasChildren()  ||  n.getFirstChild().hasChildren())  {	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
12	[BUG]  [BUGGY]  if(n.getFirstChild().hasChildren()  ||  n.getFirstChild().hasChildren())  {  if(t.getFirstChild().hasChildren()  ||  n.getFirstChild().hasChildren())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.getFirstChild().hasChildren()  ||  n.getFirstChild().hasChildren())  {  if(t.getFirstChild().hasChildren()  ||  n.getFirstChild().hasChildren())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild().hasChildren()    ||    n.getFirstChild().hasChildren())    {    if(t.getFirstChild().hasChildren()  ||  n.getFirstChild().hasChildren())  {	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if  (n.getFirstChild().getType()  ==  Token.RETURN  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.RETURN)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if  (n.getFirstChild().getType()  ==  Token.RETURN  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.RETURN)  {	  if    (n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	6	60	replace
14	[BUG]  [BUGGY]  if  (n.getFirstChild().getType()  ==  Token.RETURN  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.RETURN)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if  (n.getFirstChild().getType()  ==  Token.RETURN  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.RETURN)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (n.getFirstChild().getType()  ==  Token.RETURN  &&  n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.RETURN)  {	  if    (n.hasChildren()    &&    n.getLastChild().getType()    ==    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	6	60	replace
15	[BUG]  [BUGGY]  if(!NodeUtil.isForIn(n)&&!NodeUtil.isConditionExpression(n))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(!NodeUtil.isForIn(n)&&!NodeUtil.isConditionExpression(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(!NodeUtil.isForIn(n)&&!NodeUtil.isConditionExpression(n))  {	  if(!NodeUtil.isForIn(n))    {    if(!NodeUtil.isForIn(n)&&!NodeUtil.isConditionExpression(n))    {    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
16	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&!NodeUtil.isConditionExpression(n))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&!NodeUtil.isConditionExpression(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(NodeUtil.isExpressionNode(n)&&!NodeUtil.isConditionExpression(n))  {	  if(!NodeUtil.isForIn(n))    {    if(!NodeUtil.isForIn(n)&&!NodeUtil.isConditionExpression(n))    {    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
17	[BUG]  [BUGGY]  if(NodeUtil.isForIn(n)||  NodeUtil.isConditionExpression(n))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(NodeUtil.isForIn(n)||  NodeUtil.isConditionExpression(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(NodeUtil.isForIn(n)||  NodeUtil.isConditionExpression(n))  {	  if(!NodeUtil.isForIn(n))    {    if(!NodeUtil.isForIn(n)&&!NodeUtil.isConditionExpression(n))    {    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
18	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(!NodeUtil.isForIn(n)&&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(!NodeUtil.isForIn(n)&&!NodeUtil.isFunctionDeclaration(n))  {	  if(!NodeUtil.isForIn(n))    {    if(!NodeUtil.isForIn(n)&&!NodeUtil.isConditionExpression(n))    {    	compilable	  [FE]  AssertionFailedError  	75	57	replace
19	[BUG]  [BUGGY]  if(!NodeUtil.isForIn(n)&&!NodeUtil.isFunctionDeclaration(n))  {  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(!NodeUtil.isForIn(n)&&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(!NodeUtil.isForIn(n)&&!NodeUtil.isFunctionDeclaration(n))  {	  if(!NodeUtil.isForIn(n))    {    if(!NodeUtil.isForIn(n)&&!NodeUtil.isConditionExpression(n))    {    	compilable	  [FE]  AssertionFailedError  	75	57	replace
20	[BUG]  [BUGGY]  if(NodeUtil.isForIn(n)&&!NodeUtil.isConditionExpression(n))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(NodeUtil.isForIn(n)&&!NodeUtil.isConditionExpression(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(NodeUtil.isForIn(n)&&!NodeUtil.isConditionExpression(n))  {	  if(!NodeUtil.isForIn(n))    {    if(!NodeUtil.isForIn(n)&&!NodeUtil.isConditionExpression(n))    {    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
21	[BUG]  [BUGGY]  if(NodeUtil.isConditionExpression(n)&&!NodeUtil.isForIn(n))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(NodeUtil.isConditionExpression(n)&&!NodeUtil.isForIn(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(NodeUtil.isConditionExpression(n)&&!NodeUtil.isForIn(n))  {	  if(!NodeUtil.isForIn(n))    {    if(!NodeUtil.isForIn(n)&&!NodeUtil.isConditionExpression(n))    {    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
22	[BUG]  [BUGGY]  if(state.hasFirstChild()  ||  n.hasOneChild())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(state.hasFirstChild()  ||  n.hasOneChild())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(state.hasFirstChild()  ||  n.hasOneChild())  {	  if(n.hasFirstChild()    ||    state.hasOneChild())    {    	non-compiled	[CE]  cannot  find  symbol	232	None	replace
23	[BUG]  [BUGGY]  if(n.getFirstChild()  ||  state.hasOneChild())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.getFirstChild()  ||  state.hasOneChild())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild()  ||  state.hasOneChild())  {	  if(n.hasFirstChild()    ||    state.hasOneChild())    {    	non-compiled	[CE]  cannot  find  symbol	232	None	replace
24	[BUG]  [BUGGY]  if(n.hasFirstChild()  &&  state.hasOneChild())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasFirstChild()  &&  state.hasOneChild())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasFirstChild()  &&  state.hasOneChild())  {	  if(n.hasFirstChild()    ||    state.hasOneChild())    {    	non-compiled	[CE]  cannot  find  symbol	232	None	replace
25	[BUG]  [BUGGY]  if(n.hasOneChild()  ||  state.hasOneChild())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasOneChild()  ||  state.hasOneChild())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasOneChild()  ||  state.hasOneChild())  {	  if(n.hasFirstChild()    ||    state.hasOneChild())    {    	non-compiled	[CE]  cannot  find  symbol	232	None	replace
26	[BUG]  [BUGGY]  if(n.hasLastChild()  ||  state.hasOneChild())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasLastChild()  ||  state.hasOneChild())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasLastChild()  ||  state.hasOneChild())  {	  if(n.hasFirstChild()    ||    state.hasOneChild())    {    	non-compiled	[CE]  cannot  find  symbol	232	None	replace
27	[BUG]  [BUGGY]  if(state.hasFirstChild()  ||  state.hasOneChild())  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(state.hasFirstChild()  ||  state.hasOneChild())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(state.hasFirstChild()  ||  state.hasOneChild())  {	  if(n.hasFirstChild()    ||    state.hasOneChild())    {    	non-compiled	[CE]  cannot  find  symbol	232	None	replace
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if  (!NodeUtil.isGetProp(n)&&  n.hasChildren()  ||  NodeUtil.isForIn(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if  (!NodeUtil.isGetProp(n)&&  n.hasChildren()  ||  NodeUtil.isForIn(n))  {	  if    (!NodeUtil.isGetProp(n)&&    n.hasChildren()    &&    NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	81	57	replace
29	[BUG]  [BUGGY]  if  (!NodeUtil.isGetProp(n)&&  n.hasChildren()  ||  NodeUtil.isForIn(n))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if  (!NodeUtil.isGetProp(n)&&  n.hasChildren()  ||  NodeUtil.isForIn(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (!NodeUtil.isGetProp(n)&&  n.hasChildren()  ||  NodeUtil.isForIn(n))  {	  if    (!NodeUtil.isGetProp(n)&&    n.hasChildren()    &&    NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	81	57	replace
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if  (!NodeUtil.isGetProp(n)||  n.hasChildren()  &&  NodeUtil.isForIn(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if  (!NodeUtil.isGetProp(n)||  n.hasChildren()  &&  NodeUtil.isForIn(n))  {	  if    (!NodeUtil.isGetProp(n)&&    n.hasChildren()    &&    NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	81	57	replace
31	[BUG]  [BUGGY]  if  (!NodeUtil.isGetProp(n)||  n.hasChildren()  &&  NodeUtil.isForIn(n))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if  (!NodeUtil.isGetProp(n)||  n.hasChildren()  &&  NodeUtil.isForIn(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (!NodeUtil.isGetProp(n)||  n.hasChildren()  &&  NodeUtil.isForIn(n))  {	  if    (!NodeUtil.isGetProp(n)&&    n.hasChildren()    &&    NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	81	57	replace
32	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if  (!NodeUtil.isGetProp(n)&&  n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if  (!NodeUtil.isGetProp(n)&&  n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (!NodeUtil.isGetProp(n)&&    n.hasChildren()    &&    NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	81	60	replace
33	[BUG]  [BUGGY]  if  (!NodeUtil.isGetProp(n)&&  n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if  (!NodeUtil.isGetProp(n)&&  n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (!NodeUtil.isGetProp(n)&&  n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (!NodeUtil.isGetProp(n)&&    n.hasChildren()    &&    NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	81	60	replace
34	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if  (!NodeUtil.isGetProp(n)&&  n.hasChildren()  &&  NodeUtil.isAssignmentOp(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if  (!NodeUtil.isGetProp(n)&&  n.hasChildren()  &&  NodeUtil.isAssignmentOp(n))  {	  if    (!NodeUtil.isGetProp(n)&&    n.hasChildren()    &&    NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	81	60	replace
35	[BUG]  [BUGGY]  if  (!NodeUtil.isGetProp(n)&&  n.hasChildren()  &&  NodeUtil.isAssignmentOp(n))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if  (!NodeUtil.isGetProp(n)&&  n.hasChildren()  &&  NodeUtil.isAssignmentOp(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (!NodeUtil.isGetProp(n)&&  n.hasChildren()  &&  NodeUtil.isAssignmentOp(n))  {	  if    (!NodeUtil.isGetProp(n)&&    n.hasChildren()    &&    NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	81	60	replace
36	[BUG]  [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isGetProp(n))  {  if  (n.hasChildren()  &&!NodeUtil.isGetProp(n))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isGetProp(n))  {  if  (n.hasChildren()  &&!NodeUtil.isGetProp(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if    (n.hasChildren()    &&!NodeUtil.isGetProp(n))    {    if  (n.hasChildren()  &&!NodeUtil.isGetProp(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	146	None	add
37	[BUG]  [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isGetProp(n))  {  If  (n.hasChildren()  &&!NodeUtil.isGetProp(n))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isGetProp(n))  {  If  (n.hasChildren()  &&!NodeUtil.isGetProp(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if    (n.hasChildren()    &&!NodeUtil.isGetProp(n))    {    If  (n.hasChildren()  &&!NodeUtil.isGetProp(n))  {	  	non-compiled	[CE]  ';'  expected	146	None	add
38	[BUG]  [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isGetProp(n))  {  if  (NodeUtil.hasChildren()  &&!NodeUtil.isGetProp(n))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isGetProp(n))  {  if  (NodeUtil.hasChildren()  &&!NodeUtil.isGetProp(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if    (n.hasChildren()    &&!NodeUtil.isGetProp(n))    {    if  (NodeUtil.hasChildren()  &&!NodeUtil.isGetProp(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	146	None	add
39	[BUG]  [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isGetProp(n))  {  if  (N.hasChildren()  &&!NodeUtil.isGetProp(n))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isGetProp(n))  {  if  (N.hasChildren()  &&!NodeUtil.isGetProp(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if    (n.hasChildren()    &&!NodeUtil.isGetProp(n))    {    if  (N.hasChildren()  &&!NodeUtil.isGetProp(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	146	None	add
40	[BUG]  [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isGetProp(n))  {  if  (n.hasChildren()  &&!NodeUtil.getGetProp(n))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isGetProp(n))  {  if  (n.hasChildren()  &&!NodeUtil.getGetProp(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if    (n.hasChildren()    &&!NodeUtil.isGetProp(n))    {    if  (n.hasChildren()  &&!NodeUtil.getGetProp(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	146	None	add
41	[BUG]  [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isFunction(n))  {  if(n.hasChildren()  ||!NodeUtil.isFunction(n))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isFunction(n))  {  if(n.hasChildren()  ||!NodeUtil.isFunction(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    ||!NodeUtil.isFunction(n))    {    if(n.hasChildren()  ||!NodeUtil.isFunction(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	229	None	add
42	[BUG]  [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isFunction(n))  {  If(n.hasChildren()  ||!NodeUtil.isFunction(n))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isFunction(n))  {  If(n.hasChildren()  ||!NodeUtil.isFunction(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    ||!NodeUtil.isFunction(n))    {    If(n.hasChildren()  ||!NodeUtil.isFunction(n))  {	  	non-compiled	[CE]  ';'  expected	229	None	add
43	[BUG]  [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isFunction(n))  {  if(n.hasChildren()  ||!NodeUtil.getFunction(n))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isFunction(n))  {  if(n.hasChildren()  ||!NodeUtil.getFunction(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    ||!NodeUtil.isFunction(n))    {    if(n.hasChildren()  ||!NodeUtil.getFunction(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	229	None	add
44	[BUG]  [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isFunction(n))  {  if(N.hasChildren()  ||!NodeUtil.isFunction(n))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isFunction(n))  {  if(N.hasChildren()  ||!NodeUtil.isFunction(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    ||!NodeUtil.isFunction(n))    {    if(N.hasChildren()  ||!NodeUtil.isFunction(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	229	None	add
45	[BUG]  [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isFunction(n))  {  if(n.hasChildren()  ||! "NodeUtil.isFunction(n))  {  [CE]  unclosed  string  literal  [FE]            AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isFunction(n))  {  if(n.hasChildren()  ||! "NodeUtil.isFunction(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    ||!NodeUtil.isFunction(n))    {    if(n.hasChildren()  ||! "NodeUtil.isFunction(n))  {	  	non-compiled	[CE]  unclosed  string  literal	229	None	add
46	[BUG]  [BUGGY]  if(n.hasChildren()  &&  nodes.hasNext())  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  &&  nodes.hasNext())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()  &&  nodes.hasNext())  {	  if(n.hasChildren()    ||    nodes.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
47	[BUG]  [BUGGY]  if(n.hasChildren()  ||  nodes.hasNext()  ||  n.getFirstChild().hasNext())  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  ||  nodes.hasNext()  ||  n.getFirstChild().hasNext())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()  ||  nodes.hasNext()  ||  n.getFirstChild().hasNext())  {	  if(n.hasChildren()    ||    nodes.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
48	[BUG]  [BUGGY]  if(nodes.hasChildren()  ||  n.hasNext())  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(nodes.hasChildren()  ||  n.hasNext())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(nodes.hasChildren()  ||  n.hasNext())  {	  if(n.hasChildren()    ||    nodes.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
49	[BUG]  [BUGGY]  if(n.getChildren()  ||  nodes.hasNext())  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.getChildren()  ||  nodes.hasNext())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getChildren()  ||  nodes.hasNext())  {	  if(n.hasChildren()    ||    nodes.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
50	[BUG]  [BUGGY]  if(nodes.hasChildren()  ||  nodes.hasNext())  {  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(nodes.hasChildren()  ||  nodes.hasNext())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(nodes.hasChildren()  ||  nodes.hasNext())  {	  if(n.hasChildren()    ||    nodes.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
51	[BUG]  [BUGGY]  if(n.getFirstChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                        AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.getFirstChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {	  if(n.hasFirstChild()    ||    n.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	125	None	replace
52	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasFirstChild()  ||  n.getLastChild().getType()  ==  Token.NAME)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasFirstChild()  ||  n.getLastChild().getType()  ==  Token.NAME)  {	  if(n.hasFirstChild()    ||    n.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
53	[BUG]  [BUGGY]  if(n.hasFirstChild()  &&  n.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasFirstChild()  &&  n.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasFirstChild()  &&  n.getFirstChild().getType()  ==  Token.NAME)  {	  if(n.hasFirstChild()    ||    n.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
54	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  n.getFirstChild().getType()!=  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasFirstChild()  ||  n.getFirstChild().getType()!=  Token.NAME)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasFirstChild()  ||  n.getFirstChild().getType()!=  Token.NAME)  {	  if(n.hasFirstChild()    ||    n.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
55	[BUG]  [BUGGY]  if(n.isFirstChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.isFirstChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.isFirstChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {	  if(n.hasFirstChild()    ||    n.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
56	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  state.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasFirstChild()  ||  state.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasFirstChild()  ||  state.getFirstChild().getType()  ==  Token.NAME)  {	  if(n.hasFirstChild()    ||    n.getFirstChild().getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
57	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(n))  {  if(NodeUtil.isAssignmentOp(n))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(NodeUtil.isAssignmentOp(n))  {  if(NodeUtil.isAssignmentOp(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(NodeUtil.isAssignmentOp(n))    {    if(NodeUtil.isAssignmentOp(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	98	None	add
58	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(n))  {  if(NodeUtil.isAssignmentOp(n))  <  tryRemoveAssignment(t,  n.getFirstChild(),  state);  [CE]  >  expected  [FE]      AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(NodeUtil.isAssignmentOp(n))  {  if(NodeUtil.isAssignmentOp(n))  <  tryRemoveAssignment(t,  n.getFirstChild(),  state);  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(NodeUtil.isAssignmentOp(n))    {    if(NodeUtil.isAssignmentOp(n))  <  tryRemoveAssignment(t,  n.getFirstChild(),  state);	  	non-compiled	[CE]  >  expected	98	None	add
59	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(n))  {  If(NodeUtil.isAssignmentOp(n))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(NodeUtil.isAssignmentOp(n))  {  If(NodeUtil.isAssignmentOp(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(NodeUtil.isAssignmentOp(n))    {    If(NodeUtil.isAssignmentOp(n))  {	  	non-compiled	[CE]  ';'  expected	98	None	add
60	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(n))  {  if(NodeUtil.isAssignmentOp(n))  }  tryRemoveAssignment(t,  n.getFirstChild(),  state);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(NodeUtil.isAssignmentOp(n))  {  if(NodeUtil.isAssignmentOp(n))  }  tryRemoveAssignment(t,  n.getFirstChild(),  state);  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(NodeUtil.isAssignmentOp(n))    {    if(NodeUtil.isAssignmentOp(n))  }  tryRemoveAssignment(t,  n.getFirstChild(),  state);	  	non-compiled	[CE]  illegal  start  of  expression	98	None	add
61	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(n))  {  if(NodeUtil.isAssignmentOp(n))  <  tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  [CE]  >  expected  [FE]            AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(NodeUtil.isAssignmentOp(n))  {  if(NodeUtil.isAssignmentOp(n))  <  tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(NodeUtil.isAssignmentOp(n))    {    if(NodeUtil.isAssignmentOp(n))  <  tryRemoveAssignment(t,  n.getFirstChild(),  state);  }	  	non-compiled	[CE]  >  expected	98	None	add
62	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(n))  {  if(NodeUtil.isAssignmentOp(n))  {  this.matchRemoveAssignment(t,  n.getFirstChild(),  state);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(NodeUtil.isAssignmentOp(n))  {  if(NodeUtil.isAssignmentOp(n))  {  this.matchRemoveAssignment(t,  n.getFirstChild(),  state);  }  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(NodeUtil.isAssignmentOp(n))    {    if(NodeUtil.isAssignmentOp(n))  {  this.matchRemoveAssignment(t,  n.getFirstChild(),  state);  }	  	non-compiled	[CE]  illegal  start  of  expression	98	None	add
63	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.RETURN)  {  if(n.getFirstChild().getType()  ==  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.getFirstChild().getType()  ==  Token.RETURN)  {  if(n.getFirstChild().getType()  ==  Token.RETURN)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild().getType()    ==    Token.RETURN)    {    if(n.getFirstChild().getType()  ==  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
64	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.RETURN)  {  if(n.getFirstChild().getType()!=  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.getFirstChild().getType()  ==  Token.RETURN)  {  if(n.getFirstChild().getType()!=  Token.RETURN)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild().getType()    ==    Token.RETURN)    {    if(n.getFirstChild().getType()!=  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
65	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.RETURN)  {  If(n.getFirstChild().getType()  ==  Token.RETURN)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.getFirstChild().getType()  ==  Token.RETURN)  {  If(n.getFirstChild().getType()  ==  Token.RETURN)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild().getType()    ==    Token.RETURN)    {    If(n.getFirstChild().getType()  ==  Token.RETURN)  {	  	non-compiled	[CE]  ';'  expected	70	None	add
66	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.RETURN)  {  if(n.getFirstChild().gettype()  ==  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.getFirstChild().getType()  ==  Token.RETURN)  {  if(n.getFirstChild().gettype()  ==  Token.RETURN)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild().getType()    ==    Token.RETURN)    {    if(n.getFirstChild().gettype()  ==  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
67	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.RETURN)  {  if(n.getFirstChild().getType()  >=  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.getFirstChild().getType()  ==  Token.RETURN)  {  if(n.getFirstChild().getType()  >=  Token.RETURN)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild().getType()    ==    Token.RETURN)    {    if(n.getFirstChild().getType()  >=  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
68	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.RETURN)  {  if(n.getLastChild().getType()  ==  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.getFirstChild().getType()  ==  Token.RETURN)  {  if(n.getLastChild().getType()  ==  Token.RETURN)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild().getType()    ==    Token.RETURN)    {    if(n.getLastChild().getType()  ==  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
69	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.RETURN)  {  if(n.getfirstChild().getType()  ==  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.getFirstChild().getType()  ==  Token.RETURN)  {  if(n.getfirstChild().getType()  ==  Token.RETURN)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild().getType()    ==    Token.RETURN)    {    if(n.getfirstChild().getType()  ==  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
70	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isGetProp(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if  (n.hasChildren()  ||  NodeUtil.isGetProp(n))  {	  if    (n.hasChildren()    &&!NodeUtil.isGetProp(n))    {    	compilable	  [FE]  AssertionFailedError  	147	57	replace
71	[BUG]  [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isGetProp(n))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isGetProp(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (n.hasChildren()  ||  NodeUtil.isGetProp(n))  {	  if    (n.hasChildren()    &&!NodeUtil.isGetProp(n))    {    	compilable	  [FE]  AssertionFailedError  	147	57	replace
72	[BUG]  [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isReturn(n))  {  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isReturn(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (n.hasChildren()  &&!NodeUtil.isReturn(n))  {	  if    (n.hasChildren()    &&!NodeUtil.isGetProp(n))    {    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
73	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isGetProp(n.getFirstChild()))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if  (n.hasChildren()  &&!NodeUtil.isGetProp(n.getFirstChild()))  {	  if    (n.hasChildren()    &&!NodeUtil.isGetProp(n))    {    	compilable	  [FE]  AssertionFailedError  	147	57	replace
74	[BUG]  [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isGetProp(n.getFirstChild()))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isGetProp(n.getFirstChild()))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (n.hasChildren()  &&!NodeUtil.isGetProp(n.getFirstChild()))  {	  if    (n.hasChildren()    &&!NodeUtil.isGetProp(n))    {    	compilable	  [FE]  AssertionFailedError  	147	57	replace
75	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isGetProp(n)||!NodeUtil.isGetProp(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if  (n.hasChildren()  &&!NodeUtil.isGetProp(n)||!NodeUtil.isGetProp(n))  {	  if    (n.hasChildren()    &&!NodeUtil.isGetProp(n))    {    	compilable	  [FE]  AssertionFailedError  	147	57	replace
76	[BUG]  [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isGetProp(n)||!NodeUtil.isGetProp(n))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isGetProp(n)||!NodeUtil.isGetProp(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (n.hasChildren()  &&!NodeUtil.isGetProp(n)||!NodeUtil.isGetProp(n))  {	  if    (n.hasChildren()    &&!NodeUtil.isGetProp(n))    {    	compilable	  [FE]  AssertionFailedError  	147	57	replace
77	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if  (n.getType()  ==  Token.RETURN  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.RETURN)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if  (n.getType()  ==  Token.RETURN  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.RETURN)  {	  if    (n.hasChildren()    &&    n.getFirstChild().getType()!=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	4	58	replace
78	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.RETURN  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.RETURN)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if  (n.getType()  ==  Token.RETURN  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.RETURN)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (n.getType()  ==  Token.RETURN  &&  n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.RETURN)  {	  if    (n.hasChildren()    &&    n.getFirstChild().getType()!=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	4	58	replace
79	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.CASE)  {  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.CASE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.CASE)  {  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.CASE)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.RETURN    ||    n.getFirstChild().getType()    ==    Token.CASE)    {    if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.CASE)  {	  	non-compiled	[CE]  illegal  start  of  expression	261	None	add
80	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.CASE)  {  if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.CASE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.CASE)  {  if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.CASE)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.RETURN    ||    n.getFirstChild().getType()    ==    Token.CASE)    {    if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.CASE)  {	  	non-compiled	[CE]  illegal  start  of  expression	261	None	add
81	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.CASE)  {  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()!=  Token.CASE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.CASE)  {  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()!=  Token.CASE)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.RETURN    ||    n.getFirstChild().getType()    ==    Token.CASE)    {    if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()!=  Token.CASE)  {	  	non-compiled	[CE]  illegal  start  of  expression	261	None	add
82	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.CASE)  {  if(n.hasChildren()  ||  n.getfirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.CASE)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.CASE)  {  if(n.hasChildren()  ||  n.getfirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.CASE)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.RETURN    ||    n.getFirstChild().getType()    ==    Token.CASE)    {    if(n.hasChildren()  ||  n.getfirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.CASE)  {	  	non-compiled	[CE]  illegal  start  of  expression	261	None	add
83	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.CASE)  {  If(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.CASE)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.CASE)  {  If(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.CASE)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.RETURN    ||    n.getFirstChild().getType()    ==    Token.CASE)    {    If(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.CASE)  {	  	non-compiled	[CE]  ';'  expected	261	None	add
84	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.CASE)  {  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  >=  Token.CASE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.CASE)  {  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  >=  Token.CASE)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.RETURN    ||    n.getFirstChild().getType()    ==    Token.CASE)    {    if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  >=  Token.CASE)  {	  	non-compiled	[CE]  illegal  start  of  expression	261	None	add
85	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.CASE)  {  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getLastChild().getType()  ==  Token.CASE)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.CASE)  {  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getLastChild().getType()  ==  Token.CASE)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.RETURN    ||    n.getFirstChild().getType()    ==    Token.CASE)    {    if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getLastChild().getType()  ==  Token.CASE)  {	  	non-compiled	[CE]  illegal  start  of  expression	261	None	add
86	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(!NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().hasChildren())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(!NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().hasChildren())  {	  if(n.getFirstChild().hasChildren())    {    if(n.getFirstChild().hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	7	57	replace
87	[BUG]  [BUGGY]  if(!NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().hasChildren())  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(!NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().hasChildren())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(!NodeUtil.isFunctionDeclaration(n)&&  n.getFirstChild().hasChildren())  {	  if(n.getFirstChild().hasChildren())    {    if(n.getFirstChild().hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	7	57	replace
88	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.getFirstChild().hasChildren()  &&  n.getFirstChild().hasChildren())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.getFirstChild().hasChildren()  &&  n.getFirstChild().hasChildren())  {	  if(n.getFirstChild().hasChildren())    {    if(n.getFirstChild().hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	7	57	replace
89	[BUG]  [BUGGY]  if(n.getFirstChild().hasChildren()  &&  n.getFirstChild().hasChildren())  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.getFirstChild().hasChildren()  &&  n.getFirstChild().hasChildren())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild().hasChildren()  &&  n.getFirstChild().hasChildren())  {	  if(n.getFirstChild().hasChildren())    {    if(n.getFirstChild().hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	7	57	replace
90	[BUG]  [BUGGY]  If  (n.hasChildren()  &&!NodeUtil.isForIn(n))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  If  (n.hasChildren()  &&!NodeUtil.isForIn(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	If  (n.hasChildren()  &&!NodeUtil.isForIn(n))  {	  if    (n.hasChildren()    &&!NodeUtil.isForIn(n))    {    If    (n.hasChildren()    &&!NodeUtil.isForIn(n))    {    	non-compiled	[CE]  ';'  expected	62	None	replace
91	[BUG]  [BUGGY]  if(n.hasChildren()  &&!NodeUtil.isGetProp(n))  {  If  (n.hasChildren()  &&!NodeUtil.isForIn(n))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  &&!NodeUtil.isGetProp(n))  {  If  (n.hasChildren()  &&!NodeUtil.isForIn(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()  &&!NodeUtil.isGetProp(n))  {  If  (n.hasChildren()  &&!NodeUtil.isForIn(n))  {	  if    (n.hasChildren()    &&!NodeUtil.isForIn(n))    {    If    (n.hasChildren()    &&!NodeUtil.isForIn(n))    {    	non-compiled	[CE]  ';'  expected	62	None	replace
92	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasChildren())  {  If  (n.hasChildren()  &&!NodeUtil.isForIn(n))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  ||  n.hasChildren())  {  If  (n.hasChildren()  &&!NodeUtil.isForIn(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()  ||  n.hasChildren())  {  If  (n.hasChildren()  &&!NodeUtil.isForIn(n))  {	  if    (n.hasChildren()    &&!NodeUtil.isForIn(n))    {    If    (n.hasChildren()    &&!NodeUtil.isForIn(n))    {    	non-compiled	[CE]  ';'  expected	62	None	replace
93	[BUG]  [BUGGY]  If  (n.hasChildren()  ||!NodeUtil.isForIn(n))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  If  (n.hasChildren()  ||!NodeUtil.isForIn(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	If  (n.hasChildren()  ||!NodeUtil.isForIn(n))  {	  if    (n.hasChildren()    &&!NodeUtil.isForIn(n))    {    If    (n.hasChildren()    &&!NodeUtil.isForIn(n))    {    	non-compiled	[CE]  ';'  expected	62	None	replace
94	[BUG]  [BUGGY]  If  (n.hasChildren()  &&!NodeUtil.isGetProp(n))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  If  (n.hasChildren()  &&!NodeUtil.isGetProp(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	If  (n.hasChildren()  &&!NodeUtil.isGetProp(n))  {	  if    (n.hasChildren()    &&!NodeUtil.isForIn(n))    {    If    (n.hasChildren()    &&!NodeUtil.isForIn(n))    {    	non-compiled	[CE]  ';'  expected	62	None	replace
95	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.getFirstChild().getType()  ==  Token.RETURN  ||  n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.getFirstChild().getType()  ==  Token.RETURN  ||  n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()!=    Token.RETURN)    {    if(n.hasChildren()    ||    n.getFirstChild().getType()!=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	27	57	replace
96	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.RETURN  ||  n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.getFirstChild().getType()  ==  Token.RETURN  ||  n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild().getType()  ==  Token.RETURN  ||  n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()!=    Token.RETURN)    {    if(n.hasChildren()    ||    n.getFirstChild().getType()!=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	27	57	replace
97	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(!NodeUtil.isFunctionDeclaration(n)&&  n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(!NodeUtil.isFunctionDeclaration(n)&&  n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()!=    Token.RETURN)    {    if(n.hasChildren()    ||    n.getFirstChild().getType()!=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	27	57	replace
98	[BUG]  [BUGGY]  if(!NodeUtil.isFunctionDeclaration(n)&&  n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(!NodeUtil.isFunctionDeclaration(n)&&  n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(!NodeUtil.isFunctionDeclaration(n)&&  n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()!=    Token.RETURN)    {    if(n.hasChildren()    ||    n.getFirstChild().getType()!=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	27	57	replace
99	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.getFirstChild()!=  null  ||  n.getFirstChild().hasChildren())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.getFirstChild()!=  null  ||  n.getFirstChild().hasChildren())  {	  if(n.getFirstChild()    ==    null    ||    n.getFirstChild().hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	199	57	replace
100	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  ||  n.getFirstChild().hasChildren())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.getFirstChild()!=  null  ||  n.getFirstChild().hasChildren())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild()!=  null  ||  n.getFirstChild().hasChildren())  {	  if(n.getFirstChild()    ==    null    ||    n.getFirstChild().hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	199	57	replace
101	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.getLastChild().hasChildren())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.getFirstChild()  ==  null  ||  n.getLastChild().hasChildren())  {	  if(n.getFirstChild()    ==    null    ||    n.getFirstChild().hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	199	57	replace
102	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.getLastChild().hasChildren())  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.getLastChild().hasChildren())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild()  ==  null  ||  n.getLastChild().hasChildren())  {	  if(n.getFirstChild()    ==    null    ||    n.getFirstChild().hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	199	57	replace
103	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.getFirstChild()!=  null  ||  n.getLastChild().hasChildren())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.getFirstChild()!=  null  ||  n.getLastChild().hasChildren())  {	  if(n.getFirstChild()    ==    null    ||    n.getFirstChild().hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	199	57	replace
104	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  ||  n.getLastChild().hasChildren())  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.getFirstChild()!=  null  ||  n.getLastChild().hasChildren())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild()!=  null  ||  n.getLastChild().hasChildren())  {	  if(n.getFirstChild()    ==    null    ||    n.getFirstChild().hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	199	57	replace
105	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.getLastChild()  ==  null  ||  n.getFirstChild().hasChildren())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.getLastChild()  ==  null  ||  n.getFirstChild().hasChildren())  {	  if(n.getFirstChild()    ==    null    ||    n.getFirstChild().hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	199	57	replace
106	[BUG]  [BUGGY]  if(n.getLastChild()  ==  null  ||  n.getFirstChild().hasChildren())  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.getLastChild()  ==  null  ||  n.getFirstChild().hasChildren())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getLastChild()  ==  null  ||  n.getFirstChild().hasChildren())  {	  if(n.getFirstChild()    ==    null    ||    n.getFirstChild().hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	199	57	replace
107	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isAssignmentOp(n.getFirstChild()))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if  (n.hasChildren()  &&!NodeUtil.isAssignmentOp(n.getFirstChild()))  {	  if    (n.hasChildren()    &&!NodeUtil.isAssignmentOp(n))    {    	compilable	  [FE]  AssertionFailedError  	145	60	replace
108	[BUG]  [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isAssignmentOp(n.getFirstChild()))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isAssignmentOp(n.getFirstChild()))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (n.hasChildren()  &&!NodeUtil.isAssignmentOp(n.getFirstChild()))  {	  if    (n.hasChildren()    &&!NodeUtil.isAssignmentOp(n))    {    	compilable	  [FE]  AssertionFailedError  	145	60	replace
109	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isAssignmentOp(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if  (n.hasChildren()  ||  NodeUtil.isAssignmentOp(n))  {	  if    (n.hasChildren()    &&!NodeUtil.isAssignmentOp(n))    {    	compilable	  [FE]  AssertionFailedError  	145	57	replace
110	[BUG]  [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isAssignmentOp(n))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isAssignmentOp(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (n.hasChildren()  ||  NodeUtil.isAssignmentOp(n))  {	  if    (n.hasChildren()    &&!NodeUtil.isAssignmentOp(n))    {    	compilable	  [FE]  AssertionFailedError  	145	57	replace
111	[BUG]  [BUGGY]  If  (n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  If  (n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	If  (n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {	  if    (n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.RETURN)    {    If    (n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  ';'  expected	139	None	replace
112	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  If  (n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  If  (n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  If  (n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {	  if    (n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.RETURN)    {    If    (n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  ';'  expected	139	None	replace
113	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(!NodeUtil.isFunctionDeclaration(n)&&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(!NodeUtil.isFunctionDeclaration(n)&&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {	  if    (n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.RETURN)    {    If    (n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	139	60	replace
114	[BUG]  [BUGGY]  if(!NodeUtil.isFunctionDeclaration(n)&&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(!NodeUtil.isFunctionDeclaration(n)&&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(!NodeUtil.isFunctionDeclaration(n)&&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {	  if    (n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.RETURN)    {    If    (n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	139	60	replace
115	[BUG]  [BUGGY]  If  (n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  If  (n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	If  (n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {	  if    (n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.RETURN)    {    If    (n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  ';'  expected	139	None	replace
116	[BUG]  [BUGGY]  if  (!NodeUtil.isGetProp(n)&&  n.hasChildren()  &&  NodeUtil.isForIn(n))  {  if  (!NodeUtil.isGetProp(n)&&  n.hasChildren()  &&  NodeUtil.isForIn(n))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if  (!NodeUtil.isGetProp(n)&&  n.hasChildren()  &&  NodeUtil.isForIn(n))  {  if  (!NodeUtil.isGetProp(n)&&  n.hasChildren()  &&  NodeUtil.isForIn(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if    (!NodeUtil.isGetProp(n)&&    n.hasChildren()    &&    NodeUtil.isForIn(n))    {    if  (!NodeUtil.isGetProp(n)&&  n.hasChildren()  &&  NodeUtil.isForIn(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	80	None	add
117	[BUG]  [BUGGY]  if  (!NodeUtil.isGetProp(n)&&  n.hasChildren()  &&  NodeUtil.isForIn(n))  {  If  (!NodeUtil.isGetProp(n)&&  n.hasChildren()  &&  NodeUtil.isForIn(n))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if  (!NodeUtil.isGetProp(n)&&  n.hasChildren()  &&  NodeUtil.isForIn(n))  {  If  (!NodeUtil.isGetProp(n)&&  n.hasChildren()  &&  NodeUtil.isForIn(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if    (!NodeUtil.isGetProp(n)&&    n.hasChildren()    &&    NodeUtil.isForIn(n))    {    If  (!NodeUtil.isGetProp(n)&&  n.hasChildren()  &&  NodeUtil.isForIn(n))  {	  	non-compiled	[CE]  ';'  expected	80	None	add
118	[BUG]  [BUGGY]  if  (!NodeUtil.isGetProp(n)&&  n.hasChildren()  &&  NodeUtil.isForIn(n))  {  if  (!NodeUtil.isGetProp(n)&&  n.hasChildren()  &&  nodeUtil.isForIn(n))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if  (!NodeUtil.isGetProp(n)&&  n.hasChildren()  &&  NodeUtil.isForIn(n))  {  if  (!NodeUtil.isGetProp(n)&&  n.hasChildren()  &&  nodeUtil.isForIn(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if    (!NodeUtil.isGetProp(n)&&    n.hasChildren()    &&    NodeUtil.isForIn(n))    {    if  (!NodeUtil.isGetProp(n)&&  n.hasChildren()  &&  nodeUtil.isForIn(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	80	None	add
119	[BUG]  [BUGGY]  if  (!NodeUtil.isGetProp(n)&&  n.hasChildren()  &&  NodeUtil.isForIn(n))  {  if  (!NodeUtil.isGetProp(n)&&  n.hasChildren()  &&  NodeUtil.isForin(n))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if  (!NodeUtil.isGetProp(n)&&  n.hasChildren()  &&  NodeUtil.isForIn(n))  {  if  (!NodeUtil.isGetProp(n)&&  n.hasChildren()  &&  NodeUtil.isForin(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if    (!NodeUtil.isGetProp(n)&&    n.hasChildren()    &&    NodeUtil.isForIn(n))    {    if  (!NodeUtil.isGetProp(n)&&  n.hasChildren()  &&  NodeUtil.isForin(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	80	None	add
120	[BUG]  [BUGGY]  Node  n  =  nodes.get(0);  [CE]  class,  interface,  or  enum  expected  [FE]                              AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  Node  n  =  nodes.get(0);  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	Node  n  =  nodes.get(0);	  Node    n    =    nodes.get(n);    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
121	[BUG]  [BUGGY]  Node  n  =  nodes.get(n.getFirstChild());  [CE]  class,  interface,  or  enum  expected  [FE]                                AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  Node  n  =  nodes.get(n.getFirstChild());  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	Node  n  =  nodes.get(n.getFirstChild());	  Node    n    =    nodes.get(n);    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
122	[BUG]  [BUGGY]  Node  n  =  nodes.get(n.getLastChild());  [CE]  class,  interface,  or  enum  expected  [FE]                                  AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  Node  n  =  nodes.get(n.getLastChild());  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	Node  n  =  nodes.get(n.getLastChild());	  Node    n    =    nodes.get(n);    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
123	[BUG]  [BUGGY]  Node  n  =  nodes.get(n.getType());  [CE]  class,  interface,  or  enum  expected  [FE]                                    AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  Node  n  =  nodes.get(n.getType());  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	Node  n  =  nodes.get(n.getType());	  Node    n    =    nodes.get(n);    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
124	[BUG]  [BUGGY]  Node  n  =  nodes.get(n.getChildCount());  [CE]  class,  interface,  or  enum  expected  [FE]                                      AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  Node  n  =  nodes.get(n.getChildCount());  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	Node  n  =  nodes.get(n.getChildCount());	  Node    n    =    nodes.get(n);    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
125	[BUG]  [BUGGY]  Node  n  =  nodes.get(n.getString());  [CE]  class,  interface,  or  enum  expected  [FE]                                        AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  Node  n  =  nodes.get(n.getString());  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	Node  n  =  nodes.get(n.getString());	  Node    n    =    nodes.get(n);    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
126	[BUG]  [BUGGY]  Node  n  =  nodes.getFirstChild();  [CE]  class,  interface,  or  enum  expected  [FE]                                          AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  Node  n  =  nodes.getFirstChild();  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	Node  n  =  nodes.getFirstChild();	  Node    n    =    nodes.get(n);    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
127	[BUG]  [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isForIn(n)&&!NodeUtil.mayHaveSideEffects(n))  {  if(n.hasChildren()  ||!NodeUtil.isForIn(n)&&!NodeUtil.mayHaveSideEffects(n))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isForIn(n)&&!NodeUtil.mayHaveSideEffects(n))  {  if(n.hasChildren()  ||!NodeUtil.isForIn(n)&&!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    ||!NodeUtil.isForIn(n)&&!NodeUtil.mayHaveSideEffects(n))    {    if(n.hasChildren()  ||!NodeUtil.isForIn(n)&&!NodeUtil.mayHaveSideEffects(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	227	None	add
128	[BUG]  [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isForIn(n)&&!NodeUtil.mayHaveSideEffects(n))  {  If(n.hasChildren()  ||!NodeUtil.isForIn(n)&&!NodeUtil.mayHaveSideEffects(n))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isForIn(n)&&!NodeUtil.mayHaveSideEffects(n))  {  If(n.hasChildren()  ||!NodeUtil.isForIn(n)&&!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    ||!NodeUtil.isForIn(n)&&!NodeUtil.mayHaveSideEffects(n))    {    If(n.hasChildren()  ||!NodeUtil.isForIn(n)&&!NodeUtil.mayHaveSideEffects(n))  {	  	non-compiled	[CE]  ';'  expected	227	None	add
129	[BUG]  [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isForIn(n)&&!NodeUtil.mayHaveSideEffects(n))  {  if(n.hasChildren()  ||! "NodeUtil.isForIn(n)&&!NodeUtil.mayHaveSideEffects(n))  {  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isForIn(n)&&!NodeUtil.mayHaveSideEffects(n))  {  if(n.hasChildren()  ||! "NodeUtil.isForIn(n)&&!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    ||!NodeUtil.isForIn(n)&&!NodeUtil.mayHaveSideEffects(n))    {    if(n.hasChildren()  ||! "NodeUtil.isForIn(n)&&!NodeUtil.mayHaveSideEffects(n))  {	  	non-compiled	[CE]  unclosed  string  literal	227	None	add
130	[BUG]  [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isForIn(n)&&!NodeUtil.mayHaveSideEffects(n))  {  if(n.hasChildren()  ||  nodeUtil.isForIn(n)&&!NodeUtil.mayHaveSideEffects(n))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isForIn(n)&&!NodeUtil.mayHaveSideEffects(n))  {  if(n.hasChildren()  ||  nodeUtil.isForIn(n)&&!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    ||!NodeUtil.isForIn(n)&&!NodeUtil.mayHaveSideEffects(n))    {    if(n.hasChildren()  ||  nodeUtil.isForIn(n)&&!NodeUtil.mayHaveSideEffects(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	227	None	add
131	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(!NodeUtil.isForIn(n)&&!NodeUtil.isGetProp(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(!NodeUtil.isForIn(n)&&!NodeUtil.isGetProp(n))  {	  if(!NodeUtil.isForIn(n))    {    if(!NodeUtil.isForIn(n)&&!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	74	57	replace
132	[BUG]  [BUGGY]  if(!NodeUtil.isForIn(n)&&!NodeUtil.isGetProp(n))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(!NodeUtil.isForIn(n)&&!NodeUtil.isGetProp(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(!NodeUtil.isForIn(n)&&!NodeUtil.isGetProp(n))  {	  if(!NodeUtil.isForIn(n))    {    if(!NodeUtil.isForIn(n)&&!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	74	57	replace
133	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(NodeUtil.isGetProp(n)&&!NodeUtil.isForIn(n)&&!NodeUtil.isForIn(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(NodeUtil.isGetProp(n)&&!NodeUtil.isForIn(n)&&!NodeUtil.isForIn(n))  {	  if(!NodeUtil.isForIn(n))    {    if(!NodeUtil.isForIn(n)&&!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	74	60	replace
134	[BUG]  [BUGGY]  if(NodeUtil.isGetProp(n)&&!NodeUtil.isForIn(n)&&!NodeUtil.isForIn(n))  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(NodeUtil.isGetProp(n)&&!NodeUtil.isForIn(n)&&!NodeUtil.isForIn(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(NodeUtil.isGetProp(n)&&!NodeUtil.isForIn(n)&&!NodeUtil.isForIn(n))  {	  if(!NodeUtil.isForIn(n))    {    if(!NodeUtil.isForIn(n)&&!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	74	60	replace
135	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(!NodeUtil.isGetProp(n)&&!NodeUtil.isForIn(n)&&!NodeUtil.isForIn(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(!NodeUtil.isGetProp(n)&&!NodeUtil.isForIn(n)&&!NodeUtil.isForIn(n))  {	  if(!NodeUtil.isForIn(n))    {    if(!NodeUtil.isForIn(n)&&!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	74	57	replace
136	[BUG]  [BUGGY]  if(!NodeUtil.isGetProp(n)&&!NodeUtil.isForIn(n)&&!NodeUtil.isForIn(n))  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(!NodeUtil.isGetProp(n)&&!NodeUtil.isForIn(n)&&!NodeUtil.isForIn(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(!NodeUtil.isGetProp(n)&&!NodeUtil.isForIn(n)&&!NodeUtil.isForIn(n))  {	  if(!NodeUtil.isForIn(n))    {    if(!NodeUtil.isForIn(n)&&!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	74	57	replace
137	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(!NodeUtil.isForIn(n)||!NodeUtil.isForIn(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(!NodeUtil.isForIn(n)||!NodeUtil.isForIn(n))  {	  if(!NodeUtil.isForIn(n))    {    if(!NodeUtil.isForIn(n)&&!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	74	57	replace
138	[BUG]  [BUGGY]  if(!NodeUtil.isForIn(n)||!NodeUtil.isForIn(n))  {  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(!NodeUtil.isForIn(n)||!NodeUtil.isForIn(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(!NodeUtil.isForIn(n)||!NodeUtil.isForIn(n))  {	  if(!NodeUtil.isForIn(n))    {    if(!NodeUtil.isForIn(n)&&!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	74	57	replace
139	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(!NodeUtil.isForIn(n)&&!NodeUtil.isAssignmentOp(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(!NodeUtil.isForIn(n)&&!NodeUtil.isAssignmentOp(n))  {	  if(!NodeUtil.isForIn(n))    {    if(!NodeUtil.isForIn(n)&&!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	74	57	replace
140	[BUG]  [BUGGY]  if(!NodeUtil.isForIn(n)&&!NodeUtil.isAssignmentOp(n))  {  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(!NodeUtil.isForIn(n)&&!NodeUtil.isAssignmentOp(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(!NodeUtil.isForIn(n)&&!NodeUtil.isAssignmentOp(n))  {	  if(!NodeUtil.isForIn(n))    {    if(!NodeUtil.isForIn(n)&&!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	74	57	replace
141	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(!NodeUtil.isGetProp(n)&&!NodeUtil.isForIn(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(!NodeUtil.isGetProp(n)&&!NodeUtil.isForIn(n))  {	  if(!NodeUtil.isForIn(n))    {    if(!NodeUtil.isForIn(n)&&!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	74	57	replace
142	[BUG]  [BUGGY]  if(!NodeUtil.isGetProp(n)&&!NodeUtil.isForIn(n))  {  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(!NodeUtil.isGetProp(n)&&!NodeUtil.isForIn(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(!NodeUtil.isGetProp(n)&&!NodeUtil.isForIn(n))  {	  if(!NodeUtil.isForIn(n))    {    if(!NodeUtil.isForIn(n)&&!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	74	57	replace
143	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  ||  state.hasChildren()  ||  n.hasNext())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  state.hasChildren()  ||  n.hasNext())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild()  ==  null  ||  state.hasChildren()  ||  n.hasNext())  {	  if(n,    state.hasChildren()    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	256	None	replace
144	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  &&  state.hasChildren()  ||  n.hasNext())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.getFirstChild()  ==  null  &&  state.hasChildren()  ||  n.hasNext())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild()  ==  null  &&  state.hasChildren()  ||  n.hasNext())  {	  if(n,    state.hasChildren()    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	256	None	replace
145	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  state.hasChildren()  ||  n.hasNext())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.getFirstChild()!=  null  &&  state.hasChildren()  ||  n.hasNext())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild()!=  null  &&  state.hasChildren()  ||  n.hasNext())  {	  if(n,    state.hasChildren()    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	256	None	replace
146	[BUG]  [BUGGY]  if(n.getType()  ==  Token.RETURN  &&  state.hasChildren()  ||  n.hasNext())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.getType()  ==  Token.RETURN  &&  state.hasChildren()  ||  n.hasNext())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getType()  ==  Token.RETURN  &&  state.hasChildren()  ||  n.hasNext())  {	  if(n,    state.hasChildren()    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	256	None	replace
147	[BUG]  [BUGGY]  if(n,  state.hasChildren()  ||  n.hasNext()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n,  state.hasChildren()  ||  n.hasNext()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n,  state.hasChildren()  ||  n.hasNext()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {	  if(n,    state.hasChildren()    ||    n.hasNext())    {    	non-compiled	[CE]  ')'  expected	256	None	replace
148	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()!=  Token.RETURN)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()!=  Token.RETURN)  {	  if(n.getFirstChild()!=    null    ||    n.getFirstChild().getType()!=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	273	57	replace
149	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()!=  Token.RETURN)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()!=  Token.RETURN)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()!=  Token.RETURN)  {	  if(n.getFirstChild()!=    null    ||    n.getFirstChild().getType()!=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	273	57	replace
150	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.getFirstChild()  ==  null  &&  n.getFirstChild().getType()!=  Token.RETURN)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.getFirstChild()  ==  null  &&  n.getFirstChild().getType()!=  Token.RETURN)  {	  if(n.getFirstChild()!=    null    ||    n.getFirstChild().getType()!=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	273	60	replace
151	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  &&  n.getFirstChild().getType()!=  Token.RETURN)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.getFirstChild()  ==  null  &&  n.getFirstChild().getType()!=  Token.RETURN)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild()  ==  null  &&  n.getFirstChild().getType()!=  Token.RETURN)  {	  if(n.getFirstChild()!=    null    ||    n.getFirstChild().getType()!=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	273	60	replace
152	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.getFirstChild()!=  null  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.getFirstChild()!=  null  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {	  if(n.getFirstChild()!=    null    ||    n.getFirstChild().getType()!=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	273	57	replace
153	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.getFirstChild()!=  null  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild()!=  null  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {	  if(n.getFirstChild()!=    null    ||    n.getFirstChild().getType()!=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	273	57	replace
154	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.getFirstChild()!=  null  ||  n.getLastChild().getType()!=  Token.RETURN)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.getFirstChild()!=  null  ||  n.getLastChild().getType()!=  Token.RETURN)  {	  if(n.getFirstChild()!=    null    ||    n.getFirstChild().getType()!=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	273	57	replace
155	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  ||  n.getLastChild().getType()!=  Token.RETURN)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.getFirstChild()!=  null  ||  n.getLastChild().getType()!=  Token.RETURN)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild()!=  null  ||  n.getLastChild().getType()!=  Token.RETURN)  {	  if(n.getFirstChild()!=    null    ||    n.getFirstChild().getType()!=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	273	57	replace
156	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getLastChild()!=  null  &&  n.hasChildren())  {  if(n.hasChildren()  &&  n.getLastChild()!=  null  &&  n.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  &&  n.getLastChild()!=  null  &&  n.hasChildren())  {  if(n.hasChildren()  &&  n.getLastChild()!=  null  &&  n.hasChildren())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    &&    n.getLastChild()!=    null    &&    n.hasChildren())    {    if(n.hasChildren()  &&  n.getLastChild()!=  null  &&  n.hasChildren())  {	  	non-compiled	[CE]  illegal  start  of  expression	165	None	add
157	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getLastChild()!=  null  &&  n.hasChildren())  {  if(n.hasChildren()  &&  n.getLastChild()  ==  null  &&  n.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  &&  n.getLastChild()!=  null  &&  n.hasChildren())  {  if(n.hasChildren()  &&  n.getLastChild()  ==  null  &&  n.hasChildren())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    &&    n.getLastChild()!=    null    &&    n.hasChildren())    {    if(n.hasChildren()  &&  n.getLastChild()  ==  null  &&  n.hasChildren())  {	  	non-compiled	[CE]  illegal  start  of  expression	165	None	add
158	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getLastChild()!=  null  &&  n.hasChildren())  {  If(n.hasChildren()  &&  n.getLastChild()!=  null  &&  n.hasChildren())  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  &&  n.getLastChild()!=  null  &&  n.hasChildren())  {  If(n.hasChildren()  &&  n.getLastChild()!=  null  &&  n.hasChildren())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    &&    n.getLastChild()!=    null    &&    n.hasChildren())    {    If(n.hasChildren()  &&  n.getLastChild()!=  null  &&  n.hasChildren())  {	  	non-compiled	[CE]  ';'  expected	165	None	add
159	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getLastChild()!=  null  &&  n.hasChildren())  {  if(n.hasChildren()  &&  n.getLastChild()  >=  null  &&  n.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  &&  n.getLastChild()!=  null  &&  n.hasChildren())  {  if(n.hasChildren()  &&  n.getLastChild()  >=  null  &&  n.hasChildren())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    &&    n.getLastChild()!=    null    &&    n.hasChildren())    {    if(n.hasChildren()  &&  n.getLastChild()  >=  null  &&  n.hasChildren())  {	  	non-compiled	[CE]  illegal  start  of  expression	165	None	add
160	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getLastChild()!=  null  &&  n.hasChildren())  {  if(n.hasChildren()  &&  n.getLastChild()  >>  null  &&  n.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  &&  n.getLastChild()!=  null  &&  n.hasChildren())  {  if(n.hasChildren()  &&  n.getLastChild()  >>  null  &&  n.hasChildren())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    &&    n.getLastChild()!=    null    &&    n.hasChildren())    {    if(n.hasChildren()  &&  n.getLastChild()  >>  null  &&  n.hasChildren())  {	  	non-compiled	[CE]  illegal  start  of  expression	165	None	add
161	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getLastChild()!=  null  &&  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  &&  n.getLastChild()!=  null  &&  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    &&    n.getLastChild()!=    null    &&    n.hasChildren())    {    if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {	  	non-compiled	[CE]  illegal  start  of  expression	165	None	add
162	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getLastChild()!=  null  &&  n.hasChildren())  {  if(n.hasChildren()  &&  n.getLastChild()  [BUGGY]  null  &&  n.hasChildren())  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  &&  n.getLastChild()!=  null  &&  n.hasChildren())  {  if(n.hasChildren()  &&  n.getLastChild()  [BUGGY]  null  &&  n.hasChildren())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    &&    n.getLastChild()!=    null    &&    n.hasChildren())    {    if(n.hasChildren()  &&  n.getLastChild()  [BUGGY]  null  &&  n.hasChildren())  {	  	non-compiled	[CE]  ')'  expected	165	None	add
163	[BUG]  [BUGGY]  if(n.hasChildren()  ||  NodeUtil.isForIn(n))  {  If  (n.hasChildren()  &&  NodeUtil.isForIn(n))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  ||  NodeUtil.isForIn(n))  {  If  (n.hasChildren()  &&  NodeUtil.isForIn(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()  ||  NodeUtil.isForIn(n))  {  If  (n.hasChildren()  &&  NodeUtil.isForIn(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isForIn(n))    {    If    (n.hasChildren()    &&    NodeUtil.isForIn(n))    {    	non-compiled	[CE]  ';'  expected	115	None	replace
164	[BUG]  [BUGGY]  If  (n.hasChildren()  &&  NodeUtil.isForIn(n))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  If  (n.hasChildren()  &&  NodeUtil.isForIn(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	If  (n.hasChildren()  &&  NodeUtil.isForIn(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isForIn(n))    {    If    (n.hasChildren()    &&    NodeUtil.isForIn(n))    {    	non-compiled	[CE]  ';'  expected	115	None	replace
165	[BUG]  [BUGGY]  If  (n.hasChildren()  &&  NodeUtil.isGetProp(n))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  If  (n.hasChildren()  &&  NodeUtil.isGetProp(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	If  (n.hasChildren()  &&  NodeUtil.isGetProp(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isForIn(n))    {    If    (n.hasChildren()    &&    NodeUtil.isForIn(n))    {    	non-compiled	[CE]  ';'  expected	115	None	replace
166	[BUG]  [BUGGY]  If  (n.hasChildren()  ||  NodeUtil.isForIn(n))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  If  (n.hasChildren()  ||  NodeUtil.isForIn(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	If  (n.hasChildren()  ||  NodeUtil.isForIn(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isForIn(n))    {    If    (n.hasChildren()    &&    NodeUtil.isForIn(n))    {    	non-compiled	[CE]  ';'  expected	115	None	replace
167	[BUG]  [BUGGY]  If  (!NodeUtil.hasChildren()  &&  NodeUtil.isForIn(n))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  If  (!NodeUtil.hasChildren()  &&  NodeUtil.isForIn(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	If  (!NodeUtil.hasChildren()  &&  NodeUtil.isForIn(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isForIn(n))    {    If    (n.hasChildren()    &&    NodeUtil.isForIn(n))    {    	non-compiled	[CE]  ';'  expected	115	None	replace
168	[BUG]  [BUGGY]  If  (n.hasChildren()  &&  NodeUtil.isFunctionDead(n))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  If  (n.hasChildren()  &&  NodeUtil.isFunctionDead(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	If  (n.hasChildren()  &&  NodeUtil.isFunctionDead(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isForIn(n))    {    If    (n.hasChildren()    &&    NodeUtil.isForIn(n))    {    	non-compiled	[CE]  ';'  expected	115	None	replace
169	[BUG]  [BUGGY]  If  (n.hasChildren()  &&  NodeUtil.isAssignmentOp(n))  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  If  (n.hasChildren()  &&  NodeUtil.isAssignmentOp(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	If  (n.hasChildren()  &&  NodeUtil.isAssignmentOp(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isForIn(n))    {    If    (n.hasChildren()    &&    NodeUtil.isForIn(n))    {    	non-compiled	[CE]  ';'  expected	115	None	replace
170	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.hasChildren()  &&  n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	17	58	replace
171	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  &&  n.hasOneChild())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()  &&  n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	17	58	replace
172	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  n.hasOneChild())  {  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasFirstChild()  ||  n.hasOneChild())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasFirstChild()  ||  n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
173	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	17	57	replace
174	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	17	57	replace
175	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.GETPROP)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.GETPROP)  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	17	57	replace
176	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.GETPROP)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.GETPROP)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.GETPROP)  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	17	57	replace
177	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.getFirstChild().hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.getFirstChild().hasChildren()  ||  n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	17	57	replace
178	[BUG]  [BUGGY]  if(n.getFirstChild().hasChildren()  ||  n.hasOneChild())  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.getFirstChild().hasChildren()  ||  n.hasOneChild())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild().hasChildren()  ||  n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	17	57	replace
179	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	17	57	replace
180	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()  ||  n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {	  if(n.hasChildren()    ||    n.hasOneChild())    {    	compilable	  [FE]  AssertionFailedError  	17	57	replace
181	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()  ==  null  &&  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild()  ==  null  &&  n.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()  ==  null  &&  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild()  ==  null  &&  n.hasChildren())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    &&    n.getFirstChild()    ==    null    &&    n.hasChildren())    {    if(n.hasChildren()  &&  n.getFirstChild()  ==  null  &&  n.hasChildren())  {	  	non-compiled	[CE]  illegal  start  of  expression	159	None	add
182	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()  ==  null  &&  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()  ==  null  &&  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    &&    n.getFirstChild()    ==    null    &&    n.hasChildren())    {    if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {	  	non-compiled	[CE]  illegal  start  of  expression	159	None	add
183	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()  ==  null  &&  n.hasChildren())  {  If(n.hasChildren()  &&  n.getFirstChild()  ==  null  &&  n.hasChildren())  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()  ==  null  &&  n.hasChildren())  {  If(n.hasChildren()  &&  n.getFirstChild()  ==  null  &&  n.hasChildren())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    &&    n.getFirstChild()    ==    null    &&    n.hasChildren())    {    If(n.hasChildren()  &&  n.getFirstChild()  ==  null  &&  n.hasChildren())  {	  	non-compiled	[CE]  ';'  expected	159	None	add
184	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()  ==  null  &&  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild()  >=  null  &&  n.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()  ==  null  &&  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild()  >=  null  &&  n.hasChildren())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    &&    n.getFirstChild()    ==    null    &&    n.hasChildren())    {    if(n.hasChildren()  &&  n.getFirstChild()  >=  null  &&  n.hasChildren())  {	  	non-compiled	[CE]  illegal  start  of  expression	159	None	add
185	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()  ==  null  &&  n.hasChildren())  {  If(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()  ==  null  &&  n.hasChildren())  {  If(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    &&    n.getFirstChild()    ==    null    &&    n.hasChildren())    {    If(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {	  	non-compiled	[CE]  ';'  expected	159	None	add
186	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()  ==  null  &&  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild()  >>  null  &&  n.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()  ==  null  &&  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild()  >>  null  &&  n.hasChildren())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    &&    n.getFirstChild()    ==    null    &&    n.hasChildren())    {    if(n.hasChildren()  &&  n.getFirstChild()  >>  null  &&  n.hasChildren())  {	  	non-compiled	[CE]  illegal  start  of  expression	159	None	add
187	[BUG]  [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isFunctionDeclaration(n))  {  if(n.hasChildren()  ||!NodeUtil.isFunctionDeclaration(n))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isFunctionDeclaration(n))  {  if(n.hasChildren()  ||!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    ||!NodeUtil.isFunctionDeclaration(n))    {    if(n.hasChildren()  ||!NodeUtil.isFunctionDeclaration(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
188	[BUG]  [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isFunctionDeclaration(n))  {  If(n.hasChildren()  ||!NodeUtil.isFunctionDeclaration(n))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isFunctionDeclaration(n))  {  If(n.hasChildren()  ||!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    ||!NodeUtil.isFunctionDeclaration(n))    {    If(n.hasChildren()  ||!NodeUtil.isFunctionDeclaration(n))  {	  	non-compiled	[CE]  ';'  expected	24	None	add
189	[BUG]  [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isFunctionDeclaration(n))  {  if(n.hasChildren()  ||!NodeUtil.getFunctionDeclaration(n))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isFunctionDeclaration(n))  {  if(n.hasChildren()  ||!NodeUtil.getFunctionDeclaration(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    ||!NodeUtil.isFunctionDeclaration(n))    {    if(n.hasChildren()  ||!NodeUtil.getFunctionDeclaration(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
190	[BUG]  [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isFunctionDeclaration(n))  {  if(N.hasChildren()  ||!NodeUtil.isFunctionDeclaration(n))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isFunctionDeclaration(n))  {  if(N.hasChildren()  ||!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    ||!NodeUtil.isFunctionDeclaration(n))    {    if(N.hasChildren()  ||!NodeUtil.isFunctionDeclaration(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
191	[BUG]  [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isFunctionDeclaration(n))  {  if(n.hasChildren()  ||!NodeUtil.isCallDeclaration(n))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isFunctionDeclaration(n))  {  if(n.hasChildren()  ||!NodeUtil.isCallDeclaration(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    ||!NodeUtil.isFunctionDeclaration(n))    {    if(n.hasChildren()  ||!NodeUtil.isCallDeclaration(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
192	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.getFirstChild()!=  null  &&  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild()!=    null    &&    n.hasChildren())    {    if(n.hasChildren()    &&    n.getfirstChild()!=    null    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	169	57	replace
193	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild()!=  null  &&  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild()!=    null    &&    n.hasChildren())    {    if(n.hasChildren()    &&    n.getfirstChild()!=    null    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	169	57	replace
194	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(!NodeUtil.isAssignmentOp(n)&&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(!NodeUtil.isAssignmentOp(n)&&!NodeUtil.isFunctionDeclaration(n))  {	  if(n.hasChildren()    &&    n.getFirstChild()!=    null    &&    n.hasChildren())    {    if(n.hasChildren()    &&    n.getfirstChild()!=    null    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	169	57	replace
195	[BUG]  [BUGGY]  if(!NodeUtil.isAssignmentOp(n)&&!NodeUtil.isFunctionDeclaration(n))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(!NodeUtil.isAssignmentOp(n)&&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(!NodeUtil.isAssignmentOp(n)&&!NodeUtil.isFunctionDeclaration(n))  {	  if(n.hasChildren()    &&    n.getFirstChild()!=    null    &&    n.hasChildren())    {    if(n.hasChildren()    &&    n.getfirstChild()!=    null    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	169	57	replace
196	[BUG]  [BUGGY]  if(NodeUtil.hasFirstChild(n))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(NodeUtil.hasFirstChild(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(NodeUtil.hasFirstChild(n))  {	  if(NodeUtil.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	185	None	replace
197	[BUG]  [BUGGY]  if(NodeUtil.hasLastChild())  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(NodeUtil.hasLastChild())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(NodeUtil.hasLastChild())  {	  if(NodeUtil.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	185	None	replace
198	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(n)&&  NodeUtil.hasFirstChild())  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(NodeUtil.isAssignmentOp(n)&&  NodeUtil.hasFirstChild())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(NodeUtil.isAssignmentOp(n)&&  NodeUtil.hasFirstChild())  {	  if(NodeUtil.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	185	None	replace
199	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  NodeUtil.hasFirstChild())  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  NodeUtil.hasFirstChild())  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(NodeUtil.isFunctionDeclaration(n)&&  NodeUtil.hasFirstChild())  {	  if(NodeUtil.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	185	None	replace
200	[BUG]  [BUGGY]  if(NodeUtil.hasFirstChild()  &&  n.getLastChild().getString().equals( "return "))  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(NodeUtil.hasFirstChild()  &&  n.getLastChild().getString().equals( "return "))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(NodeUtil.hasFirstChild()  &&  n.getLastChild().getString().equals( "return "))  {	  if(NodeUtil.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	185	None	replace
201	[BUG]  [BUGGY]  if(NodeUtil.hasFirstChild()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(NodeUtil.hasFirstChild()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(NodeUtil.hasFirstChild()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {	  if(NodeUtil.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	185	None	replace
202	[BUG]  [BUGGY]  if(NodeUtil.hasFirstChild()  &&  n.getLastChild().getString().endsWith( "__ "))  {  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if(NodeUtil.hasFirstChild()  &&  n.getLastChild().getString().endsWith( "__ "))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(NodeUtil.hasFirstChild()  &&  n.getLastChild().getString().endsWith( "__ "))  {	  if(NodeUtil.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	185	None	replace
203	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if  (!NodeUtil.isGetProp(n)&&  n.hasChildren()  &&  NodeUtil.isGetProp(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if  (!NodeUtil.isGetProp(n)&&  n.hasChildren()  &&  NodeUtil.isGetProp(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isGetProp(n))    {    	compilable	  [FE]  AssertionFailedError  	85	60	replace
204	[BUG]  [BUGGY]  if  (!NodeUtil.isGetProp(n)&&  n.hasChildren()  &&  NodeUtil.isGetProp(n))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if  (!NodeUtil.isGetProp(n)&&  n.hasChildren()  &&  NodeUtil.isGetProp(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (!NodeUtil.isGetProp(n)&&  n.hasChildren()  &&  NodeUtil.isGetProp(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isGetProp(n))    {    	compilable	  [FE]  AssertionFailedError  	85	60	replace
205	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isGetProp(n.getFirstChild()))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if  (n.hasChildren()  &&  NodeUtil.isGetProp(n.getFirstChild()))  {	  if    (n.hasChildren()    &&    NodeUtil.isGetProp(n))    {    	compilable	  [FE]  AssertionFailedError  	85	60	replace
206	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isGetProp(n.getFirstChild()))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isGetProp(n.getFirstChild()))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (n.hasChildren()  &&  NodeUtil.isGetProp(n.getFirstChild()))  {	  if    (n.hasChildren()    &&    NodeUtil.isGetProp(n))    {    	compilable	  [FE]  AssertionFailedError  	85	60	replace
207	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isReturn(n))  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isReturn(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (n.hasChildren()  &&  NodeUtil.isReturn(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isGetProp(n))    {    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
208	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isGetProp(n)||!NodeUtil.isForIn(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if  (n.hasChildren()  &&  NodeUtil.isGetProp(n)||!NodeUtil.isForIn(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isGetProp(n))    {    	compilable	  [FE]  AssertionFailedError  	85	57	replace
209	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isGetProp(n)||!NodeUtil.isForIn(n))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isGetProp(n)||!NodeUtil.isForIn(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (n.hasChildren()  &&  NodeUtil.isGetProp(n)||!NodeUtil.isForIn(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isGetProp(n))    {    	compilable	  [FE]  AssertionFailedError  	85	57	replace
210	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isGetProp(n)||!NodeUtil.isGetProp(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if  (n.hasChildren()  &&  NodeUtil.isGetProp(n)||!NodeUtil.isGetProp(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isGetProp(n))    {    	compilable	  [FE]  AssertionFailedError  	85	57	replace
211	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isGetProp(n)||!NodeUtil.isGetProp(n))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:      [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isGetProp(n)||!NodeUtil.isGetProp(n))  {  [BUGGY]      tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (n.hasChildren()  &&  NodeUtil.isGetProp(n)||!NodeUtil.isGetProp(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isGetProp(n))    {    	compilable	  [FE]  AssertionFailedError  	85	57	replace
