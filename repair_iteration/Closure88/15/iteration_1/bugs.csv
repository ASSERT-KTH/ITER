bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasFirstChild())  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:  [BUGGY]  if(n.hasChildren()  ||  n.hasFirstChild())  {  [BUGGY]  tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()  ||  n.hasFirstChild())  {	if  (n.hasChildren())  {  	non-compiled	[CE]  cannot  find  symbol	29	None	replace
2	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:  [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isForIn(n))  {  [BUGGY]  tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if  (n.hasChildren()  &&!NodeUtil.isForIn(n))  {	if  (n.hasChildren())  {  	compilable	  [FE]  AssertionFailedError  	29	57	replace
3	[BUG]  [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isForIn(n))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:  [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isForIn(n))  {  [BUGGY]  tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (n.hasChildren()  &&!NodeUtil.isForIn(n))  {	if  (n.hasChildren())  {  	compilable	  [FE]  AssertionFailedError  	29	57	replace
4	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasNext())  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError  [CONTEXT]  continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:  [BUGGY]  if(n.hasChildren()  ||  n.hasNext())  {  [BUGGY]  tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()  ||  n.hasNext())  {	if  (n.hasChildren())  {  	non-compiled	[CE]  cannot  find  symbol	29	None	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:  [BUGGY]  if  (n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {  [BUGGY]  tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if  (n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {	if  (n.hasChildren())  {  	compilable	  [FE]  AssertionFailedError  	29	60	replace
6	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:  [BUGGY]  if  (n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {  [BUGGY]  tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {	if  (n.hasChildren())  {  	compilable	  [FE]  AssertionFailedError  	29	60	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:  [BUGGY]  if(n.getFirstChild().hasChildren())  {  [BUGGY]  tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.getFirstChild().hasChildren())  {	if  (n.hasChildren())  {  	compilable	  [FE]  AssertionFailedError  	29	57	replace
8	[BUG]  [BUGGY]  if(n.getFirstChild().hasChildren())  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:  [BUGGY]  if(n.getFirstChild().hasChildren())  {  [BUGGY]  tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild().hasChildren())  {	if  (n.hasChildren())  {  	compilable	  [FE]  AssertionFailedError  	29	57	replace
9	[BUG]  [BUGGY]    [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError  [CONTEXT]  continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:  [BUGGY]    [BUGGY]  tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	  	if  (n.hasChildren())  {  	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isForIn(n))  {  [BUGGY]  tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if  (n.hasChildren()  &&  NodeUtil.isForIn(n))  {	if  (n.hasChildren())  {  	compilable	  [FE]  AssertionFailedError  	29	60	replace
11	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isForIn(n))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isForIn(n))  {  [BUGGY]  tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (n.hasChildren()  &&  NodeUtil.isForIn(n))  {	if  (n.hasChildren())  {  	compilable	  [FE]  AssertionFailedError  	29	60	replace
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:  [BUGGY]  if(!NodeUtil.isForIn(n))  {  [BUGGY]  tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(!NodeUtil.isForIn(n))  {	if  (n.hasChildren())  {  	compilable	  [FE]  AssertionFailedError  	29	57	replace
13	[BUG]  [BUGGY]  if(!NodeUtil.isForIn(n))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:  [BUGGY]  if(!NodeUtil.isForIn(n))  {  [BUGGY]  tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(!NodeUtil.isForIn(n))  {	if  (n.hasChildren())  {  	compilable	  [FE]  AssertionFailedError  	29	57	replace
14	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  n.getFirstChild()!=  state)  {  [CE]  incomparable  types:  Node  and  FlowState<LiveVariableLattice>  [FE]        AssertionFailedError  [CONTEXT]  continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:  [BUGGY]  if  (n.hasChildren()  &&  n.getFirstChild()!=  state)  {  [BUGGY]  tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (n.hasChildren()  &&  n.getFirstChild()!=  state)  {	if  (n.hasChildren())  {  	non-compiled	[CE]  incomparable  types:  Node  and  FlowState<LiveVariableLattice>	29	None	replace
15	[BUG]  [BUGGY]  if(n.hasFirstChild())  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:  [BUGGY]  if(n.hasFirstChild())  {  [BUGGY]  tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasFirstChild())  {	if  (n.hasChildren())  {  	non-compiled	[CE]  cannot  find  symbol	29	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {  [BUGGY]  tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {	if  (n.hasChildren())  {  	compilable	  [FE]  AssertionFailedError  	29	57	replace
17	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {  [BUGGY]  tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {	if  (n.hasChildren())  {  	compilable	  [FE]  AssertionFailedError  	29	57	replace
18	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:  [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isForIn(n))  {  [BUGGY]  tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.hasChildren()  ||!NodeUtil.isForIn(n))  {	if  (n.hasChildren())  {  	compilable	  [FE]  AssertionFailedError  	29	57	replace
19	[BUG]  [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isForIn(n))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:  [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isForIn(n))  {  [BUGGY]  tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()  ||!NodeUtil.isForIn(n))  {	if  (n.hasChildren())  {  	compilable	  [FE]  AssertionFailedError  	29	57	replace
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  [BUGGY]  tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {	if  (n.hasChildren())  {  	compilable	  [FE]  AssertionFailedError  	29	57	replace
21	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  [BUGGY]  tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {	if  (n.hasChildren())  {  	compilable	  [FE]  AssertionFailedError  	29	57	replace
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  [BUGGY]  tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {	if  (n.hasChildren())  {  	compilable	  [FE]  AssertionFailedError  	29	57	replace
23	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  [BUGGY]  tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {	if  (n.hasChildren())  {  	compilable	  [FE]  AssertionFailedError  	29	57	replace
