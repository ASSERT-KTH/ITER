bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.getType()  ==  Token.RETURN  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if  (n.getType()  ==  Token.RETURN  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {	  if    (n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	6	60	replace
2	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.RETURN  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.getType()  ==  Token.RETURN  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (n.getType()  ==  Token.RETURN  &&  n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {	  if    (n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	6	60	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if  (n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.RETURN)  {	  if    (n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	6	57	replace
4	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.RETURN)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.RETURN)  {	  if    (n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	6	57	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if  (n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.RETURN)  {	  if    (n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	6	60	replace
6	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.RETURN)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (n.hasChildren()  &&  n.getLastChild().getType()  ==  Token.RETURN)  {	  if    (n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	6	60	replace
7	[BUG]  [BUGGY]  if(n.getFirstChild().hasChildren())  {  if(n.getFirstChild().hasChildren())  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild().hasChildren())  {  if(n.getFirstChild().hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild().hasChildren())    {    if(n.getFirstChild().hasChildren())  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
8	[BUG]  [BUGGY]  if(n.getFirstChild().hasChildren())  {  If(n.getFirstChild().hasChildren())  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild().hasChildren())  {  If(n.getFirstChild().hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild().hasChildren())    {    If(n.getFirstChild().hasChildren())  {	  	non-compiled	[CE]  ';'  expected	7	None	add
9	[BUG]  [BUGGY]  if(n.getFirstChild().hasChildren())  {  if(n.getLastChild().hasChildren())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild().hasChildren())  {  if(n.getLastChild().hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild().hasChildren())    {    if(n.getLastChild().hasChildren())  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
10	[BUG]  [BUGGY]  if(n.getFirstChild().hasChildren())  {  if(n.getfirstChild().hasChildren())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild().hasChildren())  {  if(n.getfirstChild().hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild().hasChildren())    {    if(n.getfirstChild().hasChildren())  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
11	[BUG]  [BUGGY]  if(n.getFirstChild().hasChildren())  {  if(N.getFirstChild().hasChildren())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild().hasChildren())  {  if(N.getFirstChild().hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild().hasChildren())    {    if(N.getFirstChild().hasChildren())  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
12	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.hasFirstChild())  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  &&  n.hasFirstChild())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()  &&  n.hasFirstChild())  {	  if(n.hasChildren()    ||    n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
13	[BUG]  [BUGGY]  if(n.hasChildren()  ||  state.hasFirstChild())  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||  state.hasFirstChild())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()  ||  state.hasFirstChild())  {	  if(n.hasChildren()    ||    n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
14	[BUG]  [BUGGY]  if(n.hasChildren()  ||  nodes.hasFirstChild())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||  nodes.hasFirstChild())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()  ||  nodes.hasFirstChild())  {	  if(n.hasChildren()    ||    n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
15	[BUG]  [BUGGY]  if(n.getChildren()  ||  n.hasFirstChild())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getChildren()  ||  n.hasFirstChild())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getChildren()  ||  n.hasFirstChild())  {	  if(n.hasChildren()    ||    n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.hasChildren()  ||  n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasFirstChild())    {    	compilable	  [FE]  AssertionFailedError  	1	57	replace
17	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild())  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||  n.hasOneChild())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()  ||  n.hasOneChild())  {	  if(n.hasChildren()    ||    n.hasFirstChild())    {    	compilable	  [FE]  AssertionFailedError  	1	57	replace
18	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isAssignmentOp(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.hasChildren()  ||!NodeUtil.isAssignmentOp(n))  {	  if(n.hasChildren()    ||!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	19	57	replace
19	[BUG]  [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isAssignmentOp(n))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isAssignmentOp(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()  ||!NodeUtil.isAssignmentOp(n))  {	  if(n.hasChildren()    ||!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	19	57	replace
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isGetProp(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.hasChildren()  ||!NodeUtil.isGetProp(n))  {	  if(n.hasChildren()    ||!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	19	57	replace
21	[BUG]  [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isGetProp(n))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isGetProp(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()  ||!NodeUtil.isGetProp(n))  {	  if(n.hasChildren()    ||!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	19	57	replace
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isExpressionNode(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.hasChildren()  ||!NodeUtil.isExpressionNode(n))  {	  if(n.hasChildren()    ||!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	19	57	replace
23	[BUG]  [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isExpressionNode(n))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isExpressionNode(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()  ||!NodeUtil.isExpressionNode(n))  {	  if(n.hasChildren()    ||!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	19	57	replace
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.hasChildren()  ||!NodeUtil.isFunctionDeclaration(n))  {	  if(n.hasChildren()    ||!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	19	57	replace
25	[BUG]  [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isFunctionDeclaration(n))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()  ||!NodeUtil.isFunctionDeclaration(n))  {	  if(n.hasChildren()    ||!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	19	57	replace
26	[BUG]  [BUGGY]  if(n.getFirstChild()  ||!NodeUtil.isForIn(n))  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]            AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild()  ||!NodeUtil.isForIn(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild()  ||!NodeUtil.isForIn(n))  {	  if(n.hasChildren()    ||!NodeUtil.isForIn(n))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	19	None	replace
27	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    ||    n.getFirstChild().getType()!=    Token.RETURN)    {    if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
28	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    ||    n.getFirstChild().getType()!=    Token.RETURN)    {    if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
29	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  if(n.hasChildren()  ||  n.getFirstChild().getType()  >=  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  if(n.hasChildren()  ||  n.getFirstChild().getType()  >=  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    ||    n.getFirstChild().getType()!=    Token.RETURN)    {    if(n.hasChildren()  ||  n.getFirstChild().getType()  >=  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
30	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  If(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  If(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    ||    n.getFirstChild().getType()!=    Token.RETURN)    {    If(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {	  	non-compiled	[CE]  ';'  expected	22	None	add
31	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  if(n.hasChildren()  ||  n.getFirstChild().getType()  >>  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  if(n.hasChildren()  ||  n.getFirstChild().getType()  >>  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    ||    n.getFirstChild().getType()!=    Token.RETURN)    {    if(n.hasChildren()  ||  n.getFirstChild().getType()  >>  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
32	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  if(n.hasChildren()  ||  n.getFirstChild().gettype()!=  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  if(n.hasChildren()  ||  n.getFirstChild().gettype()!=  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    ||    n.getFirstChild().getType()!=    Token.RETURN)    {    if(n.hasChildren()  ||  n.getFirstChild().gettype()!=  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
33	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  if(n.hasChildren()  ||  n.getfirstChild().getType()!=  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  if(n.hasChildren()  ||  n.getfirstChild().getType()!=  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    ||    n.getFirstChild().getType()!=    Token.RETURN)    {    if(n.hasChildren()  ||  n.getfirstChild().getType()!=  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
34	[BUG]  [BUGGY]  tryRemoveAssignment(t,  n.getFirstChild(),  state);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  tryRemoveAssignment(t,  n.getFirstChild(),  state);  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	tryRemoveAssignment(t,  n.getFirstChild(),  state);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
35	[BUG]  [BUGGY]  tryRemoveAssignment(t,  n.getLastChild(),  state);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  tryRemoveAssignment(t,  n.getLastChild(),  state);  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	tryRemoveAssignment(t,  n.getLastChild(),  state);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
36	[BUG]  [BUGGY]  Predicates.checkState(n.getType()  ==  Token.RETURN);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  Predicates.checkState(n.getType()  ==  Token.RETURN);  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	Predicates.checkState(n.getType()  ==  Token.RETURN);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
37	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.RETURN);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.RETURN);  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	Preconditions.checkState(n.getType()  ==  Token.RETURN);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
38	[BUG]  [BUGGY]  Node  n  =  nodes.get(n);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  Node  n  =  nodes.get(n);  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	Node  n  =  nodes.get(n);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
39	[BUG]  [BUGGY]  Node  n  =  cfgNode.getFirstChild();  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  Node  n  =  cfgNode.getFirstChild();  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	Node  n  =  cfgNode.getFirstChild();	      	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
40	[BUG]  [BUGGY]  Predicates.checkState(n.getType()  ==  Token.GETPROP);  [CE]  class,  interface,  or  enum  expected  [FE]                              AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  Predicates.checkState(n.getType()  ==  Token.GETPROP);  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	Predicates.checkState(n.getType()  ==  Token.GETPROP);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
41	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.RETURN)    {    if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
42	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.RETURN)    {    if(n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
43	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  If(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  If(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.RETURN)    {    If(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {	  	non-compiled	[CE]  ';'  expected	20	None	add
44	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  if(n.hasChildren()  ||  n.getFirstChild().getType()  >=  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  if(n.hasChildren()  ||  n.getFirstChild().getType()  >=  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.RETURN)    {    if(n.hasChildren()  ||  n.getFirstChild().getType()  >=  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
45	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  if(n.hasChildren()  ||  n.getFirstChild().gettype()  ==  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  if(n.hasChildren()  ||  n.getFirstChild().gettype()  ==  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.RETURN)    {    if(n.hasChildren()  ||  n.getFirstChild().gettype()  ==  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
46	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  if(n.hasChildren()  ||  n.getfirstChild().getType()  ==  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  if(n.hasChildren()  ||  n.getfirstChild().getType()  ==  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.RETURN)    {    if(n.hasChildren()  ||  n.getfirstChild().getType()  ==  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
47	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild().hasChildren()  ||  n.getFirstChild().hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.getFirstChild().hasChildren()  ||  n.getFirstChild().hasChildren())  {	  if(n.getFirstChild().hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	8	57	replace
48	[BUG]  [BUGGY]  if(n.getFirstChild().hasChildren()  ||  n.getFirstChild().hasChildren())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild().hasChildren()  ||  n.getFirstChild().hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild().hasChildren()  ||  n.getFirstChild().hasChildren())  {	  if(n.getFirstChild().hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	8	57	replace
49	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild().hasChildren()  ||  n.getLastChild().hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.getFirstChild().hasChildren()  ||  n.getLastChild().hasChildren())  {	  if(n.getFirstChild().hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	8	57	replace
50	[BUG]  [BUGGY]  if(n.getFirstChild().hasChildren()  ||  n.getLastChild().hasChildren())  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild().hasChildren()  ||  n.getLastChild().hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild().hasChildren()  ||  n.getLastChild().hasChildren())  {	  if(n.getFirstChild().hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	8	57	replace
51	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getLastChild().hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.getLastChild().hasChildren())  {	  if(n.getFirstChild().hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	8	57	replace
52	[BUG]  [BUGGY]  if(n.getLastChild().hasChildren())  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getLastChild().hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getLastChild().hasChildren())  {	  if(n.getFirstChild().hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	8	57	replace
53	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  n.getFirstChild().hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.getType()  ==  Token.GETPROP  &&  n.getFirstChild().hasChildren())  {	  if(n.getFirstChild().hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	8	60	replace
54	[BUG]  [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  n.getFirstChild().hasChildren())  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getType()  ==  Token.GETPROP  &&  n.getFirstChild().hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getType()  ==  Token.GETPROP  &&  n.getFirstChild().hasChildren())  {	  if(n.getFirstChild().hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	8	60	replace
55	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild().hasChildren()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.getFirstChild().hasChildren()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if(n.getFirstChild().hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	8	57	replace
56	[BUG]  [BUGGY]  if(n.getFirstChild().hasChildren()  &&!NodeUtil.isFunctionDeclaration(n))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild().hasChildren()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild().hasChildren()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if(n.getFirstChild().hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	8	57	replace
57	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild().hasChildren()  &&!NodeUtil.isForIn(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.getFirstChild().hasChildren()  &&!NodeUtil.isForIn(n))  {	  if(n.getFirstChild().hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	8	57	replace
58	[BUG]  [BUGGY]  if(n.getFirstChild().hasChildren()  &&!NodeUtil.isForIn(n))  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild().hasChildren()  &&!NodeUtil.isForIn(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild().hasChildren()  &&!NodeUtil.isForIn(n))  {	  if(n.getFirstChild().hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	8	57	replace
59	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild().hasChildren()  &&!NodeUtil.isAssignmentOp(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.getFirstChild().hasChildren()  &&!NodeUtil.isAssignmentOp(n))  {	  if(n.getFirstChild().hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	8	57	replace
60	[BUG]  [BUGGY]  if(n.getFirstChild().hasChildren()  &&!NodeUtil.isAssignmentOp(n))  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild().hasChildren()  &&!NodeUtil.isAssignmentOp(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild().hasChildren()  &&!NodeUtil.isAssignmentOp(n))  {	  if(n.getFirstChild().hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	8	57	replace
61	[BUG]  [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isForIn(n))  {  if  (n.hasChildren()  &&!NodeUtil.isForIn(n))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isForIn(n))  {  if  (n.hasChildren()  &&!NodeUtil.isForIn(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if    (n.hasChildren()    &&!NodeUtil.isForIn(n))    {    if  (n.hasChildren()  &&!NodeUtil.isForIn(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
62	[BUG]  [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isForIn(n))  {  If  (n.hasChildren()  &&!NodeUtil.isForIn(n))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isForIn(n))  {  If  (n.hasChildren()  &&!NodeUtil.isForIn(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if    (n.hasChildren()    &&!NodeUtil.isForIn(n))    {    If  (n.hasChildren()  &&!NodeUtil.isForIn(n))  {	  	non-compiled	[CE]  ';'  expected	2	None	add
63	[BUG]  [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isForIn(n))  {  if  (n.hasChildren()  &&!NodeUtil.isForin(n))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isForIn(n))  {  if  (n.hasChildren()  &&!NodeUtil.isForin(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if    (n.hasChildren()    &&!NodeUtil.isForIn(n))    {    if  (n.hasChildren()  &&!NodeUtil.isForin(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
64	[BUG]  [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isForIn(n))  {  if  (N.hasChildren()  &&!NodeUtil.isForIn(n))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isForIn(n))  {  if  (N.hasChildren()  &&!NodeUtil.isForIn(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if    (n.hasChildren()    &&!NodeUtil.isForIn(n))    {    if  (N.hasChildren()  &&!NodeUtil.isForIn(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
65	[BUG]  [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isForIn(n))  {  if  (n.hasChildren()  ||!NodeUtil.isForIn(n))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isForIn(n))  {  if  (n.hasChildren()  ||!NodeUtil.isForIn(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if    (n.hasChildren()    &&!NodeUtil.isForIn(n))    {    if  (n.hasChildren()  ||!NodeUtil.isForIn(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
66	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild()!=  null  ||  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.getFirstChild()!=  null  ||  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	21	57	replace
67	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  ||  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild()!=  null  ||  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild()!=  null  ||  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	21	57	replace
68	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||  n.getLastChild().getType()  ==  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.hasChildren()  ||  n.getLastChild().getType()  ==  Token.RETURN)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	21	57	replace
69	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getLastChild().getType()  ==  Token.RETURN)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||  n.getLastChild().getType()  ==  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()  ||  n.getLastChild().getType()  ==  Token.RETURN)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	21	57	replace
70	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild().getType()  ==  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.getFirstChild().getType()  ==  Token.RETURN)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	21	60	replace
71	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.RETURN)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild().getType()  ==  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild().getType()  ==  Token.RETURN)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	21	60	replace
72	[BUG]  [BUGGY]  if(!NodeUtil.isForIn(n))  {  if(!NodeUtil.isForIn(n))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(!NodeUtil.isForIn(n))  {  if(!NodeUtil.isForIn(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(!NodeUtil.isForIn(n))    {    if(!NodeUtil.isForIn(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
73	[BUG]  [BUGGY]  if(!NodeUtil.isForIn(n))  {  if(!NodeUtil.isForIn(n))  <  tryRemoveAssignment(t,  n.getFirstChild(),  state);  [CE]  >  expected  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(!NodeUtil.isForIn(n))  {  if(!NodeUtil.isForIn(n))  <  tryRemoveAssignment(t,  n.getFirstChild(),  state);  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(!NodeUtil.isForIn(n))    {    if(!NodeUtil.isForIn(n))  <  tryRemoveAssignment(t,  n.getFirstChild(),  state);	  	non-compiled	[CE]  >  expected	12	None	add
74	[BUG]  [BUGGY]  if(!NodeUtil.isForIn(n))  {  if(!NodeUtil.isForIn(n)&&!NodeUtil.isForIn(n))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(!NodeUtil.isForIn(n))  {  if(!NodeUtil.isForIn(n)&&!NodeUtil.isForIn(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(!NodeUtil.isForIn(n))    {    if(!NodeUtil.isForIn(n)&&!NodeUtil.isForIn(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
75	[BUG]  [BUGGY]  if(!NodeUtil.isForIn(n))  {  if(!NodeUtil.isForIn(n)&&!NodeUtil.isConditionExpression(n))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(!NodeUtil.isForIn(n))  {  if(!NodeUtil.isForIn(n)&&!NodeUtil.isConditionExpression(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(!NodeUtil.isForIn(n))    {    if(!NodeUtil.isForIn(n)&&!NodeUtil.isConditionExpression(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
76	[BUG]  [BUGGY]  if(!NodeUtil.isForIn(n))  {  If(!NodeUtil.isForIn(n))  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(!NodeUtil.isForIn(n))  {  If(!NodeUtil.isForIn(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(!NodeUtil.isForIn(n))    {    If(!NodeUtil.isForIn(n))  {	  	non-compiled	[CE]  ';'  expected	12	None	add
77	[BUG]  [BUGGY]  if(!NodeUtil.isForIn(n))  {  if(!NodeUtil.isForIn(n)&&!NodeUtil.getConditionExpression(n))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(!NodeUtil.isForIn(n))  {  if(!NodeUtil.isForIn(n)&&!NodeUtil.getConditionExpression(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(!NodeUtil.isForIn(n))    {    if(!NodeUtil.isForIn(n)&&!NodeUtil.getConditionExpression(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
78	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isForIn(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if  (n.hasChildren()  ||  NodeUtil.isForIn(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	11	57	replace
79	[BUG]  [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isForIn(n))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  ||  NodeUtil.isForIn(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (n.hasChildren()  ||  NodeUtil.isForIn(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	11	57	replace
80	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (!NodeUtil.isGetProp(n)&&  n.hasChildren()  &&  NodeUtil.isForIn(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if  (!NodeUtil.isGetProp(n)&&  n.hasChildren()  &&  NodeUtil.isForIn(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	11	60	replace
81	[BUG]  [BUGGY]  if  (!NodeUtil.isGetProp(n)&&  n.hasChildren()  &&  NodeUtil.isForIn(n))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (!NodeUtil.isGetProp(n)&&  n.hasChildren()  &&  NodeUtil.isForIn(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (!NodeUtil.isGetProp(n)&&  n.hasChildren()  &&  NodeUtil.isForIn(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	11	60	replace
82	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isAssignmentOp(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if  (n.hasChildren()  &&  NodeUtil.isAssignmentOp(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	11	60	replace
83	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isAssignmentOp(n))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isAssignmentOp(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (n.hasChildren()  &&  NodeUtil.isAssignmentOp(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	11	60	replace
84	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isGetProp(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if  (n.hasChildren()  &&  NodeUtil.isGetProp(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	11	60	replace
85	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isGetProp(n))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isGetProp(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (n.hasChildren()  &&  NodeUtil.isGetProp(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	11	60	replace
86	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	11	60	replace
87	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (n.hasChildren()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	11	60	replace
88	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isForIn(n)&&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if  (n.hasChildren()  &&  NodeUtil.isForIn(n)&&!NodeUtil.isFunctionDeclaration(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	11	60	replace
89	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isForIn(n)&&!NodeUtil.isFunctionDeclaration(n))  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isForIn(n)&&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (n.hasChildren()  &&  NodeUtil.isForIn(n)&&!NodeUtil.isFunctionDeclaration(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	11	60	replace
90	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(!NodeUtil.isGetProp(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(!NodeUtil.isGetProp(n))  {	  if(!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	13	57	replace
91	[BUG]  [BUGGY]  if(!NodeUtil.isGetProp(n))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(!NodeUtil.isGetProp(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(!NodeUtil.isGetProp(n))  {	  if(!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	13	57	replace
92	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(!NodeUtil.isAssignmentOp(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(!NodeUtil.isAssignmentOp(n))  {	  if(!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	13	57	replace
93	[BUG]  [BUGGY]  if(!NodeUtil.isAssignmentOp(n))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(!NodeUtil.isAssignmentOp(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(!NodeUtil.isAssignmentOp(n))  {	  if(!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	13	57	replace
94	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(!NodeUtil.isExpressionNode(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(!NodeUtil.isExpressionNode(n))  {	  if(!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	13	57	replace
95	[BUG]  [BUGGY]  if(!NodeUtil.isExpressionNode(n))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(!NodeUtil.isExpressionNode(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(!NodeUtil.isExpressionNode(n))  {	  if(!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	13	57	replace
96	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(!NodeUtil.isFunctionDeclaration(n))  {	  if(!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	13	57	replace
97	[BUG]  [BUGGY]  if(!NodeUtil.isFunctionDeclaration(n))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(!NodeUtil.isFunctionDeclaration(n))  {	  if(!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	13	57	replace
98	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(NodeUtil.isAssignmentOp(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(NodeUtil.isAssignmentOp(n))  {	  if(!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	13	60	replace
99	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(n))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(NodeUtil.isAssignmentOp(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(NodeUtil.isAssignmentOp(n))  {	  if(!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	13	60	replace
100	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(NodeUtil.isAssignmentOp(n)||!NodeUtil.isForIn(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(NodeUtil.isAssignmentOp(n)||!NodeUtil.isForIn(n))  {	  if(!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	13	57	replace
101	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(n)||!NodeUtil.isForIn(n))  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(NodeUtil.isAssignmentOp(n)||!NodeUtil.isForIn(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(NodeUtil.isAssignmentOp(n)||!NodeUtil.isForIn(n))  {	  if(!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	13	57	replace
102	[BUG]  [BUGGY]  if(!NodeUtil.isFunctionAnalysis(n))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(!NodeUtil.isFunctionAnalysis(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(!NodeUtil.isFunctionAnalysis(n))  {	  if(!NodeUtil.isForIn(n))    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
103	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    &&    n.getFirstChild()!=    null    &&    n.hasChildren())    {    if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
104	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild()  ==  null  &&  n.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild()  ==  null  &&  n.hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    &&    n.getFirstChild()!=    null    &&    n.hasChildren())    {    if(n.hasChildren()  &&  n.getFirstChild()  ==  null  &&  n.hasChildren())  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
105	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {  If(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {  If(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    &&    n.getFirstChild()!=    null    &&    n.hasChildren())    {    If(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {	  	non-compiled	[CE]  ';'  expected	16	None	add
106	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild()  >=  null  &&  n.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild()  >=  null  &&  n.hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    &&    n.getFirstChild()!=    null    &&    n.hasChildren())    {    if(n.hasChildren()  &&  n.getFirstChild()  >=  null  &&  n.hasChildren())  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
107	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild()  >>  null  &&  n.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild()  >>  null  &&  n.hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    &&    n.getFirstChild()!=    null    &&    n.hasChildren())    {    if(n.hasChildren()  &&  n.getFirstChild()  >>  null  &&  n.hasChildren())  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
108	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild()  [Delete]  null  &&  n.hasChildren())  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild()  [Delete]  null  &&  n.hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    &&    n.getFirstChild()!=    null    &&    n.hasChildren())    {    if(n.hasChildren()  &&  n.getFirstChild()  [Delete]  null  &&  n.hasChildren())  {	  	non-compiled	[CE]  ')'  expected	16	None	add
109	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild()  [BUGGY]  null  &&  n.hasChildren())  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {  if(n.hasChildren()  &&  n.getFirstChild()  [BUGGY]  null  &&  n.hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    &&    n.getFirstChild()!=    null    &&    n.hasChildren())    {    if(n.hasChildren()  &&  n.getFirstChild()  [BUGGY]  null  &&  n.hasChildren())  {	  	non-compiled	[CE]  ')'  expected	16	None	add
110	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  state.getFirstChild()!=  n)  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&  state.getFirstChild()!=  n)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (n.hasChildren()  &&  state.getFirstChild()!=  n)  {	  if    (n.hasChildren()    &&    n.getFirstChild()!=    state)    {    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
111	[BUG]  [BUGGY]  if  (n.hasChildren()  ||  n.getFirstChild()!=  state)  {  [CE]  incomparable  types:  Node  and  FlowState<LiveVariableLattice>  [FE]              AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  ||  n.getFirstChild()!=  state)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (n.hasChildren()  ||  n.getFirstChild()!=  state)  {	  if    (n.hasChildren()    &&    n.getFirstChild()!=    state)    {    	non-compiled	[CE]  incomparable  types:  Node  and  FlowState<LiveVariableLattice>	14	None	replace
112	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  n.getFirstChild()  ==  state)  {  [CE]  incomparable  types:  Node  and  FlowState<LiveVariableLattice>  [FE]                AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&  n.getFirstChild()  ==  state)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (n.hasChildren()  &&  n.getFirstChild()  ==  state)  {	  if    (n.hasChildren()    &&    n.getFirstChild()!=    state)    {    	non-compiled	[CE]  incomparable  types:  Node  and  FlowState<LiveVariableLattice>	14	None	replace
113	[BUG]  [BUGGY]  if  (n.hasChildren()  ||  state.getFirstChild()!=  n)  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  ||  state.getFirstChild()!=  n)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (n.hasChildren()  ||  state.getFirstChild()!=  n)  {	  if    (n.hasChildren()    &&    n.getFirstChild()!=    state)    {    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
114	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isForIn(n))  {  if  (n.hasChildren()  &&  NodeUtil.isForIn(n))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isForIn(n))  {  if  (n.hasChildren()  &&  NodeUtil.isForIn(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if    (n.hasChildren()    &&    NodeUtil.isForIn(n))    {    if  (n.hasChildren()  &&  NodeUtil.isForIn(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
115	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isForIn(n))  {  If  (n.hasChildren()  &&  NodeUtil.isForIn(n))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isForIn(n))  {  If  (n.hasChildren()  &&  NodeUtil.isForIn(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if    (n.hasChildren()    &&    NodeUtil.isForIn(n))    {    If  (n.hasChildren()  &&  NodeUtil.isForIn(n))  {	  	non-compiled	[CE]  ';'  expected	10	None	add
116	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isForIn(n))  {  if  (n.hasChildren()  &&  nodeUtil.isForIn(n))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isForIn(n))  {  if  (n.hasChildren()  &&  nodeUtil.isForIn(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if    (n.hasChildren()    &&    NodeUtil.isForIn(n))    {    if  (n.hasChildren()  &&  nodeUtil.isForIn(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
117	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isForIn(n))  {  if  (N.hasChildren()  &&  NodeUtil.isForIn(n))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isForIn(n))  {  if  (N.hasChildren()  &&  NodeUtil.isForIn(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if    (n.hasChildren()    &&    NodeUtil.isForIn(n))    {    if  (N.hasChildren()  &&  NodeUtil.isForIn(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
118	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isForIn(n))  {  if  (n.hasChildren()  &&  NodeUtil.isForin(n))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isForIn(n))  {  if  (n.hasChildren()  &&  NodeUtil.isForin(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if    (n.hasChildren()    &&    NodeUtil.isForIn(n))    {    if  (n.hasChildren()  &&  NodeUtil.isForin(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
119	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasFirstChild()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasFirstChild()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {	  if(n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
120	[BUG]  [BUGGY]  if(n.hasFirstChild()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasFirstChild()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasFirstChild()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if(n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
121	[BUG]  [BUGGY]  if(n.hasFirstChild()  &&  state.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasFirstChild()  &&  state.getType()  ==  Token.NAME)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasFirstChild()  &&  state.getType()  ==  Token.NAME)  {	  if(n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
122	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  n.hasNext())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasFirstChild()  ||  n.hasNext())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasFirstChild()  ||  n.hasNext())  {	  if(n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
123	[BUG]  [BUGGY]  if(n.hasFirstChild()  &&  state.getType()  ==  Token.RETURN)  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasFirstChild()  &&  state.getType()  ==  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasFirstChild()  &&  state.getType()  ==  Token.RETURN)  {	  if(n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
124	[BUG]  [BUGGY]  if(n.hasFirstChild()  &&  state.getType()  ==  Token.FUNCTION)  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasFirstChild()  &&  state.getType()  ==  Token.FUNCTION)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasFirstChild()  &&  state.getType()  ==  Token.FUNCTION)  {	  if(n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
125	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasFirstChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasFirstChild()  ||  n.getFirstChild().getType()  ==  Token.NAME)  {	  if(n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
126	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.hasNext())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  &&  n.hasNext())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()  &&  n.hasNext())  {	  if(n.hasChildren()    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
127	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().hasNext())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().hasNext())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()  ||  n.getFirstChild().hasNext())  {	  if(n.hasChildren()    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
128	[BUG]  [BUGGY]  if(n.getChildren()  ||  n.hasNext())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getChildren()  ||  n.hasNext())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getChildren()  ||  n.hasNext())  {	  if(n.hasChildren()    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
129	[BUG]  [BUGGY]  if(n.hasChildren()  ||  state.hasNext())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||  state.hasNext())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()  ||  state.hasNext())  {	  if(n.hasChildren()    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
130	[BUG]  [BUGGY]  if(n.hasChildren()  ||  nodes.hasNext())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||  nodes.hasNext())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()  ||  nodes.hasNext())  {	  if(n.hasChildren()    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
131	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.hasChildren()  ||  n.getType()  ==  Token.RETURN)  {	  if(n.hasChildren()    ||    n.hasNext())    {    	compilable	  [FE]  AssertionFailedError  	4	57	replace
132	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.RETURN)  {  [FE]  AssertionFailedError  [FE]                      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||  n.getType()  ==  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()  ||  n.getType()  ==  Token.RETURN)  {	  if(n.hasChildren()    ||    n.hasNext())    {    	compilable	  [FE]  AssertionFailedError  	4	57	replace
133	[BUG]  [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isForIn(n))  {  if(n.hasChildren()  ||!NodeUtil.isForIn(n))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isForIn(n))  {  if(n.hasChildren()  ||!NodeUtil.isForIn(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    ||!NodeUtil.isForIn(n))    {    if(n.hasChildren()  ||!NodeUtil.isForIn(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
134	[BUG]  [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isForIn(n))  {  If(n.hasChildren()  ||!NodeUtil.isForIn(n))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isForIn(n))  {  If(n.hasChildren()  ||!NodeUtil.isForIn(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    ||!NodeUtil.isForIn(n))    {    If(n.hasChildren()  ||!NodeUtil.isForIn(n))  {	  	non-compiled	[CE]  ';'  expected	18	None	add
135	[BUG]  [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isForIn(n))  {  if(n.hasChildren()  ||!NodeUtil.isForin(n))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isForIn(n))  {  if(n.hasChildren()  ||!NodeUtil.isForin(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    ||!NodeUtil.isForIn(n))    {    if(n.hasChildren()  ||!NodeUtil.isForin(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
136	[BUG]  [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isForIn(n))  {  if(n.hasChildren()  ||! "NodeUtil.isForIn(n))  {  [CE]  unclosed  string  literal  [FE]          AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isForIn(n))  {  if(n.hasChildren()  ||! "NodeUtil.isForIn(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    ||!NodeUtil.isForIn(n))    {    if(n.hasChildren()  ||! "NodeUtil.isForIn(n))  {	  	non-compiled	[CE]  unclosed  string  literal	18	None	add
137	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {  if  (n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {  if  (n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if    (n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.RETURN)    {    if  (n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
138	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {  if  (n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {  if  (n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if    (n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.RETURN)    {    if  (n.hasChildren()  &&  n.getFirstChild().getType()!=  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
139	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {  If  (n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {  If  (n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if    (n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.RETURN)    {    If  (n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
140	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {  if  (n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {  if  (n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if    (n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.RETURN)    {    if  (n.hasChildren()  &&  n.getFirstChild().getType()  >=  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
141	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {  if  (n.hasChildren()  &&  n.getFirstChild().gettype()  ==  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {  if  (n.hasChildren()  &&  n.getFirstChild().gettype()  ==  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if    (n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.RETURN)    {    if  (n.hasChildren()  &&  n.getFirstChild().gettype()  ==  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
142	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {  if  (n.hasChildren()  &&  n.getfirstChild().getType()  ==  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {  if  (n.hasChildren()  &&  n.getfirstChild().getType()  ==  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if    (n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.RETURN)    {    if  (n.hasChildren()  &&  n.getfirstChild().getType()  ==  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
143	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {  if  (N.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {  if  (N.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if    (n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.RETURN)    {    if  (N.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
144	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isAssignmentOp(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if  (n.hasChildren()  &&!NodeUtil.isAssignmentOp(n))  {	  if    (n.hasChildren()    &&!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	3	57	replace
145	[BUG]  [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isAssignmentOp(n))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isAssignmentOp(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (n.hasChildren()  &&!NodeUtil.isAssignmentOp(n))  {	  if    (n.hasChildren()    &&!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	3	57	replace
146	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isGetProp(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if  (n.hasChildren()  &&!NodeUtil.isGetProp(n))  {	  if    (n.hasChildren()    &&!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	3	57	replace
147	[BUG]  [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isGetProp(n))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isGetProp(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (n.hasChildren()  &&!NodeUtil.isGetProp(n))  {	  if    (n.hasChildren()    &&!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	3	57	replace
148	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isFunction(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if  (n.hasChildren()  &&!NodeUtil.isFunction(n))  {	  if    (n.hasChildren()    &&!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	3	57	replace
149	[BUG]  [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isFunction(n))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isFunction(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (n.hasChildren()  &&!NodeUtil.isFunction(n))  {	  if    (n.hasChildren()    &&!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	3	57	replace
150	[BUG]  [BUGGY]  if  (n.hasFirstChild()  &&!NodeUtil.isForIn(n))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasFirstChild()  &&!NodeUtil.isForIn(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (n.hasFirstChild()  &&!NodeUtil.isForIn(n))  {	  if    (n.hasChildren()    &&!NodeUtil.isForIn(n))    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
151	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||  n.getLastChild().getType()!=  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.hasChildren()  ||  n.getLastChild().getType()!=  Token.RETURN)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()!=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	23	57	replace
152	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getLastChild().getType()!=  Token.RETURN)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||  n.getLastChild().getType()!=  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()  ||  n.getLastChild().getType()!=  Token.RETURN)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()!=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	23	57	replace
153	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()!=  Token.RETURN)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()!=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	23	57	replace
154	[BUG]  [BUGGY]  if(n.getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()!=  Token.RETURN)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()!=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	23	57	replace
155	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild().getType()!=  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.getFirstChild().getType()!=  Token.RETURN)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()!=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	23	57	replace
156	[BUG]  [BUGGY]  if(n.getFirstChild().getType()!=  Token.RETURN)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild().getType()!=  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild().getType()!=  Token.RETURN)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()!=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	23	57	replace
157	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild()!=  null  &&  n.hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.hasChildren()  ||  n.getFirstChild()!=  null  &&  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild()!=    null    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	17	57	replace
158	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild()!=  null  &&  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild()!=  null  &&  n.hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()  ||  n.getFirstChild()!=  null  &&  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild()!=    null    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	17	57	replace
159	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()  ==  null  &&  n.hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.hasChildren()  &&  n.getFirstChild()  ==  null  &&  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild()!=    null    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	17	60	replace
160	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()  ==  null  &&  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()  ==  null  &&  n.hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()  &&  n.getFirstChild()  ==  null  &&  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild()!=    null    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	17	60	replace
161	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getType()  ==  Token.RETURN  &&  n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.getType()  ==  Token.RETURN  &&  n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild()!=    null    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	17	58	replace
162	[BUG]  [BUGGY]  if(n.getType()  ==  Token.RETURN  &&  n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getType()  ==  Token.RETURN  &&  n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getType()  ==  Token.RETURN  &&  n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild()!=    null    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	17	58	replace
163	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()!=  null  ||  n.hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.hasChildren()  &&  n.getFirstChild()!=  null  ||  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild()!=    null    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	17	57	replace
164	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()!=  null  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()!=  null  ||  n.hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()  &&  n.getFirstChild()!=  null  ||  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild()!=    null    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	17	57	replace
165	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  &&  n.getLastChild()!=  null  &&  n.hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.hasChildren()  &&  n.getLastChild()!=  null  &&  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild()!=    null    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	17	57	replace
166	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getLastChild()!=  null  &&  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  &&  n.getLastChild()!=  null  &&  n.hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()  &&  n.getLastChild()!=  null  &&  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild()!=    null    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	17	57	replace
167	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren()  ||  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild()!=    null    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	17	57	replace
168	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren()  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren()  ||  n.hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren()  ||  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild()!=    null    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	17	57	replace
169	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {  if(n.hasChildren()  &&  n.getfirstChild()!=  null  &&  n.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {  if(n.hasChildren()  &&  n.getfirstChild()!=  null  &&  n.hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    &&    n.getFirstChild()!=    null    &&    n.hasChildren())    {    if(n.hasChildren()  &&  n.getfirstChild()!=  null  &&  n.hasChildren())  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
170	[BUG]  [BUGGY]  tryRemoveAssignment(t,  nodes.getFirstChild(),  state);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  tryRemoveAssignment(t,  nodes.getFirstChild(),  state);  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	tryRemoveAssignment(t,  nodes.getFirstChild(),  state);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
171	[BUG]  [BUGGY]  tryRemoveAssignment(t,  NodeUtil.getConditionExpression(n),  state);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  tryRemoveAssignment(t,  NodeUtil.getConditionExpression(n),  state);  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	tryRemoveAssignment(t,  NodeUtil.getConditionExpression(n),  state);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
172	[BUG]  [BUGGY]  tryRemoveAssignment(t,  NodeUtil.getReturnType(n),  state);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  tryRemoveAssignment(t,  NodeUtil.getReturnType(n),  state);  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	tryRemoveAssignment(t,  NodeUtil.getReturnType(n),  state);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
173	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(NodeUtil.isGetProp(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(NodeUtil.isGetProp(n))  {	  if(!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	13	60	replace
174	[BUG]  [BUGGY]  if(NodeUtil.isGetProp(n))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(NodeUtil.isGetProp(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(NodeUtil.isGetProp(n))  {	  if(!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	13	60	replace
175	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(NodeUtil.isAssignmentOp(n)&&!NodeUtil.isForIn(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(NodeUtil.isAssignmentOp(n)&&!NodeUtil.isForIn(n))  {	  if(!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	13	60	replace
176	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(n)&&!NodeUtil.isForIn(n))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(NodeUtil.isAssignmentOp(n)&&!NodeUtil.isForIn(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(NodeUtil.isAssignmentOp(n)&&!NodeUtil.isForIn(n))  {	  if(!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	13	60	replace
177	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(!NodeUtil.isForIn(n)&&!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(!NodeUtil.isForIn(n)&&!NodeUtil.mayHaveSideEffects(n))  {	  if(!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	13	60	replace
178	[BUG]  [BUGGY]  if(!NodeUtil.isForIn(n)&&!NodeUtil.mayHaveSideEffects(n))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(!NodeUtil.isForIn(n)&&!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(!NodeUtil.isForIn(n)&&!NodeUtil.mayHaveSideEffects(n))  {	  if(!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	13	60	replace
179	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild())  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()  ||  n.getFirstChild())  {	  if(n.hasChildren()    ||    n.hasFirstChild())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	1	None	replace
180	[BUG]  [BUGGY]  if(n.hasFirstChild()  &&  state.getLastChild().getString().equals( "return "))  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasFirstChild()  &&  state.getLastChild().getString().equals( "return "))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasFirstChild()  &&  state.getLastChild().getString().equals( "return "))  {	  if(n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
181	[BUG]  [BUGGY]  if(n.hasFirstChild()  &&  NodeUtil.isForIn(n))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasFirstChild()  &&  NodeUtil.isForIn(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasFirstChild()  &&  NodeUtil.isForIn(n))  {	  if(n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
182	[BUG]  [BUGGY]  if(n.hasFirstChild()  &&  NodeUtil.getConditionExpression(n)!=  null)  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasFirstChild()  &&  NodeUtil.getConditionExpression(n)!=  null)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasFirstChild()  &&  NodeUtil.getConditionExpression(n)!=  null)  {	  if(n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
183	[BUG]  [BUGGY]  if(n.hasFirstChild()  &&  state.getLastChild().getString().endsWith( "__ "))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasFirstChild()  &&  state.getLastChild().getString().endsWith( "__ "))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasFirstChild()  &&  state.getLastChild().getString().endsWith( "__ "))  {	  if(n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
184	[BUG]  [BUGGY]  if(n.hasFirstChild()  &&  NodeUtil.getConditionExpression(n)!=  state)  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasFirstChild()  &&  NodeUtil.getConditionExpression(n)!=  state)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasFirstChild()  &&  NodeUtil.getConditionExpression(n)!=  state)  {	  if(n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
185	[BUG]  [BUGGY]  if(NodeUtil.hasFirstChild())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(NodeUtil.hasFirstChild())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(NodeUtil.hasFirstChild())  {	  if(n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
186	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  n.getLastChild()!=  state)  {  [CE]  incomparable  types:  Node  and  FlowState<LiveVariableLattice>  [FE]            AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&  n.getLastChild()!=  state)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (n.hasChildren()  &&  n.getLastChild()!=  state)  {	  if    (n.hasChildren()    &&    n.getFirstChild()!=    state)    {    	non-compiled	[CE]  incomparable  types:  Node  and  FlowState<LiveVariableLattice>	14	None	replace
187	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(!NodeUtil.isForIn(n)&&  n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(!NodeUtil.isForIn(n)&&  n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild()!=    null    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	17	57	replace
188	[BUG]  [BUGGY]  if(!NodeUtil.isForIn(n)&&  n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(!NodeUtil.isForIn(n)&&  n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(!NodeUtil.isForIn(n)&&  n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild()!=    null    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	17	57	replace
189	[BUG]  [BUGGY]  if(n.isReturn()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.isReturn()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.isReturn()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild()!=    null    &&    n.hasChildren())    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
190	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if  (n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.hasChildren())  {	  if    (n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	6	57	replace
191	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.hasChildren())  {	  if    (n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	6	57	replace
192	[BUG]  [BUGGY]  if(n.getFirstChild().hasChildren())  {  if(n.getFirstChild().hasChildren()  ||  state);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild().hasChildren())  {  if(n.getFirstChild().hasChildren()  ||  state);  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild().hasChildren())    {    if(n.getFirstChild().hasChildren()  ||  state);	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
193	[BUG]  [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isForIn(n))  {  if(N.hasChildren()  ||!NodeUtil.isForIn(n))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isForIn(n))  {  if(N.hasChildren()  ||!NodeUtil.isForIn(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    ||!NodeUtil.isForIn(n))    {    if(N.hasChildren()  ||!NodeUtil.isForIn(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
194	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.getFirstChild()!=  null  &&  n.getFirstChild().hasChildren())  {	  if(n.getFirstChild().hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	8	57	replace
195	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().hasChildren())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild()!=  null  &&  n.getFirstChild().hasChildren())  {	  if(n.getFirstChild().hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	8	57	replace
196	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild()  ==  null  &&  n.getFirstChild().hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.getFirstChild()  ==  null  &&  n.getFirstChild().hasChildren())  {	  if(n.getFirstChild().hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	8	60	replace
197	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  &&  n.getFirstChild().hasChildren())  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild()  ==  null  &&  n.getFirstChild().hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild()  ==  null  &&  n.getFirstChild().hasChildren())  {	  if(n.getFirstChild().hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	8	60	replace
198	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.getFirstChild().hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.getFirstChild()  ==  null  ||  n.getFirstChild().hasChildren())  {	  if(n.getFirstChild().hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	8	57	replace
199	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.getFirstChild().hasChildren())  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.getFirstChild().hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild()  ==  null  ||  n.getFirstChild().hasChildren())  {	  if(n.getFirstChild().hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	8	57	replace
200	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.getFirstChild()!=  null  &&  n.hasChildren()  &&!NodeUtil.isForIn(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if  (n.getFirstChild()!=  null  &&  n.hasChildren()  &&!NodeUtil.isForIn(n))  {	  if    (n.hasChildren()    &&!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	3	57	replace
201	[BUG]  [BUGGY]  if  (n.getFirstChild()!=  null  &&  n.hasChildren()  &&!NodeUtil.isForIn(n))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.getFirstChild()!=  null  &&  n.hasChildren()  &&!NodeUtil.isForIn(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (n.getFirstChild()!=  null  &&  n.hasChildren()  &&!NodeUtil.isForIn(n))  {	  if    (n.hasChildren()    &&!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	3	57	replace
202	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if  (n.hasChildren()  &&!NodeUtil.mayHaveSideEffects(n))  {	  if    (n.hasChildren()    &&!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	3	60	replace
203	[BUG]  [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.mayHaveSideEffects(n))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (n.hasChildren()  &&!NodeUtil.mayHaveSideEffects(n))  {	  if    (n.hasChildren()    &&!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	3	60	replace
204	[BUG]  [BUGGY]  if  (NodeUtil.hasChildren()  &&!NodeUtil.isForIn(n))  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (NodeUtil.hasChildren()  &&!NodeUtil.isForIn(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (NodeUtil.hasChildren()  &&!NodeUtil.isForIn(n))  {	  if    (n.hasChildren()    &&!NodeUtil.isForIn(n))    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
205	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.getFirstChild()  ==  null  ||  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	21	57	replace
206	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild()  ==  null  ||  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	21	57	replace
207	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	21	57	replace
208	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.hasChildren())  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	21	57	replace
209	[BUG]  [BUGGY]  if  (NodeUtil.hasChildren()  &&  NodeUtil.isForIn(n))  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (NodeUtil.hasChildren()  &&  NodeUtil.isForIn(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (NodeUtil.hasChildren()  &&  NodeUtil.isForIn(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isForIn(n))    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
210	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunction(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if  (n.hasChildren()  &&  NodeUtil.isFunction(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	11	60	replace
211	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunction(n))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isFunction(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (n.hasChildren()  &&  NodeUtil.isFunction(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	11	60	replace
212	[BUG]  [BUGGY]  if(NodeUtil.hasChildren()  ||  n.hasNext())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(NodeUtil.hasChildren()  ||  n.hasNext())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(NodeUtil.hasChildren()  ||  n.hasNext())  {	  if(n.hasChildren()    ||    n.hasNext())    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
213	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild()!=  null  ||  n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.getFirstChild()!=  null  ||  n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()!=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	23	57	replace
214	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  ||  n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild()!=  null  ||  n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild()!=  null  ||  n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()!=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	23	57	replace
215	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.getFirstChild()  ==  null  ||  n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()!=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	23	57	replace
216	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild()  ==  null  ||  n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()!=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	23	57	replace
217	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.getFirstChild()!=  null  &&  n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()!=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	23	57	replace
218	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild()!=  null  &&  n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()!=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	23	57	replace
219	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getType()  ==  Token.RETURN  ||  n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.getType()  ==  Token.RETURN  ||  n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()!=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	23	57	replace
220	[BUG]  [BUGGY]  if(n.getType()  ==  Token.RETURN  ||  n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getType()  ==  Token.RETURN  ||  n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getType()  ==  Token.RETURN  ||  n.hasChildren()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()!=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	23	57	replace
221	[BUG]  [BUGGY]  if(!NodeUtil.isForIn(n))  {  if(!NodeUtil.isForIn(n)&&!NodeUtil.isFunction(n))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(!NodeUtil.isForIn(n))  {  if(!NodeUtil.isForIn(n)&&!NodeUtil.isFunction(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(!NodeUtil.isForIn(n))    {    if(!NodeUtil.isForIn(n)&&!NodeUtil.isFunction(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
222	[BUG]  [BUGGY]  if(!NodeUtil.isForIn(n))  {  if(!NodeUtil.isForIn(n)&&!NodeUtil.isGetProp(n))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(!NodeUtil.isForIn(n))  {  if(!NodeUtil.isForIn(n)&&!NodeUtil.isGetProp(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(!NodeUtil.isForIn(n))    {    if(!NodeUtil.isForIn(n)&&!NodeUtil.isGetProp(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
223	[BUG]  [BUGGY]  if(!NodeUtil.isForIn(n))  {  if(!NodeUtil.isForIn(n)||!NodeUtil.isForIn(n))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(!NodeUtil.isForIn(n))  {  if(!NodeUtil.isForIn(n)||!NodeUtil.isForIn(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(!NodeUtil.isForIn(n))    {    if(!NodeUtil.isForIn(n)||!NodeUtil.isForIn(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
224	[BUG]  [BUGGY]  if(!NodeUtil.isForIn(n))  {  if(!NodeUtil.isForIn(n)||  NodeUtil.getConditionExpression(n)!=  state);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(!NodeUtil.isForIn(n))  {  if(!NodeUtil.isForIn(n)||  NodeUtil.getConditionExpression(n)!=  state);  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(!NodeUtil.isForIn(n))    {    if(!NodeUtil.isForIn(n)||  NodeUtil.getConditionExpression(n)!=  state);	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
225	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.hasChildren()  ||!NodeUtil.mayHaveSideEffects(n))  {	  if(n.hasChildren()    ||!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	19	57	replace
226	[BUG]  [BUGGY]  if(n.hasChildren()  ||!NodeUtil.mayHaveSideEffects(n))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()  ||!NodeUtil.mayHaveSideEffects(n))  {	  if(n.hasChildren()    ||!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	19	57	replace
227	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isForIn(n)&&!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.hasChildren()  ||!NodeUtil.isForIn(n)&&!NodeUtil.mayHaveSideEffects(n))  {	  if(n.hasChildren()    ||!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	19	57	replace
228	[BUG]  [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isForIn(n)&&!NodeUtil.mayHaveSideEffects(n))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isForIn(n)&&!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()  ||!NodeUtil.isForIn(n)&&!NodeUtil.mayHaveSideEffects(n))  {	  if(n.hasChildren()    ||!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	19	57	replace
229	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isFunction(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.hasChildren()  ||!NodeUtil.isFunction(n))  {	  if(n.hasChildren()    ||!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	19	57	replace
230	[BUG]  [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isFunction(n))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isFunction(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()  ||!NodeUtil.isFunction(n))  {	  if(n.hasChildren()    ||!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	19	57	replace
231	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  cfgNode.getLastChild().getString().equals( "return "))  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasFirstChild()  ||  cfgNode.getLastChild().getString().equals( "return "))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasFirstChild()  ||  cfgNode.getLastChild().getString().equals( "return "))  {	  if(n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
232	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  state.hasOneChild())  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasFirstChild()  ||  state.hasOneChild())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasFirstChild()  ||  state.hasOneChild())  {	  if(n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
233	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  cfgNode.getFirstChild().getType()!=  Token.RETURN)  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasFirstChild()  ||  cfgNode.getFirstChild().getType()!=  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasFirstChild()  ||  cfgNode.getFirstChild().getType()!=  Token.RETURN)  {	  if(n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
234	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  cfgNode.getFirstChild().getType()  ==  Token.RETURN)  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasFirstChild()  ||  cfgNode.getFirstChild().getType()  ==  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasFirstChild()  ||  cfgNode.getFirstChild().getType()  ==  Token.RETURN)  {	  if(n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
235	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasFirstChild()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasFirstChild()  ||  n.getFirstChild().getType()!=  Token.RETURN)  {	  if(n.hasFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
236	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(!NodeUtil.isAssignmentOp(n)&&  n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(!NodeUtil.isAssignmentOp(n)&&  n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild()!=    null    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	17	57	replace
237	[BUG]  [BUGGY]  if(!NodeUtil.isAssignmentOp(n)&&  n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(!NodeUtil.isAssignmentOp(n)&&  n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(!NodeUtil.isAssignmentOp(n)&&  n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {	  if(n.hasChildren()    &&    n.getFirstChild()!=    null    &&    n.hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	17	57	replace
238	[BUG]  [BUGGY]  if(n.getFirstChild().hasChildren())  {  if(n.getFirstChild().hasChildren())  <  tryRemoveAssignment(t,  n.getFirstChild(),  state);  [CE]  >  expected  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild().hasChildren())  {  if(n.getFirstChild().hasChildren())  <  tryRemoveAssignment(t,  n.getFirstChild(),  state);  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild().hasChildren())    {    if(n.getFirstChild().hasChildren())  <  tryRemoveAssignment(t,  n.getFirstChild(),  state);	  	non-compiled	[CE]  >  expected	7	None	add
239	[BUG]  [BUGGY]  if(n.getFirstChild().hasChildren())  {  if(n.getFirstChild().hasChildren())  <  tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  [CE]  >  expected  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild().hasChildren())  {  if(n.getFirstChild().hasChildren())  <  tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild().hasChildren())    {    if(n.getFirstChild().hasChildren())  <  tryRemoveAssignment(t,  n.getFirstChild(),  state);  }	  	non-compiled	[CE]  >  expected	7	None	add
240	[BUG]  [BUGGY]  if(n.getFirstChild().hasChildren())  {  if(n.getFirstChild().hasChildren())  <  tryRemoveAssignment(t,  n.getFirstChild(),  state);  continue;  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild().hasChildren())  {  if(n.getFirstChild().hasChildren())  <  tryRemoveAssignment(t,  n.getFirstChild(),  state);  continue;  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild().hasChildren())    {    if(n.getFirstChild().hasChildren())  <  tryRemoveAssignment(t,  n.getFirstChild(),  state);  continue;	  	non-compiled	[CE]  >  expected	7	None	add
241	[BUG]  [BUGGY]  if(n.getFirstChild().hasChildren())  {  if(n.getFirstChild().hasChildren())  <  tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  [CE]  >  expected  [FE]          AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild().hasChildren())  {  if(n.getFirstChild().hasChildren())  <  tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild().hasChildren())    {    if(n.getFirstChild().hasChildren())  <  tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;	  	non-compiled	[CE]  >  expected	7	None	add
242	[BUG]  [BUGGY]  if(n.getFirstChild().hasChildren())  {  if(n.getFirstChild().hasChildren()  ||  state  ==  AssertionFailedError.RETURN)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild().hasChildren())  {  if(n.getFirstChild().hasChildren()  ||  state  ==  AssertionFailedError.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild().hasChildren())    {    if(n.getFirstChild().hasChildren()  ||  state  ==  AssertionFailedError.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
243	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isForIn(n))  {  if  (n.hasChildren()  ||  NodeUtil.isForIn(n))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isForIn(n))  {  if  (n.hasChildren()  ||  NodeUtil.isForIn(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if    (n.hasChildren()    &&    NodeUtil.isForIn(n))    {    if  (n.hasChildren()  ||  NodeUtil.isForIn(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
244	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().hasChildren())  {	  if(n.getFirstChild().hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	8	57	replace
245	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().hasChildren())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().hasChildren())  {	  if(n.getFirstChild().hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	8	57	replace
246	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild().getType()  ==  Token.VAR  &&  n.getFirstChild().hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.getFirstChild().getType()  ==  Token.VAR  &&  n.getFirstChild().hasChildren())  {	  if(n.getFirstChild().hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	8	60	replace
247	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.VAR  &&  n.getFirstChild().hasChildren())  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild().getType()  ==  Token.VAR  &&  n.getFirstChild().hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild().getType()  ==  Token.VAR  &&  n.getFirstChild().hasChildren())  {	  if(n.getFirstChild().hasChildren())    {    	compilable	  [FE]  AssertionFailedError  	8	60	replace
248	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(NodeUtil.isExpressionNode(n))  {	  if(!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	13	60	replace
249	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(NodeUtil.isExpressionNode(n))  {	  if(!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	13	60	replace
250	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(!NodeUtil.isFunction(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(!NodeUtil.isFunction(n))  {	  if(!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	13	57	replace
251	[BUG]  [BUGGY]  if(!NodeUtil.isFunction(n))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(!NodeUtil.isFunction(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(!NodeUtil.isFunction(n))  {	  if(!NodeUtil.isForIn(n))    {    	compilable	  [FE]  AssertionFailedError  	13	57	replace
252	[BUG]  [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isForIn(n))  {  if  (n.hasChildren()  &&!NodeUtil.isForIn(n))  <  tryRemoveAssignment(t,  n.getFirstChild(),  state);  [CE]  >  expected  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isForIn(n))  {  if  (n.hasChildren()  &&!NodeUtil.isForIn(n))  <  tryRemoveAssignment(t,  n.getFirstChild(),  state);  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if    (n.hasChildren()    &&!NodeUtil.isForIn(n))    {    if  (n.hasChildren()  &&!NodeUtil.isForIn(n))  <  tryRemoveAssignment(t,  n.getFirstChild(),  state);	  	non-compiled	[CE]  >  expected	2	None	add
253	[BUG]  [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isForIn(n))  {  if  (NodeUtil.hasChildren()  &&!NodeUtil.isForIn(n))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isForIn(n))  {  if  (NodeUtil.hasChildren()  &&!NodeUtil.isForIn(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if    (n.hasChildren()    &&!NodeUtil.isForIn(n))    {    if  (NodeUtil.hasChildren()  &&!NodeUtil.isForIn(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
254	[BUG]  [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isForIn(n))  {  if  (n.hasChildren()  &&!NodeUtil.isForIn(n))  ==  tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isForIn(n))  {  if  (n.hasChildren()  &&!NodeUtil.isForIn(n))  ==  tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if    (n.hasChildren()    &&!NodeUtil.isForIn(n))    {    if  (n.hasChildren()  &&!NodeUtil.isForIn(n))  ==  tryRemoveAssignment(t,  n.getFirstChild(),  state);  }	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
255	[BUG]  [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isForIn(n))  {  if  (n.hasChildren()  &&!NodeUtil.isForIn(n))  <  tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  [CE]  >  expected  [FE]          AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&!NodeUtil.isForIn(n))  {  if  (n.hasChildren()  &&!NodeUtil.isForIn(n))  <  tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if    (n.hasChildren()    &&!NodeUtil.isForIn(n))    {    if  (n.hasChildren()  &&!NodeUtil.isForIn(n))  <  tryRemoveAssignment(t,  n.getFirstChild(),  state);  }	  	non-compiled	[CE]  >  expected	2	None	add
256	[BUG]  [BUGGY]  if(n,  state.hasChildren()  ||  n.hasNext())  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n,  state.hasChildren()  ||  n.hasNext())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n,  state.hasChildren()  ||  n.hasNext())  {	  if(n.hasChildren()    ||    n.hasNext())    {    	non-compiled	[CE]  ')'  expected	4	None	replace
257	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getNext())  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]              AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||  n.getNext())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()  ||  n.getNext())  {	  if(n.hasChildren()    ||    n.hasNext())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	4	None	replace
258	[BUG]  [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {  if(n.hasChildren()  ||  n.getFirstChild()!=  null  &&  n.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  &&  n.getFirstChild()!=  null  &&  n.hasChildren())  {  if(n.hasChildren()  ||  n.getFirstChild()!=  null  &&  n.hasChildren())  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    &&    n.getFirstChild()!=    null    &&    n.hasChildren())    {    if(n.hasChildren()  ||  n.getFirstChild()!=  null  &&  n.hasChildren())  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
259	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.getFirstChild()!=  null  &&  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	21	57	replace
260	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild()!=  null  &&  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild()!=  null  &&  n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	21	57	replace
261	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.CASE)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.CASE)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	21	57	replace
262	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.CASE)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.CASE)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.CASE)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	21	57	replace
263	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.GETPROP)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.GETPROP)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	21	57	replace
264	[BUG]  [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.GETPROP)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.GETPROP)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()  ||  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.GETPROP)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	21	57	replace
265	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.getFirstChild()  ==  null  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	21	60	replace
266	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild()  ==  null  ||  n.getFirstChild().getType()  ==  Token.RETURN)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()    ==    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	21	60	replace
267	[BUG]  [BUGGY]  if(!NodeUtil.isForIn(n))  {  if(!NodeUtil.isForIn(n)&&!NodeUtil.getConditionExpression(n),  state);  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(!NodeUtil.isForIn(n))  {  if(!NodeUtil.isForIn(n)&&!NodeUtil.getConditionExpression(n),  state);  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(!NodeUtil.isForIn(n))    {    if(!NodeUtil.isForIn(n)&&!NodeUtil.getConditionExpression(n),  state);	  	non-compiled	[CE]  ')'  expected	12	None	add
268	[BUG]  [BUGGY]  if(!NodeUtil.isForIn(n))  {  if(!NodeUtil.isForIn(n)&&  NodeUtil.getConditionExpression(n),  state);  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(!NodeUtil.isForIn(n))  {  if(!NodeUtil.isForIn(n)&&  NodeUtil.getConditionExpression(n),  state);  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(!NodeUtil.isForIn(n))    {    if(!NodeUtil.isForIn(n)&&  NodeUtil.getConditionExpression(n),  state);	  	non-compiled	[CE]  ')'  expected	12	None	add
269	[BUG]  [BUGGY]  if(!NodeUtil.isForIn(n))  {  if(!NodeUtil.isForIn(n)&&  NodeUtil.getConditionExpression(n)!=  state);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(!NodeUtil.isForIn(n))  {  if(!NodeUtil.isForIn(n)&&  NodeUtil.getConditionExpression(n)!=  state);  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(!NodeUtil.isForIn(n))    {    if(!NodeUtil.isForIn(n)&&  NodeUtil.getConditionExpression(n)!=  state);	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
270	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.getFirstChild()  ==  null  ||  n.getFirstChild().getType()!=  Token.RETURN)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()!=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	23	57	replace
271	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild()  ==  null  ||  n.getFirstChild().getType()!=  Token.RETURN)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()!=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	23	57	replace
272	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild()!=  null  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if(n.getFirstChild()!=  null  ||  n.getFirstChild().getType()!=  Token.RETURN)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()!=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	23	57	replace
273	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.getFirstChild()!=  null  ||  n.getFirstChild().getType()!=  Token.RETURN)  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.getFirstChild()!=  null  ||  n.getFirstChild().getType()!=  Token.RETURN)  {	  if(n.hasChildren()    ||    n.getFirstChild().getType()!=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	23	57	replace
274	[BUG]  [BUGGY]  if(n.hasFirstChild()  ||!NodeUtil.isForIn(n))  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasFirstChild()  ||!NodeUtil.isForIn(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasFirstChild()  ||!NodeUtil.isForIn(n))  {	  if(n.hasChildren()    ||!NodeUtil.isForIn(n))    {    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
275	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN  ||!NodeUtil.isFunction(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	add	if  (n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN  ||!NodeUtil.isFunction(n))  {	  if    (n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	6	57	replace
276	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN  ||!NodeUtil.isFunction(n))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN  ||!NodeUtil.isFunction(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.RETURN  ||!NodeUtil.isFunction(n))  {	  if    (n.hasChildren()    &&    n.getFirstChild().getType()    ==    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	6	57	replace
277	[BUG]  [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isForIn(n)&&!NodeUtil.getConditionExpression(n))  {  [CE]  bad  operand  type  Node  for  unary  operator  '!'  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if  (n.hasChildren()  &&  NodeUtil.isForIn(n)&&!NodeUtil.getConditionExpression(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if  (n.hasChildren()  &&  NodeUtil.isForIn(n)&&!NodeUtil.getConditionExpression(n))  {	  if    (n.hasChildren()    &&    NodeUtil.isForIn(n))    {    	non-compiled	[CE]  bad  operand  type  Node  for  unary  operator  '!'	11	None	replace
278	[BUG]  [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isForIn(n))  {  if(t.hasChildren()  ||!NodeUtil.isForIn(n))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  if(n.hasChildren()  ||!NodeUtil.isForIn(n))  {  if(t.hasChildren()  ||!NodeUtil.isForIn(n))  {  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	if(n.hasChildren()    ||!NodeUtil.isForIn(n))    {    if(t.hasChildren()  ||!NodeUtil.isForIn(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
279	[BUG]  [BUGGY]  n.removeChild(n);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  n.removeChild(n);  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	n.removeChild(n);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
280	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError    [CONTEXT]    continue;  case  Token.FOR:  if  (!NodeUtil.isForIn(n))  {  tryRemoveAssignment(  t,  NodeUtil.getConditionExpression(n),  state);  }  continue;  case  Token.SWITCH:  case  Token.CASE:  case  Token.RETURN:    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    tryRemoveAssignment(t,  n.getFirstChild(),  state);  }  continue;  }  tryRemoveAssignment(t,  n,  state);  }  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  tryRemoveDeadAssignments  [RETURN_TYPE]  void  NodeTraversal  t  Node>  cfg  [VARIABLES]  AbstractCompiler  compiler  DiGraphNode  cfgNode  FlowState  state  boolean  Iterable  nodes  NodeTraversal  t  ControlFlowGraph  cfg  Node  n  VariableLiveness  KILL  MAYBE_LIVE  READ  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.5892556509887896	143	143	6	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
