bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  KILL;  [CE]  cannot  find  symbol  KILL  [FE]    AssertionFailedError  [CONTEXT]  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]  return  KILL;  [BUGGY]  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  KILL;	return  state;  	non-compiled	[CE]  cannot  find  symbol  KILL	15	None	replace
2	[BUG]  [BUGGY]  return  state  ||  state!=  VariableLiveness.MAYBE_LIVE;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]      AssertionFailedError  [CONTEXT]  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]  return  state  ||  state!=  VariableLiveness.MAYBE_LIVE;  [BUGGY]  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  ||  state!=  VariableLiveness.MAYBE_LIVE;	return  state;  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	15	None	replace
3	[BUG]  [BUGGY]  return  state  ||  state  ==  VariableLiveness.MAYBE_LIVE;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]        AssertionFailedError  [CONTEXT]  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]  return  state  ||  state  ==  VariableLiveness.MAYBE_LIVE;  [BUGGY]  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  ||  state  ==  VariableLiveness.MAYBE_LIVE;	return  state;  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	15	None	replace
4	[BUG]  [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >  1)  {  [CE]  ';'  expected  [FE]          AssertionFailedError  [CONTEXT]  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >  1)  {  [BUGGY]  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >  1)  {	return  state;  	non-compiled	[CE]  ';'  expected	15	None	replace
5	[BUG]  [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >  1;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError  [CONTEXT]  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >  1;  [BUGGY]  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >  1;	return  state;  	non-compiled	[CE]  cannot  find  symbol	15	None	replace
6	[BUG]  [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >=  1;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError  [CONTEXT]  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >=  1;  [BUGGY]  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >=  1;	return  state;  	non-compiled	[CE]  cannot  find  symbol	15	None	replace
7	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                AssertionFailedError  [CONTEXT]  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    [BUGGY]  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	  	return  state;  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	15	61	replace
8	[BUG]  [BUGGY]    [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                AssertionFailedError  [CONTEXT]  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    [BUGGY]  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	  	return  state;  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	15	61	replace
9	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable);  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]    AssertionFailedError  [CONTEXT]  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable);  [BUGGY]  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable);	return  state;  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	15	None	replace
10	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable);  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]      AssertionFailedError  [CONTEXT]  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable);  [BUGGY]  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable);	return  state;  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	15	None	replace
11	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString());  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError  [CONTEXT]  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString());  [BUGGY]  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString());	return  state;  	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	15	None	replace
12	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError  [CONTEXT]  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable);  [BUGGY]  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable);	return  state;  	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	15	None	replace
13	[BUG]  [BUGGY]  return  state.getRemovableAssignmentsElimination();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError  [CONTEXT]  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]  return  state.getRemovableAssignmentsElimination();  [BUGGY]  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignmentsElimination();	return  state;  	non-compiled	[CE]  cannot  find  symbol	15	None	replace
14	[BUG]  [BUGGY]  return  state.getRemovableAssignments();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]  return  state.getRemovableAssignments();  [BUGGY]  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignments();	return  state;  	non-compiled	[CE]  cannot  find  symbol	15	None	replace
15	[BUG]  [BUGGY]  return  state.getValue();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]  return  state.getValue();  [BUGGY]  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValue();	return  state;  	non-compiled	[CE]  cannot  find  symbol	15	None	replace
16	[BUG]  [BUGGY]  return  state.invoke(n,  variable);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError  [CONTEXT]  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]  return  state.invoke(n,  variable);  [BUGGY]  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(n,  variable);	return  state;  	non-compiled	[CE]  cannot  find  symbol	15	None	replace
17	[BUG]  [BUGGY]  return  state.getRemovableAssignment();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError  [CONTEXT]  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]  return  state.getRemovableAssignment();  [BUGGY]  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignment();	return  state;  	non-compiled	[CE]  cannot  find  symbol	15	None	replace
18	[BUG]  [BUGGY]  return  state.getRemovableAssigns();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError  [CONTEXT]  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]  return  state.getRemovableAssigns();  [BUGGY]  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssigns();	return  state;  	non-compiled	[CE]  cannot  find  symbol	15	None	replace
