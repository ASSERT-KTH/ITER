bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >  1;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >  1;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >  1;	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
2	[BUG]  [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  ||  state.getChildCount()  >  1;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  ||  state.getChildCount()  >  1;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state.getType()  ==  Token.CALL  ||  state.getChildCount()  >  1;	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
3	[BUG]  [BUGGY]  return  state.getType()!=  Token.CALL  &&  state.getChildCount()  >  1;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.getType()!=  Token.CALL  &&  state.getChildCount()  >  1;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()!=  Token.CALL  &&  state.getChildCount()  >  1;	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
4	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  ||  state.getChildCount()  >  1;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.getType()  ==  Token.CALL  ||  state.getChildCount()  >  1;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  ||  state.getChildCount()  >  1;	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
5	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  &&  child.getChildCount()  >  1;  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.getType()  ==  Token.CALL  &&  child.getChildCount()  >  1;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  &&  child.getChildCount()  >  1;	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
6	[BUG]  [BUGGY]  return  n.getType()  ==  Token.CALL  &&  state.getChildCount()  >  1;  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  n.getType()  ==  Token.CALL  &&  state.getChildCount()  >  1;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n.getType()  ==  Token.CALL  &&  state.getChildCount()  >  1;	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
7	[BUG]  [BUGGY]  return  MAYBE_LIVE;  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]        AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  MAYBE_LIVE;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  MAYBE_LIVE;	  return    KILL;    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	1	None	replace
8	[BUG]  [BUGGY]  return  State.MAYBE_LIVE;  [CE]  cannot  find  symbol  State  [FE]          AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  State.MAYBE_LIVE;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.MAYBE_LIVE;	  return    KILL;    	non-compiled	[CE]  cannot  find  symbol  State	1	None	replace
9	[BUG]  [BUGGY]  return  MAJBE_LIVE;  [CE]  cannot  find  symbol  MAJBE_LIVE  [FE]            AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  MAJBE_LIVE;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  MAJBE_LIVE;	  return    KILL;    	non-compiled	[CE]  cannot  find  symbol  MAJBE_LIVE	1	None	replace
10	[BUG]  [BUGGY]  return  MAIBE_LIVE;  [CE]  cannot  find  symbol  MAIBE_LIVE  [FE]              AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  MAIBE_LIVE;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  MAIBE_LIVE;	  return    KILL;    	non-compiled	[CE]  cannot  find  symbol  MAIBE_LIVE	1	None	replace
11	[BUG]  [BUGGY]  return  State.MILLISECOND;  [CE]  cannot  find  symbol  State  [FE]                AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  State.MILLISECOND;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.MILLISECOND;	  return    KILL;    	non-compiled	[CE]  cannot  find  symbol  State	1	None	replace
12	[BUG]  [BUGGY]  return  state  &&  state  ==  VariableLiveness.MAYBE_LIVE;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]            AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  state  ==  VariableLiveness.MAYBE_LIVE;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state  ==  VariableLiveness.MAYBE_LIVE;	  return    state    ||    state    ==    VariableLiveness.MAYBE_LIVE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	3	None	replace
13	[BUG]  [BUGGY]  return  state  ||  variable  ==  VariableLiveness.MAYBE_LIVE;  [CE]  incomparable  types:  String  and  VariableLiveness  [FE]              AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  ||  variable  ==  VariableLiveness.MAYBE_LIVE;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  ||  variable  ==  VariableLiveness.MAYBE_LIVE;	  return    state    ||    state    ==    VariableLiveness.MAYBE_LIVE;    	non-compiled	[CE]  incomparable  types:  String  and  VariableLiveness	3	None	replace
14	[BUG]  [BUGGY]  return  state  &&  state!=  VariableLiveness.MAYBE_LIVE;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  state!=  VariableLiveness.MAYBE_LIVE;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state!=  VariableLiveness.MAYBE_LIVE;	  return    state    ||    state    ==    VariableLiveness.MAYBE_LIVE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	3	None	replace
15	[BUG]  [BUGGY]  return  state  ||  variable!=  VariableLiveness.MAYBE_LIVE;  [CE]  incomparable  types:  String  and  VariableLiveness  [FE]                  AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  ||  variable!=  VariableLiveness.MAYBE_LIVE;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  ||  variable!=  VariableLiveness.MAYBE_LIVE;	  return    state    ||    state    ==    VariableLiveness.MAYBE_LIVE;    	non-compiled	[CE]  incomparable  types:  String  and  VariableLiveness	3	None	replace
16	[BUG]  [BUGGY]  return  state  ||  child  ==  VariableLiveness.MAYBE_LIVE;  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                    AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  ||  child  ==  VariableLiveness.MAYBE_LIVE;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  ||  child  ==  VariableLiveness.MAYBE_LIVE;	  return    state    ||    state    ==    VariableLiveness.MAYBE_LIVE;    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	3	None	replace
17	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);	      	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	8	None	replace
18	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	      	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	8	None	replace
19	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	state  =  isVariableReadBeforeKill(child,  variable);	      	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	8	61	replace
20	[BUG]  [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	state  =  isVariableReadBeforeKill(child,  variable);	      	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	8	61	replace
21	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	      	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	8	None	replace
22	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {	      	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
23	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  }  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  }	      	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	8	None	replace
24	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {	      	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
25	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]        AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  MAYBE_LIVE);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  MAYBE_LIVE);	  return    state    &&    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	9	None	replace
26	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(n,  child,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  isVariableReadBeforeKill(n,  child,  variable);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(n,  child,  variable);	  return    state    &&    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	9	None	replace
27	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  maybe_LIVE);  [CE]  cannot  find  symbol  maybe_LIVE  [FE]            AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  maybe_LIVE);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  maybe_LIVE);	  return    state    &&    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  maybe_LIVE	9	None	replace
28	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  MAXBE_LIVE);  [CE]  cannot  find  symbol  MAXBE_LIVE  [FE]              AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  MAXBE_LIVE);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  MAXBE_LIVE);	  return    state    &&    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  MAXBE_LIVE	9	None	replace
29	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  mayBE_LIVE);  [CE]  cannot  find  symbol  mayBE_LIVE  [FE]                AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  mayBE_LIVE);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  mayBE_LIVE);	  return    state    &&    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  mayBE_LIVE	9	None	replace
30	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  MILL_LIVE);  [CE]  cannot  find  symbol  MILL_LIVE  [FE]                  AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  MILL_LIVE);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  MILL_LIVE);	  return    state    &&    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  MILL_LIVE	9	None	replace
31	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  MOVE_LIVE);  [CE]  cannot  find  symbol  MOVE_LIVE  [FE]                    AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  MOVE_LIVE);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  MOVE_LIVE);	  return    state    &&    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  MOVE_LIVE	9	None	replace
32	[BUG]  [BUGGY]  return  n.getRemovableAssignmentsElimination();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  n.getRemovableAssignmentsElimination();  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n.getRemovableAssignmentsElimination();	  return    state.getRemovableAssignmentsElimination();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
33	[BUG]  [BUGGY]  return  state.getRemovableAssignmentsElimination(),  variable;  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.getRemovableAssignmentsElimination(),  variable;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignmentsElimination(),  variable;	  return    state.getRemovableAssignmentsElimination();    	non-compiled	[CE]  ';'  expected	13	None	replace
34	[BUG]  [BUGGY]  return  state.getRemovableAssignmentsElimination(variable);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.getRemovableAssignmentsElimination(variable);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignmentsElimination(variable);	  return    state.getRemovableAssignmentsElimination();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
35	[BUG]  [BUGGY]  return  state.getRemovableAssignmentsElimination()  +  1;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.getRemovableAssignmentsElimination()  +  1;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignmentsElimination()  +  1;	  return    state.getRemovableAssignmentsElimination();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
36	[BUG]  [BUGGY]  return  child.getRemovableAssignmentsElimination();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  child.getRemovableAssignmentsElimination();  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  child.getRemovableAssignmentsElimination();	  return    state.getRemovableAssignmentsElimination();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
37	[BUG]  [BUGGY]  return  state.getRemovableAssignmentsElimination(child);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.getRemovableAssignmentsElimination(child);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignmentsElimination(child);	  return    state.getRemovableAssignmentsElimination();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
38	[BUG]  [BUGGY]  return  n.getValue();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  n.getValue();  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n.getValue();	  return    state.getValue();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
39	[BUG]  [BUGGY]  return  state.getValue(),  variable;  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.getValue(),  variable;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValue(),  variable;	  return    state.getValue();    	non-compiled	[CE]  ';'  expected	15	None	replace
40	[BUG]  [BUGGY]  return  child.getValue();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  child.getValue();  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  child.getValue();	  return    state.getValue();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
41	[BUG]  [BUGGY]  return  state.getValue()  +  1;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.getValue()  +  1;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValue()  +  1;	  return    state.getValue();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
42	[BUG]  [BUGGY]  return  state.getValue()  -  1;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.getValue()  -  1;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValue()  -  1;	  return    state.getValue();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
43	[BUG]  [BUGGY]  return  state.getValue()  :  null;  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.getValue()  :  null;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValue()  :  null;	  return    state.getValue();    	non-compiled	[CE]  ';'  expected	15	None	replace
44	[BUG]  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  }  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	        VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  }	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	7	None	add
45	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >  1)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >  1)  {  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >  1)  {	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
46	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  <  1)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  <  1)  {  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  <  1)  {	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
47	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  ||  state.getChildCount()  >  1)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.getType()  ==  Token.CALL  ||  state.getChildCount()  >  1)  {  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  ||  state.getChildCount()  >  1)  {	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
48	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >=  1)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >=  1)  {  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >=  1)  {	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
49	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()!=  1)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()!=  1)  {  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  &&  state.getChildCount()!=  1)  {	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
50	[BUG]  [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()  <  1)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()  <  1)  {  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()  <  1)  {	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
51	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(variable.getString(),  child);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  isVariableReadBeforeKill(variable.getString(),  child);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(variable.getString(),  child);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
52	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MAXBE_LIVE);  [CE]  cannot  find  symbol  MAXBE_LIVE  [FE]                AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MAXBE_LIVE);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MAXBE_LIVE);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable);    	non-compiled	[CE]  cannot  find  symbol  MAXBE_LIVE	12	None	replace
53	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  n);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  n);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	12	None	replace
54	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(n.getString(),  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  isVariableReadBeforeKill(n.getString(),  variable);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(n.getString(),  variable);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	12	None	replace
55	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  null);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  null);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	12	None	replace
56	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  REGEXP);  [CE]  cannot  find  symbol  REGEXP  [FE]                        AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  REGEXP);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  REGEXP);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable);    	non-compiled	[CE]  cannot  find  symbol  REGEXP	12	None	replace
57	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getString(),  variable,  state);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  isVariableReadBeforeKill(child.getString(),  variable,  state);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child.getString(),  variable,  state);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	12	None	replace
58	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable.getString());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable.getString());  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable.getString());	  return    state    &&    isVariableReadBeforeKill(child.getString());    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
59	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(n.getString());  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  isVariableReadBeforeKill(n.getString());  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(n.getString());	  return    state    &&    isVariableReadBeforeKill(child.getString());    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	11	None	replace
60	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(variable.getString());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  isVariableReadBeforeKill(variable.getString());  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(variable.getString());	  return    state    &&    isVariableReadBeforeKill(child.getString());    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
61	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString()  +  1);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString()  +  1);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString()  +  1);	  return    state    &&    isVariableReadBeforeKill(child.getString());    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	11	None	replace
62	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(variable,  child.getString());  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  isVariableReadBeforeKill(variable,  child.getString());  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(variable,  child.getString());	  return    state    &&    isVariableReadBeforeKill(child.getString());    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	11	None	replace
63	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getString(),  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  isVariableReadBeforeKill(child.getString(),  variable);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child.getString(),  variable);	  return    state    &&    isVariableReadBeforeKill(child.getString());    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	11	None	replace
64	[BUG]  [BUGGY]  return  n.getRemovableAssignment();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  n.getRemovableAssignment();  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n.getRemovableAssignment();	  return    state.getRemovableAssignment();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
65	[BUG]  [BUGGY]  return  child.getRemovableAssignment();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  child.getRemovableAssignment();  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  child.getRemovableAssignment();	  return    state.getRemovableAssignment();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
66	[BUG]  [BUGGY]  return  state.getRemovableAssignment(),  variable;  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.getRemovableAssignment(),  variable;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignment(),  variable;	  return    state.getRemovableAssignment();    	non-compiled	[CE]  ';'  expected	17	None	replace
67	[BUG]  [BUGGY]  return  matchRemovableAssignmentsElimination.getRemovableAssignment();  [CE]  cannot  find  symbol  matchRemovableAssignmentsElimination  [FE]                    AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  matchRemovableAssignmentsElimination.getRemovableAssignment();  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  matchRemovableAssignmentsElimination.getRemovableAssignment();	  return    state.getRemovableAssignment();    	non-compiled	[CE]  cannot  find  symbol  matchRemovableAssignmentsElimination	17	None	replace
68	[BUG]  [BUGGY]  return  state.getRemovableAssignment(),  child);  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.getRemovableAssignment(),  child);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignment(),  child);	  return    state.getRemovableAssignment();    	non-compiled	[CE]  ';'  expected	17	None	replace
69	[BUG]  [BUGGY]  return  state.getRemovableAssignment()  +  1;  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.getRemovableAssignment()  +  1;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignment()  +  1;	  return    state.getRemovableAssignment();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
70	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >=  1;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >=  1;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >=  1;	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >=    1;    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
71	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >>  1;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >>  1;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >>  1;	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >=    1;    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
72	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()!=  1;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()!=  1;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  &&  state.getChildCount()!=  1;	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >=    1;    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
73	[BUG]  [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()!=  1;  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()!=  1;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()!=  1;	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >=    1;    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
74	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  [Delete]  1;  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  [Delete]  1;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  [Delete]  1;	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >=    1;    	non-compiled	[CE]  ';'  expected	6	None	replace
75	[BUG]  [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >>  1;  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >>  1;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >>  1;	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >=    1;    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
76	[BUG]  [BUGGY]  return  state.invoke(n,  variable,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]            AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.invoke(n,  variable,  MAYBE_LIVE);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(n,  variable,  MAYBE_LIVE);	  return    state.invoke(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	16	None	replace
77	[BUG]  [BUGGY]  return  state.invoke(variable,  n);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.invoke(variable,  n);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(variable,  n);	  return    state.invoke(n,    variable);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
78	[BUG]  [BUGGY]  return  state.invoke(child,  variable);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.invoke(child,  variable);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(child,  variable);	  return    state.invoke(n,    variable);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
79	[BUG]  [BUGGY]  return  state.invoke(variable,  child);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.invoke(variable,  child);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(variable,  child);	  return    state.invoke(n,    variable);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
80	[BUG]  [BUGGY]  return  n.invoke(state,  variable);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  n.invoke(state,  variable);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n.invoke(state,  variable);	  return    state.invoke(n,    variable);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
81	[BUG]  [BUGGY]  return  n.invoke(variable,  state);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  n.invoke(variable,  state);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n.invoke(variable,  state);	  return    state.invoke(n,    variable);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
82	[BUG]  [BUGGY]  return  state.invoke(n,  variable,  mayBE_LIVE);  [CE]  cannot  find  symbol  mayBE_LIVE  [FE]                        AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.invoke(n,  variable,  mayBE_LIVE);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(n,  variable,  mayBE_LIVE);	  return    state.invoke(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  mayBE_LIVE	16	None	replace
83	[BUG]  [BUGGY]  return  n.getRemovableAssigns();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  n.getRemovableAssigns();  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n.getRemovableAssigns();	  return    state.getRemovableAssigns();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
84	[BUG]  [BUGGY]  return  state.getRemovableAssigns(),  variable;  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.getRemovableAssigns(),  variable;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssigns(),  variable;	  return    state.getRemovableAssigns();    	non-compiled	[CE]  ';'  expected	18	None	replace
85	[BUG]  [BUGGY]  return  state.getRemovableAssigns()  ||  state.getRemovableAssigns();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.getRemovableAssigns()  ||  state.getRemovableAssigns();  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssigns()  ||  state.getRemovableAssigns();	  return    state.getRemovableAssigns();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
86	[BUG]  [BUGGY]  return  matchRemovableAssigns.getRemovableAssigns();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  matchRemovableAssigns.getRemovableAssigns();  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  matchRemovableAssigns.getRemovableAssigns();	  return    state.getRemovableAssigns();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
87	[BUG]  [BUGGY]  return  state.getRemovableAssigns()  +  1;  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.getRemovableAssigns()  +  1;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssigns()  +  1;	  return    state.getRemovableAssigns();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
88	[BUG]  [BUGGY]  return  child.getRemovableAssigns();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  child.getRemovableAssigns();  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  child.getRemovableAssigns();	  return    state.getRemovableAssigns();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
89	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(n.getFirstChild(),  variable);  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]          AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  isVariableReadBeforeKill(n.getFirstChild(),  variable);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(n.getFirstChild(),  variable);	  return    state    &&    isVariableReadBeforeKill(child.getFirstChild(),    variable);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	10	None	replace
90	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  n.getFirstChild(),  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  n.getFirstChild(),  variable);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  n.getFirstChild(),  variable);	  return    state    &&    isVariableReadBeforeKill(child.getFirstChild(),    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	10	None	replace
91	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getLastChild(),  variable);  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]              AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getLastChild(),  variable);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getLastChild(),  variable);	  return    state    &&    isVariableReadBeforeKill(child.getFirstChild(),    variable);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	10	None	replace
92	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(n,  child.getFirstChild(),  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  isVariableReadBeforeKill(n,  child.getFirstChild(),  variable);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(n,  child.getFirstChild(),  variable);	  return    state    &&    isVariableReadBeforeKill(child.getFirstChild(),    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	10	None	replace
93	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  null);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  null);	  return    state    &&    isVariableReadBeforeKill(child.getFirstChild(),    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	10	None	replace
94	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                    AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	return  isVariableReadBeforeKill(child.getFirstChild(),  variable);	  return    state    &&    isVariableReadBeforeKill(child.getFirstChild(),    variable);    	compilable	  [FE]  RuntimeException  	10	61	replace
95	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  [FE]  RuntimeException  [FE]                    AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child.getFirstChild(),  variable);	  return    state    &&    isVariableReadBeforeKill(child.getFirstChild(),    variable);    	compilable	  [FE]  RuntimeException  	10	61	replace
96	[BUG]  [BUGGY]  return  state  ||  child!=  VariableLiveness.MAYBE_LIVE;  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]          AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  ||  child!=  VariableLiveness.MAYBE_LIVE;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  ||  child!=  VariableLiveness.MAYBE_LIVE;	  return    state    ||    state!=    VariableLiveness.MAYBE_LIVE;    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	2	None	replace
97	[BUG]  [BUGGY]  return  state  ||  state  >=  VariableLiveness.MAYBE_LIVE;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  ||  state  >=  VariableLiveness.MAYBE_LIVE;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  ||  state  >=  VariableLiveness.MAYBE_LIVE;	  return    state    ||    state!=    VariableLiveness.MAYBE_LIVE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	2	None	replace
98	[BUG]  [BUGGY]  return  state  ||  n!=  VariableLiveness.MAYBE_LIVE;  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]              AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  ||  n!=  VariableLiveness.MAYBE_LIVE;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  ||  n!=  VariableLiveness.MAYBE_LIVE;	  return    state    ||    state!=    VariableLiveness.MAYBE_LIVE;    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	2	None	replace
99	[BUG]  [BUGGY]  return  n.getRemovableAssignments();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  n.getRemovableAssignments();  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n.getRemovableAssignments();	  return    state.getRemovableAssignments();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
100	[BUG]  [BUGGY]  return  state.getRemovableAssignments(),  variable;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.getRemovableAssignments(),  variable;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignments(),  variable;	  return    state.getRemovableAssignments();    	non-compiled	[CE]  ';'  expected	14	None	replace
101	[BUG]  [BUGGY]  return  state.getRemovableAssignments()  ||  state.getRemovableAssignments();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.getRemovableAssignments()  ||  state.getRemovableAssignments();  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignments()  ||  state.getRemovableAssignments();	  return    state.getRemovableAssignments();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
102	[BUG]  [BUGGY]  return  matchRemovableAssignmentsElimination.getRemovableAssignments();  [CE]  cannot  find  symbol  matchRemovableAssignmentsElimination  [FE]              AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  matchRemovableAssignmentsElimination.getRemovableAssignments();  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  matchRemovableAssignmentsElimination.getRemovableAssignments();	  return    state.getRemovableAssignments();    	non-compiled	[CE]  cannot  find  symbol  matchRemovableAssignmentsElimination	14	None	replace
103	[BUG]  [BUGGY]  return  child.getRemovableAssignments();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  child.getRemovableAssignments();  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  child.getRemovableAssignments();	  return    state.getRemovableAssignments();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
104	[BUG]  [BUGGY]  return  state.getRemovableAssignments(),  child);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.getRemovableAssignments(),  child);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignments(),  child);	  return    state.getRemovableAssignments();    	non-compiled	[CE]  ';'  expected	14	None	replace
105	[BUG]  [BUGGY]  return  state.getRemovableAssignment(),  child;  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.getRemovableAssignment(),  child;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignment(),  child;	  return    state.getRemovableAssignment();    	non-compiled	[CE]  ';'  expected	17	None	replace
106	[BUG]  [BUGGY]  return  state  ||  n  ==  VariableLiveness.MAYBE_LIVE;  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]            AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  ||  n  ==  VariableLiveness.MAYBE_LIVE;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  ||  n  ==  VariableLiveness.MAYBE_LIVE;	  return    state    ||    state    ==    VariableLiveness.MAYBE_LIVE;    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	3	None	replace
107	[BUG]  [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  &&  child.getChildCount()  >  1;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  &&  child.getChildCount()  >  1;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state.getType()  ==  Token.CALL  &&  child.getChildCount()  >  1;	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
108	[BUG]  [BUGGY]  return  state  &&  child.getType()  ==  Token.CALL  &&  state.getChildCount()  >  1;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                  AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  child.getType()  ==  Token.CALL  &&  state.getChildCount()  >  1;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  child.getType()  ==  Token.CALL  &&  state.getChildCount()  >  1;	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	5	None	replace
109	[BUG]  [BUGGY]  return  state  &&  state.getType()!=  Token.CALL  &&  state.getChildCount()  >  1;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  state.getType()!=  Token.CALL  &&  state.getChildCount()  >  1;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state.getType()!=  Token.CALL  &&  state.getChildCount()  >  1;	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
110	[BUG]  [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >  2;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >  2;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >  2;	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
111	[BUG]  [BUGGY]      junit.framework.AssertionFailedError:  expected:  function  FUNC(param1  >>  AssertionFailedError);  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]      junit.framework.AssertionFailedError:  expected:  function  FUNC(param1  >>  AssertionFailedError);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	        junit.framework.AssertionFailedError:  expected:  function  FUNC(param1  >>  AssertionFailedError);	  	non-compiled	[CE]  not  a  statement	7	None	add
112	[BUG]  [BUGGY]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  >>  AssertionFailedError);  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  >>  AssertionFailedError);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  >>  AssertionFailedError);	  	non-compiled	[CE]  not  a  statement	7	None	add
113	[BUG]  [BUGGY]      junit.framework.AssertionFailedError:  function  FUNC(param1  >>  AssertionFailedError);  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]      junit.framework.AssertionFailedError:  function  FUNC(param1  >>  AssertionFailedError);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	        junit.framework.AssertionFailedError:  function  FUNC(param1  >>  AssertionFailedError);	  	non-compiled	[CE]  not  a  statement	7	None	add
114	[BUG]  [BUGGY]      junit.framework.AssertionFailedError:  expected:  function  FUNC(param2  >>  AssertionFailedError);  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]      junit.framework.AssertionFailedError:  expected:  function  FUNC(param2  >>  AssertionFailedError);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	        junit.framework.AssertionFailedError:  expected:  function  FUNC(param2  >>  AssertionFailedError);	  	non-compiled	[CE]  not  a  statement	7	None	add
115	[BUG]  [BUGGY]      junit.framework.AssertionFailedError:  expected:  function  FUNC(param1  >>  AssertionFailedError  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]      junit.framework.AssertionFailedError:  expected:  function  FUNC(param1  >>  AssertionFailedError  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	        junit.framework.AssertionFailedError:  expected:  function  FUNC(param1  >>  AssertionFailedError	  	non-compiled	[CE]  not  a  statement	7	None	add
116	[BUG]  [BUGGY]      junit.framework.AssertionFailedError:  expected:  function  FUNC(param2  >>  AssertionFailedError  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]      junit.framework.AssertionFailedError:  expected:  function  FUNC(param2  >>  AssertionFailedError  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	        junit.framework.AssertionFailedError:  expected:  function  FUNC(param2  >>  AssertionFailedError	  	non-compiled	[CE]  not  a  statement	7	None	add
117	[BUG]  [BUGGY]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  >>  AssertionFailedError  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  >>  AssertionFailedError  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  >>  AssertionFailedError	  	non-compiled	[CE]  not  a  statement	7	None	add
118	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(variable));  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]      NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(variable));  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	        NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(variable));	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
119	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(n,  child.getString());  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]            AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  isVariableReadBeforeKill(n,  child.getString());  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(n,  child.getString());	  return    state    &&    isVariableReadBeforeKill(child.getString());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	11	None	replace
120	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  state.getFirstChild(),  variable);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  state.getFirstChild(),  variable);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  state.getFirstChild(),  variable);	  return    state    &&    isVariableReadBeforeKill(child.getFirstChild(),    variable);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
121	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  state);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  state);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  state);	  return    state    &&    isVariableReadBeforeKill(child.getFirstChild(),    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	10	None	replace
122	[BUG]  [BUGGY]  return  state.getRemovableAssignments(),  child;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.getRemovableAssignments(),  child;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignments(),  child;	  return    state.getRemovableAssignments();    	non-compiled	[CE]  ';'  expected	14	None	replace
123	[BUG]  [BUGGY]  return  state.getRemovableAssignments(child);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.getRemovableAssignments(child);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignments(child);	  return    state.getRemovableAssignments();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
124	[BUG]  [BUGGY]  return  state.getRemovableAssignments(),  null;  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.getRemovableAssignments(),  null;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignments(),  null;	  return    state.getRemovableAssignments();    	non-compiled	[CE]  ';'  expected	14	None	replace
125	[BUG]  [BUGGY]  return  state.getValue(variable);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.getValue(variable);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValue(variable);	  return    state.getValue();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
126	[BUG]  [BUGGY]  return  state.getValueAssignments();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.getValueAssignments();  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValueAssignments();	  return    state.getValue();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
127	[BUG]  [BUGGY]  return  state.getValueAssignment();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.getValueAssignment();  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValueAssignment();	  return    state.getValue();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
128	[BUG]  [BUGGY]  return  MayBE_LIVE;  [CE]  cannot  find  symbol  MayBE_LIVE  [FE]        AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  MayBE_LIVE;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  MayBE_LIVE;	  return    KILL;    	non-compiled	[CE]  cannot  find  symbol  MayBE_LIVE	1	None	replace
129	[BUG]  [BUGGY]  return  State.FALSE;  [CE]  cannot  find  symbol  State  [FE]          AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  State.FALSE;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.FALSE;	  return    KILL;    	non-compiled	[CE]  cannot  find  symbol  State	1	None	replace
130	[BUG]  [BUGGY]  return  State.READ;  [CE]  cannot  find  symbol  State  [FE]            AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  State.READ;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.READ;	  return    KILL;    	non-compiled	[CE]  cannot  find  symbol  State	1	None	replace
131	[BUG]  [BUGGY]  return  state.getRemovableAssigns(),  child);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.getRemovableAssigns(),  child);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssigns(),  child);	  return    state.getRemovableAssigns();    	non-compiled	[CE]  ';'  expected	18	None	replace
132	[BUG]  [BUGGY]  return  state.getRemovableAssigns(),  child;  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.getRemovableAssigns(),  child;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssigns(),  child;	  return    state.getRemovableAssigns();    	non-compiled	[CE]  ';'  expected	18	None	replace
133	[BUG]  [BUGGY]  return  state.invoke(n,  variable,  child);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.invoke(n,  variable,  child);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(n,  variable,  child);	  return    state.invoke(n,    variable);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
134	[BUG]  [BUGGY]  return  state.invoke(n,  child);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.invoke(n,  child);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(n,  child);	  return    state.invoke(n,    variable);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
135	[BUG]  [BUGGY]  return  state.invoke(n,  variable,  KILL);  [CE]  cannot  find  symbol  KILL  [FE]                AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.invoke(n,  variable,  KILL);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(n,  variable,  KILL);	  return    state.invoke(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  KILL	16	None	replace
136	[BUG]  [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  ||  state.getChildCount()  >  1)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  ||  state.getChildCount()  >  1)  {  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state.getType()  ==  Token.CALL  ||  state.getChildCount()  >  1)  {	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
137	[BUG]  [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >  2)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >  2)  {  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >  2)  {	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
138	[BUG]  [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >=  1)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >=  1)  {  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >=  1)  {	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
139	[BUG]  [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()!=  1)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()!=  1)  {  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()!=  1)  {	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
140	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MOVED);  [CE]  cannot  find  symbol  MOVED  [FE]              AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MOVED);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MOVED);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable);    	non-compiled	[CE]  cannot  find  symbol  MOVED	12	None	replace
141	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MILL_LIVE);  [CE]  cannot  find  symbol  MILL_LIVE  [FE]                AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MILL_LIVE);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MILL_LIVE);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable);    	non-compiled	[CE]  cannot  find  symbol  MILL_LIVE	12	None	replace
142	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  child);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  child);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  child);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	12	None	replace
143	[BUG]  [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  ||  state.getChildCount()  >=  1;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  ||  state.getChildCount()  >=  1;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state.getType()  ==  Token.CALL  ||  state.getChildCount()  >=  1;	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >=    1;    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
144	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  MOVED);  [CE]  cannot  find  symbol  MOVED  [FE]        AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  MOVED);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  MOVED);	  return    state    &&    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  MOVED	9	None	replace
145	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  null);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  null);	  return    state    &&    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	9	None	replace
146	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  MULTIPLE_LIVE);  [CE]  cannot  find  symbol  MULTIPLE_LIVE  [FE]            AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  MULTIPLE_LIVE);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  MULTIPLE_LIVE);	  return    state    &&    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  MULTIPLE_LIVE	9	None	replace
147	[BUG]  [BUGGY]  return  state.getRemovableAssignmentsElimination(),  child);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.getRemovableAssignmentsElimination(),  child);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignmentsElimination(),  child);	  return    state.getRemovableAssignmentsElimination();    	non-compiled	[CE]  ';'  expected	13	None	replace
148	[BUG]  [BUGGY]  return  state.getRemovableAssignmentsElimination(),  child;  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.getRemovableAssignmentsElimination(),  child;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignmentsElimination(),  child;	  return    state.getRemovableAssignmentsElimination();    	non-compiled	[CE]  ';'  expected	13	None	replace
149	[BUG]  [BUGGY]  return  state  ||  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >  1)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  ||  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >  1)  {  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  ||  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >  1)  {	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
150	[BUG]  [BUGGY]  return  state  &&  state.getType()!=  Token.CALL  &&  state.getChildCount()  >  1)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  state.getType()!=  Token.CALL  &&  state.getChildCount()  >  1)  {  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state.getType()!=  Token.CALL  &&  state.getChildCount()  >  1)  {	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
151	[BUG]  [BUGGY]  return  state  &&  child.getType()  ==  Token.CALL  &&  state.getChildCount()  >  1)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  child.getType()  ==  Token.CALL  &&  state.getChildCount()  >  1)  {  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  child.getType()  ==  Token.CALL  &&  state.getChildCount()  >  1)  {	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
152	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  VAR);  [CE]  cannot  find  symbol  VAR  [FE]              AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  VAR);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  VAR);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable);    	non-compiled	[CE]  cannot  find  symbol  VAR	12	None	replace
153	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  VEAD);  [CE]  cannot  find  symbol  VEAD  [FE]                AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  VEAD);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  VEAD);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable);    	non-compiled	[CE]  cannot  find  symbol  VEAD	12	None	replace
154	[BUG]  [BUGGY]  return  matchRemovableAssignmentsElimination.getRemovableAssignmentsElimination();  [CE]  cannot  find  symbol  matchRemovableAssignmentsElimination  [FE]                AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  matchRemovableAssignmentsElimination.getRemovableAssignmentsElimination();  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  matchRemovableAssignmentsElimination.getRemovableAssignmentsElimination();	  return    state.getRemovableAssignmentsElimination();    	non-compiled	[CE]  cannot  find  symbol  matchRemovableAssignmentsElimination	13	None	replace
155	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	return  isVariableReadBeforeKill(n.getFirstChild(),  variable);	  return    state    &&    isVariableReadBeforeKill(child.getFirstChild(),    variable);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	10	61	replace
156	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(n.getFirstChild(),  variable);	  return    state    &&    isVariableReadBeforeKill(child.getFirstChild(),    variable);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	10	61	replace
157	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child,  state.getFirstChild(),  variable);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  isVariableReadBeforeKill(child,  state.getFirstChild(),  variable);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child,  state.getFirstChild(),  variable);	  return    state    &&    isVariableReadBeforeKill(child.getFirstChild(),    variable);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
158	[BUG]  [BUGGY]  return  matchRemovableAssignments.getRemovableAssignments();  [CE]  cannot  find  symbol  matchRemovableAssignments  [FE]        AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  matchRemovableAssignments.getRemovableAssignments();  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  matchRemovableAssignments.getRemovableAssignments();	  return    state.getRemovableAssignments();    	non-compiled	[CE]  cannot  find  symbol  matchRemovableAssignments	14	None	replace
159	[BUG]  [BUGGY]  return  state.getRemovableAssignments()  ||  state.getRemovableAssignments()!=  null;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.getRemovableAssignments()  ||  state.getRemovableAssignments()!=  null;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignments()  ||  state.getRemovableAssignments()!=  null;	  return    state.getRemovableAssignments();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
160	[BUG]  [BUGGY]  return  state,  matchRemovableAssigns.getRemovableAssigns();  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state,  matchRemovableAssigns.getRemovableAssigns();  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state,  matchRemovableAssigns.getRemovableAssigns();	  return    state.getRemovableAssigns();    	non-compiled	[CE]  ';'  expected	18	None	replace
161	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]      Preconditions.checkState(child.getType()  ==  Token.NAME);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	        Preconditions.checkState(child.getType()  ==  Token.NAME);	  	compilable	  [FE]  AssertionFailedError  	7	58	add
162	[BUG]  [BUGGY]      Preconditions.checkState(child.getType()  ==  Token.NAME);  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]      Preconditions.checkState(child.getType()  ==  Token.NAME);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	        Preconditions.checkState(child.getType()  ==  Token.NAME);	  	compilable	  [FE]  AssertionFailedError  	7	58	add
163	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]      Preconditions.checkState(child.getType()  ==  Token.BLOCK);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	        Preconditions.checkState(child.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	7	61	add
164	[BUG]  [BUGGY]      Preconditions.checkState(child.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]      Preconditions.checkState(child.getType()  ==  Token.BLOCK);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	        Preconditions.checkState(child.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	7	61	add
165	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]      Preconditions.checkState(child.getType()  ==  Token.CALL);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	        Preconditions.checkState(child.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	7	61	add
166	[BUG]  [BUGGY]      Preconditions.checkState(child.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]      Preconditions.checkState(child.getType()  ==  Token.CALL);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	        Preconditions.checkState(child.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	7	61	add
167	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]      Preconditions.checkState(child.getType()  ==  Token.RETURN);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	        Preconditions.checkState(child.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	7	61	add
168	[BUG]  [BUGGY]      Preconditions.checkState(child.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]      Preconditions.checkState(child.getType()  ==  Token.RETURN);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	        Preconditions.checkState(child.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	7	61	add
169	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  n,  state);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,VariableLiveness)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]      NodeTraversal.traverse(compiler,  n,  state);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	        NodeTraversal.traverse(compiler,  n,  state);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,VariableLiveness)	7	None	add
170	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]      Preconditions.checkState(child.getType()  ==  Token.VAR);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	        Preconditions.checkState(child.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	7	61	add
171	[BUG]  [BUGGY]      Preconditions.checkState(child.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]      Preconditions.checkState(child.getType()  ==  Token.VAR);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	        Preconditions.checkState(child.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	7	61	add
172	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]      n.removeChild(child);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	        n.removeChild(child);	  	compilable	  [FE]  AssertionFailedError  	7	61	add
173	[BUG]  [BUGGY]      n.removeChild(child);  [FE]  AssertionFailedError  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]      n.removeChild(child);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	        n.removeChild(child);	  	compilable	  [FE]  AssertionFailedError  	7	61	add
174	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]      Preconditions.checkState(child.getType()  ==  Token.THIS);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	        Preconditions.checkState(child.getType()  ==  Token.THIS);	  	compilable	  [FE]  RuntimeException  	7	61	add
175	[BUG]  [BUGGY]      Preconditions.checkState(child.getType()  ==  Token.THIS);  [FE]  RuntimeException  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]      Preconditions.checkState(child.getType()  ==  Token.THIS);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	        Preconditions.checkState(child.getType()  ==  Token.THIS);	  	compilable	  [FE]  RuntimeException  	7	61	add
176	[BUG]  [BUGGY]  return  state  &&  child.getType()  ==  Token.CALL  &&  state.getChildCount()  >=  1;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                  AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  child.getType()  ==  Token.CALL  &&  state.getChildCount()  >=  1;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  child.getType()  ==  Token.CALL  &&  state.getChildCount()  >=  1;	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >=    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	6	None	replace
177	[BUG]  [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  &&  child.getChildCount()  >=  1;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  &&  child.getChildCount()  >=  1;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state.getType()  ==  Token.CALL  &&  child.getChildCount()  >=  1;	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >=    1;    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
178	[BUG]  [BUGGY]  return  state  &&  n.getType()  ==  Token.CALL  &&  state.getChildCount()  >=  1;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                      AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  n.getType()  ==  Token.CALL  &&  state.getChildCount()  >=  1;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  n.getType()  ==  Token.CALL  &&  state.getChildCount()  >=  1;	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >=    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	6	None	replace
179	[BUG]  [BUGGY]  return  state  &&  n.getType()  ==  Token.CALL  &&  state.getChildCount()  >  1;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  n.getType()  ==  Token.CALL  &&  state.getChildCount()  >  1;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  n.getType()  ==  Token.CALL  &&  state.getChildCount()  >  1;	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	5	None	replace
180	[BUG]  [BUGGY]  return  state  &&  parent.getType()  ==  Token.CALL  &&  state.getChildCount()  >  1;  [CE]  cannot  find  symbol  parent  [FE]                  AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  parent.getType()  ==  Token.CALL  &&  state.getChildCount()  >  1;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  parent.getType()  ==  Token.CALL  &&  state.getChildCount()  >  1;	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol  parent	5	None	replace
181	[BUG]  [BUGGY]  return  state,  n.getValue();  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state,  n.getValue();  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state,  n.getValue();	  return    state.getValue();    	non-compiled	[CE]  ';'  expected	15	None	replace
182	[BUG]  [BUGGY]  return  state,  child.getValue();  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state,  child.getValue();  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state,  child.getValue();	  return    state.getValue();    	non-compiled	[CE]  ';'  expected	15	None	replace
183	[BUG]  [BUGGY]  return  state.removeValue();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state.removeValue();  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.removeValue();	  return    state.getValue();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
184	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  isVariableReadBeforeKill(child,  variable);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	return  isVariableReadBeforeKill(child,  variable);	  return    KILL;    	compilable	  [FE]  AssertionFailedError  	1	57	replace
185	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child,  variable);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  isVariableReadBeforeKill(child,  variable);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child,  variable);	  return    KILL;    	compilable	  [FE]  AssertionFailedError  	1	57	replace
186	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  isVariableReadBeforeKill(n,  variable);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	return  isVariableReadBeforeKill(n,  variable);	  return    KILL;    	compilable	  [FE]  StackOverflowError  	1	61	replace
187	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n,  variable);  [FE]  StackOverflowError  [FE]          AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  isVariableReadBeforeKill(n,  variable);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(n,  variable);	  return    KILL;    	compilable	  [FE]  StackOverflowError  	1	61	replace
188	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild());  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild());  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child.getFirstChild());	  return    KILL;    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	1	None	replace
189	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getString());  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  isVariableReadBeforeKill(child.getString());  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child.getString());	  return    KILL;    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	1	None	replace
190	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child,  variable.getString());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  isVariableReadBeforeKill(child,  variable.getString());  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child,  variable.getString());	  return    state    &&    isVariableReadBeforeKill(child.getString());    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
191	[BUG]  [BUGGY]  return  state  ||  module  ==  VariableLiveness.MAYBE_LIVE;  [CE]  cannot  find  symbol  module  [FE]            AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  ||  module  ==  VariableLiveness.MAYBE_LIVE;  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  ||  module  ==  VariableLiveness.MAYBE_LIVE;	  return    state    ||    state    ==    VariableLiveness.MAYBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  module	3	None	replace
192	[BUG]  [BUGGY]  return  matchRemovableAssignments.getRemovableAssignment();  [CE]  cannot  find  symbol  matchRemovableAssignments  [FE]              AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  matchRemovableAssignments.getRemovableAssignment();  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  matchRemovableAssignments.getRemovableAssignment();	  return    state.getRemovableAssignment();    	non-compiled	[CE]  cannot  find  symbol  matchRemovableAssignments	17	None	replace
193	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  VAR);  [CE]  cannot  find  symbol  VAR  [FE]        AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  VAR);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  VAR);	  return    state    &&    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  VAR	9	None	replace
194	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  MISSING);  [CE]  cannot  find  symbol  MISSING  [FE]          AssertionFailedError    [CONTEXT]    return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {    [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  MISSING);  [BUGGY]    }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  MISSING);	  return    state    &&    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  MISSING	9	None	replace
