bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child,  state);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child,  state);	  return    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	185	None	replace
2	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child,  variable,  state);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child,  variable,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child,  variable,  state);	  return    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	185	None	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  ==  VariableLiveness.MAYBE_LIVE?  isVariableReadBeforeKill(child,  variable):  state;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	return  state  ==  VariableLiveness.MAYBE_LIVE?  isVariableReadBeforeKill(child,  variable):  state;	  return    isVariableReadBeforeKill(child,    variable);    	compilable	  [FE]  AssertionFailedError  	185	57	replace
4	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.MAYBE_LIVE?  isVariableReadBeforeKill(child,  variable):  state;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  ==  VariableLiveness.MAYBE_LIVE?  isVariableReadBeforeKill(child,  variable):  state;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  ==  VariableLiveness.MAYBE_LIVE?  isVariableReadBeforeKill(child,  variable):  state;	  return    isVariableReadBeforeKill(child,    variable);    	compilable	  [FE]  AssertionFailedError  	185	57	replace
5	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  ==  VariableLiveness.MAYBE_LIVE?  isVariableReadBeforeKill(child,  variable):  null;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	return  state  ==  VariableLiveness.MAYBE_LIVE?  isVariableReadBeforeKill(child,  variable):  null;	  return    isVariableReadBeforeKill(child,    variable);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	185	61	replace
6	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.MAYBE_LIVE?  isVariableReadBeforeKill(child,  variable):  null;  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  ==  VariableLiveness.MAYBE_LIVE?  isVariableReadBeforeKill(child,  variable):  null;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  ==  VariableLiveness.MAYBE_LIVE?  isVariableReadBeforeKill(child,  variable):  null;	  return    isVariableReadBeforeKill(child,    variable);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	185	61	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  ==  VariableLiveness.MAYBE_LIVE?  null  :  isVariableReadBeforeKill(child,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	return  state  ==  VariableLiveness.MAYBE_LIVE?  null  :  isVariableReadBeforeKill(child,  variable);	  return    isVariableReadBeforeKill(child,    variable);    	compilable	  [FE]  AssertionFailedError  	185	57	replace
8	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.MAYBE_LIVE?  null  :  isVariableReadBeforeKill(child,  variable);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  ==  VariableLiveness.MAYBE_LIVE?  null  :  isVariableReadBeforeKill(child,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  ==  VariableLiveness.MAYBE_LIVE?  null  :  isVariableReadBeforeKill(child,  variable);	  return    isVariableReadBeforeKill(child,    variable);    	compilable	  [FE]  AssertionFailedError  	185	57	replace
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state!=  VariableLiveness.MAYBE_LIVE?  isVariableReadBeforeKill(child,  variable):  state;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	return  state!=  VariableLiveness.MAYBE_LIVE?  isVariableReadBeforeKill(child,  variable):  state;	  return    isVariableReadBeforeKill(child,    variable);    	compilable	  [FE]  AssertionFailedError  	185	57	replace
10	[BUG]  [BUGGY]  return  state!=  VariableLiveness.MAYBE_LIVE?  isVariableReadBeforeKill(child,  variable):  state;  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state!=  VariableLiveness.MAYBE_LIVE?  isVariableReadBeforeKill(child,  variable):  state;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state!=  VariableLiveness.MAYBE_LIVE?  isVariableReadBeforeKill(child,  variable):  state;	  return    isVariableReadBeforeKill(child,    variable);    	compilable	  [FE]  AssertionFailedError  	185	57	replace
11	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.BLOCK);  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	                Preconditions.checkState(child.getType()    ==    Token.BLOCK);    Preconditions.checkState(child.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	163	61	add
12	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.BLOCK);  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.BLOCK);  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.BLOCK);    Preconditions.checkState(child.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	163	61	add
13	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.BLOCK);  Preconditions.checkState(child.getType()!=  Token.BLOCK);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	                Preconditions.checkState(child.getType()    ==    Token.BLOCK);    Preconditions.checkState(child.getType()!=  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	163	61	add
14	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.BLOCK);  Preconditions.checkState(child.getType()!=  Token.BLOCK);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.BLOCK);  Preconditions.checkState(child.getType()!=  Token.BLOCK);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.BLOCK);    Preconditions.checkState(child.getType()!=  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	163	61	add
15	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.BLOCK);  Preconditions.checkState(child.getType()  >=  Token.BLOCK);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	                Preconditions.checkState(child.getType()    ==    Token.BLOCK);    Preconditions.checkState(child.getType()  >=  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	163	61	add
16	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.BLOCK);  Preconditions.checkState(child.getType()  >=  Token.BLOCK);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.BLOCK);  Preconditions.checkState(child.getType()  >=  Token.BLOCK);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.BLOCK);    Preconditions.checkState(child.getType()  >=  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	163	61	add
17	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.BLOCK);  Preconditions.checkState(child.getType()  >>  Token.BLOCK);  [CE]  no  suitable  method  found  for  checkState(int)  [FE]          RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.BLOCK);  Preconditions.checkState(child.getType()  >>  Token.BLOCK);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.BLOCK);    Preconditions.checkState(child.getType()  >>  Token.BLOCK);	  	non-compiled	[CE]  no  suitable  method  found  for  checkState(int)	163	None	add
18	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.BLOCK);  Preconditions.checkState(child.gettype()  ==  Token.BLOCK);  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.BLOCK);  Preconditions.checkState(child.gettype()  ==  Token.BLOCK);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.BLOCK);    Preconditions.checkState(child.gettype()  ==  Token.BLOCK);	  	non-compiled	[CE]  cannot  find  symbol	163	None	add
19	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.BLOCK);  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  }  [CE]  illegal  start  of  type  [FE]              RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.BLOCK);  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.BLOCK);    Preconditions.checkState(child.getType()  ==  Token.BLOCK);  }	  	non-compiled	[CE]  illegal  start  of  type	163	None	add
20	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.BLOCK);  Preconditions.checkState(child.getType()  [Delete]  Token.BLOCK);  [CE]  ')'  expected  [FE]                RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.BLOCK);  Preconditions.checkState(child.getType()  [Delete]  Token.BLOCK);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.BLOCK);    Preconditions.checkState(child.getType()  [Delete]  Token.BLOCK);	  	non-compiled	[CE]  ')'  expected	163	None	add
21	[BUG]  [BUGGY]  return  child.getType()  ==  Token.CALL  &&  state.getChildCount()  >  1;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  child.getType()  ==  Token.CALL  &&  state.getChildCount()  >  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  child.getType()  ==  Token.CALL  &&  state.getChildCount()  >  1;	  return    state    &&    state.getType()    ==    Token.CALL    &&    child.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
22	[BUG]  [BUGGY]  return  state.getType()!=  Token.CALL  &&  child.getChildCount()  >  1;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()!=  Token.CALL  &&  child.getChildCount()  >  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()!=  Token.CALL  &&  child.getChildCount()  >  1;	  return    state    &&    state.getType()    ==    Token.CALL    &&    child.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
23	[BUG]  [BUGGY]  return  state  &&  parent.getType()  ==  Token.CALL  &&  child.getChildCount()  >  1;  [CE]  cannot  find  symbol  parent  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  parent.getType()  ==  Token.CALL  &&  child.getChildCount()  >  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  parent.getType()  ==  Token.CALL  &&  child.getChildCount()  >  1;	  return    state    &&    state.getType()    ==    Token.CALL    &&    child.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol  parent	107	None	replace
24	[BUG]  [BUGGY]  return  state.getRemovableAssignmentsElimination(),  variable);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignmentsElimination(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignmentsElimination(),  variable);	  return    state.getRemovableAssignmentsElimination(),    child);    	non-compiled	[CE]  ';'  expected	147	None	replace
25	[BUG]  [BUGGY]  return  state.getRemovableAssignmentsElimination(),  child,  variable);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignmentsElimination(),  child,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignmentsElimination(),  child,  variable);	  return    state.getRemovableAssignmentsElimination(),    child);    	non-compiled	[CE]  ';'  expected	147	None	replace
26	[BUG]  [BUGGY]  return  state.getRemovableAssignmentsElimination(),  child,  VariableLiveness.MAYBE_LIVE);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignmentsElimination(),  child,  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignmentsElimination(),  child,  VariableLiveness.MAYBE_LIVE);	  return    state.getRemovableAssignmentsElimination(),    child);    	non-compiled	[CE]  ';'  expected	147	None	replace
27	[BUG]  [BUGGY]  return  state.getRemovableAssignmentsElimination(),  child  +  1;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignmentsElimination(),  child  +  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignmentsElimination(),  child  +  1;	  return    state.getRemovableAssignmentsElimination(),    child);    	non-compiled	[CE]  ';'  expected	147	None	replace
28	[BUG]  [BUGGY]  return  state.getRemovableAssignmentsElimination(),  child,  variables);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignmentsElimination(),  child,  variables);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignmentsElimination(),  child,  variables);	  return    state.getRemovableAssignmentsElimination(),    child);    	non-compiled	[CE]  ';'  expected	147	None	replace
29	[BUG]  [BUGGY]  return  state.getRemovableAssignmentsElimination(),  parent);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignmentsElimination(),  parent);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignmentsElimination(),  parent);	  return    state.getRemovableAssignmentsElimination(),    child);    	non-compiled	[CE]  ';'  expected	147	None	replace
30	[BUG]  [BUGGY]  return  state.getRemovableAssignments(),  variable);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignments(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignments(),  variable);	  return    state.getRemovableAssignments(),    child);    	non-compiled	[CE]  ';'  expected	104	None	replace
31	[BUG]  [BUGGY]  return  state.getRemovableAssignments(),  child,  variable);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignments(),  child,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignments(),  child,  variable);	  return    state.getRemovableAssignments(),    child);    	non-compiled	[CE]  ';'  expected	104	None	replace
32	[BUG]  [BUGGY]  return  state.getMatchRemovableAssignments(),  child);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getMatchRemovableAssignments(),  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getMatchRemovableAssignments(),  child);	  return    state.getRemovableAssignments(),    child);    	non-compiled	[CE]  ';'  expected	104	None	replace
33	[BUG]  [BUGGY]  return  state.getRemovableAssignments(),  child  +  1;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignments(),  child  +  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignments(),  child  +  1;	  return    state.getRemovableAssignments(),    child);    	non-compiled	[CE]  ';'  expected	104	None	replace
34	[BUG]  [BUGGY]  return  state.getRemoveAssignments(),  child,  variable);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemoveAssignments(),  child,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemoveAssignments(),  child,  variable);	  return    state.getRemovableAssignments(),    child);    	non-compiled	[CE]  ';'  expected	104	None	replace
35	[BUG]  [BUGGY]  return  state.getRemovableAssignments(),  parent);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignments(),  parent);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignments(),  parent);	  return    state.getRemovableAssignments(),    child);    	non-compiled	[CE]  ';'  expected	104	None	replace
36	[BUG]  [BUGGY]  n.removeChild(variable);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  n.removeChild(variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	n.removeChild(variable);	          n.removeChild(child);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	173	None	replace
37	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  n.removeChild(child.getLastChild());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	n.removeChild(child.getLastChild());	          n.removeChild(child);    	compilable	  [FE]  RuntimeException  	173	61	replace
38	[BUG]  [BUGGY]  n.removeChild(child.getLastChild());  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  n.removeChild(child.getLastChild());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	n.removeChild(child.getLastChild());	          n.removeChild(child);    	compilable	  [FE]  RuntimeException  	173	61	replace
39	[BUG]  [BUGGY]  n.removeChild(child,  variable);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  n.removeChild(child,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	n.removeChild(child,  variable);	          n.removeChild(child);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	173	None	replace
40	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  n.removeChild(child.getFirstChild());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	n.removeChild(child.getFirstChild());	          n.removeChild(child);    	compilable	  [FE]  RuntimeException  	173	61	replace
41	[BUG]  [BUGGY]  n.removeChild(child.getFirstChild());  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  n.removeChild(child.getFirstChild());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	n.removeChild(child.getFirstChild());	          n.removeChild(child);    	compilable	  [FE]  RuntimeException  	173	61	replace
42	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  n.removeChild(child.getNext());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	n.removeChild(child.getNext());	          n.removeChild(child);    	compilable	  [FE]  RuntimeException  	173	61	replace
43	[BUG]  [BUGGY]  n.removeChild(child.getNext());  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  n.removeChild(child.getNext());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	n.removeChild(child.getNext());	          n.removeChild(child);    	compilable	  [FE]  RuntimeException  	173	61	replace
44	[BUG]  [BUGGY]  n.removeChild(child.getString());  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  n.removeChild(child.getString());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	n.removeChild(child.getString());	          n.removeChild(child);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	173	None	replace
45	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  &&  n.getChildCount()  >  1;  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()  ==  Token.CALL  &&  n.getChildCount()  >  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  &&  n.getChildCount()  >  1;	  return    n.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
46	[BUG]  [BUGGY]  return  state.getType()!=  Token.CALL  &&  n.getChildCount()  >  1;  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()!=  Token.CALL  &&  n.getChildCount()  >  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()!=  Token.CALL  &&  n.getChildCount()  >  1;	  return    n.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
47	[BUG]  [BUGGY]  return  n.getType()  ==  Token.CALL  &&  state.getChildCount()  >  2;  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  n.getType()  ==  Token.CALL  &&  state.getChildCount()  >  2;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n.getType()  ==  Token.CALL  &&  state.getChildCount()  >  2;	  return    n.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
48	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child,  state);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,VariableLiveness)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	NodeTraversal.traverse(compiler,  child,  state);	          NodeTraversal.traverse(compiler,    n,    state);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,VariableLiveness)	169	None	replace
49	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  child,  state);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,VariableLiveness)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  child,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	NodeTraversal.traverse(compiler,  n,  child,  state);	          NodeTraversal.traverse(compiler,    n,    state);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,VariableLiveness)	169	None	replace
50	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  state,  variable);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,VariableLiveness,String)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  state,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	NodeTraversal.traverse(compiler,  n,  state,  variable);	          NodeTraversal.traverse(compiler,    n,    state);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,VariableLiveness,String)	169	None	replace
51	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  KILL,  state);  [CE]  cannot  find  symbol  KILL  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  KILL,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	NodeTraversal.traverse(compiler,  n,  KILL,  state);	          NodeTraversal.traverse(compiler,    n,    state);    	non-compiled	[CE]  cannot  find  symbol  KILL	169	None	replace
52	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  state,  KILL);  [CE]  cannot  find  symbol  KILL  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  state,  KILL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	NodeTraversal.traverse(compiler,  n,  state,  KILL);	          NodeTraversal.traverse(compiler,    n,    state);    	non-compiled	[CE]  cannot  find  symbol  KILL	169	None	replace
53	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  variable,  state);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,String,VariableLiveness)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  variable,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	NodeTraversal.traverse(compiler,  n,  variable,  state);	          NodeTraversal.traverse(compiler,    n,    state);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,String,VariableLiveness)	169	None	replace
54	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  KILL);  [CE]  cannot  find  symbol  KILL  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  KILL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	NodeTraversal.traverse(compiler,  n,  KILL);	          NodeTraversal.traverse(compiler,    n,    state);    	non-compiled	[CE]  cannot  find  symbol  KILL	169	None	replace
55	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  ==  1;  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  ==  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  ==  1;	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()!=    1;    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
56	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  KILL);  [CE]  cannot  find  symbol  KILL  [FE]            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  KILL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  KILL);	  return    state    &&    isVariableReadBeforeKill(child,    variable,    VAR);    	non-compiled	[CE]  cannot  find  symbol  KILL	193	None	replace
57	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  MayBE_LIVE);  [CE]  cannot  find  symbol  MayBE_LIVE  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  MayBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  MayBE_LIVE);	  return    state    &&    isVariableReadBeforeKill(child,    variable,    VAR);    	non-compiled	[CE]  cannot  find  symbol  MayBE_LIVE	193	None	replace
58	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  MAIBE_LIVE);  [CE]  cannot  find  symbol  MAIBE_LIVE  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  MAIBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  MAIBE_LIVE);	  return    state    &&    isVariableReadBeforeKill(child,    variable,    VAR);    	non-compiled	[CE]  cannot  find  symbol  MAIBE_LIVE	193	None	replace
59	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.NAME);  Preconditions.checkState(child.getType()  ==  Token.NAME);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	                Preconditions.checkState(child.getType()    ==    Token.NAME);    Preconditions.checkState(child.getType()  ==  Token.NAME);	  	compilable	  [FE]  AssertionFailedError  	161	58	add
60	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.NAME);  Preconditions.checkState(child.getType()  ==  Token.NAME);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.NAME);  Preconditions.checkState(child.getType()  ==  Token.NAME);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.NAME);    Preconditions.checkState(child.getType()  ==  Token.NAME);	  	compilable	  [FE]  AssertionFailedError  	161	58	add
61	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.NAME);  Preconditions.checkState(child.getType()  ==  Token.NAME);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  }  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.NAME);  Preconditions.checkState(child.getType()  ==  Token.NAME);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.NAME);    Preconditions.checkState(child.getType()  ==  Token.NAME);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  }	  	non-compiled	[CE]  illegal  start  of  type	161	None	add
62	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.NAME);  Preconditions.checkState(child.getType()  ==  Token.NAME);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  ==  return  VariableLiveness.READ);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.NAME);  Preconditions.checkState(child.getType()  ==  Token.NAME);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  ==  return  VariableLiveness.READ);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.NAME);    Preconditions.checkState(child.getType()  ==  Token.NAME);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  ==  return  VariableLiveness.READ);	  	non-compiled	[CE]  not  a  statement	161	None	add
63	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.NAME);  Preconditions.checkState(child.getType()  ==  Token.NAME);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	                Preconditions.checkState(child.getType()    ==    Token.NAME);    Preconditions.checkState(child.getType()  ==  Token.NAME);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.NAME);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	161	61	add
64	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.NAME);  Preconditions.checkState(child.getType()  ==  Token.NAME);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.NAME);  Preconditions.checkState(child.getType()  ==  Token.NAME);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.NAME);    Preconditions.checkState(child.getType()  ==  Token.NAME);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.NAME);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	161	61	add
65	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.NAME);  Preconditions.checkState(child.getType()  ==  Token.NAME);  preconditions.checkState(child.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]            AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.NAME);  Preconditions.checkState(child.getType()  ==  Token.NAME);  preconditions.checkState(child.getType()  ==  Token.NAME);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.NAME);    Preconditions.checkState(child.getType()  ==  Token.NAME);  preconditions.checkState(child.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	161	None	add
66	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.NAME);  Preconditions.checkState(child.getType()!=  Token.NAME);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	                Preconditions.checkState(child.getType()    ==    Token.NAME);    Preconditions.checkState(child.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	161	61	add
67	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.NAME);  Preconditions.checkState(child.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.NAME);  Preconditions.checkState(child.getType()!=  Token.NAME);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.NAME);    Preconditions.checkState(child.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	161	61	add
68	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.NAME);  Preconditions.checkState(child.getType()  ==  Token.NAME);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  ==  return  VariableLiveness.READ;  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.NAME);  Preconditions.checkState(child.getType()  ==  Token.NAME);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  ==  return  VariableLiveness.READ;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.NAME);    Preconditions.checkState(child.getType()  ==  Token.NAME);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  ==  return  VariableLiveness.READ;	  	non-compiled	[CE]  not  a  statement	161	None	add
69	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.NAME);  Preconditions.checkState(child.getType()  ==  Token.NAME);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  ==  return  VariableLiveness.READ,  state);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.NAME);  Preconditions.checkState(child.getType()  ==  Token.NAME);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  ==  return  VariableLiveness.READ,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.NAME);    Preconditions.checkState(child.getType()  ==  Token.NAME);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  ==  return  VariableLiveness.READ,  state);	  	non-compiled	[CE]  not  a  statement	161	None	add
70	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  +  AssertionFailedError  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  +  AssertionFailedError  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  +  AssertionFailedError	          junit.framework.AssertionFailedError:    Expected:    function    FUNC(param1    >>    AssertionFailedError    	non-compiled	[CE]  not  a  statement	117	None	replace
71	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  ==  AssertionFailedError  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  ==  AssertionFailedError  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  ==  AssertionFailedError	          junit.framework.AssertionFailedError:    Expected:    function    FUNC(param1    >>    AssertionFailedError    	non-compiled	[CE]  not  a  statement	117	None	replace
72	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable!=  AssertionFailedError  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable!=  AssertionFailedError  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable!=  AssertionFailedError	          junit.framework.AssertionFailedError:    Expected:    function    FUNC(param1    >>    AssertionFailedError    	non-compiled	[CE]  not  a  statement	117	None	replace
73	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  ==  AssertionFailedError  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  ==  AssertionFailedError  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  ==  AssertionFailedError	          junit.framework.AssertionFailedError:    Expected:    function    FUNC(param1    >>    AssertionFailedError    	non-compiled	[CE]  not  a  statement	117	None	replace
74	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  >=  AssertionFailedError  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  >=  AssertionFailedError  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  >=  AssertionFailedError	          junit.framework.AssertionFailedError:    Expected:    function    FUNC(param1    >>    AssertionFailedError    	non-compiled	[CE]  not  a  statement	117	None	replace
75	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  >>  AssertionFailedError  [CE]  not  a  statement  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  >>  AssertionFailedError  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  >>  AssertionFailedError	          junit.framework.AssertionFailedError:    Expected:    function    FUNC(param1    >>    AssertionFailedError    	non-compiled	[CE]  not  a  statement	117	None	replace
76	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	State  state  =  isVariableReadBeforeKill(child,  variable);	  state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
77	[BUG]  [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable)&&  state!=  VariableLiveness.MAYBE_LIVE;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable)&&  state!=  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	state  =  isVariableReadBeforeKill(child,  variable)&&  state!=  VariableLiveness.MAYBE_LIVE;	  state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	20	None	replace
78	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable  +  1);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	state  =  isVariableReadBeforeKill(child,  variable  +  1);	  state    =    isVariableReadBeforeKill(child,    variable);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	20	61	replace
79	[BUG]  [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable  +  1);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable  +  1);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	state  =  isVariableReadBeforeKill(child,  variable  +  1);	  state    =    isVariableReadBeforeKill(child,    variable);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	20	61	replace
80	[BUG]  [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable)&&  state  ==  VariableLiveness.MAYBE_LIVE;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable)&&  state  ==  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	state  =  isVariableReadBeforeKill(child,  variable)&&  state  ==  VariableLiveness.MAYBE_LIVE;	  state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	20	None	replace
81	[BUG]  [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable  &  VariableLiveness.MAYBE_LIVE);  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable  &  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	state  =  isVariableReadBeforeKill(child,  variable  &  VariableLiveness.MAYBE_LIVE);	  state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	20	None	replace
82	[BUG]  [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable)&&  state  >=  VariableLiveness.MAYBE_LIVE;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable)&&  state  >=  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	state  =  isVariableReadBeforeKill(child,  variable)&&  state  >=  VariableLiveness.MAYBE_LIVE;	  state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	20	None	replace
83	[BUG]  [BUGGY]  return  state.getRemovableAssignments(),  KILL;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignments(),  KILL;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignments(),  KILL;	  return    state.getRemovableAssignments(),    variable;    	non-compiled	[CE]  ';'  expected	100	None	replace
84	[BUG]  [BUGGY]  return  state.getMatchRemovableAssignments(),  variable;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getMatchRemovableAssignments(),  variable;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getMatchRemovableAssignments(),  variable;	  return    state.getRemovableAssignments(),    variable;    	non-compiled	[CE]  ';'  expected	100	None	replace
85	[BUG]  [BUGGY]  return  state.getRemovableAssignments(),  variable  +  1;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignments(),  variable  +  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignments(),  variable  +  1;	  return    state.getRemovableAssignments(),    variable;    	non-compiled	[CE]  ';'  expected	100	None	replace
86	[BUG]  [BUGGY]  return  state.getRemoveAssignments(),  child;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemoveAssignments(),  child;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemoveAssignments(),  child;	  return    state.getRemovableAssignments(),    variable;    	non-compiled	[CE]  ';'  expected	100	None	replace
87	[BUG]  [BUGGY]  return  state.getRemovableAssignments(),  this;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignments(),  this;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignments(),  this;	  return    state.getRemovableAssignments(),    null;    	non-compiled	[CE]  ';'  expected	124	None	replace
88	[BUG]  [BUGGY]  return  state.getRemovableAssignments(),  parent;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignments(),  parent;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignments(),  parent;	  return    state.getRemovableAssignments(),    null;    	non-compiled	[CE]  ';'  expected	124	None	replace
89	[BUG]  [BUGGY]  return  state.getRemovableAssignments(),  module;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignments(),  module;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignments(),  module;	  return    state.getRemovableAssignments(),    null;    	non-compiled	[CE]  ';'  expected	124	None	replace
90	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);  if(state!=  VariableLiveness.MAYBE_LIVE)  {	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
91	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if(state!=  VariableLiveness.MAYBE_LIVE)  {	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
92	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n);  if(state!=  VariableLiveness.MAYBE_LIVE)  {	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
93	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
94	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1);  if(state!=  VariableLiveness.MAYBE_LIVE)  {	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
95	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.NAME,  state);	          Preconditions.checkState(child.getType()    ==    Token.NAME);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	162	61	replace
96	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME,  state);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME,  state);	          Preconditions.checkState(child.getType()    ==    Token.NAME);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	162	61	replace
97	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  ||  state  ==  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.NAME  ||  state  ==  VariableLiveness.MAYBE_LIVE);	          Preconditions.checkState(child.getType()    ==    Token.NAME);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	162	61	replace
98	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  ||  state  ==  VariableLiveness.MAYBE_LIVE);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  ||  state  ==  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME  ||  state  ==  VariableLiveness.MAYBE_LIVE);	          Preconditions.checkState(child.getType()    ==    Token.NAME);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	162	61	replace
99	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]        AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  &&  state!=  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.NAME  &&  state!=  VariableLiveness.MAYBE_LIVE);	          Preconditions.checkState(child.getType()    ==    Token.NAME);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	162	61	replace
100	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  &&  state!=  VariableLiveness.MAYBE_LIVE);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]        AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  &&  state!=  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME  &&  state!=  VariableLiveness.MAYBE_LIVE);	          Preconditions.checkState(child.getType()    ==    Token.NAME);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	162	61	replace
101	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.NAME,  variable);	          Preconditions.checkState(child.getType()    ==    Token.NAME);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	162	61	replace
102	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME,  variable);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME,  variable);	          Preconditions.checkState(child.getType()    ==    Token.NAME);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	162	61	replace
103	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]            AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  ||  state!=  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.NAME  ||  state!=  VariableLiveness.MAYBE_LIVE);	          Preconditions.checkState(child.getType()    ==    Token.NAME);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	162	61	replace
104	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  ||  state!=  VariableLiveness.MAYBE_LIVE);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]            AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  ||  state!=  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME  ||  state!=  VariableLiveness.MAYBE_LIVE);	          Preconditions.checkState(child.getType()    ==    Token.NAME);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	162	61	replace
105	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  &&  state  ==  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.NAME  &&  state  ==  VariableLiveness.MAYBE_LIVE);	          Preconditions.checkState(child.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	162	61	replace
106	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  &&  state  ==  VariableLiveness.MAYBE_LIVE);  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  &&  state  ==  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME  &&  state  ==  VariableLiveness.MAYBE_LIVE);	          Preconditions.checkState(child.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	162	61	replace
107	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child,  variable);  return  isVariableReadBeforeKill(child,  variable);  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child,  variable);  return  isVariableReadBeforeKill(child,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(child,    variable);    return  isVariableReadBeforeKill(child,  variable);	  	non-compiled	[CE]  unreachable  statement	184	None	add
108	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child,  variable);  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]      AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child,  variable);  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(child,    variable);    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	184	None	add
109	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  isVariableReadBeforeKill(child,  variable);  }  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(child,    variable);    if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  isVariableReadBeforeKill(child,  variable);  }	  	non-compiled	[CE]  unreachable  statement	184	None	add
110	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  isVariableReadBeforeKill(child,  variable);  }  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(child,    variable);    if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  isVariableReadBeforeKill(child,  variable);  }	  	non-compiled	[CE]  unreachable  statement	184	None	add
111	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  isVariableReadBeforeKill(child,  variable);  }  [CE]  unreachable  statement  [FE]            AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(child,    variable);    if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  isVariableReadBeforeKill(child,  variable);  }	  	non-compiled	[CE]  unreachable  statement	184	None	add
112	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child,  variable);  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  return  isVariableReadBeforeKill(child,  variable);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child,  variable);  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  return  isVariableReadBeforeKill(child,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(child,    variable);    ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  return  isVariableReadBeforeKill(child,  variable);	  	non-compiled	[CE]  illegal  start  of  expression	184	None	add
113	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  return  isVariableReadBeforeKill(child,  variable);  }  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  return  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(child,    variable);    if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  return  isVariableReadBeforeKill(child,  variable);  }	  	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	184	None	add
114	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  return  isVariableReadBeforeKill(child,  variable);  }  [CE]  unreachable  statement  [FE]                  AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  return  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(child,    variable);    if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  return  isVariableReadBeforeKill(child,  variable);  }	  	non-compiled	[CE]  unreachable  statement	184	None	add
115	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  READ);  [CE]  cannot  find  symbol  READ  [FE]            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  READ);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  READ);	  return    state    &&    isVariableReadBeforeKill(child,    variable,    MAYBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  READ	25	None	replace
116	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  VAR_LIVE);  [CE]  cannot  find  symbol  VAR_LIVE  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  VAR_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  VAR_LIVE);	  return    state    &&    isVariableReadBeforeKill(child,    variable,    MAYBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  VAR_LIVE	25	None	replace
117	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  MOVE_SECOND);  [CE]  cannot  find  symbol  MOVE_SECOND  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  MOVE_SECOND);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  MOVE_SECOND);	  return    state    &&    isVariableReadBeforeKill(child,    variable,    MAYBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  MOVE_SECOND	25	None	replace
118	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  HOUR_LEAD);  [CE]  cannot  find  symbol  HOUR_LEAD  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  HOUR_LEAD);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  HOUR_LEAD);	  return    state    &&    isVariableReadBeforeKill(child,    variable,    MAYBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  HOUR_LEAD	25	None	replace
119	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  state  ==  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  state  ==  VariableLiveness.MAYBE_LIVE);	          Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	164	61	replace
120	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  state  ==  VariableLiveness.MAYBE_LIVE);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  state  ==  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  state  ==  VariableLiveness.MAYBE_LIVE);	          Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	164	61	replace
121	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.BLOCK,  state);	          Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	164	61	replace
122	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK,  state);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.BLOCK,  state);	          Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	164	61	replace
123	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  &&  state!=  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.BLOCK  &&  state!=  VariableLiveness.MAYBE_LIVE);	          Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	164	61	replace
124	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  &&  state!=  VariableLiveness.MAYBE_LIVE);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  &&  state!=  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.BLOCK  &&  state!=  VariableLiveness.MAYBE_LIVE);	          Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	164	61	replace
125	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()!=  Token.BLOCK);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()!=  Token.BLOCK);	          Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	164	61	replace
126	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()!=  Token.BLOCK);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()!=  Token.BLOCK);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()!=  Token.BLOCK);	          Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	164	61	replace
127	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.BLOCK);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.BLOCK);	          Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	164	61	replace
128	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.BLOCK);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.BLOCK);	          Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	164	61	replace
129	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  &&  state  ==  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.BLOCK  &&  state  ==  VariableLiveness.MAYBE_LIVE);	          Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	164	61	replace
130	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  &&  state  ==  VariableLiveness.MAYBE_LIVE);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  &&  state  ==  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.BLOCK  &&  state  ==  VariableLiveness.MAYBE_LIVE);	          Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	164	61	replace
131	[BUG]  [BUGGY]  return  state.getRemovableAssignments(variable);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignments(variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignments(variable);	  return    state.getRemovableAssignments(child);    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
132	[BUG]  [BUGGY]  return  n.getRemovableAssignments(child);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  n.getRemovableAssignments(child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n.getRemovableAssignments(child);	  return    state.getRemovableAssignments(child);    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
133	[BUG]  [BUGGY]  return  state.getRemovableAssignments(variable,  child);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignments(variable,  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignments(variable,  child);	  return    state.getRemovableAssignments(child);    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
134	[BUG]  [BUGGY]  return  state.getRemovableAssignments(child,  variable);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignments(child,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignments(child,  variable);	  return    state.getRemovableAssignments(child);    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
135	[BUG]  [BUGGY]  return  matchRemovableAssignmentsElimination.getRemovableAssignments(child);  [CE]  cannot  find  symbol  matchRemovableAssignmentsElimination  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  matchRemovableAssignmentsElimination.getRemovableAssignments(child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  matchRemovableAssignmentsElimination.getRemovableAssignments(child);	  return    state.getRemovableAssignments(child);    	non-compiled	[CE]  cannot  find  symbol  matchRemovableAssignmentsElimination	123	None	replace
136	[BUG]  [BUGGY]  return  state.getRemovableAssignments(n);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignments(n);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignments(n);	  return    state.getRemovableAssignments(child);    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
137	[BUG]  [BUGGY]  return  child.getRemovableAssignments(state);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  child.getRemovableAssignments(state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  child.getRemovableAssignments(state);	  return    state.getRemovableAssignments(child);    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
138	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MAYBE_LIVE);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    MAXBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	52	None	replace
139	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  KILL);  [CE]  cannot  find  symbol  KILL  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  KILL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  KILL);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    MAXBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  KILL	52	None	replace
140	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  KILL_LIVE);  [CE]  cannot  find  symbol  KILL_LIVE  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  KILL_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  KILL_LIVE);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    MAXBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  KILL_LIVE	52	None	replace
141	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  BYTE_LIVE);  [CE]  cannot  find  symbol  BYTE_LIVE  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  BYTE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  BYTE_LIVE);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    MAXBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  BYTE_LIVE	52	None	replace
142	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MOVE_LIVE);  [CE]  cannot  find  symbol  MOVE_LIVE  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MOVE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MOVE_LIVE);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    MAXBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  MOVE_LIVE	52	None	replace
143	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  VAR_LIVE);  [CE]  cannot  find  symbol  VAR_LIVE  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  VAR_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  VAR_LIVE);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    MAXBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  VAR_LIVE	52	None	replace
144	[BUG]  [BUGGY]  return  state.invoke(child,  variable,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(child,  variable,  MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(child,  variable,  MAYBE_LIVE);	  return    state.invoke(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	78	None	replace
145	[BUG]  [BUGGY]  return  n.invoke(child,  variable);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  n.invoke(child,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n.invoke(child,  variable);	  return    state.invoke(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
146	[BUG]  [BUGGY]  return  state.invoke(child,  variable,  maybe_LIVE);  [CE]  cannot  find  symbol  maybe_LIVE  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(child,  variable,  maybe_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(child,  variable,  maybe_LIVE);	  return    state.invoke(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  maybe_LIVE	78	None	replace
147	[BUG]  [BUGGY]  return  state.invoke(child,  variable,  MILLBE_LIVE);  [CE]  cannot  find  symbol  MILLBE_LIVE  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(child,  variable,  MILLBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(child,  variable,  MILLBE_LIVE);	  return    state.invoke(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  MILLBE_LIVE	78	None	replace
148	[BUG]  [BUGGY]  return  state.invoke(varvariable,  child);  [CE]  cannot  find  symbol  var  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(varvariable,  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(varvariable,  child);	  return    state.invoke(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  var	78	None	replace
149	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n);  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	17	None	replace
150	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null);  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	17	None	replace
151	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  READ);  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  READ);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  READ);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	17	None	replace
152	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  true);  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  true);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  true);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	17	None	replace
153	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  parent);  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  parent);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  parent);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	17	None	replace
154	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	17	None	replace
155	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable));  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable));  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable));	          NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(variable));    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
156	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  state,  new  AssertionFailedError(variable));  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  state,  new  AssertionFailedError(variable));  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	NodeTraversal.traverse(compiler,  n,  state,  new  AssertionFailedError(variable));	          NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(variable));    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
157	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(variable,  state));  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(variable,  state));  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(variable,  state));	          NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(variable));    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
158	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(child,  variable));  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(child,  variable));  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(child,  variable));	          NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(variable));    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
159	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(variable),  state);  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(variable),  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(variable),  state);	          NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(variable));    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
160	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(param1));  [CE]  cannot  find  symbol  [FE]                                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(param1));  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(param1));	          NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(variable));    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
161	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  child,  new  AssertionFailedError(variable));  [CE]  cannot  find  symbol  [FE]                                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  child,  new  AssertionFailedError(variable));  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	NodeTraversal.traverse(compiler,  n,  child,  new  AssertionFailedError(variable));	          NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(variable));    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
162	[BUG]  [BUGGY]  return  state.getRemovableAssignments()  &&  state.getRemovableAssignments()!=  null;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignments()  &&  state.getRemovableAssignments()!=  null;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignments()  &&  state.getRemovableAssignments()!=  null;	  return    state.getRemovableAssignments()    ||    state.getRemovableAssignments()!=    null;    	non-compiled	[CE]  cannot  find  symbol	159	None	replace
163	[BUG]  [BUGGY]  return  state.getRemovableAssignments()  &&  state.getRemovableAssignments()  ==  null;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignments()  &&  state.getRemovableAssignments()  ==  null;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignments()  &&  state.getRemovableAssignments()  ==  null;	  return    state.getRemovableAssignments()    ||    state.getRemovableAssignments()!=    null;    	non-compiled	[CE]  cannot  find  symbol	159	None	replace
164	[BUG]  [BUGGY]  return  n.getRemovableAssignments()  ||  state.getRemovableAssignments()!=  null;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  n.getRemovableAssignments()  ||  state.getRemovableAssignments()!=  null;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n.getRemovableAssignments()  ||  state.getRemovableAssignments()!=  null;	  return    state.getRemovableAssignments()    ||    state.getRemovableAssignments()!=    null;    	non-compiled	[CE]  cannot  find  symbol	159	None	replace
165	[BUG]  [BUGGY]  return  state.getRemovableAssignments()  ||  state.getRemovableAssignments()  ==  null;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignments()  ||  state.getRemovableAssignments()  ==  null;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignments()  ||  state.getRemovableAssignments()  ==  null;	  return    state.getRemovableAssignments()    ||    state.getRemovableAssignments()!=    null;    	non-compiled	[CE]  cannot  find  symbol	159	None	replace
166	[BUG]  [BUGGY]  return  state.getRemovableAssignments()  ||  n.getRemovableAssignments()!=  null;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignments()  ||  n.getRemovableAssignments()!=  null;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignments()  ||  n.getRemovableAssignments()!=  null;	  return    state.getRemovableAssignments()    ||    state.getRemovableAssignments()!=    null;    	non-compiled	[CE]  cannot  find  symbol	159	None	replace
167	[BUG]  [BUGGY]  return  state.getRemovableAssignments()  /|  state.getRemovableAssignments()!=  null;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignments()  /|  state.getRemovableAssignments()!=  null;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignments()  /|  state.getRemovableAssignments()!=  null;	  return    state.getRemovableAssignments()    ||    state.getRemovableAssignments()!=    null;    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
168	[BUG]  [BUGGY]  return  n;  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  n;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n;	  return    MAJBE_LIVE;    	non-compiled	[CE]  incompatible  types	9	None	replace
169	[BUG]  [BUGGY]  return  KILL_LIVE;  [CE]  cannot  find  symbol  KILL_LIVE  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  KILL_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  KILL_LIVE;	  return    MAJBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  KILL_LIVE	9	None	replace
170	[BUG]  [BUGGY]  return  NO_VALID_NUMBER;  [CE]  cannot  find  symbol  NO_VALID_NUMBER  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  NO_VALID_NUMBER;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  NO_VALID_NUMBER;	  return    MAJBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  NO_VALID_NUMBER	9	None	replace
171	[BUG]  [BUGGY]  return  NO_VALID_MOVED;  [CE]  cannot  find  symbol  NO_VALID_MOVED  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  NO_VALID_MOVED;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  NO_VALID_MOVED;	  return    MAJBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  NO_VALID_MOVED	9	None	replace
172	[BUG]  [BUGGY]  return  INVALID;  [CE]  cannot  find  symbol  INVALID  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  INVALID;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  INVALID;	  return    MAJBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  INVALID	9	None	replace
173	[BUG]  [BUGGY]  return  state.getRemovableAssignmentsElimination()  /  1;  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignmentsElimination()  /  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignmentsElimination()  /  1;	  return    state.getRemovableAssignmentsElimination()    +    1;    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
174	[BUG]  [BUGGY]  return  n.getRemovableAssignmentsElimination()  +  1;  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  n.getRemovableAssignmentsElimination()  +  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n.getRemovableAssignmentsElimination()  +  1;	  return    state.getRemovableAssignmentsElimination()    +    1;    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
175	[BUG]  [BUGGY]  return  state.getRemovableAssignmentsElimination(),  n  +  1;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignmentsElimination(),  n  +  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignmentsElimination(),  n  +  1;	  return    state.getRemovableAssignmentsElimination()    +    1;    	non-compiled	[CE]  ';'  expected	35	None	replace
176	[BUG]  [BUGGY]  return  state.getRemovableAssignmentsElimination()  -  1;  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignmentsElimination()  -  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignmentsElimination()  -  1;	  return    state.getRemovableAssignmentsElimination()    +    1;    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
177	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable  +  1);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable  +  1);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable  +  1);	  return    state    &&    isVariableReadBeforeKill(child.getString()    +    1);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	61	None	replace
178	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString()  +  1,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString()  +  1,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString()  +  1,  variable);	  return    state    &&    isVariableReadBeforeKill(child.getString()    +    1);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	61	None	replace
179	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getString(),  state  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getString(),  state  +  1);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child.getString(),  state  +  1);	  return    state    &&    isVariableReadBeforeKill(child.getString()    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	61	None	replace
180	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable.getString()  +  1);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable.getString()  +  1);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable.getString()  +  1);	  return    state    &&    isVariableReadBeforeKill(child.getString()    +    1);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
181	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state    ==    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	21	None	replace
182	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state    ==    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	21	None	replace
183	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state    ==    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	21	None	replace
184	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  READ);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  READ);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  READ);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state    ==    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	21	None	replace
185	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  1);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  1);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  1);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state    ==    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	21	None	replace
186	[BUG]  [BUGGY]  return  State.KILL;  [CE]  cannot  find  symbol  State  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.KILL;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.KILL;	  return    MAIBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  State	10	None	replace
187	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(n.getString(),  variable,  child);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(n.getString(),  variable,  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(n.getString(),  variable,  child);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	53	None	replace
188	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  n,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  n,  MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  n,  MAYBE_LIVE);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	53	None	replace
189	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getString(),  variable,  n,  state);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getString(),  variable,  n,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child.getString(),  variable,  n,  state);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	53	None	replace
190	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  n,  MAXBE_LIVE);  [CE]  cannot  find  symbol  MAXBE_LIVE  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  n,  MAXBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  n,  MAXBE_LIVE);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  MAXBE_LIVE	53	None	replace
191	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  n,  MILL_LIVE);  [CE]  cannot  find  symbol  MILL_LIVE  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  n,  MILL_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  n,  MILL_LIVE);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  MILL_LIVE	53	None	replace
192	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  n,  MOVE_LIVE);  [CE]  cannot  find  symbol  MOVE_LIVE  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  n,  MOVE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  n,  MOVE_LIVE);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  MOVE_LIVE	53	None	replace
193	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  n,  MOVE_SECOND);  [CE]  cannot  find  symbol  MOVE_SECOND  [FE]                                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  n,  MOVE_SECOND);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  n,  MOVE_SECOND);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  MOVE_SECOND	53	None	replace
194	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          n.removeChild(child);  n.removeChild(child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	                n.removeChild(child);    n.removeChild(child);	  	compilable	  [FE]  RuntimeException  	172	61	add
195	[BUG]  [BUGGY]          n.removeChild(child);  n.removeChild(child);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          n.removeChild(child);  n.removeChild(child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                n.removeChild(child);    n.removeChild(child);	  	compilable	  [FE]  RuntimeException  	172	61	add
196	[BUG]  [BUGGY]          n.removeChild(child);  n.removeChild(child);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          n.removeChild(child);  n.removeChild(child);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                n.removeChild(child);    n.removeChild(child);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  state  =  isVariableReadBeforeKill(child,  variable);  }	  	non-compiled	[CE]  illegal  start  of  type	172	None	add
197	[BUG]  [BUGGY]          n.removeChild(child);  n.removeChild(child);  }  else  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          n.removeChild(child);  n.removeChild(child);  }  else  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                n.removeChild(child);    n.removeChild(child);  }  else  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  state  =  isVariableReadBeforeKill(child,  variable);  }	  	non-compiled	[CE]  illegal  start  of  type	172	None	add
198	[BUG]  [BUGGY]          n.removeChild(child);  n.removeChild(child);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          n.removeChild(child);  n.removeChild(child);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                n.removeChild(child);    n.removeChild(child);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  state  =  isVariableReadBeforeKill(child,  variable);  }	  	non-compiled	[CE]  illegal  start  of  type	172	None	add
199	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]            AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          n.removeChild(child);  n.removeChild(child);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	                n.removeChild(child);    n.removeChild(child);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  state  =  isVariableReadBeforeKill(child,  variable);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	172	61	add
200	[BUG]  [BUGGY]          n.removeChild(child);  n.removeChild(child);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  state  =  isVariableReadBeforeKill(child,  variable);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]            AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          n.removeChild(child);  n.removeChild(child);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                n.removeChild(child);    n.removeChild(child);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  state  =  isVariableReadBeforeKill(child,  variable);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	172	61	add
201	[BUG]  [BUGGY]          n.removeChild(child);  n.removeChild(child);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  state  =  isVariableReadBeforeKill(parent,  variable);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          n.removeChild(child);  n.removeChild(child);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  state  =  isVariableReadBeforeKill(parent,  variable);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                n.removeChild(child);    n.removeChild(child);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  state  =  isVariableReadBeforeKill(parent,  variable);  }	  	non-compiled	[CE]  illegal  start  of  type	172	None	add
202	[BUG]  [BUGGY]          n.removeChild(child);  n.removeChild(child);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  State  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          n.removeChild(child);  n.removeChild(child);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  State  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                n.removeChild(child);    n.removeChild(child);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  State  state  =  isVariableReadBeforeKill(child,  variable);  }	  	non-compiled	[CE]  illegal  start  of  type	172	None	add
203	[BUG]  [BUGGY]  return  child.getValue(),  state;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  child.getValue(),  state;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  child.getValue(),  state;	  return    child.getValue();    	non-compiled	[CE]  ';'  expected	40	None	replace
204	[BUG]  [BUGGY]  return  child.getValue()  +  state;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  child.getValue()  +  state;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  child.getValue()  +  state;	  return    child.getValue();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
205	[BUG]  [BUGGY]  return  child.getValue()  -  state;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  child.getValue()  -  state;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  child.getValue()  -  state;	  return    child.getValue();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
206	[BUG]  [BUGGY]  return  child.getValue()  +  1;  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  child.getValue()  +  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  child.getValue()  +  1;	  return    child.getValue();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
207	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >=  2;  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >=  2;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >=  2;	  return    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >>    1;    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
208	[BUG]  [BUGGY]  return  n.getType()  ==  Token.CALL  &&  child.getChildCount()  >  1;  [CE]  incompatible  types  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  n.getType()  ==  Token.CALL  &&  child.getChildCount()  >  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n.getType()  ==  Token.CALL  &&  child.getChildCount()  >  1;	  return    state.getType()    ==    Token.CALL    &&    child.getChildCount()    >    1;    	non-compiled	[CE]  incompatible  types	5	None	replace
209	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  &&  child.getChildCount()  >  2;  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()  ==  Token.CALL  &&  child.getChildCount()  >  2;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  &&  child.getChildCount()  >  2;	  return    state.getType()    ==    Token.CALL    &&    child.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
210	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  &&  child.getChildCount()  >=  1;  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()  ==  Token.CALL  &&  child.getChildCount()  >=  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  &&  child.getChildCount()  >=  1;	  return    state.getType()    ==    Token.CALL    &&    child.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
211	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  ||  child.getChildCount()  >  1;  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()  ==  Token.CALL  ||  child.getChildCount()  >  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  ||  child.getChildCount()  >  1;	  return    state.getType()    ==    Token.CALL    &&    child.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
212	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable.getFirstChild(),  child);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable.getFirstChild(),  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable.getFirstChild(),  child);	  return    state    &&    isVariableReadBeforeKill(child,    n.getFirstChild(),    variable);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
213	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child,  variable.getFirstChild(),  state);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child,  variable.getFirstChild(),  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child,  variable.getFirstChild(),  state);	  return    state    &&    isVariableReadBeforeKill(child,    n.getFirstChild(),    variable);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
214	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable.getFirstChild(),  n);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable.getFirstChild(),  n);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable.getFirstChild(),  n);	  return    state    &&    isVariableReadBeforeKill(child,    n.getFirstChild(),    variable);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
215	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(variable,  n.getFirstChild(),  child);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(variable,  n.getFirstChild(),  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(variable,  n.getFirstChild(),  child);	  return    state    &&    isVariableReadBeforeKill(child,    n.getFirstChild(),    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	90	None	replace
216	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable.getFirstChild(),  state);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable.getFirstChild(),  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable.getFirstChild(),  state);	  return    state    &&    isVariableReadBeforeKill(child,    n.getFirstChild(),    variable);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
217	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n,  child.getFirstChild(),  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n,  child.getFirstChild(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(n,  child.getFirstChild(),  variable);	  return    state    &&    isVariableReadBeforeKill(child,    n.getFirstChild(),    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	90	None	replace
218	[BUG]  [BUGGY]  return  n.getType()!=  Token.CALL  &&  state.getChildCount()  >  1;  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  n.getType()!=  Token.CALL  &&  state.getChildCount()  >  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n.getType()!=  Token.CALL  &&  state.getChildCount()  >  1;	  return    state.getType()!=    Token.CALL    &&    state.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
219	[BUG]  [BUGGY]  return  state.getType()  >=  Token.CALL  &&  state.getChildCount()  >  1;  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()  >=  Token.CALL  &&  state.getChildCount()  >  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  >=  Token.CALL  &&  state.getChildCount()  >  1;	  return    state.getType()!=    Token.CALL    &&    state.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
220	[BUG]  [BUGGY]  return  state.getType()!=  Token.CALL  &&  state.getChildCount()  >  2;  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()!=  Token.CALL  &&  state.getChildCount()  >  2;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()!=  Token.CALL  &&  state.getChildCount()  >  2;	  return    state.getType()!=    Token.CALL    &&    state.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
221	[BUG]  [BUGGY]  return  state.getType()!=  Token.CALL  ||  state.getChildCount()  >  1;  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()!=  Token.CALL  ||  state.getChildCount()  >  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()!=  Token.CALL  ||  state.getChildCount()  >  1;	  return    state.getType()!=    Token.CALL    &&    state.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
222	[BUG]  [BUGGY]  removeAssignment(child.getRemovableAssignment());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  removeAssignment(child.getRemovableAssignment());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	removeAssignment(child.getRemovableAssignment());	  return    matchRemovableAssignments.getRemovableAssignment();    	non-compiled	[CE]  cannot  find  symbol	192	None	replace
223	[BUG]  [BUGGY]  removableAssignments.getRemovableAssignment();  [CE]  cannot  find  symbol  removableAssignments  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  removableAssignments.getRemovableAssignment();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	removableAssignments.getRemovableAssignment();	  return    matchRemovableAssignments.getRemovableAssignment();    	non-compiled	[CE]  cannot  find  symbol  removableAssignments	192	None	replace
224	[BUG]  [BUGGY]  Return  state.getRemovableAssignment();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Return  state.getRemovableAssignment();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Return  state.getRemovableAssignment();	  return    matchRemovableAssignments.getRemovableAssignment();    	non-compiled	[CE]  ';'  expected	192	None	replace
225	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  VariableLiveness  state  =  isVariableReadBeforeKill(n.getFirstChild(),  variable);  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  VariableLiveness  state  =  isVariableReadBeforeKill(n.getFirstChild(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(n.getFirstChild(),    variable);    VariableLiveness  state  =  isVariableReadBeforeKill(n.getFirstChild(),  variable);	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	155	None	add
226	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  VariableLiveness  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  VariableLiveness  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(n.getFirstChild(),    variable);    VariableLiveness  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);	  	non-compiled	[CE]  not  a  statement	155	None	add
227	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  VariableLiveness  result  =  isVariableReadBeforeKill(n.getFirstChild(),  variable);  [CE]  unreachable  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  VariableLiveness  result  =  isVariableReadBeforeKill(n.getFirstChild(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(n.getFirstChild(),    variable);    VariableLiveness  result  =  isVariableReadBeforeKill(n.getFirstChild(),  variable);	  	non-compiled	[CE]  unreachable  statement	155	None	add
228	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  [CE]  unreachable  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(n.getFirstChild(),    variable);    return  isVariableReadBeforeKill(n.getFirstChild(),  variable);	  	non-compiled	[CE]  unreachable  statement	155	None	add
229	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  State  state  =  isVariableReadBeforeKill(n.getFirstChild(),  variable);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  State  state  =  isVariableReadBeforeKill(n.getFirstChild(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(n.getFirstChild(),    variable);    State  state  =  isVariableReadBeforeKill(n.getFirstChild(),  variable);	  	non-compiled	[CE]  cannot  find  symbol	155	None	add
230	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  Node  n  =  child.getFirstChild();  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  [CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  Node  n  =  child.getFirstChild();  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(n.getFirstChild(),    variable);    Node  n  =  child.getFirstChild();  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	155	None	add
231	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  Node  n  =  child.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  Node  n  =  child.getFirstChild();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(n.getFirstChild(),    variable);    Node  n  =  child.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	155	None	add
232	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable);  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(n.getFirstChild(),    variable);    VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable);	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	155	None	add
233	[BUG]  [BUGGY]  return  state.getRemovableAssigns(),  child,  variable;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssigns(),  child,  variable;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssigns(),  child,  variable;	  return    state.getRemovableAssigns(),    child;    	non-compiled	[CE]  ';'  expected	132	None	replace
234	[BUG]  [BUGGY]  return  state.getRemovableAssigns(),  child,  VariableLiveness.MAYBE_LIVE;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssigns(),  child,  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssigns(),  child,  VariableLiveness.MAYBE_LIVE;	  return    state.getRemovableAssigns(),    child;    	non-compiled	[CE]  ';'  expected	132	None	replace
235	[BUG]  [BUGGY]  return  state.getMatchRemovableAssigns(),  child;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getMatchRemovableAssigns(),  child;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getMatchRemovableAssigns(),  child;	  return    state.getRemovableAssigns(),    child;    	non-compiled	[CE]  ';'  expected	132	None	replace
236	[BUG]  [BUGGY]  return  state.getRemovableAssigns(),  child  +  1;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssigns(),  child  +  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssigns(),  child  +  1;	  return    state.getRemovableAssigns(),    child;    	non-compiled	[CE]  ';'  expected	132	None	replace
237	[BUG]  [BUGGY]  return  state.getRemoveAssigns(),  child,  variable;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemoveAssigns(),  child,  variable;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemoveAssigns(),  child,  variable;	  return    state.getRemovableAssigns(),    child;    	non-compiled	[CE]  ';'  expected	132	None	replace
238	[BUG]  [BUGGY]  return  state.getRemovableAssigns(),  parent;  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssigns(),  parent;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssigns(),  parent;	  return    state.getRemovableAssigns(),    child;    	non-compiled	[CE]  ';'  expected	132	None	replace
239	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n.getString(),  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n.getString(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(n.getString(),  variable);	  return    isVariableReadBeforeKill(child.getString(),    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	63	None	replace
240	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child,  state.getString(),  variable);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child,  state.getString(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child,  state.getString(),  variable);	  return    isVariableReadBeforeKill(child.getString(),    variable);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
241	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(variable.getString(),  child);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(variable.getString(),  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(variable.getString(),  child);	  return    isVariableReadBeforeKill(child.getString(),    variable);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
242	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getString(),  variable,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getString(),  variable,  null);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child.getString(),  variable,  null);	  return    isVariableReadBeforeKill(child.getString(),    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	63	None	replace
243	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getString(),  variable,  STRING);  [CE]  cannot  find  symbol  STRING  [FE]                                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getString(),  variable,  STRING);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child.getString(),  variable,  STRING);	  return    isVariableReadBeforeKill(child.getString(),    variable);    	non-compiled	[CE]  cannot  find  symbol  STRING	63	None	replace
244	[BUG]  [BUGGY]  return  state.getType()!=  Token.CALL  &&  state.getChildCount()  >  1)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()!=  Token.CALL  &&  state.getChildCount()  >  1)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()!=  Token.CALL  &&  state.getChildCount()  >  1)  {	  return    state.getType()    ==    Token.CALL    ||    state.getChildCount()    >    1)    {    	non-compiled	[CE]  ';'  expected	47	None	replace
245	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  ||  state.getChildCount()  ==  1)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()  ==  Token.CALL  ||  state.getChildCount()  ==  1)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  ||  state.getChildCount()  ==  1)  {	  return    state.getType()    ==    Token.CALL    ||    state.getChildCount()    >    1)    {    	non-compiled	[CE]  ';'  expected	47	None	replace
246	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  ||  state.getChildCount()!=  1)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()  ==  Token.CALL  ||  state.getChildCount()!=  1)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  ||  state.getChildCount()!=  1)  {	  return    state.getType()    ==    Token.CALL    ||    state.getChildCount()    >    1)    {    	non-compiled	[CE]  ';'  expected	47	None	replace
247	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  ||  state.getChildCount()  <  1)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()  ==  Token.CALL  ||  state.getChildCount()  <  1)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  ||  state.getChildCount()  <  1)  {	  return    state.getType()    ==    Token.CALL    ||    state.getChildCount()    >    1)    {    	non-compiled	[CE]  ';'  expected	47	None	replace
248	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  ||  state.getChildCount()  >=  1)  {  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()  ==  Token.CALL  ||  state.getChildCount()  >=  1)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  ||  state.getChildCount()  >=  1)  {	  return    state.getType()    ==    Token.CALL    ||    state.getChildCount()    >    1)    {    	non-compiled	[CE]  ';'  expected	47	None	replace
249	[BUG]  [BUGGY]  return  state.getRemovableAssigns(),  variable);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssigns(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssigns(),  variable);	  return    state.getRemovableAssigns(),    child);    	non-compiled	[CE]  ';'  expected	131	None	replace
250	[BUG]  [BUGGY]  return  state.getRemovableAssigns(),  child,  variable);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssigns(),  child,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssigns(),  child,  variable);	  return    state.getRemovableAssigns(),    child);    	non-compiled	[CE]  ';'  expected	131	None	replace
251	[BUG]  [BUGGY]  return  state.getMatchRemovableAssigns(),  child);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getMatchRemovableAssigns(),  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getMatchRemovableAssigns(),  child);	  return    state.getRemovableAssigns(),    child);    	non-compiled	[CE]  ';'  expected	131	None	replace
252	[BUG]  [BUGGY]  return  state.getRemoveAssigns(),  child,  variable);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemoveAssigns(),  child,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemoveAssigns(),  child,  variable);	  return    state.getRemovableAssigns(),    child);    	non-compiled	[CE]  ';'  expected	131	None	replace
253	[BUG]  [BUGGY]  return  state.getRemovableAssigns(),  parent);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssigns(),  parent);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssigns(),  parent);	  return    state.getRemovableAssigns(),    child);    	non-compiled	[CE]  ';'  expected	131	None	replace
254	[BUG]  [BUGGY]  return  state.invoke(child,  variable,  KILL);  [CE]  cannot  find  symbol  KILL  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(child,  variable,  KILL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(child,  variable,  KILL);	  return    state.invoke(n,    variable,    MAYBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  KILL	76	None	replace
255	[BUG]  [BUGGY]  return  state.invoke(n,  variable,  HILL);  [CE]  cannot  find  symbol  HILL  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(n,  variable,  HILL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(n,  variable,  HILL);	  return    state.invoke(n,    variable,    MAYBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  HILL	76	None	replace
256	[BUG]  [BUGGY]  return  state.invoke(n,  variable,  KILL_LIVE);  [CE]  cannot  find  symbol  KILL_LIVE  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(n,  variable,  KILL_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(n,  variable,  KILL_LIVE);	  return    state.invoke(n,    variable,    MAYBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  KILL_LIVE	76	None	replace
257	[BUG]  [BUGGY]  return  state.invoke(n,  variable,  VARIABLE_LIVE);  [CE]  cannot  find  symbol  VARIABLE_LIVE  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(n,  variable,  VARIABLE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(n,  variable,  VARIABLE_LIVE);	  return    state.invoke(n,    variable,    MAYBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  VARIABLE_LIVE	76	None	replace
258	[BUG]  [BUGGY]  return  state.invoke(n,  variable,  VAR_LIVE);  [CE]  cannot  find  symbol  VAR_LIVE  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(n,  variable,  VAR_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(n,  variable,  VAR_LIVE);	  return    state.invoke(n,    variable,    MAYBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  VAR_LIVE	76	None	replace
259	[BUG]  [BUGGY]  return  matchRemovableAssigns.getRemovableAssigns(),  state;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  matchRemovableAssigns.getRemovableAssigns(),  state;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  matchRemovableAssigns.getRemovableAssigns(),  state;	  return    matchRemovableAssigns.getRemovableAssigns();    	non-compiled	[CE]  ';'  expected	86	None	replace
260	[BUG]  [BUGGY]  return  liveness.getRemovableAssigns();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  liveness.getRemovableAssigns();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  liveness.getRemovableAssigns();	  return    matchRemovableAssigns.getRemovableAssigns();    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
261	[BUG]  [BUGGY]  return  matchRemovableAssigns.getRemovableAssigns(),  state);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  matchRemovableAssigns.getRemovableAssigns(),  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  matchRemovableAssigns.getRemovableAssigns(),  state);	  return    matchRemovableAssigns.getRemovableAssigns();    	non-compiled	[CE]  ';'  expected	86	None	replace
262	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(n.getFirstChild(),  variable,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(n.getFirstChild(),  variable,  null);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(n.getFirstChild(),  variable,  null);	  return    state    &&    isVariableReadBeforeKill(child.getFirstChild(),    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	93	None	replace
263	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  KILL_LIVE,  null);  [CE]  cannot  find  symbol  KILL_LIVE  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  KILL_LIVE,  null);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  KILL_LIVE,  null);	  return    state    &&    isVariableReadBeforeKill(child.getFirstChild(),    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  KILL_LIVE	93	None	replace
264	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  variable,  state,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  variable,  state,  null);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child.getFirstChild(),  variable,  state,  null);	  return    state    &&    isVariableReadBeforeKill(child.getFirstChild(),    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	93	None	replace
265	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  null,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  null,  liveness);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  null,  liveness);	  return    state    &&    isVariableReadBeforeKill(child.getFirstChild(),    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	93	None	replace
266	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  KILL_LIVE);  [CE]  cannot  find  symbol  KILL_LIVE  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  KILL_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  KILL_LIVE);	  return    state    &&    isVariableReadBeforeKill(child.getFirstChild(),    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  KILL_LIVE	93	None	replace
267	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  null,  mayHaveSideEffects);  [CE]  cannot  find  symbol  mayHaveSideEffects  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  null,  mayHaveSideEffects);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  null,  mayHaveSideEffects);	  return    state    &&    isVariableReadBeforeKill(child.getFirstChild(),    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  mayHaveSideEffects	93	None	replace
268	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n.getFirstChild(),  variable,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n.getFirstChild(),  variable,  null);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(n.getFirstChild(),  variable,  null);	  return    state    &&    isVariableReadBeforeKill(child.getFirstChild(),    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	93	None	replace
269	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getString(),  variable,  state,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getString(),  variable,  state,  liveness);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child.getString(),  variable,  state,  liveness);	  return    isVariableReadBeforeKill(child.getString(),    variable,    state);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	57	None	replace
270	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getString(),  variable,  state,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getString(),  variable,  state,  MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child.getString(),  variable,  state,  MAYBE_LIVE);	  return    isVariableReadBeforeKill(child.getString(),    variable,    state);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	57	None	replace
271	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getString(),  variable,  state,  MILLBE_LIVE);  [CE]  cannot  find  symbol  MILLBE_LIVE  [FE]                                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getString(),  variable,  state,  MILLBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child.getString(),  variable,  state,  MILLBE_LIVE);	  return    isVariableReadBeforeKill(child.getString(),    variable,    state);    	non-compiled	[CE]  cannot  find  symbol  MILLBE_LIVE	57	None	replace
272	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getString(),  variable,  state,  REGEXP);  [CE]  cannot  find  symbol  REGEXP  [FE]                                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getString(),  variable,  state,  REGEXP);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child.getString(),  variable,  state,  REGEXP);	  return    isVariableReadBeforeKill(child.getString(),    variable,    state);    	non-compiled	[CE]  cannot  find  symbol  REGEXP	57	None	replace
273	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getString(),  variable,  state,  MAXBE_LIVE);  [CE]  cannot  find  symbol  MAXBE_LIVE  [FE]                                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getString(),  variable,  state,  MAXBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child.getString(),  variable,  state,  MAXBE_LIVE);	  return    isVariableReadBeforeKill(child.getString(),    variable,    state);    	non-compiled	[CE]  cannot  find  symbol  MAXBE_LIVE	57	None	replace
274	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child,  variable.getString(),  state);  [CE]  cannot  find  symbol  [FE]                                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child,  variable.getString(),  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child,  variable.getString(),  state);	  return    isVariableReadBeforeKill(child.getString(),    variable,    state);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
275	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getString(),  variable,  state,  MOVE_LIVE);  [CE]  cannot  find  symbol  MOVE_LIVE  [FE]                                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getString(),  variable,  state,  MOVE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child.getString(),  variable,  state,  MOVE_LIVE);	  return    isVariableReadBeforeKill(child.getString(),    variable,    state);    	non-compiled	[CE]  cannot  find  symbol  MOVE_LIVE	57	None	replace
276	[BUG]  [BUGGY]  Return  n.getRemovableAssignment();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Return  n.getRemovableAssignment();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Return  n.getRemovableAssignment();	  return    matchRemovableAssignmentsElimination.getRemovableAssignment();    	non-compiled	[CE]  ';'  expected	67	None	replace
277	[BUG]  [BUGGY]  return  parent.getRemovableAssignment();  [CE]  cannot  find  symbol  parent  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  parent.getRemovableAssignment();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  parent.getRemovableAssignment();	  return    matchRemovableAssignmentsElimination.getRemovableAssignment();    	non-compiled	[CE]  cannot  find  symbol  parent	67	None	replace
278	[BUG]  [BUGGY]  return  state.getRemovableAssignment(),  KILL;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignment(),  KILL;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignment(),  KILL;	  return    state.getRemovableAssignment(),    variable;    	non-compiled	[CE]  ';'  expected	66	None	replace
279	[BUG]  [BUGGY]  return  state.getMatchRemovableAssignment(),  variable;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getMatchRemovableAssignment(),  variable;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getMatchRemovableAssignment(),  variable;	  return    state.getRemovableAssignment(),    variable;    	non-compiled	[CE]  ';'  expected	66	None	replace
280	[BUG]  [BUGGY]  return  state.getRemovableAssignment(),  variable  +  1;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignment(),  variable  +  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignment(),  variable  +  1;	  return    state.getRemovableAssignment(),    variable;    	non-compiled	[CE]  ';'  expected	66	None	replace
281	[BUG]  [BUGGY]  return  state.getRemoveAssignment(),  child;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemoveAssignment(),  child;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemoveAssignment(),  child;	  return    state.getRemovableAssignment(),    variable;    	non-compiled	[CE]  ';'  expected	66	None	replace
282	[BUG]  [BUGGY]  return  state.getVariableAssignment(),  variable;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getVariableAssignment(),  variable;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getVariableAssignment(),  variable;	  return    state.getRemovableAssignment(),    variable;    	non-compiled	[CE]  ';'  expected	66	None	replace
283	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  n.getString());  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  n.getString());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  n.getString());	  return    state    &&    isVariableReadBeforeKill(child,    variable.getString());    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	58	None	replace
284	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable.toString());  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable.toString());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable.toString());	  return    state    &&    isVariableReadBeforeKill(child,    variable.getString());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	58	None	replace
285	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(n,  variable.getString());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(n,  variable.getString());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(n,  variable.getString());	  return    state    &&    isVariableReadBeforeKill(child,    variable.getString());    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
286	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable.getName());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable.getName());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable.getName());	  return    state    &&    isVariableReadBeforeKill(child,    variable.getString());    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
287	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable.getQualifiedName());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable.getQualifiedName());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable.getQualifiedName());	  return    state    &&    isVariableReadBeforeKill(child,    variable.getString());    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
288	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable.getValue());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable.getValue());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable.getValue());	  return    state    &&    isVariableReadBeforeKill(child,    variable.getString());    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
289	[BUG]  [BUGGY]  return  state,  child.getValue()  +  1;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state,  child.getValue()  +  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state,  child.getValue()  +  1;	  return    state,    child.getValue();    	non-compiled	[CE]  ';'  expected	182	None	replace
290	[BUG]  [BUGGY]  return  state,  child.getLastChild();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state,  child.getLastChild();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state,  child.getLastChild();	  return    state,    child.getValue();    	non-compiled	[CE]  ';'  expected	182	None	replace
291	[BUG]  [BUGGY]  return  state,  variable.getValue();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state,  variable.getValue();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state,  variable.getValue();	  return    state,    child.getValue();    	non-compiled	[CE]  ';'  expected	182	None	replace
292	[BUG]  [BUGGY]  return  state,  child.getNext();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state,  child.getNext();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state,  child.getNext();	  return    state,    child.getValue();    	non-compiled	[CE]  ';'  expected	182	None	replace
293	[BUG]  [BUGGY]  return  state,  child.getValue()  -  1;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state,  child.getValue()  -  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state,  child.getValue()  -  1;	  return    state,    child.getValue();    	non-compiled	[CE]  ';'  expected	182	None	replace
294	[BUG]  [BUGGY]  result  =  state.evaluate(VariableLiveness.MAYBE_LIVE,  variable);  [CE]  cannot  find  symbol  result  [FE]            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  result  =  state.evaluate(VariableLiveness.MAYBE_LIVE,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	result  =  state.evaluate(VariableLiveness.MAYBE_LIVE,  variable);	  return    MayBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  result	128	None	replace
295	[BUG]  [BUGGY]  result  =  state.evaluate(VariableLiveness.MAYBE_LIVE);  [CE]  cannot  find  symbol  result  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  result  =  state.evaluate(VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	result  =  state.evaluate(VariableLiveness.MAYBE_LIVE);	  return    MayBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  result	128	None	replace
296	[BUG]  [BUGGY]  result  =  state.evaluate(VariableLiveness.EXPR_RESULT,  variable);  [CE]  cannot  find  symbol  result  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  result  =  state.evaluate(VariableLiveness.EXPR_RESULT,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	result  =  state.evaluate(VariableLiveness.EXPR_RESULT,  variable);	  return    MayBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  result	128	None	replace
297	[BUG]  [BUGGY]  result  =  state.evaluate(VariableLiveness.EXPR_RESULT);  [CE]  cannot  find  symbol  result  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  result  =  state.evaluate(VariableLiveness.EXPR_RESULT);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	result  =  state.evaluate(VariableLiveness.EXPR_RESULT);	  return    MayBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  result	128	None	replace
298	[BUG]  [BUGGY]  result  =  state.evaluate(VariableLiveness.MAYBE_LIVE,  n);  [CE]  cannot  find  symbol  result  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  result  =  state.evaluate(VariableLiveness.MAYBE_LIVE,  n);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	result  =  state.evaluate(VariableLiveness.MAYBE_LIVE,  n);	  return    MayBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  result	128	None	replace
299	[BUG]  [BUGGY]  return  state.getRemovableAssigns()  &&  state.getRemovableAssigns();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssigns()  &&  state.getRemovableAssigns();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssigns()  &&  state.getRemovableAssigns();	  return    state.getRemovableAssigns()    ||    state.getRemovableAssigns();    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
300	[BUG]  [BUGGY]  return  n.getRemovableAssigns()  ||  state.getRemovableAssigns();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  n.getRemovableAssigns()  ||  state.getRemovableAssigns();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n.getRemovableAssigns()  ||  state.getRemovableAssigns();	  return    state.getRemovableAssigns()    ||    state.getRemovableAssigns();    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
301	[BUG]  [BUGGY]  return  child.getRemovableAssigns()  ||  state.getRemovableAssigns();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  child.getRemovableAssigns()  ||  state.getRemovableAssigns();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  child.getRemovableAssigns()  ||  state.getRemovableAssigns();	  return    state.getRemovableAssigns()    ||    state.getRemovableAssigns();    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
302	[BUG]  [BUGGY]  return  state.getRemovableAssigns()  /  ||  state.getRemovableAssigns();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssigns()  /  ||  state.getRemovableAssigns();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssigns()  /  ||  state.getRemovableAssigns();	  return    state.getRemovableAssigns()    ||    state.getRemovableAssigns();    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
303	[BUG]  [BUGGY]  return  state.getRemovableAssigns()  /|  state.getRemovableAssigns();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssigns()  /|  state.getRemovableAssigns();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssigns()  /|  state.getRemovableAssigns();	  return    state.getRemovableAssigns()    ||    state.getRemovableAssigns();    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
304	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(n,  variable.getFirstChild(),  child);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(n,  variable.getFirstChild(),  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(n,  variable.getFirstChild(),  child);	  return    state    &&    isVariableReadBeforeKill(n,    child.getFirstChild(),    variable);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
305	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n,  child.getFirstChild(),  variable,  state);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n,  child.getFirstChild(),  variable,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(n,  child.getFirstChild(),  variable,  state);	  return    state    &&    isVariableReadBeforeKill(n,    child.getFirstChild(),    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	92	None	replace
306	[BUG]  [BUGGY]  result  =  state.getMask();  [CE]  cannot  find  symbol  result  [FE]            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  result  =  state.getMask();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	result  =  state.getMask();	  return    MAYBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  result	7	None	replace
307	[BUG]  [BUGGY]  result  =  state.getMutableStructure();  [CE]  cannot  find  symbol  result  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  result  =  state.getMutableStructure();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	result  =  state.getMutableStructure();	  return    MAYBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  result	7	None	replace
308	[BUG]  [BUGGY]  result  =  state.getValue();  [CE]  cannot  find  symbol  result  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  result  =  state.getValue();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	result  =  state.getValue();	  return    MAYBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  result	7	None	replace
309	[BUG]  [BUGGY]  result  =  state.getFunctionAssignment();  [CE]  cannot  find  symbol  result  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  result  =  state.getFunctionAssignment();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	result  =  state.getFunctionAssignment();	  return    MAYBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  result	7	None	replace
310	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(child.getFirstChild(),    variable);    return  isVariableReadBeforeKill(child.getFirstChild(),  variable);	  	non-compiled	[CE]  unreachable  statement	94	None	add
311	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable);  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(child.getFirstChild(),    variable);    VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable);	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	94	None	add
312	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  VariableLiveness  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  VariableLiveness  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(child.getFirstChild(),    variable);    VariableLiveness  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);	  	non-compiled	[CE]  not  a  statement	94	None	add
313	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  VariableLiveness  result  =  isVariableReadBeforeKill(child.getFirstChild(),  variable);  [CE]  unreachable  statement  [FE]          RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  VariableLiveness  result  =  isVariableReadBeforeKill(child.getFirstChild(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(child.getFirstChild(),    variable);    VariableLiveness  result  =  isVariableReadBeforeKill(child.getFirstChild(),  variable);	  	non-compiled	[CE]  unreachable  statement	94	None	add
314	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  State  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable);  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  State  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(child.getFirstChild(),    variable);    State  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable);	  	non-compiled	[CE]  cannot  find  symbol	94	None	add
315	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  Node  child  =  n.getFirstChild();  [CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]              RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  Node  child  =  n.getFirstChild();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(child.getFirstChild(),    variable);    Node  child  =  n.getFirstChild();	  	non-compiled	[CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	94	None	add
316	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  return  isVariableReadBeforeKill(child.getLastChild(),  variable);  [CE]  unreachable  statement  [FE]                RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  return  isVariableReadBeforeKill(child.getLastChild(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(child.getFirstChild(),    variable);    return  isVariableReadBeforeKill(child.getLastChild(),  variable);	  	non-compiled	[CE]  unreachable  statement	94	None	add
317	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  Node  child  =  state.getFirstChild();  [CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                  RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  Node  child  =  state.getFirstChild();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(child.getFirstChild(),    variable);    Node  child  =  state.getFirstChild();	  	non-compiled	[CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	94	None	add
318	[BUG]  [BUGGY]  removableAssignments.getRemovableAssignments();  [CE]  cannot  find  symbol  removableAssignments  [FE]            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  removableAssignments.getRemovableAssignments();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	removableAssignments.getRemovableAssignments();	  return    matchRemovableAssignments.getRemovableAssignments();    	non-compiled	[CE]  cannot  find  symbol  removableAssignments	158	None	replace
319	[BUG]  [BUGGY]  Return  state.getRemovableAssignments();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Return  state.getRemovableAssignments();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Return  state.getRemovableAssignments();	  return    matchRemovableAssignments.getRemovableAssignments();    	non-compiled	[CE]  ';'  expected	158	None	replace
320	[BUG]  [BUGGY]  liveness.getRemovableAssignments();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  liveness.getRemovableAssignments();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	liveness.getRemovableAssignments();	  return    matchRemovableAssignments.getRemovableAssignments();    	non-compiled	[CE]  cannot  find  symbol	158	None	replace
321	[BUG]  [BUGGY]  result.getRemovableAssignments();  [CE]  cannot  find  symbol  result  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  result.getRemovableAssignments();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	result.getRemovableAssignments();	  return    matchRemovableAssignments.getRemovableAssignments();    	non-compiled	[CE]  cannot  find  symbol  result	158	None	replace
322	[BUG]  [BUGGY]  return  state  &&  child.getType()  ==  Token.CALL  ||  state.getChildCount()  >  1)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  child.getType()  ==  Token.CALL  ||  state.getChildCount()  >  1)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  child.getType()  ==  Token.CALL  ||  state.getChildCount()  >  1)  {	  return    state    &&    child.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1)    {    	non-compiled	[CE]  ';'  expected	151	None	replace
323	[BUG]  [BUGGY]  return  state  &&  child.getType()  ==  Token.CALL  &&  state.getChildCount()  <  1)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  child.getType()  ==  Token.CALL  &&  state.getChildCount()  <  1)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  child.getType()  ==  Token.CALL  &&  state.getChildCount()  <  1)  {	  return    state    &&    child.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1)    {    	non-compiled	[CE]  ';'  expected	151	None	replace
324	[BUG]  [BUGGY]  return  state  &&  child.getType()  ==  Token.CALL  &&  state.getChildCount()  >=  1)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  child.getType()  ==  Token.CALL  &&  state.getChildCount()  >=  1)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  child.getType()  ==  Token.CALL  &&  state.getChildCount()  >=  1)  {	  return    state    &&    child.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1)    {    	non-compiled	[CE]  ';'  expected	151	None	replace
325	[BUG]  [BUGGY]  return  state  &&  child.getType()  ==  Token.CALL  &&  state.getChildCount()!=  1)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  child.getType()  ==  Token.CALL  &&  state.getChildCount()!=  1)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  child.getType()  ==  Token.CALL  &&  state.getChildCount()!=  1)  {	  return    state    &&    child.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1)    {    	non-compiled	[CE]  ';'  expected	151	None	replace
326	[BUG]  [BUGGY]  return  state  &&  child.getType()  ==  Token.CALL  &&  state.getChildCount()  ==  1)  {  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  child.getType()  ==  Token.CALL  &&  state.getChildCount()  ==  1)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  child.getType()  ==  Token.CALL  &&  state.getChildCount()  ==  1)  {	  return    state    &&    child.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1)    {    	non-compiled	[CE]  ';'  expected	151	None	replace
327	[BUG]  [BUGGY]  return  state  &&  child.getType()  ==  Token.CALL  &&  state.getChildCount()  >  2)  {  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  child.getType()  ==  Token.CALL  &&  state.getChildCount()  >  2)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  child.getType()  ==  Token.CALL  &&  state.getChildCount()  >  2)  {	  return    state    &&    child.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1)    {    	non-compiled	[CE]  ';'  expected	151	None	replace
328	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >  2;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >  2;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >  2;	  return    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
329	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >  3;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >  3;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >  3;	  return    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
330	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  MAJBE_LIVE);  [CE]  cannot  find  symbol  MAJBE_LIVE  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  MAJBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  MAJBE_LIVE);	  return    state    &&    isVariableReadBeforeKill(child,    variable,    MULTIPLE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  MAJBE_LIVE	146	None	replace
331	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.CALL);  Preconditions.checkState(child.getType()  ==  Token.CALL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	                Preconditions.checkState(child.getType()    ==    Token.CALL);    Preconditions.checkState(child.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	165	61	add
332	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.CALL);  Preconditions.checkState(child.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.CALL);  Preconditions.checkState(child.getType()  ==  Token.CALL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.CALL);    Preconditions.checkState(child.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	165	61	add
333	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.CALL);  Preconditions.checkState(child.getType()!=  Token.CALL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	                Preconditions.checkState(child.getType()    ==    Token.CALL);    Preconditions.checkState(child.getType()!=  Token.CALL);	  	compilable	  [FE]  RuntimeException  	165	61	add
334	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.CALL);  Preconditions.checkState(child.getType()!=  Token.CALL);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.CALL);  Preconditions.checkState(child.getType()!=  Token.CALL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.CALL);    Preconditions.checkState(child.getType()!=  Token.CALL);	  	compilable	  [FE]  RuntimeException  	165	61	add
335	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.CALL);  Preconditions.checkState(child.getType()  >=  Token.CALL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	                Preconditions.checkState(child.getType()    ==    Token.CALL);    Preconditions.checkState(child.getType()  >=  Token.CALL);	  	compilable	  [FE]  RuntimeException  	165	61	add
336	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.CALL);  Preconditions.checkState(child.getType()  >=  Token.CALL);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.CALL);  Preconditions.checkState(child.getType()  >=  Token.CALL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.CALL);    Preconditions.checkState(child.getType()  >=  Token.CALL);	  	compilable	  [FE]  RuntimeException  	165	61	add
337	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.CALL);  Preconditions.checkState(child.getType()  >>  Token.CALL);  [CE]  no  suitable  method  found  for  checkState(int)  [FE]          RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.CALL);  Preconditions.checkState(child.getType()  >>  Token.CALL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.CALL);    Preconditions.checkState(child.getType()  >>  Token.CALL);	  	non-compiled	[CE]  no  suitable  method  found  for  checkState(int)	165	None	add
338	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.CALL);  Preconditions.checkState(child.gettype()  ==  Token.CALL);  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.CALL);  Preconditions.checkState(child.gettype()  ==  Token.CALL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.CALL);    Preconditions.checkState(child.gettype()  ==  Token.CALL);	  	non-compiled	[CE]  cannot  find  symbol	165	None	add
339	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.CALL);  Preconditions.checkState(child.getType()  ==  Token.CR);  [CE]  cannot  find  symbol  CR  [FE]              RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.CALL);  Preconditions.checkState(child.getType()  ==  Token.CR);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.CALL);    Preconditions.checkState(child.getType()  ==  Token.CR);	  	non-compiled	[CE]  cannot  find  symbol  CR	165	None	add
340	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.CALL);  Preconditions.checkState(child.getType()  ==  Token.CALL);  }  [CE]  illegal  start  of  type  [FE]                RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.CALL);  Preconditions.checkState(child.getType()  ==  Token.CALL);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.CALL);    Preconditions.checkState(child.getType()  ==  Token.CALL);  }	  	non-compiled	[CE]  illegal  start  of  type	165	None	add
341	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  FUNC(param1  ==  AssertionFailedError  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  FUNC(param1  ==  AssertionFailedError  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  expected:  function  FUNC(param1  ==  AssertionFailedError	          junit.framework.AssertionFailedError:    expected:    function    FUNC(param2    >>    AssertionFailedError    	non-compiled	[CE]  not  a  statement	116	None	replace
342	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  FUNC(param1  [Delete]  AssertionFailedError  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  FUNC(param1  [Delete]  AssertionFailedError  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  expected:  function  FUNC(param1  [Delete]  AssertionFailedError	          junit.framework.AssertionFailedError:    expected:    function    FUNC(param2    >>    AssertionFailedError    	non-compiled	[CE]  not  a  statement	116	None	replace
343	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  FUNC(param1  >=  AssertionFailedError  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  FUNC(param1  >=  AssertionFailedError  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  expected:  function  FUNC(param1  >=  AssertionFailedError	          junit.framework.AssertionFailedError:    expected:    function    FUNC(param2    >>    AssertionFailedError    	non-compiled	[CE]  not  a  statement	116	None	replace
344	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  FUNC(param2  ==  AssertionFailedError  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  FUNC(param2  ==  AssertionFailedError  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  expected:  function  FUNC(param2  ==  AssertionFailedError	          junit.framework.AssertionFailedError:    expected:    function    FUNC(param2    >>    AssertionFailedError    	non-compiled	[CE]  not  a  statement	116	None	replace
345	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  FUNC(param1!=  AssertionFailedError  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  FUNC(param1!=  AssertionFailedError  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  expected:  function  FUNC(param1!=  AssertionFailedError	          junit.framework.AssertionFailedError:    expected:    function    FUNC(param2    >>    AssertionFailedError    	non-compiled	[CE]  not  a  statement	116	None	replace
346	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  child);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  child);	  return    state    &&    isVariableReadBeforeKill(n,    child,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	26	None	replace
347	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  state);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  state);	  return    state    &&    isVariableReadBeforeKill(n,    child,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	26	None	replace
348	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child,  state,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child,  state,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child,  state,  variable);	  return    state    &&    isVariableReadBeforeKill(n,    child,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	26	None	replace
349	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(n,  variable,  child);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(n,  variable,  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(n,  variable,  child);	  return    state    &&    isVariableReadBeforeKill(n,    child,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	26	None	replace
350	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(n,  child,  variable,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(n,  child,  variable,  MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(n,  child,  variable,  MAYBE_LIVE);	  return    state    &&    isVariableReadBeforeKill(n,    child,    variable);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	26	None	replace
351	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(n,  child,  variable,  MAXBE_LIVE);  [CE]  cannot  find  symbol  MAXBE_LIVE  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(n,  child,  variable,  MAXBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(n,  child,  variable,  MAXBE_LIVE);	  return    state    &&    isVariableReadBeforeKill(n,    child,    variable);    	non-compiled	[CE]  cannot  find  symbol  MAXBE_LIVE	26	None	replace
352	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	18	None	replace
353	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	18	None	replace
354	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	18	None	replace
355	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  READ);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  READ);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  READ);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	18	None	replace
356	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  1);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  1);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  1);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	18	None	replace
357	[BUG]  [BUGGY]  return  n.getRemovableAssigns()  ||  state  ==  VariableLiveness.MAYBE_LIVE;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  n.getRemovableAssigns()  ||  state  ==  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n.getRemovableAssigns()  ||  state  ==  VariableLiveness.MAYBE_LIVE;	  return    n.getRemovableAssigns();    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
358	[BUG]  [BUGGY]  return  n.getRemovableAssigns()  ||  state!=  VariableLiveness.MAYBE_LIVE;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  n.getRemovableAssigns()  ||  state!=  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n.getRemovableAssigns()  ||  state!=  VariableLiveness.MAYBE_LIVE;	  return    n.getRemovableAssigns();    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
359	[BUG]  [BUGGY]  return  n.getRemovableAssigns()  +  1;  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  n.getRemovableAssigns()  +  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n.getRemovableAssigns()  +  1;	  return    n.getRemovableAssigns();    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
360	[BUG]  [BUGGY]  return  n.getValueAssignments();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  n.getValueAssignments();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n.getValueAssignments();	  return    state.getValueAssignments();    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
361	[BUG]  [BUGGY]  return  state.getValueAssignments(),  variable;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValueAssignments(),  variable;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValueAssignments(),  variable;	  return    state.getValueAssignments();    	non-compiled	[CE]  ';'  expected	126	None	replace
362	[BUG]  [BUGGY]  return  state.getValueAssignments()  ||  state.getValueAssignments();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValueAssignments()  ||  state.getValueAssignments();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValueAssignments()  ||  state.getValueAssignments();	  return    state.getValueAssignments();    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
363	[BUG]  [BUGGY]  return  state.getValueAssignments()  +  1;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValueAssignments()  +  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValueAssignments()  +  1;	  return    state.getValueAssignments();    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
364	[BUG]  [BUGGY]  return  state.getValueAssignments()  ||  state.getValueAnalysis();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValueAssignments()  ||  state.getValueAnalysis();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValueAssignments()  ||  state.getValueAnalysis();	  return    state.getValueAssignments();    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
365	[BUG]  [BUGGY]  return  state.getValueAssignments(variable);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValueAssignments(variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValueAssignments(variable);	  return    state.getValueAssignments();    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
366	[BUG]  [BUGGY]  removableAssignmentsElimination.getRemovableAssignments();  [CE]  cannot  find  symbol  removableAssignmentsElimination  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  removableAssignmentsElimination.getRemovableAssignments();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	removableAssignmentsElimination.getRemovableAssignments();	  return    matchRemovableAssignmentsElimination.getRemovableAssignments();    	non-compiled	[CE]  cannot  find  symbol  removableAssignmentsElimination	102	None	replace
367	[BUG]  [BUGGY]  Return  n.getRemovableAssignments();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Return  n.getRemovableAssignments();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Return  n.getRemovableAssignments();	  return    matchRemovableAssignmentsElimination.getRemovableAssignments();    	non-compiled	[CE]  ';'  expected	102	None	replace
368	[BUG]  [BUGGY]  returns  state.getRemovableAssignments();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  returns  state.getRemovableAssignments();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	returns  state.getRemovableAssignments();	  return    matchRemovableAssignmentsElimination.getRemovableAssignments();    	non-compiled	[CE]  ';'  expected	102	None	replace
369	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  MILL_FOR);  [CE]  cannot  find  symbol  MILL_FOR  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  MILL_FOR);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  MILL_FOR);	  return    state    &&    isVariableReadBeforeKill(child,    variable,    MILL_LIVE);    	non-compiled	[CE]  cannot  find  symbol  MILL_FOR	30	None	replace
370	[BUG]  [BUGGY]  return  state  &&  n  ==  VariableLiveness.MAYBE_LIVE;  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  n  ==  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  n  ==  VariableLiveness.MAYBE_LIVE;	  return    state    ||    n    ==    VariableLiveness.MAYBE_LIVE;    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	106	None	replace
371	[BUG]  [BUGGY]  return  n  ||  state  ==  VariableLiveness.MAYBE_LIVE;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  n  ||  state  ==  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n  ||  state  ==  VariableLiveness.MAYBE_LIVE;	  return    state    ||    n    ==    VariableLiveness.MAYBE_LIVE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	106	None	replace
372	[BUG]  [BUGGY]  return  state  ||  n.getType()  ==  VariableLiveness.MAYBE_LIVE;  [CE]  incomparable  types:  int  and  VariableLiveness  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  ||  n.getType()  ==  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  ||  n.getType()  ==  VariableLiveness.MAYBE_LIVE;	  return    state    ||    n    ==    VariableLiveness.MAYBE_LIVE;    	non-compiled	[CE]  incomparable  types:  int  and  VariableLiveness	106	None	replace
373	[BUG]  [BUGGY]  return  state.invoke(child,  state);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(child,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(child,  state);	  return    state.invoke(n,    child);    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
374	[BUG]  [BUGGY]  return  n.invoke(state,  child);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  n.invoke(state,  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n.invoke(state,  child);	  return    state.invoke(n,    child);    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
375	[BUG]  [BUGGY]  return  state.invoke(n,  child,  variable);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(n,  child,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(n,  child,  variable);	  return    state.invoke(n,    child);    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
376	[BUG]  [BUGGY]  return  state.invoke(parent,  child);  [CE]  cannot  find  symbol  parent  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(parent,  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(parent,  child);	  return    state.invoke(n,    child);    	non-compiled	[CE]  cannot  find  symbol  parent	134	None	replace
377	[BUG]  [BUGGY]  return  state.invoke(n,  module,  child);  [CE]  cannot  find  symbol  module  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(n,  module,  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(n,  module,  child);	  return    state.invoke(n,    child);    	non-compiled	[CE]  cannot  find  symbol  module	134	None	replace
378	[BUG]  [BUGGY]  return  state  &&  variable!=  VariableLiveness.MAYBE_LIVE;  [CE]  incomparable  types:  String  and  VariableLiveness  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  variable!=  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  variable!=  VariableLiveness.MAYBE_LIVE;	  return    state    &&    state!=    VariableLiveness.MAYBE_LIVE;    	non-compiled	[CE]  incomparable  types:  String  and  VariableLiveness	14	None	replace
379	[BUG]  [BUGGY]  return  state  &&  child!=  VariableLiveness.MAYBE_LIVE;  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  child!=  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  child!=  VariableLiveness.MAYBE_LIVE;	  return    state    &&    state!=    VariableLiveness.MAYBE_LIVE;    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	14	None	replace
380	[BUG]  [BUGGY]  return  state  &&  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE;	  return    state    &&    state!=    VariableLiveness.MAYBE_LIVE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	14	None	replace
381	[BUG]  [BUGGY]  return  state  &&  state  >=  VariableLiveness.MAYBE_LIVE;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  state  >=  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state  >=  VariableLiveness.MAYBE_LIVE;	  return    state    &&    state!=    VariableLiveness.MAYBE_LIVE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	14	None	replace
382	[BUG]  [BUGGY]  return  State.READ  &&  state.isRemovableAssignmentsElimination();  [CE]  cannot  find  symbol  State  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.READ  &&  state.isRemovableAssignmentsElimination();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.READ  &&  state.isRemovableAssignmentsElimination();	  return    State.READ;    	non-compiled	[CE]  cannot  find  symbol  State	130	None	replace
383	[BUG]  [BUGGY]  return  State.READ  &&  state.isRemovableAssignment();  [CE]  cannot  find  symbol  State  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.READ  &&  state.isRemovableAssignment();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.READ  &&  state.isRemovableAssignment();	  return    State.READ;    	non-compiled	[CE]  cannot  find  symbol  State	130	None	replace
384	[BUG]  [BUGGY]  return  State.READ  |  State.MAYBE_LIVE;  [CE]  cannot  find  symbol  State  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.READ  |  State.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.READ  |  State.MAYBE_LIVE;	  return    State.READ;    	non-compiled	[CE]  cannot  find  symbol  State	130	None	replace
385	[BUG]  [BUGGY]  return  State.READ  &&  state.isFunctionAssignment();  [CE]  cannot  find  symbol  State  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.READ  &&  state.isFunctionAssignment();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.READ  &&  state.isFunctionAssignment();	  return    State.READ;    	non-compiled	[CE]  cannot  find  symbol  State	130	None	replace
386	[BUG]  [BUGGY]  return  State.READ  &&  state.isFunctionAnalysis();  [CE]  cannot  find  symbol  State  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.READ  &&  state.isFunctionAnalysis();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.READ  &&  state.isFunctionAnalysis();	  return    State.READ;    	non-compiled	[CE]  cannot  find  symbol  State	130	None	replace
387	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(variable,  state.getString());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(variable,  state.getString());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(variable,  state.getString());	  return    state    &&    isVariableReadBeforeKill(variable.getString());    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
388	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  MOVE_FIRST);  [CE]  cannot  find  symbol  MOVE_FIRST  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  MOVE_FIRST);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  MOVE_FIRST);	  return    state    &&    isVariableReadBeforeKill(child,    variable,    MOVE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  MOVE_FIRST	31	None	replace
389	[BUG]  [BUGGY]  return  child.getRemovableAssignments(),  state;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  child.getRemovableAssignments(),  state;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  child.getRemovableAssignments(),  state;	  return    child.getRemovableAssignments();    	non-compiled	[CE]  ';'  expected	103	None	replace
390	[BUG]  [BUGGY]  return  child.getRemovableAssignments()  &&  state!=  VariableLiveness.MAYBE_LIVE;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  child.getRemovableAssignments()  &&  state!=  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  child.getRemovableAssignments()  &&  state!=  VariableLiveness.MAYBE_LIVE;	  return    child.getRemovableAssignments();    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
391	[BUG]  [BUGGY]  return  child.getRemovableAssignments()  &&  state.isVariableReadBeforeKill();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  child.getRemovableAssignments()  &&  state.isVariableReadBeforeKill();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  child.getRemovableAssignments()  &&  state.isVariableReadBeforeKill();	  return    child.getRemovableAssignments();    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
392	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable.getString(),  child);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable.getString(),  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable.getString(),  child);	  return    state    &&    isVariableReadBeforeKill(variable.getString(),    child);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
393	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(variable.getString(),  child,  state);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(variable.getString(),  child,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(variable.getString(),  child,  state);	  return    state    &&    isVariableReadBeforeKill(variable.getString(),    child);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
394	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(variable,  state.getString(),  child);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(variable,  state.getString(),  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(variable,  state.getString(),  child);	  return    state    &&    isVariableReadBeforeKill(variable.getString(),    child);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
395	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(n,  variable.getString(),  child);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(n,  variable.getString(),  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(n,  variable.getString(),  child);	  return    state    &&    isVariableReadBeforeKill(variable.getString(),    child);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
396	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(variable.getString(),  child,  MAYBE_LIVE);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(variable.getString(),  child,  MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(variable.getString(),  child,  MAYBE_LIVE);	  return    state    &&    isVariableReadBeforeKill(variable.getString(),    child);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
397	[BUG]  [BUGGY]  return  state  &&  child.getType()  ==  Token.CALL  &&  state.getChildCount()  >  2;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  child.getType()  ==  Token.CALL  &&  state.getChildCount()  >  2;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  child.getType()  ==  Token.CALL  &&  state.getChildCount()  >  2;	  return    state    &&    child.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	108	None	replace
398	[BUG]  [BUGGY]  return  state  &&  child.getType()  ==  Token.CALL  ||  state.getChildCount()  >  1;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  child.getType()  ==  Token.CALL  ||  state.getChildCount()  >  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  child.getType()  ==  Token.CALL  ||  state.getChildCount()  >  1;	  return    state    &&    child.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	108	None	replace
399	[BUG]  [BUGGY]  return  state  &&  child.getType()  ==  Token.CALL  &&  state.getChildCount()  >  4;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  child.getType()  ==  Token.CALL  &&  state.getChildCount()  >  4;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  child.getType()  ==  Token.CALL  &&  state.getChildCount()  >  4;	  return    state    &&    child.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	108	None	replace
400	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n,  state.getFirstChild(),  variable);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n,  state.getFirstChild(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(n,  state.getFirstChild(),  variable);	  return    isVariableReadBeforeKill(child,    state.getFirstChild(),    variable);    	non-compiled	[CE]  cannot  find  symbol	157	None	replace
401	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child,  n.getFirstChild(),  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child,  n.getFirstChild(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child,  n.getFirstChild(),  variable);	  return    isVariableReadBeforeKill(child,    state.getFirstChild(),    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	157	None	replace
402	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child,  state.getLastChild(),  variable);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child,  state.getLastChild(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child,  state.getLastChild(),  variable);	  return    isVariableReadBeforeKill(child,    state.getFirstChild(),    variable);    	non-compiled	[CE]  cannot  find  symbol	157	None	replace
403	[BUG]  [BUGGY]  return  state.isVariableReadBeforeKill(child,  variable.getFirstChild(),  state);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.isVariableReadBeforeKill(child,  variable.getFirstChild(),  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.isVariableReadBeforeKill(child,  variable.getFirstChild(),  state);	  return    isVariableReadBeforeKill(child,    state.getFirstChild(),    variable);    	non-compiled	[CE]  cannot  find  symbol	157	None	replace
404	[BUG]  [BUGGY]  return  state.getType()  >>  Token.CALL  &&  state.getChildCount()  >  1;  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()  >>  Token.CALL  &&  state.getChildCount()  >  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  >>  Token.CALL  &&  state.getChildCount()  >  1;	  return    state    &&    state.getType()!=    Token.CALL    &&    state.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
405	[BUG]  [BUGGY]  return  state  &&  child.getType()!=  Token.CALL  &&  state.getChildCount()  >  1;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  child.getType()!=  Token.CALL  &&  state.getChildCount()  >  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  child.getType()!=  Token.CALL  &&  state.getChildCount()  >  1;	  return    state    &&    state.getType()!=    Token.CALL    &&    state.getChildCount()    >    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	109	None	replace
406	[BUG]  [BUGGY]  return  state  &&  state.getType()!=  Token.CALL  &&  state.getChildCount()  ==  1)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  state.getType()!=  Token.CALL  &&  state.getChildCount()  ==  1)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state.getType()!=  Token.CALL  &&  state.getChildCount()  ==  1)  {	  return    state    &&    state.getType()!=    Token.CALL    &&    state.getChildCount()    >    1)    {    	non-compiled	[CE]  ';'  expected	150	None	replace
407	[BUG]  [BUGGY]  return  state  ||  state.getType()!=  Token.CALL  &&  state.getChildCount()  >  1)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  ||  state.getType()!=  Token.CALL  &&  state.getChildCount()  >  1)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  ||  state.getType()!=  Token.CALL  &&  state.getChildCount()  >  1)  {	  return    state    &&    state.getType()!=    Token.CALL    &&    state.getChildCount()    >    1)    {    	non-compiled	[CE]  ';'  expected	150	None	replace
408	[BUG]  [BUGGY]  return  state  &&  state.getType()!=  Token.CALL  &&  state.getChildCount()  <  1)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  state.getType()!=  Token.CALL  &&  state.getChildCount()  <  1)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state.getType()!=  Token.CALL  &&  state.getChildCount()  <  1)  {	  return    state    &&    state.getType()!=    Token.CALL    &&    state.getChildCount()    >    1)    {    	non-compiled	[CE]  ';'  expected	150	None	replace
409	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MILLIS);  [CE]  cannot  find  symbol  MILLIS  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MILLIS);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MILLIS);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    VEAD);    	non-compiled	[CE]  cannot  find  symbol  MILLIS	153	None	replace
410	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MISSING);  [CE]  cannot  find  symbol  MISSING  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MISSING);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MISSING);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    VEAD);    	non-compiled	[CE]  cannot  find  symbol  MISSING	153	None	replace
411	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  n.getString());  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  n.getString());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  n.getString());	  return    state    &&    isVariableReadBeforeKill(n.getString());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	59	None	replace
412	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(n.getString()  +  1);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(n.getString()  +  1);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(n.getString()  +  1);	  return    state    &&    isVariableReadBeforeKill(n.getString());    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	59	None	replace
413	[BUG]  [BUGGY]  return  n.getRemovableAssignment()  +  1;  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  n.getRemovableAssignment()  +  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n.getRemovableAssignment()  +  1;	  return    state.getRemovableAssignment()    +    1;    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
414	[BUG]  [BUGGY]  return  state.getRemovableAssignment()  /  1;  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignment()  /  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignment()  /  1;	  return    state.getRemovableAssignment()    +    1;    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
415	[BUG]  [BUGGY]  return  child.getRemovableAssignment()  +  1;  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  child.getRemovableAssignment()  +  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  child.getRemovableAssignment()  +  1;	  return    state.getRemovableAssignment()    +    1;    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
416	[BUG]  [BUGGY]  return  state.getRemovableAssignment(),  n  +  1;  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignment(),  n  +  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignment(),  n  +  1;	  return    state.getRemovableAssignment()    +    1;    	non-compiled	[CE]  ';'  expected	69	None	replace
417	[BUG]  [BUGGY]  return  state.invoke(n,  n);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(n,  n);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(n,  n);	  return    n.invoke(state,    variable);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
418	[BUG]  [BUGGY]  return  state.invoke(n,  null);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(n,  null);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(n,  null);	  return    n.invoke(state,    variable);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
419	[BUG]  [BUGGY]  return  State.invoke(variable,  n);  [CE]  cannot  find  symbol  State  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.invoke(variable,  n);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.invoke(variable,  n);	  return    n.invoke(state,    variable);    	non-compiled	[CE]  cannot  find  symbol  State	80	None	replace
420	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  ==  1)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  ==  1)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  ==  1)  {	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()!=    1)    {    	non-compiled	[CE]  ';'  expected	139	None	replace
421	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  ==  2)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  ==  2)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  ==  2)  {	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()!=    1)    {    	non-compiled	[CE]  ';'  expected	139	None	replace
422	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(n.getFirstChild(),  variable,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(n.getFirstChild(),  variable,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(n.getFirstChild(),  variable,  variable);	  return    state    &&    isVariableReadBeforeKill(child.getFirstChild(),    variable,    state);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	121	None	replace
423	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  KILL);  [CE]  cannot  find  symbol  KILL  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  KILL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  KILL);	  return    state    &&    isVariableReadBeforeKill(child.getFirstChild(),    variable,    state);    	non-compiled	[CE]  cannot  find  symbol  KILL	121	None	replace
424	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  VAR);  [CE]  cannot  find  symbol  VAR  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  VAR);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  VAR);	  return    state    &&    isVariableReadBeforeKill(child.getFirstChild(),    variable,    state);    	non-compiled	[CE]  cannot  find  symbol  VAR	121	None	replace
425	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  VAR_LIVE);  [CE]  cannot  find  symbol  VAR_LIVE  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  VAR_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  VAR_LIVE);	  return    state    &&    isVariableReadBeforeKill(child.getFirstChild(),    variable,    state);    	non-compiled	[CE]  cannot  find  symbol  VAR_LIVE	121	None	replace
426	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  VARIABLE_LIVE);  [CE]  cannot  find  symbol  VARIABLE_LIVE  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  VARIABLE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  VARIABLE_LIVE);	  return    state    &&    isVariableReadBeforeKill(child.getFirstChild(),    variable,    state);    	non-compiled	[CE]  cannot  find  symbol  VARIABLE_LIVE	121	None	replace
427	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  MILL);  [CE]  cannot  find  symbol  MILL  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  MILL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  MILL);	  return    state    &&    isVariableReadBeforeKill(child,    variable,    mayBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  MILL	29	None	replace
428	[BUG]  [BUGGY]  return  state  &&  n.getType()  ==  Token.CALL  &&  state.getChildCount()  >  2;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  n.getType()  ==  Token.CALL  &&  state.getChildCount()  >  2;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  n.getType()  ==  Token.CALL  &&  state.getChildCount()  >  2;	  return    state    &&    n.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	179	None	replace
429	[BUG]  [BUGGY]  return  state  &&  n.getType()  ==  Token.CALL  &&  child.getChildCount()  >  1;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  n.getType()  ==  Token.CALL  &&  child.getChildCount()  >  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  n.getType()  ==  Token.CALL  &&  child.getChildCount()  >  1;	  return    state    &&    n.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	179	None	replace
430	[BUG]  [BUGGY]  return  state  &&  variable  ==  VariableLiveness.MAYBE_LIVE;  [CE]  incomparable  types:  String  and  VariableLiveness  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  variable  ==  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  variable  ==  VariableLiveness.MAYBE_LIVE;	  return    state    ||    variable    ==    VariableLiveness.MAYBE_LIVE;    	non-compiled	[CE]  incomparable  types:  String  and  VariableLiveness	13	None	replace
431	[BUG]  [BUGGY]  return  state  ||  variable  >=  VariableLiveness.MAYBE_LIVE;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  ||  variable  >=  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  ||  variable  >=  VariableLiveness.MAYBE_LIVE;	  return    state    ||    variable    ==    VariableLiveness.MAYBE_LIVE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	13	None	replace
432	[BUG]  [BUGGY]  return  state  ||  variable.equals(VariableLiveness.MAYBE_LIVE);  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  ||  variable.equals(VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  ||  variable.equals(VariableLiveness.MAYBE_LIVE);	  return    state    ||    variable    ==    VariableLiveness.MAYBE_LIVE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	13	None	replace
433	[BUG]  [BUGGY]  return  state  ||  variable  >>  VariableLiveness.MAYBE_LIVE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  ||  variable  >>  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  ||  variable  >>  VariableLiveness.MAYBE_LIVE;	  return    state    ||    variable    ==    VariableLiveness.MAYBE_LIVE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	13	None	replace
434	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  FUNC(param1  ==  AssertionFailedError);  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  FUNC(param1  ==  AssertionFailedError);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  expected:  function  FUNC(param1  ==  AssertionFailedError);	          junit.framework.AssertionFailedError:    expected:    function    FUNC(param2    >>    AssertionFailedError);    	non-compiled	[CE]  not  a  statement	114	None	replace
435	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  FUNC(param2  ==  AssertionFailedError);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  FUNC(param2  ==  AssertionFailedError);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  expected:  function  FUNC(param2  ==  AssertionFailedError);	          junit.framework.AssertionFailedError:    expected:    function    FUNC(param2    >>    AssertionFailedError);    	non-compiled	[CE]  not  a  statement	114	None	replace
436	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  FUNC(param1  >=  AssertionFailedError);  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  FUNC(param1  >=  AssertionFailedError);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  expected:  function  FUNC(param1  >=  AssertionFailedError);	          junit.framework.AssertionFailedError:    expected:    function    FUNC(param2    >>    AssertionFailedError);    	non-compiled	[CE]  not  a  statement	114	None	replace
437	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  FUNC(param1  [Delete]  AssertionFailedError);  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  FUNC(param1  [Delete]  AssertionFailedError);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  expected:  function  FUNC(param1  [Delete]  AssertionFailedError);	          junit.framework.AssertionFailedError:    expected:    function    FUNC(param2    >>    AssertionFailedError);    	non-compiled	[CE]  not  a  statement	114	None	replace
438	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  FUNC(param1!=  AssertionFailedError);  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  FUNC(param1!=  AssertionFailedError);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  expected:  function  FUNC(param1!=  AssertionFailedError);	          junit.framework.AssertionFailedError:    expected:    function    FUNC(param2    >>    AssertionFailedError);    	non-compiled	[CE]  not  a  statement	114	None	replace
439	[BUG]  [BUGGY]  return  n.removeValue();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  n.removeValue();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n.removeValue();	  return    state.removeValue();    	non-compiled	[CE]  cannot  find  symbol	183	None	replace
440	[BUG]  [BUGGY]  return  state.removeValue(),  variable;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.removeValue(),  variable;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.removeValue(),  variable;	  return    state.removeValue();    	non-compiled	[CE]  ';'  expected	183	None	replace
441	[BUG]  [BUGGY]  return  state.removeValue(),  variable);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.removeValue(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.removeValue(),  variable);	  return    state.removeValue();    	non-compiled	[CE]  ';'  expected	183	None	replace
442	[BUG]  [BUGGY]  return  state.removeValue()  -  1;  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.removeValue()  -  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.removeValue()  -  1;	  return    state.removeValue();    	non-compiled	[CE]  cannot  find  symbol	183	None	replace
443	[BUG]  [BUGGY]  return  state.removeValue()  +  1;  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.removeValue()  +  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.removeValue()  +  1;	  return    state.removeValue();    	non-compiled	[CE]  cannot  find  symbol	183	None	replace
444	[BUG]  [BUGGY]  return  state.invoke(compiler,  n,  child);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(compiler,  n,  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(compiler,  n,  child);	  return    state.invoke(n,    variable,    child);    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
445	[BUG]  [BUGGY]  return  state.invoke(child,  variable,  state);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(child,  variable,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(child,  variable,  state);	  return    state.invoke(n,    variable,    child);    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
446	[BUG]  [BUGGY]  return  state.invoke(n,  variable,  child,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(n,  variable,  child,  MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(n,  variable,  child,  MAYBE_LIVE);	  return    state.invoke(n,    variable,    child);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	133	None	replace
447	[BUG]  [BUGGY]  return  child.getRemovableAssigns(),  state;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  child.getRemovableAssigns(),  state;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  child.getRemovableAssigns(),  state;	  return    child.getRemovableAssigns();    	non-compiled	[CE]  ';'  expected	88	None	replace
448	[BUG]  [BUGGY]  return  matchRemovableAssignsElimination.getRemovableAssigns();  [CE]  cannot  find  symbol  matchRemovableAssignsElimination  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  matchRemovableAssignsElimination.getRemovableAssigns();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  matchRemovableAssignsElimination.getRemovableAssigns();	  return    child.getRemovableAssigns();    	non-compiled	[CE]  cannot  find  symbol  matchRemovableAssignsElimination	88	None	replace
449	[BUG]  [BUGGY]  return  child.getRemovableAssigns()  &&  state!=  VariableLiveness.MAYBE_LIVE;  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  child.getRemovableAssigns()  &&  state!=  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  child.getRemovableAssigns()  &&  state!=  VariableLiveness.MAYBE_LIVE;	  return    child.getRemovableAssigns();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
450	[BUG]  [BUGGY]  return  child.getRemovableAssigns()  &&  state  ==  VariableLiveness.MAYBE_LIVE;  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  child.getRemovableAssigns()  &&  state  ==  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  child.getRemovableAssigns()  &&  state  ==  VariableLiveness.MAYBE_LIVE;	  return    child.getRemovableAssigns();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
451	[BUG]  [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()  ==  1;  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()  ==  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()  ==  1;	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >>    1;    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
452	[BUG]  [BUGGY]  return  n.getRemovableAssignments()  ||  state.getRemovableAssignments();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  n.getRemovableAssignments()  ||  state.getRemovableAssignments();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n.getRemovableAssignments()  ||  state.getRemovableAssignments();	  return    n.getRemovableAssignments();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
453	[BUG]  [BUGGY]  return  n.getRemovableAssignments()  ||  state  ==  VariableLiveness.MAYBE_LIVE;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  n.getRemovableAssignments()  ||  state  ==  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n.getRemovableAssignments()  ||  state  ==  VariableLiveness.MAYBE_LIVE;	  return    n.getRemovableAssignments();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
454	[BUG]  [BUGGY]  return  n.getRemovableAssignments()  ||  state!=  VariableLiveness.MAYBE_LIVE;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  n.getRemovableAssignments()  ||  state!=  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n.getRemovableAssignments()  ||  state!=  VariableLiveness.MAYBE_LIVE;	  return    n.getRemovableAssignments();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
455	[BUG]  [BUGGY]  return  n.getRemovableAssignments()  ||  state.isVariableReadBeforeKill();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  n.getRemovableAssignments()  ||  state.isVariableReadBeforeKill();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n.getRemovableAssignments()  ||  state.isVariableReadBeforeKill();	  return    n.getRemovableAssignments();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
456	[BUG]  [BUGGY]  return  state.invoke(variable,  child,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(variable,  child,  MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(variable,  child,  MAYBE_LIVE);	  return    state.invoke(variable,    child);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	79	None	replace
457	[BUG]  [BUGGY]  return  state.invoke(variable,  child,  n);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(variable,  child,  n);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(variable,  child,  n);	  return    state.invoke(variable,    child);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
458	[BUG]  [BUGGY]  return  state.invoke(variable,  child,  MAXBE_LIVE);  [CE]  cannot  find  symbol  MAXBE_LIVE  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(variable,  child,  MAXBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(variable,  child,  MAXBE_LIVE);	  return    state.invoke(variable,    child);    	non-compiled	[CE]  cannot  find  symbol  MAXBE_LIVE	79	None	replace
459	[BUG]  [BUGGY]  return  state.invoke(variable,  KILL);  [CE]  cannot  find  symbol  KILL  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(variable,  KILL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(variable,  KILL);	  return    state.invoke(variable,    child);    	non-compiled	[CE]  cannot  find  symbol  KILL	79	None	replace
460	[BUG]  [BUGGY]  return  state.invoke(variable,  child,  MOVE_LIVE);  [CE]  cannot  find  symbol  MOVE_LIVE  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(variable,  child,  MOVE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(variable,  child,  MOVE_LIVE);	  return    state.invoke(variable,    child);    	non-compiled	[CE]  cannot  find  symbol  MOVE_LIVE	79	None	replace
461	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  HOUR_LEAD);  [CE]  cannot  find  symbol  HOUR_LEAD  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  HOUR_LEAD);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  HOUR_LEAD);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    REGEXP);    	non-compiled	[CE]  cannot  find  symbol  HOUR_LEAD	56	None	replace
462	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  ==  AssertionFailedError);  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  ==  AssertionFailedError);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  ==  AssertionFailedError);	          junit.framework.AssertionFailedError:    Expected:    function    FUNC(param1    >>    AssertionFailedError);    	non-compiled	[CE]  not  a  statement	112	None	replace
463	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  ==  AssertionFailedError,  state);  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  ==  AssertionFailedError,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  ==  AssertionFailedError,  state);	          junit.framework.AssertionFailedError:    Expected:    function    FUNC(param1    >>    AssertionFailedError);    	non-compiled	[CE]  not  a  statement	112	None	replace
464	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  ==  AssertionFailedError);  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  ==  AssertionFailedError);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  ==  AssertionFailedError);	          junit.framework.AssertionFailedError:    Expected:    function    FUNC(param1    >>    AssertionFailedError);    	non-compiled	[CE]  not  a  statement	112	None	replace
465	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable!=  AssertionFailedError);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable!=  AssertionFailedError);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable!=  AssertionFailedError);	          junit.framework.AssertionFailedError:    Expected:    function    FUNC(param1    >>    AssertionFailedError);    	non-compiled	[CE]  not  a  statement	112	None	replace
466	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(parent  ==  AssertionFailedError);  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(parent  ==  AssertionFailedError);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  Expected:  function  FUNC(parent  ==  AssertionFailedError);	          junit.framework.AssertionFailedError:    Expected:    function    FUNC(param1    >>    AssertionFailedError);    	non-compiled	[CE]  not  a  statement	112	None	replace
467	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1!=  AssertionFailedError);  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1!=  AssertionFailedError);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1!=  AssertionFailedError);	          junit.framework.AssertionFailedError:    Expected:    function    FUNC(param1    >>    AssertionFailedError);    	non-compiled	[CE]  not  a  statement	112	None	replace
468	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  >>  AssertionFailedError,  state);  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  >>  AssertionFailedError,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  >>  AssertionFailedError,  state);	          junit.framework.AssertionFailedError:    Expected:    function    FUNC(param1    >>    AssertionFailedError);    	non-compiled	[CE]  not  a  statement	112	None	replace
469	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  function  FUNC(param1  ==  AssertionFailedError);  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  function  FUNC(param1  ==  AssertionFailedError);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  function  FUNC(param1  ==  AssertionFailedError);	          junit.framework.AssertionFailedError:    function    FUNC(param1    >>    AssertionFailedError);    	non-compiled	[CE]  not  a  statement	113	None	replace
470	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  function  FUNC(param1  ==  AssertionFailedError,  state);  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  function  FUNC(param1  ==  AssertionFailedError,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  function  FUNC(param1  ==  AssertionFailedError,  state);	          junit.framework.AssertionFailedError:    function    FUNC(param1    >>    AssertionFailedError);    	non-compiled	[CE]  not  a  statement	113	None	replace
471	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  function  FUNC(variable  ==  AssertionFailedError);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  function  FUNC(variable  ==  AssertionFailedError);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  function  FUNC(variable  ==  AssertionFailedError);	          junit.framework.AssertionFailedError:    function    FUNC(param1    >>    AssertionFailedError);    	non-compiled	[CE]  not  a  statement	113	None	replace
472	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  function  FUNC(param1!=  AssertionFailedError);  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  function  FUNC(param1!=  AssertionFailedError);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  function  FUNC(param1!=  AssertionFailedError);	          junit.framework.AssertionFailedError:    function    FUNC(param1    >>    AssertionFailedError);    	non-compiled	[CE]  not  a  statement	113	None	replace
473	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  function  FUNC(param1  >>  AssertionFailedError,  state);  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  function  FUNC(param1  >>  AssertionFailedError,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  function  FUNC(param1  >>  AssertionFailedError,  state);	          junit.framework.AssertionFailedError:    function    FUNC(param1    >>    AssertionFailedError);    	non-compiled	[CE]  not  a  statement	113	None	replace
474	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  function  FUNC(variable!=  AssertionFailedError);  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  function  FUNC(variable!=  AssertionFailedError);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  function  FUNC(variable!=  AssertionFailedError);	          junit.framework.AssertionFailedError:    function    FUNC(param1    >>    AssertionFailedError);    	non-compiled	[CE]  not  a  statement	113	None	replace
475	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  function  FUNC(param1!=  AssertionFailedError,  state);  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  function  FUNC(param1!=  AssertionFailedError,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  function  FUNC(param1!=  AssertionFailedError,  state);	          junit.framework.AssertionFailedError:    function    FUNC(param1    >>    AssertionFailedError);    	non-compiled	[CE]  not  a  statement	113	None	replace
476	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  MAID_LIVE);  [CE]  cannot  find  symbol  MAID_LIVE  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  MAID_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  MAID_LIVE);	  return    state    &&    isVariableReadBeforeKill(child,    variable,    MISSING);    	non-compiled	[CE]  cannot  find  symbol  MAID_LIVE	194	None	replace
477	[BUG]  [BUGGY]  return  state.getRemovableAssignmentsElimination(),  child,  variable;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignmentsElimination(),  child,  variable;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignmentsElimination(),  child,  variable;	  return    state.getRemovableAssignmentsElimination(),    child;    	non-compiled	[CE]  ';'  expected	148	None	replace
478	[BUG]  [BUGGY]  return  state.getRemovableAssignmentsElimination(),  child,  VariableLiveness.MAYBE_LIVE;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignmentsElimination(),  child,  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignmentsElimination(),  child,  VariableLiveness.MAYBE_LIVE;	  return    state.getRemovableAssignmentsElimination(),    child;    	non-compiled	[CE]  ';'  expected	148	None	replace
479	[BUG]  [BUGGY]  return  state.getRemovableAssignmentsElimination(),  child,  variables;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignmentsElimination(),  child,  variables;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignmentsElimination(),  child,  variables;	  return    state.getRemovableAssignmentsElimination(),    child;    	non-compiled	[CE]  ';'  expected	148	None	replace
480	[BUG]  [BUGGY]  return  state.getRemovableAssignmentsElimination(),  parent;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignmentsElimination(),  parent;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignmentsElimination(),  parent;	  return    state.getRemovableAssignmentsElimination(),    child;    	non-compiled	[CE]  ';'  expected	148	None	replace
481	[BUG]  [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  ||  child.getChildCount()  >  1;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  ||  child.getChildCount()  >  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state.getType()  ==  Token.CALL  ||  child.getChildCount()  >  1;	  return    state    &&    state.getType()    ==    Token.CALL    ||    state.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
482	[BUG]  [BUGGY]  return  state,  state.getType()  ==  Token.CALL  ||  state.getChildCount()  >  1;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state,  state.getType()  ==  Token.CALL  ||  state.getChildCount()  >  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state,  state.getType()  ==  Token.CALL  ||  state.getChildCount()  >  1;	  return    state    &&    state.getType()    ==    Token.CALL    ||    state.getChildCount()    >    1;    	non-compiled	[CE]  ';'  expected	2	None	replace
483	[BUG]  [BUGGY]  return  state.invoke(n,  variable,  MOVED);  [CE]  cannot  find  symbol  MOVED  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(n,  variable,  MOVED);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(n,  variable,  MOVED);	  return    state.invoke(n,    variable,    mayBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  MOVED	82	None	replace
484	[BUG]  [BUGGY]  return  state.invoke(n,  variable,  MILLIS);  [CE]  cannot  find  symbol  MILLIS  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(n,  variable,  MILLIS);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(n,  variable,  MILLIS);	  return    state.invoke(n,    variable,    mayBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  MILLIS	82	None	replace
485	[BUG]  [BUGGY]  return  State.MAYBE_LIVE  |  State.MAYBE_LIVE;  [CE]  cannot  find  symbol  State  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.MAYBE_LIVE  |  State.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.MAYBE_LIVE  |  State.MAYBE_LIVE;	  return    State.MAYBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  State	8	None	replace
486	[BUG]  [BUGGY]  State.MAYBE_LIVE  =  state.getMask();  [CE]  cannot  find  symbol  State  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  State.MAYBE_LIVE  =  state.getMask();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	State.MAYBE_LIVE  =  state.getMask();	  return    State.MAYBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  State	8	None	replace
487	[BUG]  [BUGGY]  State.MAYBE_LIVE  =  state.getMillis();  [CE]  cannot  find  symbol  State  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  State.MAYBE_LIVE  =  state.getMillis();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	State.MAYBE_LIVE  =  state.getMillis();	  return    State.MAYBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  State	8	None	replace
488	[BUG]  [BUGGY]  return  State.MAYBE_LIVE  -  1;  [CE]  cannot  find  symbol  State  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.MAYBE_LIVE  -  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.MAYBE_LIVE  -  1;	  return    State.MAYBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  State	8	None	replace
489	[BUG]  [BUGGY]  State.MAYBE_LIVE  =  state;  [CE]  cannot  find  symbol  State  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  State.MAYBE_LIVE  =  state;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	State.MAYBE_LIVE  =  state;	  return    State.MAYBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  State	8	None	replace
490	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(n.getLastChild(),  variable);  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(n.getLastChild(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(n.getLastChild(),  variable);	  return    state    &&    isVariableReadBeforeKill(child.getLastChild(),    variable);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	91	None	replace
491	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  n.getLastChild(),  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  n.getLastChild(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  n.getLastChild(),  variable);	  return    state    &&    isVariableReadBeforeKill(child.getLastChild(),    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	91	None	replace
492	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getLastChild(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	return  isVariableReadBeforeKill(child.getLastChild(),  variable);	  return    state    &&    isVariableReadBeforeKill(child.getLastChild(),    variable);    	compilable	  [FE]  RuntimeException  	91	61	replace
493	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getLastChild(),  variable);  [FE]  RuntimeException  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getLastChild(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child.getLastChild(),  variable);	  return    state    &&    isVariableReadBeforeKill(child.getLastChild(),    variable);    	compilable	  [FE]  RuntimeException  	91	61	replace
494	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n.getLastChild(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	return  isVariableReadBeforeKill(n.getLastChild(),  variable);	  return    state    &&    isVariableReadBeforeKill(child.getLastChild(),    variable);    	compilable	  [FE]  AssertionFailedError  	91	54	replace
495	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n.getLastChild(),  variable);  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n.getLastChild(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(n.getLastChild(),  variable);	  return    state    &&    isVariableReadBeforeKill(child.getLastChild(),    variable);    	compilable	  [FE]  AssertionFailedError  	91	54	replace
496	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  ||  state.getChildCount()  >=  1;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()  ==  Token.CALL  ||  state.getChildCount()  >=  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  ||  state.getChildCount()  >=  1;	  return    state    &&    state.getType()    ==    Token.CALL    ||    state.getChildCount()    >=    1;    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
497	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  ||  state.getChildCount()!=  1;  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()  ==  Token.CALL  ||  state.getChildCount()!=  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  ||  state.getChildCount()!=  1;	  return    state    &&    state.getType()    ==    Token.CALL    ||    state.getChildCount()    >=    1;    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
498	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  ||  state.getChildCount()  >>  1;  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()  ==  Token.CALL  ||  state.getChildCount()  >>  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  ||  state.getChildCount()  >>  1;	  return    state    &&    state.getType()    ==    Token.CALL    ||    state.getChildCount()    >=    1;    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
499	[BUG]  [BUGGY]  return  state.invoke(n,  variable,  MayBE_LIVE);  [CE]  cannot  find  symbol  MayBE_LIVE  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(n,  variable,  MayBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(n,  variable,  MayBE_LIVE);	  return    state.invoke(n,    variable,    KILL);    	non-compiled	[CE]  cannot  find  symbol  MayBE_LIVE	135	None	replace
500	[BUG]  [BUGGY]  return  state.invoke(n,  child,  VariableLiveness.MAYBE_LIVE);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(n,  child,  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(n,  child,  VariableLiveness.MAYBE_LIVE);	  return    state.invoke(n,    variable,    KILL);    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
501	[BUG]  [BUGGY]  return  state.invoke(n,  variable,  MAIBE_LIVE);  [CE]  cannot  find  symbol  MAIBE_LIVE  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(n,  variable,  MAIBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(n,  variable,  MAIBE_LIVE);	  return    state.invoke(n,    variable,    KILL);    	non-compiled	[CE]  cannot  find  symbol  MAIBE_LIVE	135	None	replace
502	[BUG]  [BUGGY]  return  state.invoke(n,  variable,  MAJBE_LIVE);  [CE]  cannot  find  symbol  MAJBE_LIVE  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(n,  variable,  MAJBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(n,  variable,  MAJBE_LIVE);	  return    state.invoke(n,    variable,    KILL);    	non-compiled	[CE]  cannot  find  symbol  MAJBE_LIVE	135	None	replace
503	[BUG]  [BUGGY]  return  state.getValue()!=  null?  null  :  state.getValue();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValue()!=  null?  null  :  state.getValue();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValue()!=  null?  null  :  state.getValue();	  return    state.getValue()    :    null;    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
504	[BUG]  [BUGGY]  return  state.getValue()  {  null;  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValue()  {  null;  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValue()  {  null;  }	  return    state.getValue()    :    null;    	non-compiled	[CE]  ';'  expected	43	None	replace
505	[BUG]  [BUGGY]  return  child.getValue()  :  null;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  child.getValue()  :  null;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  child.getValue()  :  null;	  return    state.getValue()    :    null;    	non-compiled	[CE]  ';'  expected	43	None	replace
506	[BUG]  [BUGGY]  return  state.getValue()  }  ';';  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValue()  }  ';';  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValue()  }  ';';	  return    state.getValue()    :    null;    	non-compiled	[CE]  ';'  expected	43	None	replace
507	[BUG]  [BUGGY]  return  state.getValue()  {  ';';  }  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValue()  {  ';';  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValue()  {  ';';  }	  return    state.getValue()    :    null;    	non-compiled	[CE]  ';'  expected	43	None	replace
508	[BUG]  [BUGGY]  return  n.getRemovableAssignment()  +  state;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  n.getRemovableAssignment()  +  state;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n.getRemovableAssignment()  +  state;	  return    n.getRemovableAssignment();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
509	[BUG]  [BUGGY]  return  n,  state.getRemovableAssignment();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  n,  state.getRemovableAssignment();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n,  state.getRemovableAssignment();	  return    n.getRemovableAssignment();    	non-compiled	[CE]  ';'  expected	64	None	replace
510	[BUG]  [BUGGY]  return  state  &&  child  ==  VariableLiveness.MAYBE_LIVE;  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  child  ==  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  child  ==  VariableLiveness.MAYBE_LIVE;	  return    state    &&    state    ==    VariableLiveness.MAYBE_LIVE;    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	12	None	replace
511	[BUG]  [BUGGY]  return  State.MILLISECOND  &&  state!=  VariableLiveness.MAYBE_LIVE;  [CE]  cannot  find  symbol  State  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.MILLISECOND  &&  state!=  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.MILLISECOND  &&  state!=  VariableLiveness.MAYBE_LIVE;	  return    State.MILLISECOND;    	non-compiled	[CE]  cannot  find  symbol  State	11	None	replace
512	[BUG]  [BUGGY]  return  State.MILLISECOND  |  State.MILLISECOND;  [CE]  cannot  find  symbol  State  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.MILLISECOND  |  State.MILLISECOND;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.MILLISECOND  |  State.MILLISECOND;	  return    State.MILLISECOND;    	non-compiled	[CE]  cannot  find  symbol  State	11	None	replace
513	[BUG]  [BUGGY]  return  State.MILLISECOND  &&  state.isRemovableAssignmentsElimination();  [CE]  cannot  find  symbol  State  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.MILLISECOND  &&  state.isRemovableAssignmentsElimination();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.MILLISECOND  &&  state.isRemovableAssignmentsElimination();	  return    State.MILLISECOND;    	non-compiled	[CE]  cannot  find  symbol  State	11	None	replace
514	[BUG]  [BUGGY]  return  State.MILLISECOND  &&  state.isRemovableAssignment();  [CE]  cannot  find  symbol  State  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.MILLISECOND  &&  state.isRemovableAssignment();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.MILLISECOND  &&  state.isRemovableAssignment();	  return    State.MILLISECOND;    	non-compiled	[CE]  cannot  find  symbol  State	11	None	replace
515	[BUG]  [BUGGY]  return  State.MILLISECOND  +  1;  [CE]  cannot  find  symbol  State  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.MILLISECOND  +  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.MILLISECOND  +  1;	  return    State.MILLISECOND;    	non-compiled	[CE]  cannot  find  symbol  State	11	None	replace
516	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n.getFirstChild(),  variable,  state);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n.getFirstChild(),  variable,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(n.getFirstChild(),  variable,  state);	  return    isVariableReadBeforeKill(n.getFirstChild(),    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	156	None	replace
517	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getNext(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	return  isVariableReadBeforeKill(child.getNext(),  variable);	  return    isVariableReadBeforeKill(n.getFirstChild(),    variable);    	compilable	  [FE]  RuntimeException  	156	61	replace
518	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getNext(),  variable);  [FE]  RuntimeException  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getNext(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child.getNext(),  variable);	  return    isVariableReadBeforeKill(n.getFirstChild(),    variable);    	compilable	  [FE]  RuntimeException  	156	61	replace
519	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable);  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable);	  return    isVariableReadBeforeKill(n.getFirstChild(),    variable);    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	156	None	replace
520	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.RETURN);  Preconditions.checkState(child.getType()  ==  Token.RETURN);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	                Preconditions.checkState(child.getType()    ==    Token.RETURN);    Preconditions.checkState(child.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	167	61	add
521	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.RETURN);  Preconditions.checkState(child.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.RETURN);  Preconditions.checkState(child.getType()  ==  Token.RETURN);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.RETURN);    Preconditions.checkState(child.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	167	61	add
522	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.RETURN);  Preconditions.checkState(child.getType()!=  Token.RETURN);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	                Preconditions.checkState(child.getType()    ==    Token.RETURN);    Preconditions.checkState(child.getType()!=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	167	61	add
523	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.RETURN);  Preconditions.checkState(child.getType()!=  Token.RETURN);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.RETURN);  Preconditions.checkState(child.getType()!=  Token.RETURN);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.RETURN);    Preconditions.checkState(child.getType()!=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	167	61	add
524	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.RETURN);  Preconditions.checkState(child.getType()  >=  Token.RETURN);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	                Preconditions.checkState(child.getType()    ==    Token.RETURN);    Preconditions.checkState(child.getType()  >=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	167	61	add
525	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.RETURN);  Preconditions.checkState(child.getType()  >=  Token.RETURN);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.RETURN);  Preconditions.checkState(child.getType()  >=  Token.RETURN);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.RETURN);    Preconditions.checkState(child.getType()  >=  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	167	61	add
526	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.RETURN);  Preconditions.checkState(child.getType()  >>  Token.RETURN);  [CE]  no  suitable  method  found  for  checkState(int)  [FE]          RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.RETURN);  Preconditions.checkState(child.getType()  >>  Token.RETURN);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.RETURN);    Preconditions.checkState(child.getType()  >>  Token.RETURN);	  	non-compiled	[CE]  no  suitable  method  found  for  checkState(int)	167	None	add
527	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.RETURN);  Preconditions.checkState(child.gettype()  ==  Token.RETURN);  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.RETURN);  Preconditions.checkState(child.gettype()  ==  Token.RETURN);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.RETURN);    Preconditions.checkState(child.gettype()  ==  Token.RETURN);	  	non-compiled	[CE]  cannot  find  symbol	167	None	add
528	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.RETURN);  Preconditions.checkState(child.getType()  ==  Token.RETURN);  }  [CE]  illegal  start  of  type  [FE]              RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.RETURN);  Preconditions.checkState(child.getType()  ==  Token.RETURN);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.RETURN);    Preconditions.checkState(child.getType()  ==  Token.RETURN);  }	  	non-compiled	[CE]  illegal  start  of  type	167	None	add
529	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.RETURN);  Preconditions.checkState(child.getType()  [Delete]  Token.RETURN);  [CE]  ')'  expected  [FE]                RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.RETURN);  Preconditions.checkState(child.getType()  [Delete]  Token.RETURN);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.RETURN);    Preconditions.checkState(child.getType()  [Delete]  Token.RETURN);	  	non-compiled	[CE]  ')'  expected	167	None	add
530	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MayBE_LIVE);  [CE]  cannot  find  symbol  MayBE_LIVE  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MayBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MayBE_LIVE);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    MILL_LIVE);    	non-compiled	[CE]  cannot  find  symbol  MayBE_LIVE	141	None	replace
531	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MAJBE_LIVE);  [CE]  cannot  find  symbol  MAJBE_LIVE  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MAJBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MAJBE_LIVE);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    MILL_LIVE);    	non-compiled	[CE]  cannot  find  symbol  MAJBE_LIVE	141	None	replace
532	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MILL_MILLIS);  [CE]  cannot  find  symbol  MILL_MILLIS  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MILL_MILLIS);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MILL_MILLIS);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    MILL_LIVE);    	non-compiled	[CE]  cannot  find  symbol  MILL_MILLIS	141	None	replace
533	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  state  ==  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.CALL  ||  state  ==  VariableLiveness.MAYBE_LIVE);	          Preconditions.checkState(child.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	166	61	replace
534	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  state  ==  VariableLiveness.MAYBE_LIVE);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  state  ==  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.CALL  ||  state  ==  VariableLiveness.MAYBE_LIVE);	          Preconditions.checkState(child.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	166	61	replace
535	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.MAYBE_LIVE);	          Preconditions.checkState(child.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	166	61	replace
536	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.MAYBE_LIVE);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.MAYBE_LIVE);	          Preconditions.checkState(child.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	166	61	replace
537	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.CALL,  state);	          Preconditions.checkState(child.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	166	61	replace
538	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL,  state);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.CALL,  state);	          Preconditions.checkState(child.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	166	61	replace
539	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  &&  state  ==  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.CALL  &&  state  ==  VariableLiveness.MAYBE_LIVE);	          Preconditions.checkState(child.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	166	61	replace
540	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  &&  state  ==  VariableLiveness.MAYBE_LIVE);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  &&  state  ==  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.CALL  &&  state  ==  VariableLiveness.MAYBE_LIVE);	          Preconditions.checkState(child.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	166	61	replace
541	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]            RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  state!=  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.CALL  ||  state!=  VariableLiveness.MAYBE_LIVE);	          Preconditions.checkState(child.getType()    ==    Token.CALL);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	166	61	replace
542	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  state!=  VariableLiveness.MAYBE_LIVE);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]            RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  state!=  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.CALL  ||  state!=  VariableLiveness.MAYBE_LIVE);	          Preconditions.checkState(child.getType()    ==    Token.CALL);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	166	61	replace
543	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]              RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()!=  Token.CALL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()!=  Token.CALL);	          Preconditions.checkState(child.getType()    ==    Token.CALL);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	166	61	replace
544	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()!=  Token.CALL);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]              RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()!=  Token.CALL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()!=  Token.CALL);	          Preconditions.checkState(child.getType()    ==    Token.CALL);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	166	61	replace
545	[BUG]  [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >  4;  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >  4;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >  4;	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >    2;    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
546	[BUG]  [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >  3;  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >  3;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >  3;	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >    2;    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
547	[BUG]  [BUGGY]  return  state.getRemovableAssignment(),  variable);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignment(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignment(),  variable);	  return    state.getRemovableAssignment(),    child);    	non-compiled	[CE]  ';'  expected	68	None	replace
548	[BUG]  [BUGGY]  return  state.getRemovableAssignment(),  child,  variable);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignment(),  child,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignment(),  child,  variable);	  return    state.getRemovableAssignment(),    child);    	non-compiled	[CE]  ';'  expected	68	None	replace
549	[BUG]  [BUGGY]  return  state.getMatchRemovableAssignment(),  child);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getMatchRemovableAssignment(),  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getMatchRemovableAssignment(),  child);	  return    state.getRemovableAssignment(),    child);    	non-compiled	[CE]  ';'  expected	68	None	replace
550	[BUG]  [BUGGY]  return  state.getRemovableAssignment(),  child  +  1;  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignment(),  child  +  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignment(),  child  +  1;	  return    state.getRemovableAssignment(),    child);    	non-compiled	[CE]  ';'  expected	68	None	replace
551	[BUG]  [BUGGY]  return  state.getRemoveAssignment(),  child,  variable);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemoveAssignment(),  child,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemoveAssignment(),  child,  variable);	  return    state.getRemovableAssignment(),    child);    	non-compiled	[CE]  ';'  expected	68	None	replace
552	[BUG]  [BUGGY]  return  state.getRemovableAssignment(),  parent);  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignment(),  parent);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignment(),  parent);	  return    state.getRemovableAssignment(),    child);    	non-compiled	[CE]  ';'  expected	68	None	replace
553	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n,  variable);  return  isVariableReadBeforeKill(n,  variable);  [CE]  unreachable  statement  [FE]    StackOverflowError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n,  variable);  return  isVariableReadBeforeKill(n,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(n,    variable);    return  isVariableReadBeforeKill(n,  variable);	  	non-compiled	[CE]  unreachable  statement	186	None	add
554	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n,  variable);  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]      StackOverflowError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n,  variable);  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(n,    variable);    VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	186	None	add
555	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n,  variable);  State  state  =  isVariableReadBeforeKill(n,  variable);  [CE]  cannot  find  symbol  [FE]        StackOverflowError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n,  variable);  State  state  =  isVariableReadBeforeKill(n,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(n,    variable);    State  state  =  isVariableReadBeforeKill(n,  variable);	  	non-compiled	[CE]  cannot  find  symbol	186	None	add
556	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n,  variable);  Node  n  =  child.getFirstChild();  return  isVariableReadBeforeKill(n,  variable);  [CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]          StackOverflowError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n,  variable);  Node  n  =  child.getFirstChild();  return  isVariableReadBeforeKill(n,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(n,    variable);    Node  n  =  child.getFirstChild();  return  isVariableReadBeforeKill(n,  variable);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	186	None	add
557	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n,  variable);  Predicate  matchRemovableAssigns  =  Compiler.getInstance();  return  isVariableReadBeforeKill(n,  variable);  [CE]  cannot  find  symbol  [FE]            StackOverflowError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n,  variable);  Predicate  matchRemovableAssigns  =  Compiler.getInstance();  return  isVariableReadBeforeKill(n,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(n,    variable);    Predicate  matchRemovableAssigns  =  Compiler.getInstance();  return  isVariableReadBeforeKill(n,  variable);	  	non-compiled	[CE]  cannot  find  symbol	186	None	add
558	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n,  variable);  Predicate  matchRemovableAssigns  =  Compiler.getCurrentStructure(n);  if(matchRemovableAssigns!=  null)  {  return  state;  }  [CE]  cannot  find  symbol  [FE]              StackOverflowError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n,  variable);  Predicate  matchRemovableAssigns  =  Compiler.getCurrentStructure(n);  if(matchRemovableAssigns!=  null)  {  return  state;  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(n,    variable);    Predicate  matchRemovableAssigns  =  Compiler.getCurrentStructure(n);  if(matchRemovableAssigns!=  null)  {  return  state;  }	  	non-compiled	[CE]  cannot  find  symbol	186	None	add
559	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n,  variable);  Predicate  matchRemovableAssigns  =  Compiler.getCurrentStructure(n,  variable);  if(matchRemovableAssigns!=  null)  {  return  state;  }  [CE]  cannot  find  symbol  [FE]                StackOverflowError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n,  variable);  Predicate  matchRemovableAssigns  =  Compiler.getCurrentStructure(n,  variable);  if(matchRemovableAssigns!=  null)  {  return  state;  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(n,    variable);    Predicate  matchRemovableAssigns  =  Compiler.getCurrentStructure(n,  variable);  if(matchRemovableAssigns!=  null)  {  return  state;  }	  	non-compiled	[CE]  cannot  find  symbol	186	None	add
560	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n,  variable);  Predicate  matchRemovableAssigns  =  Compiler.getCurrentStructure(n);  if(matchRemovableAssigns  ==  null)  {  return  state;  }  [CE]  cannot  find  symbol  [FE]                  StackOverflowError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n,  variable);  Predicate  matchRemovableAssigns  =  Compiler.getCurrentStructure(n);  if(matchRemovableAssigns  ==  null)  {  return  state;  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(n,    variable);    Predicate  matchRemovableAssigns  =  Compiler.getCurrentStructure(n);  if(matchRemovableAssigns  ==  null)  {  return  state;  }	  	non-compiled	[CE]  cannot  find  symbol	186	None	add
561	[BUG]  [BUGGY]  return  state.getRemovableAssigns(),  KILL;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssigns(),  KILL;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssigns(),  KILL;	  return    state.getRemovableAssigns(),    variable;    	non-compiled	[CE]  ';'  expected	84	None	replace
562	[BUG]  [BUGGY]  return  state.getMatchRemovableAssigns(),  variable;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getMatchRemovableAssigns(),  variable;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getMatchRemovableAssigns(),  variable;	  return    state.getRemovableAssigns(),    variable;    	non-compiled	[CE]  ';'  expected	84	None	replace
563	[BUG]  [BUGGY]  return  state.getRemovableAssigns(),  variable  +  1;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssigns(),  variable  +  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssigns(),  variable  +  1;	  return    state.getRemovableAssigns(),    variable;    	non-compiled	[CE]  ';'  expected	84	None	replace
564	[BUG]  [BUGGY]  return  state.getRemoveAssigns(),  child;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemoveAssigns(),  child;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemoveAssigns(),  child;	  return    state.getRemovableAssigns(),    variable;    	non-compiled	[CE]  ';'  expected	84	None	replace
565	[BUG]  [BUGGY]  return  state.getAssignmentsElimination(),  variable;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getAssignmentsElimination(),  variable;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getAssignmentsElimination(),  variable;	  return    state.getRemovableAssigns(),    variable;    	non-compiled	[CE]  ';'  expected	84	None	replace
566	[BUG]  [BUGGY]  return  state  &&  child.getType()  ==  Token.CALL  &&  state.getChildCount()  >>  1;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  child.getType()  ==  Token.CALL  &&  state.getChildCount()  >>  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  child.getType()  ==  Token.CALL  &&  state.getChildCount()  >>  1;	  return    state    &&    n.getType()    ==    Token.CALL    &&    state.getChildCount()    >=    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	178	None	replace
567	[BUG]  [BUGGY]  return  state.getRemovableAssignments()  &&  state.getRemovableAssignments();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignments()  &&  state.getRemovableAssignments();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignments()  &&  state.getRemovableAssignments();	  return    state.getRemovableAssignments()    ||    state.getRemovableAssignments();    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
568	[BUG]  [BUGGY]  return  child.getRemovableAssignments()  ||  state.getRemovableAssignments();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  child.getRemovableAssignments()  ||  state.getRemovableAssignments();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  child.getRemovableAssignments()  ||  state.getRemovableAssignments();	  return    state.getRemovableAssignments()    ||    state.getRemovableAssignments();    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
569	[BUG]  [BUGGY]  return  state.getRemovableAssignments()  /  ||  state.getRemovableAssignments();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignments()  /  ||  state.getRemovableAssignments();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignments()  /  ||  state.getRemovableAssignments();	  return    state.getRemovableAssignments()    ||    state.getRemovableAssignments();    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
570	[BUG]  [BUGGY]  return  state.getRemovableAssignments()  /|  state.getRemovableAssignments();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignments()  /|  state.getRemovableAssignments();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignments()  /|  state.getRemovableAssignments();	  return    state.getRemovableAssignments()    ||    state.getRemovableAssignments();    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
571	[BUG]  [BUGGY]  return  state.getRemovableAssignments()  ||  n.getRemovableAssignments();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignments()  ||  n.getRemovableAssignments();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignments()  ||  n.getRemovableAssignments();	  return    state.getRemovableAssignments()    ||    state.getRemovableAssignments();    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
572	[BUG]  [BUGGY]  return  state.getRemovableAssignmentsElimination(variable,  child);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignmentsElimination(variable,  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignmentsElimination(variable,  child);	  return    state.getRemovableAssignmentsElimination(variable);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
573	[BUG]  [BUGGY]  return  n.getRemovableAssignmentsElimination(variable);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  n.getRemovableAssignmentsElimination(variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n.getRemovableAssignmentsElimination(variable);	  return    state.getRemovableAssignmentsElimination(variable);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
574	[BUG]  [BUGGY]  return  state.getRemovableAssignmentsElimination(variable,  n);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignmentsElimination(variable,  n);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignmentsElimination(variable,  n);	  return    state.getRemovableAssignmentsElimination(variable);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
575	[BUG]  [BUGGY]  return  state.getRemovableAssignmentsElimination(child,  variable);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignmentsElimination(child,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignmentsElimination(child,  variable);	  return    state.getRemovableAssignmentsElimination(variable);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
576	[BUG]  [BUGGY]  return  state.getRemovableAssignmentsElimination(n);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignmentsElimination(n);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignmentsElimination(n);	  return    state.getRemovableAssignmentsElimination(variable);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
577	[BUG]  [BUGGY]  return  state.getRemovableAssignments(),  child,  variable;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignments(),  child,  variable;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignments(),  child,  variable;	  return    state.getRemovableAssignments(),    child;    	non-compiled	[CE]  ';'  expected	122	None	replace
578	[BUG]  [BUGGY]  return  state.getRemovableAssignments(),  child,  VariableLiveness.MAYBE_LIVE;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignments(),  child,  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignments(),  child,  VariableLiveness.MAYBE_LIVE;	  return    state.getRemovableAssignments(),    child;    	non-compiled	[CE]  ';'  expected	122	None	replace
579	[BUG]  [BUGGY]  return  state.getMatchRemovableAssignments(),  child;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getMatchRemovableAssignments(),  child;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getMatchRemovableAssignments(),  child;	  return    state.getRemovableAssignments(),    child;    	non-compiled	[CE]  ';'  expected	122	None	replace
580	[BUG]  [BUGGY]  return  state.getRemoveAssignments(),  child,  variable;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemoveAssignments(),  child,  variable;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemoveAssignments(),  child,  variable;	  return    state.getRemovableAssignments(),    child;    	non-compiled	[CE]  ';'  expected	122	None	replace
581	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(variable.getString(),  n);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(variable.getString(),  n);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(variable.getString(),  n);	  return    state    &&    isVariableReadBeforeKill(n.getString(),    variable);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
582	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(n.getString(),  variable,  MAXBE_LIVE);  [CE]  cannot  find  symbol  MAXBE_LIVE  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(n.getString(),  variable,  MAXBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(n.getString(),  variable,  MAXBE_LIVE);	  return    state    &&    isVariableReadBeforeKill(n.getString(),    variable);    	non-compiled	[CE]  cannot  find  symbol  MAXBE_LIVE	54	None	replace
583	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(n.getString(),  variable,  parent);  [CE]  cannot  find  symbol  parent  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(n.getString(),  variable,  parent);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(n.getString(),  variable,  parent);	  return    state    &&    isVariableReadBeforeKill(n.getString(),    variable);    	non-compiled	[CE]  cannot  find  symbol  parent	54	None	replace
584	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n.getString(),  variable,  state);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n.getString(),  variable,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(n.getString(),  variable,  state);	  return    state    &&    isVariableReadBeforeKill(n.getString(),    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	54	None	replace
585	[BUG]  [BUGGY]  return  state  ||  state.getType()  ==  Token.CALL  ||  state.getChildCount()  >  1)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  ||  state.getType()  ==  Token.CALL  ||  state.getChildCount()  >  1)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  ||  state.getType()  ==  Token.CALL  ||  state.getChildCount()  >  1)  {	  return    state    &&    state.getType()    ==    Token.CALL    ||    state.getChildCount()    >    1)    {    	non-compiled	[CE]  ';'  expected	136	None	replace
586	[BUG]  [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  ||  state.getChildCount()  ==  1)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  ||  state.getChildCount()  ==  1)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state.getType()  ==  Token.CALL  ||  state.getChildCount()  ==  1)  {	  return    state    &&    state.getType()    ==    Token.CALL    ||    state.getChildCount()    >    1)    {    	non-compiled	[CE]  ';'  expected	136	None	replace
587	[BUG]  [BUGGY]  return  state  ||  isVariableReadBeforeKill(variable,  child.getString());  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  ||  isVariableReadBeforeKill(variable,  child.getString());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  ||  isVariableReadBeforeKill(variable,  child.getString());	  return    state    &&    isVariableReadBeforeKill(variable,    child.getString());    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	62	None	replace
588	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(variable,  child.getString(),  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(variable,  child.getString(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(variable,  child.getString(),  variable);	  return    state    &&    isVariableReadBeforeKill(variable,    child.getString());    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	62	None	replace
589	[BUG]  [BUGGY]  return  state.invoke(variable,  n,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(variable,  n,  MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(variable,  n,  MAYBE_LIVE);	  return    state.invoke(variable,    n);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	77	None	replace
590	[BUG]  [BUGGY]  return  state.invoke(variable,  n,  MAXBE_LIVE);  [CE]  cannot  find  symbol  MAXBE_LIVE  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(variable,  n,  MAXBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(variable,  n,  MAXBE_LIVE);	  return    state.invoke(variable,    n);    	non-compiled	[CE]  cannot  find  symbol  MAXBE_LIVE	77	None	replace
591	[BUG]  [BUGGY]  return  state.invoke(variable,  n,  KILL);  [CE]  cannot  find  symbol  KILL  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(variable,  n,  KILL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(variable,  n,  KILL);	  return    state.invoke(variable,    n);    	non-compiled	[CE]  cannot  find  symbol  KILL	77	None	replace
592	[BUG]  [BUGGY]  return  state.getValue(),  child;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValue(),  child;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValue(),  child;	  return    state.getValue(),    variable;    	non-compiled	[CE]  ';'  expected	39	None	replace
593	[BUG]  [BUGGY]  return  state.getValue(),  variable  +  1;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValue(),  variable  +  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValue(),  variable  +  1;	  return    state.getValue(),    variable;    	non-compiled	[CE]  ';'  expected	39	None	replace
594	[BUG]  [BUGGY]  return  state.getValue(),  KILL;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValue(),  KILL;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValue(),  KILL;	  return    state.getValue(),    variable;    	non-compiled	[CE]  ';'  expected	39	None	replace
595	[BUG]  [BUGGY]  return  state.getValue(),  null;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValue(),  null;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValue(),  null;	  return    state.getValue(),    variable;    	non-compiled	[CE]  ';'  expected	39	None	replace
596	[BUG]  [BUGGY]  return  state.getValue()  +  1,  variable;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValue()  +  1,  variable;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValue()  +  1,  variable;	  return    state.getValue(),    variable;    	non-compiled	[CE]  ';'  expected	39	None	replace
597	[BUG]  [BUGGY]  return  state.getValue(),  parent;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValue(),  parent;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValue(),  parent;	  return    state.getValue(),    variable;    	non-compiled	[CE]  ';'  expected	39	None	replace
598	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.RETURN,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.RETURN,  state);	          Preconditions.checkState(child.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	168	61	replace
599	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.RETURN,  state);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.RETURN,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.RETURN,  state);	          Preconditions.checkState(child.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	168	61	replace
600	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.RETURN  ||  state  ==  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.RETURN  ||  state  ==  VariableLiveness.MAYBE_LIVE);	          Preconditions.checkState(child.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	168	61	replace
601	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.RETURN  ||  state  ==  VariableLiveness.MAYBE_LIVE);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.RETURN  ||  state  ==  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.RETURN  ||  state  ==  VariableLiveness.MAYBE_LIVE);	          Preconditions.checkState(child.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	168	61	replace
602	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.RETURN  &&  state!=  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.RETURN  &&  state!=  VariableLiveness.MAYBE_LIVE);	          Preconditions.checkState(child.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	168	61	replace
603	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.RETURN  &&  state!=  VariableLiveness.MAYBE_LIVE);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.RETURN  &&  state!=  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.RETURN  &&  state!=  VariableLiveness.MAYBE_LIVE);	          Preconditions.checkState(child.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	168	61	replace
604	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.RETURN,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.RETURN,  variable);	          Preconditions.checkState(child.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	168	61	replace
605	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.RETURN,  variable);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.RETURN,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.RETURN,  variable);	          Preconditions.checkState(child.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	168	61	replace
606	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]            RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()!=  Token.RETURN);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()!=  Token.RETURN);	          Preconditions.checkState(child.getType()    ==    Token.RETURN);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	168	61	replace
607	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()!=  Token.RETURN);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]            RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()!=  Token.RETURN);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()!=  Token.RETURN);	          Preconditions.checkState(child.getType()    ==    Token.RETURN);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	168	61	replace
608	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.RETURN  &&  state  ==  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.RETURN  &&  state  ==  VariableLiveness.MAYBE_LIVE);	          Preconditions.checkState(child.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	168	61	replace
609	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.RETURN  &&  state  ==  VariableLiveness.MAYBE_LIVE);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.RETURN  &&  state  ==  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.RETURN  &&  state  ==  VariableLiveness.MAYBE_LIVE);	          Preconditions.checkState(child.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	168	61	replace
610	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(n,  state.getFirstChild(),  variable);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(n,  state.getFirstChild(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(n,  state.getFirstChild(),  variable);	  return    state    &&    isVariableReadBeforeKill(child,    state.getFirstChild(),    variable);    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
611	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  child.getFirstChild(),  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  child.getFirstChild(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  child.getFirstChild(),  variable);	  return    state    &&    isVariableReadBeforeKill(child,    state.getFirstChild(),    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	120	None	replace
612	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(variable,  child.getFirstChild(),  state);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(variable,  child.getFirstChild(),  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(variable,  child.getFirstChild(),  state);	  return    state    &&    isVariableReadBeforeKill(child,    state.getFirstChild(),    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	120	None	replace
613	[BUG]  [BUGGY]  return  n.getRemovableAssignmentsElimination()  +  state;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  n.getRemovableAssignmentsElimination()  +  state;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n.getRemovableAssignmentsElimination()  +  state;	  return    n.getRemovableAssignmentsElimination();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
614	[BUG]  [BUGGY]  return  n,  state.getRemovableAssignmentsElimination();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  n,  state.getRemovableAssignmentsElimination();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n,  state.getRemovableAssignmentsElimination();	  return    n.getRemovableAssignmentsElimination();    	non-compiled	[CE]  ';'  expected	32	None	replace
615	[BUG]  [BUGGY]  return  state  &&  n!=  VariableLiveness.MAYBE_LIVE;  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  n!=  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  n!=  VariableLiveness.MAYBE_LIVE;	  return    state    ||    n!=    VariableLiveness.MAYBE_LIVE;    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	98	None	replace
616	[BUG]  [BUGGY]  return  n  ||  state!=  VariableLiveness.MAYBE_LIVE;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  n  ||  state!=  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n  ||  state!=  VariableLiveness.MAYBE_LIVE;	  return    state    ||    n!=    VariableLiveness.MAYBE_LIVE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	98	None	replace
617	[BUG]  [BUGGY]  return  state  ||  n.getType()!=  VariableLiveness.MAYBE_LIVE;  [CE]  incomparable  types:  int  and  VariableLiveness  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  ||  n.getType()!=  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  ||  n.getType()!=  VariableLiveness.MAYBE_LIVE;	  return    state    ||    n!=    VariableLiveness.MAYBE_LIVE;    	non-compiled	[CE]  incomparable  types:  int  and  VariableLiveness	98	None	replace
618	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >  2)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >  2)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >  2)  {	  return    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1)    {    	non-compiled	[CE]  ';'  expected	45	None	replace
619	[BUG]  [BUGGY]  return  child.getRemovableAssignment(),  state;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  child.getRemovableAssignment(),  state;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  child.getRemovableAssignment(),  state;	  return    child.getRemovableAssignment();    	non-compiled	[CE]  ';'  expected	65	None	replace
620	[BUG]  [BUGGY]  return  toRemovableAssignment(child.getRemovableAssignment());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  toRemovableAssignment(child.getRemovableAssignment());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  toRemovableAssignment(child.getRemovableAssignment());	  return    child.getRemovableAssignment();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
621	[BUG]  [BUGGY]  return  child.getRemovableAssignment()  &&  state!=  VariableLiveness.MAYBE_LIVE;  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  child.getRemovableAssignment()  &&  state!=  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  child.getRemovableAssignment()  &&  state!=  VariableLiveness.MAYBE_LIVE;	  return    child.getRemovableAssignment();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
622	[BUG]  [BUGGY]  return  child.getRemovableAssignment()  &&  state  ==  VariableLiveness.MAYBE_LIVE;  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  child.getRemovableAssignment()  &&  state  ==  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  child.getRemovableAssignment()  &&  state  ==  VariableLiveness.MAYBE_LIVE;	  return    child.getRemovableAssignment();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
623	[BUG]  [BUGGY]  return  state.getRemovableAssignmentsElimination(),  KILL;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignmentsElimination(),  KILL;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignmentsElimination(),  KILL;	  return    state.getRemovableAssignmentsElimination(),    variable;    	non-compiled	[CE]  ';'  expected	33	None	replace
624	[BUG]  [BUGGY]  return  state.getRemovableAssignmentsElimination(),  variable  +  1;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignmentsElimination(),  variable  +  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignmentsElimination(),  variable  +  1;	  return    state.getRemovableAssignmentsElimination(),    variable;    	non-compiled	[CE]  ';'  expected	33	None	replace
625	[BUG]  [BUGGY]  return  state.getRemovableAssignmentsElimination()  +  1,  variable;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignmentsElimination()  +  1,  variable;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignmentsElimination()  +  1,  variable;	  return    state.getRemovableAssignmentsElimination(),    variable;    	non-compiled	[CE]  ';'  expected	33	None	replace
626	[BUG]  [BUGGY]  return  state.getRemovableAssignmentsElimination(child),  variable;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignmentsElimination(child),  variable;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignmentsElimination(child),  variable;	  return    state.getRemovableAssignmentsElimination(),    variable;    	non-compiled	[CE]  ';'  expected	33	None	replace
627	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  MOVE_FACTOR);  [CE]  cannot  find  symbol  MOVE_FACTOR  [FE]            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  MOVE_FACTOR);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  MOVE_FACTOR);	  return    state    &&    isVariableReadBeforeKill(child,    variable,    MOVED);    	non-compiled	[CE]  cannot  find  symbol  MOVE_FACTOR	144	None	replace
628	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  KILL_LIVE,  null);  [CE]  cannot  find  symbol  KILL_LIVE  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  KILL_LIVE,  null);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  KILL_LIVE,  null);	  return    state    &&    isVariableReadBeforeKill(child,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  KILL_LIVE	145	None	replace
629	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  MAXBE_LIVE,  null);  [CE]  cannot  find  symbol  MAXBE_LIVE  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  MAXBE_LIVE,  null);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  MAXBE_LIVE,  null);	  return    state    &&    isVariableReadBeforeKill(child,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  MAXBE_LIVE	145	None	replace
630	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  null,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  null,  MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  null,  MAYBE_LIVE);	  return    state    &&    isVariableReadBeforeKill(child,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	145	None	replace
631	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  null,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  null,  liveness);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  null,  liveness);	  return    state    &&    isVariableReadBeforeKill(child,    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	145	None	replace
632	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child,  variable,  state,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child,  variable,  state,  null);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child,  variable,  state,  null);	  return    state    &&    isVariableReadBeforeKill(child,    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	145	None	replace
633	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  KILL_LIVE);  [CE]  cannot  find  symbol  KILL_LIVE  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  KILL_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  KILL_LIVE);	  return    state    &&    isVariableReadBeforeKill(child,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  KILL_LIVE	145	None	replace
634	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  VARIABLE_LIVE,  null);  [CE]  cannot  find  symbol  VARIABLE_LIVE  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  VARIABLE_LIVE,  null);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  VARIABLE_LIVE,  null);	  return    state    &&    isVariableReadBeforeKill(child,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  VARIABLE_LIVE	145	None	replace
635	[BUG]  [BUGGY]  return  n.getValue()  -  1;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  n.getValue()  -  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n.getValue()  -  1;	  return    state.getValue()    -    1;    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
636	[BUG]  [BUGGY]  return  child.getValue()  -  1;  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  child.getValue()  -  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  child.getValue()  -  1;	  return    state.getValue()    -    1;    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
637	[BUG]  [BUGGY]  return  state.getValue()  /  1;  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValue()  /  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValue()  /  1;	  return    state.getValue()    -    1;    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
638	[BUG]  [BUGGY]  return  state.getValue()  *  2  -  1;  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValue()  *  2  -  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValue()  *  2  -  1;	  return    state.getValue()    -    1;    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
639	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.THIS,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.THIS,  state);	          Preconditions.checkState(child.getType()    ==    Token.THIS);    	compilable	  [FE]  RuntimeException  	175	61	replace
640	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.THIS,  state);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.THIS,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.THIS,  state);	          Preconditions.checkState(child.getType()    ==    Token.THIS);    	compilable	  [FE]  RuntimeException  	175	61	replace
641	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.THIS  ||  state  ==  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.THIS  ||  state  ==  VariableLiveness.MAYBE_LIVE);	          Preconditions.checkState(child.getType()    ==    Token.THIS);    	compilable	  [FE]  RuntimeException  	175	61	replace
642	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.THIS  ||  state  ==  VariableLiveness.MAYBE_LIVE);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.THIS  ||  state  ==  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.THIS  ||  state  ==  VariableLiveness.MAYBE_LIVE);	          Preconditions.checkState(child.getType()    ==    Token.THIS);    	compilable	  [FE]  RuntimeException  	175	61	replace
643	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.THIS  &&  state!=  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.THIS  &&  state!=  VariableLiveness.MAYBE_LIVE);	          Preconditions.checkState(child.getType()    ==    Token.THIS);    	compilable	  [FE]  RuntimeException  	175	61	replace
644	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.THIS  &&  state!=  VariableLiveness.MAYBE_LIVE);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.THIS  &&  state!=  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.THIS  &&  state!=  VariableLiveness.MAYBE_LIVE);	          Preconditions.checkState(child.getType()    ==    Token.THIS);    	compilable	  [FE]  RuntimeException  	175	61	replace
645	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()!=  Token.THIS);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()!=  Token.THIS);	          Preconditions.checkState(child.getType()    ==    Token.THIS);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	175	61	replace
646	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()!=  Token.THIS);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()!=  Token.THIS);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()!=  Token.THIS);	          Preconditions.checkState(child.getType()    ==    Token.THIS);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	175	61	replace
647	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]            RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.THIS  ||  state!=  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.THIS  ||  state!=  VariableLiveness.MAYBE_LIVE);	          Preconditions.checkState(child.getType()    ==    Token.THIS);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	175	61	replace
648	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.THIS  ||  state!=  VariableLiveness.MAYBE_LIVE);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]            RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.THIS  ||  state!=  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.THIS  ||  state!=  VariableLiveness.MAYBE_LIVE);	          Preconditions.checkState(child.getType()    ==    Token.THIS);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	175	61	replace
649	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.THIS  &&  state  ==  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.THIS  &&  state  ==  VariableLiveness.MAYBE_LIVE);	          Preconditions.checkState(child.getType()    ==    Token.THIS);    	compilable	  [FE]  RuntimeException  	175	61	replace
650	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.THIS  &&  state  ==  VariableLiveness.MAYBE_LIVE);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.THIS  &&  state  ==  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.THIS  &&  state  ==  VariableLiveness.MAYBE_LIVE);	          Preconditions.checkState(child.getType()    ==    Token.THIS);    	compilable	  [FE]  RuntimeException  	175	61	replace
651	[BUG]  [BUGGY]  return  child  ||  state  ==  VariableLiveness.MAYBE_LIVE;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  child  ||  state  ==  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  child  ||  state  ==  VariableLiveness.MAYBE_LIVE;	  return    state    ||    child    ==    VariableLiveness.MAYBE_LIVE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	16	None	replace
652	[BUG]  [BUGGY]  return  state  ||  child  >=  VariableLiveness.MAYBE_LIVE;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  ||  child  >=  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  ||  child  >=  VariableLiveness.MAYBE_LIVE;	  return    state    ||    child    ==    VariableLiveness.MAYBE_LIVE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	16	None	replace
653	[BUG]  [BUGGY]  return  state  ||  child.getType()  ==  VariableLiveness.MAYBE_LIVE;  [CE]  incomparable  types:  int  and  VariableLiveness  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  ||  child.getType()  ==  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  ||  child.getType()  ==  VariableLiveness.MAYBE_LIVE;	  return    state    ||    child    ==    VariableLiveness.MAYBE_LIVE;    	non-compiled	[CE]  incomparable  types:  int  and  VariableLiveness	16	None	replace
654	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.VAR);  Preconditions.checkState(child.getType()  ==  Token.VAR);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	                Preconditions.checkState(child.getType()    ==    Token.VAR);    Preconditions.checkState(child.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	170	61	add
655	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.VAR);  Preconditions.checkState(child.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.VAR);  Preconditions.checkState(child.getType()  ==  Token.VAR);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.VAR);    Preconditions.checkState(child.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	170	61	add
656	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.VAR);  Preconditions.checkState(child.getType()!=  Token.VAR);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	                Preconditions.checkState(child.getType()    ==    Token.VAR);    Preconditions.checkState(child.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	170	61	add
657	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.VAR);  Preconditions.checkState(child.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.VAR);  Preconditions.checkState(child.getType()!=  Token.VAR);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.VAR);    Preconditions.checkState(child.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	170	61	add
658	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.VAR);  Preconditions.checkState(child.getType()  >=  Token.VAR);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	                Preconditions.checkState(child.getType()    ==    Token.VAR);    Preconditions.checkState(child.getType()  >=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	170	61	add
659	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.VAR);  Preconditions.checkState(child.getType()  >=  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.VAR);  Preconditions.checkState(child.getType()  >=  Token.VAR);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.VAR);    Preconditions.checkState(child.getType()  >=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	170	61	add
660	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.VAR);  Preconditions.checkState(child.getType()  >>  Token.VAR);  [CE]  no  suitable  method  found  for  checkState(int)  [FE]          RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.VAR);  Preconditions.checkState(child.getType()  >>  Token.VAR);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.VAR);    Preconditions.checkState(child.getType()  >>  Token.VAR);	  	non-compiled	[CE]  no  suitable  method  found  for  checkState(int)	170	None	add
661	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.VAR);  Preconditions.checkState(child.getType()  ==  Token.VCAR);  [CE]  cannot  find  symbol  VCAR  [FE]            RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.VAR);  Preconditions.checkState(child.getType()  ==  Token.VCAR);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.VAR);    Preconditions.checkState(child.getType()  ==  Token.VCAR);	  	non-compiled	[CE]  cannot  find  symbol  VCAR	170	None	add
662	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.VAR);  Preconditions.checkState(child.gettype()  ==  Token.VAR);  [CE]  cannot  find  symbol  [FE]              RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.VAR);  Preconditions.checkState(child.gettype()  ==  Token.VAR);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.VAR);    Preconditions.checkState(child.gettype()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol	170	None	add
663	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.VAR);  Preconditions.checkState(child.getType()  ==  Token.VAR);  }  [CE]  illegal  start  of  type  [FE]                RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.VAR);  Preconditions.checkState(child.getType()  ==  Token.VAR);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.VAR);    Preconditions.checkState(child.getType()  ==  Token.VAR);  }	  	non-compiled	[CE]  illegal  start  of  type	170	None	add
664	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n.getFirstChild());  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n.getFirstChild());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(n.getFirstChild());	  return    isVariableReadBeforeKill(child.getFirstChild());    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	188	None	replace
665	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child,  state.getFirstChild());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child,  state.getFirstChild());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child,  state.getFirstChild());	  return    isVariableReadBeforeKill(child.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol	188	None	replace
666	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n,  child.getFirstChild());  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n,  child.getFirstChild());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(n,  child.getFirstChild());	  return    isVariableReadBeforeKill(child.getFirstChild());    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	188	None	replace
667	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getLastChild());  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getLastChild());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child.getLastChild());	  return    isVariableReadBeforeKill(child.getFirstChild());    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	188	None	replace
668	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child,  variable.getFirstChild());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child,  variable.getFirstChild());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child,  variable.getFirstChild());	  return    isVariableReadBeforeKill(child.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol	188	None	replace
669	[BUG]  [BUGGY]  return  n.getType()  ==  Token.CALL  ||  state.getChildCount()  >  1;  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  n.getType()  ==  Token.CALL  ||  state.getChildCount()  >  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n.getType()  ==  Token.CALL  ||  state.getChildCount()  >  1;	  return    state.getType()    ==    Token.CALL    ||    state.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
670	[BUG]  [BUGGY]  return  child.getType()  ==  Token.CALL  ||  state.getChildCount()  >  1;  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  child.getType()  ==  Token.CALL  ||  state.getChildCount()  >  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  child.getType()  ==  Token.CALL  ||  state.getChildCount()  >  1;	  return    state.getType()    ==    Token.CALL    ||    state.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
671	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL?  state.getChildCount()  :  1;  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()  ==  Token.CALL?  state.getChildCount()  :  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL?  state.getChildCount()  :  1;	  return    state.getType()    ==    Token.CALL    ||    state.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
672	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  ||  state.getChildCount()  >  2;  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()  ==  Token.CALL  ||  state.getChildCount()  >  2;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  ||  state.getChildCount()  >  2;	  return    state.getType()    ==    Token.CALL    ||    state.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
673	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child,  state.getString());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child,  state.getString());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child,  state.getString());	  return    state    &&    isVariableReadBeforeKill(n,    child.getString());    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
674	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  child.getString());  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  child.getString());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  child.getString());	  return    state    &&    isVariableReadBeforeKill(n,    child.getString());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	119	None	replace
675	[BUG]  [BUGGY]  return  n  &&  isVariableReadBeforeKill(child,  state.getString());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  n  &&  isVariableReadBeforeKill(child,  state.getString());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n  &&  isVariableReadBeforeKill(child,  state.getString());	  return    state    &&    isVariableReadBeforeKill(n,    child.getString());    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
676	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n,  variable.getString());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n,  variable.getString());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(n,  variable.getString());	  return    state    &&    isVariableReadBeforeKill(n,    child.getString());    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
677	[BUG]  [BUGGY]  return  state.getRemovableAssignment(),  child,  variable;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignment(),  child,  variable;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignment(),  child,  variable;	  return    state.getRemovableAssignment(),    child;    	non-compiled	[CE]  ';'  expected	105	None	replace
678	[BUG]  [BUGGY]  return  state.getRemovableAssignment(),  child,  VariableLiveness.MAYBE_LIVE;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignment(),  child,  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignment(),  child,  VariableLiveness.MAYBE_LIVE;	  return    state.getRemovableAssignment(),    child;    	non-compiled	[CE]  ';'  expected	105	None	replace
679	[BUG]  [BUGGY]  return  state.getMatchRemovableAssignment(),  child;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getMatchRemovableAssignment(),  child;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getMatchRemovableAssignment(),  child;	  return    state.getRemovableAssignment(),    child;    	non-compiled	[CE]  ';'  expected	105	None	replace
680	[BUG]  [BUGGY]  return  state.getRemoveAssignment(),  child,  variable;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemoveAssignment(),  child,  variable;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemoveAssignment(),  child,  variable;	  return    state.getRemovableAssignment(),    child;    	non-compiled	[CE]  ';'  expected	105	None	replace
681	[BUG]  [BUGGY]  return  state.invoke(variable,  null);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(variable,  null);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(variable,  null);	  return    n.invoke(variable,    state);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
682	[BUG]  [BUGGY]  return  n.invoke(variable,  state,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  n.invoke(variable,  state,  MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n.invoke(variable,  state,  MAYBE_LIVE);	  return    n.invoke(variable,    state);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	81	None	replace
683	[BUG]  [BUGGY]  State  state  =  state.invoke(variable,  n);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  State  state  =  state.invoke(variable,  n);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	State  state  =  state.invoke(variable,  n);	  return    n.invoke(variable,    state);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
684	[BUG]  [BUGGY]  state.invoke(variable,  n);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  state.invoke(variable,  n);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	state.invoke(variable,  n);	  return    n.invoke(variable,    state);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
685	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  variable,  state);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  variable,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child.getFirstChild(),  variable,  state);	  return    isVariableReadBeforeKill(child.getFirstChild(),    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	95	None	replace
686	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.MAYBE_LIVE?  isVariableReadBeforeKill(child.getFirstChild(),  variable);  [CE]  :  expected  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  ==  VariableLiveness.MAYBE_LIVE?  isVariableReadBeforeKill(child.getFirstChild(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  ==  VariableLiveness.MAYBE_LIVE?  isVariableReadBeforeKill(child.getFirstChild(),  variable);	  return    isVariableReadBeforeKill(child.getFirstChild(),    variable);    	non-compiled	[CE]  :  expected	95	None	replace
687	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getParent(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	return  isVariableReadBeforeKill(child.getParent(),  variable);	  return    isVariableReadBeforeKill(child.getFirstChild(),    variable);    	compilable	  [FE]  StackOverflowError  	95	61	replace
688	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getParent(),  variable);  [FE]  StackOverflowError  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getParent(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child.getParent(),  variable);	  return    isVariableReadBeforeKill(child.getFirstChild(),    variable);    	compilable	  [FE]  StackOverflowError  	95	61	replace
689	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.VAR,  state);	          Preconditions.checkState(child.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	171	61	replace
690	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR,  state);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.VAR,  state);	          Preconditions.checkState(child.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	171	61	replace
691	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR  ||  state  ==  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.VAR  ||  state  ==  VariableLiveness.MAYBE_LIVE);	          Preconditions.checkState(child.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	171	61	replace
692	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR  ||  state  ==  VariableLiveness.MAYBE_LIVE);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR  ||  state  ==  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.VAR  ||  state  ==  VariableLiveness.MAYBE_LIVE);	          Preconditions.checkState(child.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	171	61	replace
693	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.MAYBE_LIVE);	          Preconditions.checkState(child.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	171	61	replace
694	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.MAYBE_LIVE);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.MAYBE_LIVE);	          Preconditions.checkState(child.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	171	61	replace
695	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()!=  Token.VAR);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()!=  Token.VAR);	          Preconditions.checkState(child.getType()    ==    Token.VAR);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	171	61	replace
696	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()!=  Token.VAR);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()!=  Token.VAR);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()!=  Token.VAR);	          Preconditions.checkState(child.getType()    ==    Token.VAR);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	171	61	replace
697	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]            RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR  ||  state!=  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.VAR  ||  state!=  VariableLiveness.MAYBE_LIVE);	          Preconditions.checkState(child.getType()    ==    Token.VAR);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	171	61	replace
698	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR  ||  state!=  VariableLiveness.MAYBE_LIVE);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]            RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR  ||  state!=  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.VAR  ||  state!=  VariableLiveness.MAYBE_LIVE);	          Preconditions.checkState(child.getType()    ==    Token.VAR);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	171	61	replace
699	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.FUNCTION);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(child.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	171	61	replace
700	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.FUNCTION);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(child.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	171	61	replace
701	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  child,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  child,  MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  child,  MAYBE_LIVE);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    child);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	142	None	replace
702	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(variable.getString(),  child,  child);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(variable.getString(),  child,  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(variable.getString(),  child,  child);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    child);    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
703	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  KILL_LIVE,  child);  [CE]  cannot  find  symbol  KILL_LIVE  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  KILL_LIVE,  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  KILL_LIVE,  child);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    child);    	non-compiled	[CE]  cannot  find  symbol  KILL_LIVE	142	None	replace
704	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    }    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	23	None	replace
705	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    }    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	23	None	replace
706	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    }    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	23	None	replace
707	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  READ);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  READ);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  READ);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    }    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	23	None	replace
708	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    }    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	23	None	replace
709	[BUG]  [BUGGY]  return  state.isVariableReadBeforeKill(child,  variable.getString());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.isVariableReadBeforeKill(child,  variable.getString());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.isVariableReadBeforeKill(child,  variable.getString());	  return    isVariableReadBeforeKill(child,    variable.getString());    	non-compiled	[CE]  cannot  find  symbol	190	None	replace
710	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child,  variable,  state.getString());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child,  variable,  state.getString());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child,  variable,  state.getString());	  return    isVariableReadBeforeKill(child,    variable.getString());    	non-compiled	[CE]  cannot  find  symbol	190	None	replace
711	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child,  variable.toString());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	return  isVariableReadBeforeKill(child,  variable.toString());	  return    isVariableReadBeforeKill(child,    variable.getString());    	compilable	  [FE]  AssertionFailedError  	190	57	replace
712	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child,  variable.toString());  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child,  variable.toString());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child,  variable.toString());	  return    isVariableReadBeforeKill(child,    variable.getString());    	compilable	  [FE]  AssertionFailedError  	190	57	replace
713	[BUG]  [BUGGY]  return  n.getValueAssignment();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  n.getValueAssignment();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n.getValueAssignment();	  return    state.getValueAssignment();    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
714	[BUG]  [BUGGY]  return  state.getValueAssignment(),  variable;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValueAssignment(),  variable;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValueAssignment(),  variable;	  return    state.getValueAssignment();    	non-compiled	[CE]  ';'  expected	127	None	replace
715	[BUG]  [BUGGY]  return  child.getValueAssignment();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  child.getValueAssignment();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  child.getValueAssignment();	  return    state.getValueAssignment();    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
716	[BUG]  [BUGGY]  return  state.getValueAssignment()  +  1;  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValueAssignment()  +  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValueAssignment()  +  1;	  return    state.getValueAssignment();    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
717	[BUG]  [BUGGY]  return  state.getValueAssignment(variable);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValueAssignment(variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValueAssignment(variable);	  return    state.getValueAssignment();    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
718	[BUG]  [BUGGY]  return  state.getValueAssignment(),  variable);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValueAssignment(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValueAssignment(),  variable);	  return    state.getValueAssignment();    	non-compiled	[CE]  ';'  expected	127	None	replace
719	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  KILL_LIVE,  null);  [CE]  cannot  find  symbol  KILL_LIVE  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  KILL_LIVE,  null);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  KILL_LIVE,  null);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  KILL_LIVE	55	None	replace
720	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(n.getString(),  variable,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(n.getString(),  variable,  null);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(n.getString(),  variable,  null);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	55	None	replace
721	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  null,  mayHaveSideEffects);  [CE]  cannot  find  symbol  mayHaveSideEffects  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  null,  mayHaveSideEffects);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  null,  mayHaveSideEffects);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  mayHaveSideEffects	55	None	replace
722	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  REGEXP,  null);  [CE]  cannot  find  symbol  REGEXP  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  REGEXP,  null);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  REGEXP,  null);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  REGEXP	55	None	replace
723	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  VARIABLE_LIVE,  null);  [CE]  cannot  find  symbol  VARIABLE_LIVE  [FE]                                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  VARIABLE_LIVE,  null);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  VARIABLE_LIVE,  null);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  VARIABLE_LIVE	55	None	replace
724	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  VAR_LIVE_FACTOR,  null);  [CE]  cannot  find  symbol  VAR_LIVE_FACTOR  [FE]                                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  VAR_LIVE_FACTOR,  null);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  VAR_LIVE_FACTOR,  null);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  VAR_LIVE_FACTOR	55	None	replace
725	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable);  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	state    =    isVariableReadBeforeKill(child,    variable);    state  =  isVariableReadBeforeKill(child,  variable);	  	compilable	  [FE]  AssertionFailedError  	19	57	add
726	[BUG]  [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable);  state  =  isVariableReadBeforeKill(child,  variable);  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable);  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	state    =    isVariableReadBeforeKill(child,    variable);    state  =  isVariableReadBeforeKill(child,  variable);	  	compilable	  [FE]  AssertionFailedError  	19	57	add
727	[BUG]  [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable);  State  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable);  State  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	state    =    isVariableReadBeforeKill(child,    variable);    State  state  =  isVariableReadBeforeKill(child,  variable);	  	non-compiled	[CE]  cannot  find  symbol	19	None	add
728	[BUG]  [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable);  junit.framework.AssertionFailedError:  Expected:  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable);  junit.framework.AssertionFailedError:  Expected:  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	state    =    isVariableReadBeforeKill(child,    variable);    junit.framework.AssertionFailedError:  Expected:  state  =  isVariableReadBeforeKill(child,  variable);	  	non-compiled	[CE]  not  a  statement	19	None	add
729	[BUG]  [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable);  State.READ  =  isVariableReadBeforeKill(child,  variable);  [CE]  cannot  find  symbol  State  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable);  State.READ  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	state    =    isVariableReadBeforeKill(child,    variable);    State.READ  =  isVariableReadBeforeKill(child,  variable);	  	non-compiled	[CE]  cannot  find  symbol  State	19	None	add
730	[BUG]  [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  ==  return  VariableLiveness.READ);  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  ==  return  VariableLiveness.READ);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	state    =    isVariableReadBeforeKill(child,    variable);    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  ==  return  VariableLiveness.READ);	  	non-compiled	[CE]  not  a  statement	19	None	add
731	[BUG]  [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getType()  ==  Token.NAME);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	state    =    isVariableReadBeforeKill(child,    variable);    junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getType()  ==  Token.NAME);	  	non-compiled	[CE]  not  a  statement	19	None	add
732	[BUG]  [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(child,  variable);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(child,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	state    =    isVariableReadBeforeKill(child,    variable);    junit.framework.AssertionFailedError:  Expected:  function  FUNC(child,  variable);	  	non-compiled	[CE]  not  a  statement	19	None	add
733	[BUG]  [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getType()  ==  Token.BLOCK);  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getType()  ==  Token.BLOCK);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	state    =    isVariableReadBeforeKill(child,    variable);    junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getType()  ==  Token.BLOCK);	  	non-compiled	[CE]  not  a  statement	19	None	add
734	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()!=  2;  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()!=  2;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  &&  state.getChildCount()!=  2;	  return    state.getType()    ==    Token.CALL    &&    state.getChildCount()!=    1;    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
735	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  <  2  ||  state.getChildCount()  >  1)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  <  2  ||  state.getChildCount()  >  1)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  <  2  ||  state.getChildCount()  >  1)  {	  return    state.getType()    ==    Token.CALL    &&    state.getChildCount()    <    1)    {    	non-compiled	[CE]  ';'  expected	46	None	replace
736	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MOVE_FACTOR);  [CE]  cannot  find  symbol  MOVE_FACTOR  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MOVE_FACTOR);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MOVE_FACTOR);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    MOVED);    	non-compiled	[CE]  cannot  find  symbol  MOVE_FACTOR	140	None	replace
737	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MOVE_DECEMBER);  [CE]  cannot  find  symbol  MOVE_DECEMBER  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MOVE_DECEMBER);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MOVE_DECEMBER);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    MOVED);    	non-compiled	[CE]  cannot  find  symbol  MOVE_DECEMBER	140	None	replace
738	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MOVE_MILLIS);  [CE]  cannot  find  symbol  MOVE_MILLIS  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MOVE_MILLIS);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MOVE_MILLIS);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    MOVED);    	non-compiled	[CE]  cannot  find  symbol  MOVE_MILLIS	140	None	replace
739	[BUG]  [BUGGY]  return  child.getRemovableAssignmentsElimination(),  state;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  child.getRemovableAssignmentsElimination(),  state;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  child.getRemovableAssignmentsElimination(),  state;	  return    child.getRemovableAssignmentsElimination();    	non-compiled	[CE]  ';'  expected	36	None	replace
740	[BUG]  [BUGGY]  return  body.getRemovableAssignmentsElimination();  [CE]  cannot  find  symbol  body  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  body.getRemovableAssignmentsElimination();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  body.getRemovableAssignmentsElimination();	  return    child.getRemovableAssignmentsElimination();    	non-compiled	[CE]  cannot  find  symbol  body	36	None	replace
741	[BUG]  [BUGGY]  return  parent.getRemovableAssignmentsElimination();  [CE]  cannot  find  symbol  parent  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  parent.getRemovableAssignmentsElimination();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  parent.getRemovableAssignmentsElimination();	  return    child.getRemovableAssignmentsElimination();    	non-compiled	[CE]  cannot  find  symbol  parent	36	None	replace
742	[BUG]  [BUGGY]  Return  child.getRemovableAssignmentsElimination();  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Return  child.getRemovableAssignmentsElimination();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Return  child.getRemovableAssignmentsElimination();	  return    child.getRemovableAssignmentsElimination();    	non-compiled	[CE]  ';'  expected	36	None	replace
743	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.THIS);  Preconditions.checkState(child.getType()  ==  Token.THIS);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	                Preconditions.checkState(child.getType()    ==    Token.THIS);    Preconditions.checkState(child.getType()  ==  Token.THIS);	  	compilable	  [FE]  RuntimeException  	174	61	add
744	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.THIS);  Preconditions.checkState(child.getType()  ==  Token.THIS);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.THIS);  Preconditions.checkState(child.getType()  ==  Token.THIS);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.THIS);    Preconditions.checkState(child.getType()  ==  Token.THIS);	  	compilable	  [FE]  RuntimeException  	174	61	add
745	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.THIS);  Preconditions.checkState(child.getType()!=  Token.THIS);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	                Preconditions.checkState(child.getType()    ==    Token.THIS);    Preconditions.checkState(child.getType()!=  Token.THIS);	  	compilable	  [FE]  RuntimeException  	174	61	add
746	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.THIS);  Preconditions.checkState(child.getType()!=  Token.THIS);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.THIS);  Preconditions.checkState(child.getType()!=  Token.THIS);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.THIS);    Preconditions.checkState(child.getType()!=  Token.THIS);	  	compilable	  [FE]  RuntimeException  	174	61	add
747	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.THIS);  Preconditions.checkState(child.getType()  >=  Token.THIS);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	                Preconditions.checkState(child.getType()    ==    Token.THIS);    Preconditions.checkState(child.getType()  >=  Token.THIS);	  	compilable	  [FE]  RuntimeException  	174	61	add
748	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.THIS);  Preconditions.checkState(child.getType()  >=  Token.THIS);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.THIS);  Preconditions.checkState(child.getType()  >=  Token.THIS);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.THIS);    Preconditions.checkState(child.getType()  >=  Token.THIS);	  	compilable	  [FE]  RuntimeException  	174	61	add
749	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.THIS);  Preconditions.checkState(child.getType()  >>  Token.THIS);  [CE]  no  suitable  method  found  for  checkState(int)  [FE]          RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.THIS);  Preconditions.checkState(child.getType()  >>  Token.THIS);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.THIS);    Preconditions.checkState(child.getType()  >>  Token.THIS);	  	non-compiled	[CE]  no  suitable  method  found  for  checkState(int)	174	None	add
750	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.THIS);  Preconditions.checkState(child.gettype()  ==  Token.THIS);  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.THIS);  Preconditions.checkState(child.gettype()  ==  Token.THIS);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.THIS);    Preconditions.checkState(child.gettype()  ==  Token.THIS);	  	non-compiled	[CE]  cannot  find  symbol	174	None	add
751	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.THIS);  Preconditions.checkState(child.getType()  ==  Token.THIS);  }  [CE]  illegal  start  of  type  [FE]              RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.THIS);  Preconditions.checkState(child.getType()  ==  Token.THIS);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.THIS);    Preconditions.checkState(child.getType()  ==  Token.THIS);  }	  	non-compiled	[CE]  illegal  start  of  type	174	None	add
752	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.THIS);  Preconditions.checkState(child.getType()  [Delete]  Token.THIS);  [CE]  ')'  expected  [FE]                RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.THIS);  Preconditions.checkState(child.getType()  [Delete]  Token.THIS);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.THIS);    Preconditions.checkState(child.getType()  [Delete]  Token.THIS);	  	non-compiled	[CE]  ')'  expected	174	None	add
753	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(n,  n.getFirstChild(),  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(n,  n.getFirstChild(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(n,  n.getFirstChild(),  variable);	  return    state    &&    isVariableReadBeforeKill(n.getFirstChild(),    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	89	None	replace
754	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(n.getFirstChild(),  variable,  child);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(n.getFirstChild(),  variable,  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(n.getFirstChild(),  variable,  child);	  return    state    &&    isVariableReadBeforeKill(n.getFirstChild(),    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	89	None	replace
755	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(n.getFirstChild(),  variable,  parent);  [CE]  cannot  find  symbol  parent  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(n.getFirstChild(),  variable,  parent);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(n.getFirstChild(),  variable,  parent);	  return    state    &&    isVariableReadBeforeKill(n.getFirstChild(),    variable);    	non-compiled	[CE]  cannot  find  symbol  parent	89	None	replace
756	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  FUNC(param1  {  AssertionFailedError);  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  FUNC(param1  {  AssertionFailedError);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  expected:  function  FUNC(param1  {  AssertionFailedError);	          junit.framework.AssertionFailedError:    expected:    function    FUNC(param1    >>    AssertionFailedError);    	non-compiled	[CE]  not  a  statement	111	None	replace
757	[BUG]  [BUGGY]  return  n,  state.getValue();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  n,  state.getValue();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n,  state.getValue();	  return    state,    n.getValue();    	non-compiled	[CE]  ';'  expected	181	None	replace
758	[BUG]  [BUGGY]  return  state,  n.getLastChild();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state,  n.getLastChild();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state,  n.getLastChild();	  return    state,    n.getValue();    	non-compiled	[CE]  ';'  expected	181	None	replace
759	[BUG]  [BUGGY]  return  state,  n.getValue()  +  1;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state,  n.getValue()  +  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state,  n.getValue()  +  1;	  return    state,    n.getValue();    	non-compiled	[CE]  ';'  expected	181	None	replace
760	[BUG]  [BUGGY]  return  state,  n.getFirstChild();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state,  n.getFirstChild();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state,  n.getFirstChild();	  return    state,    n.getValue();    	non-compiled	[CE]  ';'  expected	181	None	replace
761	[BUG]  [BUGGY]  return  state,  n.getNext();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state,  n.getNext();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state,  n.getNext();	  return    state,    n.getValue();    	non-compiled	[CE]  ';'  expected	181	None	replace
762	[BUG]  [BUGGY]  return  state.getValue(variable,  n);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValue(variable,  n);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValue(variable,  n);	  return    state.getValue(variable);    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
763	[BUG]  [BUGGY]  return  n.getValue(variable);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  n.getValue(variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n.getValue(variable);	  return    state.getValue(variable);    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
764	[BUG]  [BUGGY]  return  state.getValue(variable,  child);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValue(variable,  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValue(variable,  child);	  return    state.getValue(variable);    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
765	[BUG]  [BUGGY]  return  state.getValue(variable,  KILL);  [CE]  cannot  find  symbol  KILL  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValue(variable,  KILL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValue(variable,  KILL);	  return    state.getValue(variable);    	non-compiled	[CE]  cannot  find  symbol  KILL	125	None	replace
766	[BUG]  [BUGGY]  return  state.getValue(variable,  null);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValue(variable,  null);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValue(variable,  null);	  return    state.getValue(variable);    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
767	[BUG]  [BUGGY]  return  state.getValue(variable,  variable);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValue(variable,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValue(variable,  variable);	  return    state.getValue(variable);    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
768	[BUG]  [BUGGY]  return  state  &&  state  >>  VariableLiveness.MAYBE_LIVE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  state  >>  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state  >>  VariableLiveness.MAYBE_LIVE;	  return    state    ||    state    >=    VariableLiveness.MAYBE_LIVE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	97	None	replace
769	[BUG]  [BUGGY]  return  state  ||  module!=  VariableLiveness.MAYBE_LIVE;  [CE]  cannot  find  symbol  module  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  ||  module!=  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  ||  module!=  VariableLiveness.MAYBE_LIVE;	  return    state    ||    module    ==    VariableLiveness.MAYBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  module	191	None	replace
770	[BUG]  [BUGGY]  return  state  &&  module  ==  VariableLiveness.MAYBE_LIVE;  [CE]  cannot  find  symbol  module  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  module  ==  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  module  ==  VariableLiveness.MAYBE_LIVE;	  return    state    ||    module    ==    VariableLiveness.MAYBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  module	191	None	replace
771	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  &&  child.getChildCount()!=  1;  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()  ==  Token.CALL  &&  child.getChildCount()!=  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  &&  child.getChildCount()!=  1;	  return    state    &&    state.getType()    ==    Token.CALL    &&    child.getChildCount()    >=    1;    	non-compiled	[CE]  cannot  find  symbol	177	None	replace
772	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  &&  child.getChildCount()  >>  1;  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()  ==  Token.CALL  &&  child.getChildCount()  >>  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  &&  child.getChildCount()  >>  1;	  return    state    &&    state.getType()    ==    Token.CALL    &&    child.getChildCount()    >=    1;    	non-compiled	[CE]  cannot  find  symbol	177	None	replace
773	[BUG]  [BUGGY]  return  child.getType()  ==  Token.CALL  &&  state.getChildCount()  >=  1;  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  child.getType()  ==  Token.CALL  &&  state.getChildCount()  >=  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  child.getType()  ==  Token.CALL  &&  state.getChildCount()  >=  1;	  return    state    &&    state.getType()    ==    Token.CALL    &&    child.getChildCount()    >=    1;    	non-compiled	[CE]  cannot  find  symbol	177	None	replace
774	[BUG]  [BUGGY]  return  state  &&  child.getType()  ==  Token.CALL  &&  state.getChildCount()!=  1;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  child.getType()  ==  Token.CALL  &&  state.getChildCount()!=  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  child.getType()  ==  Token.CALL  &&  state.getChildCount()!=  1;	  return    state    &&    state.getType()    ==    Token.CALL    &&    child.getChildCount()    >=    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	177	None	replace
775	[BUG]  [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()  ==  2)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()  ==  2)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()  ==  2)  {	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >    2)    {    	non-compiled	[CE]  ';'  expected	137	None	replace
776	[BUG]  [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()  <  2)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()  <  2)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()  <  2)  {	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >    2)    {    	non-compiled	[CE]  ';'  expected	137	None	replace
777	[BUG]  [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()!=  2)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()!=  2)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()!=  2)  {	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >    2)    {    	non-compiled	[CE]  ';'  expected	137	None	replace
778	[BUG]  [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >=  2)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >=  2)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >=  2)  {	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >    2)    {    	non-compiled	[CE]  ';'  expected	137	None	replace
779	[BUG]  [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  ||  state.getChildCount()  >  2)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  ||  state.getChildCount()  >  2)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state.getType()  ==  Token.CALL  ||  state.getChildCount()  >  2)  {	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >    2)    {    	non-compiled	[CE]  ';'  expected	137	None	replace
780	[BUG]  [BUGGY]  return  n.getRemovableAssignmentsElimination(child);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  n.getRemovableAssignmentsElimination(child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n.getRemovableAssignmentsElimination(child);	  return    state.getRemovableAssignmentsElimination(child);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
781	[BUG]  [BUGGY]  return  child.getRemovableAssignmentsElimination(state);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  child.getRemovableAssignmentsElimination(state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  child.getRemovableAssignmentsElimination(state);	  return    state.getRemovableAssignmentsElimination(child);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
782	[BUG]  [BUGGY]  return  state.getRemovableAssignmentsElimination(varvariable);  [CE]  cannot  find  symbol  var  [FE]                                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignmentsElimination(varvariable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignmentsElimination(varvariable);	  return    state.getRemovableAssignmentsElimination(child);    	non-compiled	[CE]  cannot  find  symbol  var	37	None	replace
783	[BUG]  [BUGGY]  Return  state.getRemovableAssignmentsElimination();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Return  state.getRemovableAssignmentsElimination();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Return  state.getRemovableAssignmentsElimination();	  return    matchRemovableAssignmentsElimination.getRemovableAssignmentsElimination();    	non-compiled	[CE]  ';'  expected	154	None	replace
784	[BUG]  [BUGGY]  return  state.getRemovableStandardAssignmentsElimination();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableStandardAssignmentsElimination();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableStandardAssignmentsElimination();	  return    matchRemovableAssignmentsElimination.getRemovableAssignmentsElimination();    	non-compiled	[CE]  cannot  find  symbol	154	None	replace
785	[BUG]  [BUGGY]  removableAssignmentsElimination.getRemovableAssignmentsLimination();  [CE]  cannot  find  symbol  removableAssignmentsElimination  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  removableAssignmentsElimination.getRemovableAssignmentsLimination();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	removableAssignmentsElimination.getRemovableAssignmentsLimination();	  return    matchRemovableAssignmentsElimination.getRemovableAssignmentsElimination();    	non-compiled	[CE]  cannot  find  symbol  removableAssignmentsElimination	154	None	replace
786	[BUG]  [BUGGY]  return  n.getValue()  ||  state  ==  VariableLiveness.MAYBE_LIVE;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  n.getValue()  ||  state  ==  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n.getValue()  ||  state  ==  VariableLiveness.MAYBE_LIVE;	  return    n.getValue();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
787	[BUG]  [BUGGY]  return  n.getValue()  ||  state!=  VariableLiveness.MAYBE_LIVE;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  n.getValue()  ||  state!=  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n.getValue()  ||  state!=  VariableLiveness.MAYBE_LIVE;	  return    n.getValue();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
788	[BUG]  [BUGGY]  return  n.getValue()  +  child.getLastChild();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  n.getValue()  +  child.getLastChild();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n.getValue()  +  child.getLastChild();	  return    n.getValue();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
789	[BUG]  [BUGGY]  return  n.getValue()  +  1;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  n.getValue()  +  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n.getValue()  +  1;	  return    n.getValue();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
790	[BUG]  [BUGGY]  return  state,  child.getRemovableAssigns();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state,  child.getRemovableAssigns();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state,  child.getRemovableAssigns();	  return    state,    matchRemovableAssigns.getRemovableAssigns();    	non-compiled	[CE]  ';'  expected	160	None	replace
791	[BUG]  [BUGGY]  return  state,  n.getRemovableAssigns();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state,  n.getRemovableAssigns();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state,  n.getRemovableAssigns();	  return    state,    matchRemovableAssigns.getRemovableAssigns();    	non-compiled	[CE]  ';'  expected	160	None	replace
792	[BUG]  [BUGGY]  return  state,  variable.getRemovableAssigns();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state,  variable.getRemovableAssigns();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state,  variable.getRemovableAssigns();	  return    state,    matchRemovableAssigns.getRemovableAssigns();    	non-compiled	[CE]  ';'  expected	160	None	replace
793	[BUG]  [BUGGY]  return  state,  parent.getRemovableAssigns();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state,  parent.getRemovableAssigns();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state,  parent.getRemovableAssigns();	  return    state,    matchRemovableAssigns.getRemovableAssigns();    	non-compiled	[CE]  ';'  expected	160	None	replace
794	[BUG]  [BUGGY]  return  child,  state.getRemovableAssigns();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  child,  state.getRemovableAssigns();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  child,  state.getRemovableAssigns();	  return    state,    matchRemovableAssigns.getRemovableAssigns();    	non-compiled	[CE]  ';'  expected	160	None	replace
795	[BUG]  [BUGGY]  return  state,  dataArea.getRemovableAssigns();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state,  dataArea.getRemovableAssigns();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state,  dataArea.getRemovableAssigns();	  return    state,    matchRemovableAssigns.getRemovableAssigns();    	non-compiled	[CE]  ';'  expected	160	None	replace
796	[BUG]  [BUGGY]  return  state,  matchRemovableAssigns.getMutatorAssigns();  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state,  matchRemovableAssigns.getMutatorAssigns();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state,  matchRemovableAssigns.getMutatorAssigns();	  return    state,    matchRemovableAssigns.getRemovableAssigns();    	non-compiled	[CE]  ';'  expected	160	None	replace
797	[BUG]  [BUGGY]  return  state.getValue()  *  1;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValue()  *  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValue()  *  1;	  return    state.getValue()    +    1;    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
798	[BUG]  [BUGGY]  return  state.getValue()  +  2;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValue()  +  2;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValue()  +  2;	  return    state.getValue()    +    1;    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
799	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  }	          VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state    ==    VariableLiveness.MAYBE_LIVE)    {    }    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	44	None	replace
800	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  }	          VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state    ==    VariableLiveness.MAYBE_LIVE)    {    }    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	44	None	replace
801	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  READ);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  READ);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  READ);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  }	          VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state    ==    VariableLiveness.MAYBE_LIVE)    {    }    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	44	None	replace
802	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  1);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  1);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  1);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  }	          VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state    ==    VariableLiveness.MAYBE_LIVE)    {    }    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	44	None	replace
803	[BUG]  [BUGGY]  return  state  ||  state.getType()  ==  Token.CALL  &&  state.getChildCount()  ==  1)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  ||  state.getType()  ==  Token.CALL  &&  state.getChildCount()  ==  1)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  ||  state.getType()  ==  Token.CALL  &&  state.getChildCount()  ==  1)  {	  return    state    ||    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1)    {    	non-compiled	[CE]  ';'  expected	149	None	replace
804	[BUG]  [BUGGY]  return  state  ||  state.getType()  ==  Token.CALL  &&  state.getChildCount()  <  1)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  ||  state.getType()  ==  Token.CALL  &&  state.getChildCount()  <  1)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  ||  state.getType()  ==  Token.CALL  &&  state.getChildCount()  <  1)  {	  return    state    ||    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1)    {    	non-compiled	[CE]  ';'  expected	149	None	replace
805	[BUG]  [BUGGY]  return  state  ||  state.getType()  ==  Token.CALL  &&  state.getChildCount()!=  1)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  ||  state.getType()  ==  Token.CALL  &&  state.getChildCount()!=  1)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  ||  state.getType()  ==  Token.CALL  &&  state.getChildCount()!=  1)  {	  return    state    ||    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1)    {    	non-compiled	[CE]  ';'  expected	149	None	replace
806	[BUG]  [BUGGY]  return  state  ||  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >=  1)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  ||  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >=  1)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  ||  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >=  1)  {	  return    state    ||    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1)    {    	non-compiled	[CE]  ';'  expected	149	None	replace
807	[BUG]  [BUGGY]  return  State.FALSE  ||  state  ==  VariableLiveness.MAYBE_LIVE;  [CE]  cannot  find  symbol  State  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.FALSE  ||  state  ==  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.FALSE  ||  state  ==  VariableLiveness.MAYBE_LIVE;	  return    State.FALSE;    	non-compiled	[CE]  cannot  find  symbol  State	129	None	replace
808	[BUG]  [BUGGY]  return  State.FALSE  ||  state!=  VariableLiveness.MAYBE_LIVE;  [CE]  cannot  find  symbol  State  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.FALSE  ||  state!=  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.FALSE  ||  state!=  VariableLiveness.MAYBE_LIVE;	  return    State.FALSE;    	non-compiled	[CE]  cannot  find  symbol  State	129	None	replace
809	[BUG]  [BUGGY]  return  State.FALSE  &&  state!=  VariableLiveness.MAYBE_LIVE;  [CE]  cannot  find  symbol  State  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.FALSE  &&  state!=  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.FALSE  &&  state!=  VariableLiveness.MAYBE_LIVE;	  return    State.FALSE;    	non-compiled	[CE]  cannot  find  symbol  State	129	None	replace
810	[BUG]  [BUGGY]  return  State.FALSE  &&  state  ==  VariableLiveness.MAYBE_LIVE;  [CE]  cannot  find  symbol  State  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.FALSE  &&  state  ==  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.FALSE  &&  state  ==  VariableLiveness.MAYBE_LIVE;	  return    State.FALSE;    	non-compiled	[CE]  cannot  find  symbol  State	129	None	replace
811	[BUG]  [BUGGY]  return  State.FALSE,  state;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.FALSE,  state;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.FALSE,  state;	  return    State.FALSE;    	non-compiled	[CE]  ';'  expected	129	None	replace
812	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  FUNC(param1  {  AssertionFailedError  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  FUNC(param1  {  AssertionFailedError  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  expected:  function  FUNC(param1  {  AssertionFailedError	          junit.framework.AssertionFailedError:    expected:    function    FUNC(param1    >>    AssertionFailedError    	non-compiled	[CE]  not  a  statement	115	None	replace
813	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  ==  2;  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  ==  2;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  ==  2;	  return    state.getType()    ==    Token.CALL    &&    state.getChildCount()    [Delete]    1;    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
814	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	replace
815	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	replace
816	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	replace
817	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MOVED)  {  [CE]  reached  end  of  file  while  parsing  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MOVED)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MOVED)  {	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	replace
818	[BUG]  [BUGGY]  return  state.getRemovableAssigns()  /  1;  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssigns()  /  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssigns()  /  1;	  return    state.getRemovableAssigns()    +    1;    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
819	[BUG]  [BUGGY]  return  state.getRemovableAssigns(),  n  +  1;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssigns(),  n  +  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssigns(),  n  +  1;	  return    state.getRemovableAssigns()    +    1;    	non-compiled	[CE]  ';'  expected	87	None	replace
820	[BUG]  [BUGGY]  return  state.getRemovableAssigns()  -  1;  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssigns()  -  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssigns()  -  1;	  return    state.getRemovableAssigns()    +    1;    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
821	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >=  2)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >=  2)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >=  2)  {	  return    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >=    1)    {    	non-compiled	[CE]  ';'  expected	48	None	replace
822	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n.getString());  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n.getString());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(n.getString());	  return    isVariableReadBeforeKill(child.getString());    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	189	None	replace
823	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getString()  +  1);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getString()  +  1);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child.getString()  +  1);	  return    isVariableReadBeforeKill(child.getString());    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	189	None	replace
824	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n,  child.getString());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	return  isVariableReadBeforeKill(n,  child.getString());	  return    isVariableReadBeforeKill(child.getString());    	compilable	  [FE]  StackOverflowError  	189	61	replace
825	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n,  child.getString());  [FE]  StackOverflowError  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n,  child.getString());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(n,  child.getString());	  return    isVariableReadBeforeKill(child.getString());    	compilable	  [FE]  StackOverflowError  	189	61	replace
826	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getString()  +  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getString()  +  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child.getString()  +  variable);	  return    isVariableReadBeforeKill(child.getString());    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	189	None	replace
827	[BUG]  [BUGGY]  return  child  ||  state!=  VariableLiveness.MAYBE_LIVE;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  child  ||  state!=  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  child  ||  state!=  VariableLiveness.MAYBE_LIVE;	  return    state    ||    child!=    VariableLiveness.MAYBE_LIVE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	96	None	replace
828	[BUG]  [BUGGY]  return  state  ||  child.getType()!=  VariableLiveness.MAYBE_LIVE;  [CE]  incomparable  types:  int  and  VariableLiveness  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  ||  child.getType()!=  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  ||  child.getType()!=  VariableLiveness.MAYBE_LIVE;	  return    state    ||    child!=    VariableLiveness.MAYBE_LIVE;    	non-compiled	[CE]  incomparable  types:  int  and  VariableLiveness	96	None	replace
829	[BUG]  [BUGGY]  return  state  ||  child  >>  VariableLiveness.MAYBE_LIVE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  ||  child  >>  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  ||  child  >>  VariableLiveness.MAYBE_LIVE;	  return    state    ||    child!=    VariableLiveness.MAYBE_LIVE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	96	None	replace
830	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    StackOverflowError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state!=  VariableLiveness.MAYBE_LIVE?  isVariableReadBeforeKill(child,  variable):  null;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	return  state!=  VariableLiveness.MAYBE_LIVE?  isVariableReadBeforeKill(child,  variable):  null;	  return    isVariableReadBeforeKill(n,    variable);    	compilable	  [FE]  AssertionFailedError  	187	57	replace
831	[BUG]  [BUGGY]  return  state!=  VariableLiveness.MAYBE_LIVE?  isVariableReadBeforeKill(child,  variable):  null;  [FE]  AssertionFailedError  [FE]    StackOverflowError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state!=  VariableLiveness.MAYBE_LIVE?  isVariableReadBeforeKill(child,  variable):  null;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state!=  VariableLiveness.MAYBE_LIVE?  isVariableReadBeforeKill(child,  variable):  null;	  return    isVariableReadBeforeKill(n,    variable);    	compilable	  [FE]  AssertionFailedError  	187	57	replace
832	[BUG]  [BUGGY]  return  state  ||  n  >=  VariableLiveness.MAYBE_LIVE;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  ||  n  >=  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  ||  n  >=  VariableLiveness.MAYBE_LIVE;	  return    state    ||    n!=    VariableLiveness.MAYBE_LIVE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	98	None	replace
833	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	18	None	replace
834	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	18	None	replace
835	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.READ)  {  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.READ)  {  return  state;  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.READ)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	18	None	replace
836	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	18	None	replace
837	[BUG]  [BUGGY]  return  state  &&  child.getType()  ==  Token.CALL  &&  child.getChildCount()  >  1;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  child.getType()  ==  Token.CALL  &&  child.getChildCount()  >  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  child.getType()  ==  Token.CALL  &&  child.getChildCount()  >  1;	  return    state    &&    state.getType()    ==    Token.CALL    &&    child.getChildCount()    >    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	107	None	replace
838	[BUG]  [BUGGY]  return  state  &&  children.getType()  ==  Token.CALL  &&  child.getChildCount()  >  1;  [CE]  cannot  find  symbol  children  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  children.getType()  ==  Token.CALL  &&  child.getChildCount()  >  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  children.getType()  ==  Token.CALL  &&  child.getChildCount()  >  1;	  return    state    &&    state.getType()    ==    Token.CALL    &&    child.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol  children	107	None	replace
839	[BUG]  [BUGGY]  return  state  ||  child.getType()  ==  Token.CALL  &&  child.getChildCount()  >  1;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  ||  child.getType()  ==  Token.CALL  &&  child.getChildCount()  >  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  ||  child.getType()  ==  Token.CALL  &&  child.getChildCount()  >  1;	  return    state    &&    state.getType()    ==    Token.CALL    &&    child.getChildCount()    >    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	107	None	replace
840	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  {  AssertionFailedError);  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  {  AssertionFailedError);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  {  AssertionFailedError);	          junit.framework.AssertionFailedError:    Expected:    function    FUNC(param1    >>    AssertionFailedError);    	non-compiled	[CE]  not  a  statement	112	None	replace
841	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  >>  AssertionFailedError);  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  >>  AssertionFailedError);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  >>  AssertionFailedError);	          junit.framework.AssertionFailedError:    Expected:    function    FUNC(param1    >>    AssertionFailedError);    	non-compiled	[CE]  not  a  statement	112	None	replace
842	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  }  AssertionFailedError);  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  }  AssertionFailedError);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  }  AssertionFailedError);	          junit.framework.AssertionFailedError:    Expected:    function    FUNC(param1    >>    AssertionFailedError);    	non-compiled	[CE]  not  a  statement	112	None	replace
843	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  <  AssertionFailedError);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  <  AssertionFailedError);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  <  AssertionFailedError);	          junit.framework.AssertionFailedError:    Expected:    function    FUNC(param1    >>    AssertionFailedError);    	non-compiled	[CE]  not  a  statement	112	None	replace
844	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  >>  return  VariableLiveness.READ);  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  >>  return  VariableLiveness.READ);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  >>  return  VariableLiveness.READ);	          junit.framework.AssertionFailedError:    Expected:    function    FUNC(param1    >>    AssertionFailedError);    	non-compiled	[CE]  not  a  statement	112	None	replace
845	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  +  AssertionFailedError);  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  +  AssertionFailedError);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  +  AssertionFailedError);	          junit.framework.AssertionFailedError:    Expected:    function    FUNC(param1    >>    AssertionFailedError);    	non-compiled	[CE]  not  a  statement	112	None	replace
846	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  <  2)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  <  2)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  <  2)  {	  return    state.getType()    ==    Token.CALL    &&    state.getChildCount()    <    1)    {    	non-compiled	[CE]  ';'  expected	46	None	replace
847	[BUG]  [BUGGY]  return  state.getRemovableStandardAssignments();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableStandardAssignments();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableStandardAssignments();	  return    matchRemovableAssignments.getRemovableAssignments();    	non-compiled	[CE]  cannot  find  symbol	158	None	replace
848	[BUG]  [BUGGY]  return  state.removableAssignments();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.removableAssignments();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.removableAssignments();	  return    matchRemovableAssignments.getRemovableAssignments();    	non-compiled	[CE]  cannot  find  symbol	158	None	replace
849	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  n.getFirstChild());  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  n.getFirstChild());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  n.getFirstChild());	  return    state    &&    isVariableReadBeforeKill(child,    n.getFirstChild(),    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	90	None	replace
850	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  n);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  n);	  return    state    &&    isVariableReadBeforeKill(child,    n.getFirstChild(),    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	90	None	replace
851	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child,  variable,  n.getFirstChild());  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child,  variable,  n.getFirstChild());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child,  variable,  n.getFirstChild());	  return    state    &&    isVariableReadBeforeKill(child,    n.getFirstChild(),    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	90	None	replace
852	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.GETPROP);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.GETPROP);	          Preconditions.checkState(child.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	166	61	replace
853	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.GETPROP);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.GETPROP);	          Preconditions.checkState(child.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	166	61	replace
854	[BUG]  [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  ||  state.getChildCount()  >=  1)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  ||  state.getChildCount()  >=  1)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state.getType()  ==  Token.CALL  ||  state.getChildCount()  >=  1)  {	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >=    1)    {    	non-compiled	[CE]  ';'  expected	138	None	replace
855	[BUG]  [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()  ==  1)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()  ==  1)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state.getType()  ==  Token.CALL  &&  state.getChildCount()  ==  1)  {	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >=    1)    {    	non-compiled	[CE]  ';'  expected	138	None	replace
856	[BUG]  [BUGGY]  removableAssignmentsElimination.getRemovableAssignmentsElimination();  [CE]  cannot  find  symbol  removableAssignmentsElimination  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  removableAssignmentsElimination.getRemovableAssignmentsElimination();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	removableAssignmentsElimination.getRemovableAssignmentsElimination();	  return    matchRemovableAssignmentsElimination.getRemovableAssignmentsElimination();    	non-compiled	[CE]  cannot  find  symbol  removableAssignmentsElimination	154	None	replace
857	[BUG]  [BUGGY]  return  state.getVariableAssignment(),  child);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getVariableAssignment(),  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getVariableAssignment(),  child);	  return    state.getRemovableAssignment(),    child);    	non-compiled	[CE]  ';'  expected	68	None	replace
858	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  READ);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  READ);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  READ);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	replace
859	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  state,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  state,  MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  state,  MAYBE_LIVE);	  return    state    &&    isVariableReadBeforeKill(child.getFirstChild(),    variable,    state);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	121	None	replace
860	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  state,  MOVED);  [CE]  cannot  find  symbol  MOVED  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  state,  MOVED);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  state,  MOVED);	  return    state    &&    isVariableReadBeforeKill(child.getFirstChild(),    variable,    state);    	non-compiled	[CE]  cannot  find  symbol  MOVED	121	None	replace
861	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  state,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  state,  liveness);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  state,  liveness);	  return    state    &&    isVariableReadBeforeKill(child.getFirstChild(),    variable,    state);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	121	None	replace
862	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  REGEXP);  [CE]  cannot  find  symbol  REGEXP  [FE]            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  REGEXP);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  REGEXP);	  return    state    &&    isVariableReadBeforeKill(child,    variable,    MAYBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  REGEXP	25	None	replace
863	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  HOUR);  [CE]  cannot  find  symbol  HOUR  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  HOUR);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  HOUR);	  return    state    &&    isVariableReadBeforeKill(child,    variable,    MAYBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  HOUR	25	None	replace
864	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  BAD_FACTOR);  [CE]  cannot  find  symbol  BAD_FACTOR  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  BAD_FACTOR);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  BAD_FACTOR);	  return    state    &&    isVariableReadBeforeKill(child,    variable,    MAYBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  BAD_FACTOR	25	None	replace
865	[BUG]  [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  >>  return  VariableLiveness.READ);  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  >>  return  VariableLiveness.READ);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	state    =    isVariableReadBeforeKill(child,    variable);    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  >>  return  VariableLiveness.READ);	  	non-compiled	[CE]  not  a  statement	19	None	add
866	[BUG]  [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(parent  ==  return  VariableLiveness.READ);  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(parent  ==  return  VariableLiveness.READ);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	state    =    isVariableReadBeforeKill(child,    variable);    junit.framework.AssertionFailedError:  Expected:  function  FUNC(parent  ==  return  VariableLiveness.READ);	  	non-compiled	[CE]  not  a  statement	19	None	add
867	[BUG]  [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param2  >>  return  VariableLiveness.READ);  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param2  >>  return  VariableLiveness.READ);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	state    =    isVariableReadBeforeKill(child,    variable);    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param2  >>  return  VariableLiveness.READ);	  	non-compiled	[CE]  not  a  statement	19	None	add
868	[BUG]  [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(parent!=  return  VariableLiveness.READ);  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(parent!=  return  VariableLiveness.READ);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	state    =    isVariableReadBeforeKill(child,    variable);    junit.framework.AssertionFailedError:  Expected:  function  FUNC(parent!=  return  VariableLiveness.READ);	  	non-compiled	[CE]  not  a  statement	19	None	add
869	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()!=  Token.NAME,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()!=  Token.NAME,  state);	          Preconditions.checkState(child.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	162	61	replace
870	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()!=  Token.NAME,  state);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()!=  Token.NAME,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()!=  Token.NAME,  state);	          Preconditions.checkState(child.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	162	61	replace
871	[BUG]  [BUGGY]  return  state.invoke(variable,  n,  child);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(variable,  n,  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(variable,  n,  child);	  return    state.invoke(variable,    n);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
872	[BUG]  [BUGGY]  return  state.invoke(variable,  n,  null);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(variable,  n,  null);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(variable,  n,  null);	  return    state.invoke(variable,    n);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
873	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child,  variable.cloneTree());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child,  variable.cloneTree());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child,  variable.cloneTree());	  return    isVariableReadBeforeKill(child,    variable.getString());    	non-compiled	[CE]  cannot  find  symbol	190	None	replace
874	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  function  FUNC(variable  +  AssertionFailedError);  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  function  FUNC(variable  +  AssertionFailedError);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  function  FUNC(variable  +  AssertionFailedError);	          junit.framework.AssertionFailedError:    function    FUNC(param1    >>    AssertionFailedError);    	non-compiled	[CE]  not  a  statement	113	None	replace
875	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  function  FUNC(variable  }  AssertionFailedError);  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  function  FUNC(variable  }  AssertionFailedError);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  function  FUNC(variable  }  AssertionFailedError);	          junit.framework.AssertionFailedError:    function    FUNC(param1    >>    AssertionFailedError);    	non-compiled	[CE]  not  a  statement	113	None	replace
876	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  function  FUNC(variable  {  AssertionFailedError);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  function  FUNC(variable  {  AssertionFailedError);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  function  FUNC(variable  {  AssertionFailedError);	          junit.framework.AssertionFailedError:    function    FUNC(param1    >>    AssertionFailedError);    	non-compiled	[CE]  not  a  statement	113	None	replace
877	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  function  FUNC(variable  <  AssertionFailedError);  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  function  FUNC(variable  <  AssertionFailedError);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  function  FUNC(variable  <  AssertionFailedError);	          junit.framework.AssertionFailedError:    function    FUNC(param1    >>    AssertionFailedError);    	non-compiled	[CE]  not  a  statement	113	None	replace
878	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  function  FUNC(variable  >>  AssertionFailedError);  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  function  FUNC(variable  >>  AssertionFailedError);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  function  FUNC(variable  >>  AssertionFailedError);	          junit.framework.AssertionFailedError:    function    FUNC(param1    >>    AssertionFailedError);    	non-compiled	[CE]  not  a  statement	113	None	replace
879	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  n.addChildToFront(child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	n.addChildToFront(child);	          n.removeChild(child);    	compilable	  [FE]  RuntimeException  	173	61	replace
880	[BUG]  [BUGGY]  n.addChildToFront(child);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  n.addChildToFront(child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	n.addChildToFront(child);	          n.removeChild(child);    	compilable	  [FE]  RuntimeException  	173	61	replace
881	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MILL);  [CE]  cannot  find  symbol  MILL  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MILL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MILL);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    VAR);    	non-compiled	[CE]  cannot  find  symbol  MILL	152	None	replace
882	[BUG]  [BUGGY]  return  state  &&  body.getType()  ==  Token.CALL  &&  state.getChildCount()  >  1;  [CE]  cannot  find  symbol  body  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  body.getType()  ==  Token.CALL  &&  state.getChildCount()  >  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  body.getType()  ==  Token.CALL  &&  state.getChildCount()  >  1;	  return    state    &&    parent.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol  body	180	None	replace
883	[BUG]  [BUGGY]  return  state  &&  children.getType()  ==  Token.CALL  &&  state.getChildCount()  >  1;  [CE]  cannot  find  symbol  children  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  children.getType()  ==  Token.CALL  &&  state.getChildCount()  >  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  children.getType()  ==  Token.CALL  &&  state.getChildCount()  >  1;	  return    state    &&    parent.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol  children	180	None	replace
884	[BUG]  [BUGGY]  return  state  &&  type.getType()  ==  Token.CALL  &&  state.getChildCount()  >  1;  [CE]  cannot  find  symbol  type  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  type.getType()  ==  Token.CALL  &&  state.getChildCount()  >  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  type.getType()  ==  Token.CALL  &&  state.getChildCount()  >  1;	  return    state    &&    parent.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol  type	180	None	replace
885	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  state!=  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  state!=  VariableLiveness.MAYBE_LIVE);	          Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	164	61	replace
886	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  state!=  VariableLiveness.MAYBE_LIVE);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  state!=  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  state!=  VariableLiveness.MAYBE_LIVE);	          Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	164	61	replace
887	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  state);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child.getFirstChild(),  state);	  return    isVariableReadBeforeKill(child.getFirstChild(),    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	95	None	replace
888	[BUG]  [BUGGY]  return  state.isRemovableAssignmentsElimination()?  KILL  :  matchRemovableAssignmentsElimination.getRemovableAssignments();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.isRemovableAssignmentsElimination()?  KILL  :  matchRemovableAssignmentsElimination.getRemovableAssignments();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.isRemovableAssignmentsElimination()?  KILL  :  matchRemovableAssignmentsElimination.getRemovableAssignments();	  return    matchRemovableAssignmentsElimination.getRemovableAssignments();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
889	[BUG]  [BUGGY]  return  state.isRemovableAssignmentsElimination()?  state.getRemovableAssignments()  :  KILL;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.isRemovableAssignmentsElimination()?  state.getRemovableAssignments()  :  KILL;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.isRemovableAssignmentsElimination()?  state.getRemovableAssignments()  :  KILL;	  return    matchRemovableAssignmentsElimination.getRemovableAssignments();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
890	[BUG]  [BUGGY]  return  state.isRemovableAssignmentsElimination()?  null  :  state.getRemovableAssignments();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.isRemovableAssignmentsElimination()?  null  :  state.getRemovableAssignments();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.isRemovableAssignmentsElimination()?  null  :  state.getRemovableAssignments();	  return    matchRemovableAssignmentsElimination.getRemovableAssignments();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
891	[BUG]  [BUGGY]  return  state.isRemovableAssignmentsElimination()?  state.getRemovableAssignments()  :  null;  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.isRemovableAssignmentsElimination()?  state.getRemovableAssignments()  :  null;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.isRemovableAssignmentsElimination()?  state.getRemovableAssignments()  :  null;	  return    matchRemovableAssignmentsElimination.getRemovableAssignments();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
892	[BUG]  [BUGGY]  RemovableAssignmentsElimination  n  =  state.getRemovableAssignmentsElimination();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  RemovableAssignmentsElimination  n  =  state.getRemovableAssignmentsElimination();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	RemovableAssignmentsElimination  n  =  state.getRemovableAssignmentsElimination();	  return    n.getRemovableAssignmentsElimination();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
893	[BUG]  [BUGGY]  Return  n.getRemovableAssignmentsElimination();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Return  n.getRemovableAssignmentsElimination();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Return  n.getRemovableAssignmentsElimination();	  return    n.getRemovableAssignmentsElimination();    	non-compiled	[CE]  ';'  expected	32	None	replace
894	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable	          junit.framework.AssertionFailedError:    Expected:    function    FUNC(param1    >>    AssertionFailedError    	non-compiled	[CE]  not  a  statement	117	None	replace
895	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  +  AssertionFailedError  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  +  AssertionFailedError  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  +  AssertionFailedError	          junit.framework.AssertionFailedError:    Expected:    function    FUNC(param1    >>    AssertionFailedError    	non-compiled	[CE]  not  a  statement	117	None	replace
896	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  -  AssertionFailedError  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  -  AssertionFailedError  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  -  AssertionFailedError	          junit.framework.AssertionFailedError:    Expected:    function    FUNC(param1    >>    AssertionFailedError    	non-compiled	[CE]  not  a  statement	117	None	replace
897	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  }  AssertionFailedError  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  }  AssertionFailedError  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  }  AssertionFailedError	          junit.framework.AssertionFailedError:    Expected:    function    FUNC(param1    >>    AssertionFailedError    	non-compiled	[CE]  not  a  statement	117	None	replace
898	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  {  AssertionFailedError  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  {  AssertionFailedError  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  {  AssertionFailedError	          junit.framework.AssertionFailedError:    Expected:    function    FUNC(param1    >>    AssertionFailedError    	non-compiled	[CE]  not  a  statement	117	None	replace
899	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param2  >>  AssertionFailedError  [CE]  not  a  statement  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param2  >>  AssertionFailedError  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  Expected:  function  FUNC(param2  >>  AssertionFailedError	          junit.framework.AssertionFailedError:    Expected:    function    FUNC(param1    >>    AssertionFailedError    	non-compiled	[CE]  not  a  statement	117	None	replace
900	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    }    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	23	None	replace
901	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    }    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	23	None	replace
902	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.SEMI_LIVE)  {  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.SEMI_LIVE)  {  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.SEMI_LIVE)  {  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    }    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	23	None	replace
903	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  BAD_MAXBE_LIVE);  [CE]  cannot  find  symbol  BAD_MAXBE_LIVE  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  BAD_MAXBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  BAD_MAXBE_LIVE);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    MAXBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  BAD_MAXBE_LIVE	52	None	replace
904	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  DEFAULT_NAME);  [CE]  cannot  find  symbol  DEFAULT_NAME  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  DEFAULT_NAME);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  DEFAULT_NAME);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    MAXBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_NAME	52	None	replace
905	[BUG]  [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  ||  state.getChildCount()!=  1;  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  ||  state.getChildCount()!=  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state.getType()  ==  Token.CALL  ||  state.getChildCount()!=  1;	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()!=    1;    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
906	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  state.getString());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  state.getString());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  state.getString());	  return    state    &&    isVariableReadBeforeKill(n,    child.getString());    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
907	[BUG]  [BUGGY]  return  State.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE;  [CE]  cannot  find  symbol  State  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE;	  return    State.READ;    	non-compiled	[CE]  cannot  find  symbol  State	130	None	replace
908	[BUG]  [BUGGY]  return  State.READ  ||  state!=  VariableLiveness.MAYBE_LIVE;  [CE]  cannot  find  symbol  State  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.READ  ||  state!=  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.READ  ||  state!=  VariableLiveness.MAYBE_LIVE;	  return    State.READ;    	non-compiled	[CE]  cannot  find  symbol  State	130	None	replace
909	[BUG]  [BUGGY]  return  State.READ  ||  state  >=  VariableLiveness.MAYBE_LIVE;  [CE]  cannot  find  symbol  State  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.READ  ||  state  >=  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.READ  ||  state  >=  VariableLiveness.MAYBE_LIVE;	  return    State.READ;    	non-compiled	[CE]  cannot  find  symbol  State	130	None	replace
910	[BUG]  [BUGGY]  return  State.READ  ||  state  ==  VariableLiveness.KILL_LIVE;  [CE]  cannot  find  symbol  State  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.READ  ||  state  ==  VariableLiveness.KILL_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.READ  ||  state  ==  VariableLiveness.KILL_LIVE;	  return    State.READ;    	non-compiled	[CE]  cannot  find  symbol  State	130	None	replace
911	[BUG]  [BUGGY]  return  State.READ  ||  state  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  State  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.READ  ||  state  ==  VariableLiveness.KILL;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.READ  ||  state  ==  VariableLiveness.KILL;	  return    State.READ;    	non-compiled	[CE]  cannot  find  symbol  State	130	None	replace
912	[BUG]  [BUGGY]  return  state.getValue()  :  KILL;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValue()  :  KILL;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValue()  :  KILL;	  return    state.getValue()    :    null;    	non-compiled	[CE]  ';'  expected	43	None	replace
913	[BUG]  [BUGGY]  return  state.getValue()  }  ;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValue()  }  ;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValue()  }  ;	  return    state.getValue()    :    null;    	non-compiled	[CE]  ';'  expected	43	None	replace
914	[BUG]  [BUGGY]  return  state.invoke(child,  n);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(child,  n);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(child,  n);	  return    state.invoke(n,    child);    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
915	[BUG]  [BUGGY]  return  state.invoke(child,  child);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(child,  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(child,  child);	  return    state.invoke(n,    child);    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
916	[BUG]  [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  ||  state.getChildCount()  >>  1;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  ||  state.getChildCount()  >>  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state.getType()  ==  Token.CALL  ||  state.getChildCount()  >>  1;	  return    state    &&    state.getType()    ==    Token.CALL    ||    state.getChildCount()    >=    1;    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
917	[BUG]  [BUGGY]  return  state  &&  child.getType()  ==  Token.CALL  ||  state.getChildCount()  >=  1;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  child.getType()  ==  Token.CALL  ||  state.getChildCount()  >=  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  child.getType()  ==  Token.CALL  ||  state.getChildCount()  >=  1;	  return    state    &&    state.getType()    ==    Token.CALL    ||    state.getChildCount()    >=    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	143	None	replace
918	[BUG]  [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  ||  child.getChildCount()  >=  1;  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  ||  child.getChildCount()  >=  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state.getType()  ==  Token.CALL  ||  child.getChildCount()  >=  1;	  return    state    &&    state.getType()    ==    Token.CALL    ||    state.getChildCount()    >=    1;    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
919	[BUG]  [BUGGY]  return  state.getRemovableAssignmentsElimination()  *  1;  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignmentsElimination()  *  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignmentsElimination()  *  1;	  return    state.getRemovableAssignmentsElimination()    +    1;    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
920	[BUG]  [BUGGY]  return  state.getRemovableAssignmentsElimination()  +  2;  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignmentsElimination()  +  2;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignmentsElimination()  +  2;	  return    state.getRemovableAssignmentsElimination()    +    1;    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
921	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.THIS);  Preconditions.checkState(child.getType()  ==  Token.THIS);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.THIS);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	                Preconditions.checkState(child.getType()    ==    Token.THIS);    Preconditions.checkState(child.getType()  ==  Token.THIS);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.THIS);  }	  	compilable	  [FE]  RuntimeException  	174	61	add
922	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.THIS);  Preconditions.checkState(child.getType()  ==  Token.THIS);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.THIS);  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.THIS);  Preconditions.checkState(child.getType()  ==  Token.THIS);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.THIS);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.THIS);    Preconditions.checkState(child.getType()  ==  Token.THIS);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.THIS);  }	  	compilable	  [FE]  RuntimeException  	174	61	add
923	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.THIS);  Preconditions.checkState(child.getType()  ==  Token.THIS);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  preconditions.checkState(child.getType()  ==  Token.THIS);  }  [CE]  cannot  find  symbol  preconditions  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.THIS);  Preconditions.checkState(child.getType()  ==  Token.THIS);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  preconditions.checkState(child.getType()  ==  Token.THIS);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.THIS);    Preconditions.checkState(child.getType()  ==  Token.THIS);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  preconditions.checkState(child.getType()  ==  Token.THIS);  }	  	non-compiled	[CE]  cannot  find  symbol  preconditions	174	None	add
924	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.THIS);  Preconditions.checkState(child.getType()  ==  Token.THIS);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  Preconditions.checkState(child.getType()  ==  Token.THIS);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	                Preconditions.checkState(child.getType()    ==    Token.THIS);    Preconditions.checkState(child.getType()  ==  Token.THIS);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  Preconditions.checkState(child.getType()  ==  Token.THIS);  }	  	compilable	  [FE]  RuntimeException  	174	61	add
925	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.THIS);  Preconditions.checkState(child.getType()  ==  Token.THIS);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  Preconditions.checkState(child.getType()  ==  Token.THIS);  }  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.THIS);  Preconditions.checkState(child.getType()  ==  Token.THIS);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  Preconditions.checkState(child.getType()  ==  Token.THIS);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.THIS);    Preconditions.checkState(child.getType()  ==  Token.THIS);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  Preconditions.checkState(child.getType()  ==  Token.THIS);  }	  	compilable	  [FE]  RuntimeException  	174	61	add
926	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.THIS);  Preconditions.checkState(child.getType()  ==  Token.THIS);  preconditions.checkState(child.getType()  ==  Token.THIS);  [CE]  cannot  find  symbol  preconditions  [FE]          RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.THIS);  Preconditions.checkState(child.getType()  ==  Token.THIS);  preconditions.checkState(child.getType()  ==  Token.THIS);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.THIS);    Preconditions.checkState(child.getType()  ==  Token.THIS);  preconditions.checkState(child.getType()  ==  Token.THIS);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	174	None	add
927	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.THIS);  Preconditions.checkState(child.getType()  ==  Token.THIS);  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  Preconditions.checkState(child.getType()  ==  Token.THIS);  }  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]            RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.THIS);  Preconditions.checkState(child.getType()  ==  Token.THIS);  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  Preconditions.checkState(child.getType()  ==  Token.THIS);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.THIS);    Preconditions.checkState(child.getType()  ==  Token.THIS);  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  Preconditions.checkState(child.getType()  ==  Token.THIS);  }	  	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	174	None	add
928	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.THIS);  Preconditions.checkState(child.getType()  ==  Token.THIS);Preconditions.checkState(child.getType()  ==  Token.THIS);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	                Preconditions.checkState(child.getType()    ==    Token.THIS);    Preconditions.checkState(child.getType()  ==  Token.THIS);Preconditions.checkState(child.getType()  ==  Token.THIS);	  	compilable	  [FE]  RuntimeException  	174	61	add
929	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.THIS);  Preconditions.checkState(child.getType()  ==  Token.THIS);Preconditions.checkState(child.getType()  ==  Token.THIS);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.THIS);  Preconditions.checkState(child.getType()  ==  Token.THIS);Preconditions.checkState(child.getType()  ==  Token.THIS);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.THIS);    Preconditions.checkState(child.getType()  ==  Token.THIS);Preconditions.checkState(child.getType()  ==  Token.THIS);	  	compilable	  [FE]  RuntimeException  	174	61	add
930	[BUG]  [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  ||  state.getChildCount()  <  1)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  ||  state.getChildCount()  <  1)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state.getType()  ==  Token.CALL  ||  state.getChildCount()  <  1)  {	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    <    1)    {    	non-compiled	[CE]  ';'  expected	50	None	replace
931	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable.getString(),  state);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable.getString(),  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable.getString(),  state);	  return    state    &&    isVariableReadBeforeKill(variable.getString(),    child);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
932	[BUG]  [BUGGY]  return  state  &&  hasVariableReadBeforeKill(child.getString(),  variable);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  hasVariableReadBeforeKill(child.getString(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  hasVariableReadBeforeKill(child.getString(),  variable);	  return    state    &&    isVariableReadBeforeKill(variable.getString(),    child);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
933	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(variable,  child.getString(),  child);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(variable,  child.getString(),  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(variable,  child.getString(),  child);	  return    state    &&    isVariableReadBeforeKill(variable.getString(),    child);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	51	None	replace
934	[BUG]  [BUGGY]  return  state  &&  child.getType()!=  Token.CALL  &&  state.getChildCount()  >  1)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  child.getType()!=  Token.CALL  &&  state.getChildCount()  >  1)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  child.getType()!=  Token.CALL  &&  state.getChildCount()  >  1)  {	  return    state    &&    child.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1)    {    	non-compiled	[CE]  ';'  expected	151	None	replace
935	[BUG]  [BUGGY]  return  BAD_FACTOR;  [CE]  cannot  find  symbol  BAD_FACTOR  [FE]            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  BAD_FACTOR;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  BAD_FACTOR;	  return    MayBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  BAD_FACTOR	128	None	replace
936	[BUG]  [BUGGY]  return  BAD_FIRST;  [CE]  cannot  find  symbol  BAD_FIRST  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  BAD_FIRST;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  BAD_FIRST;	  return    MayBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  BAD_FIRST	128	None	replace
937	[BUG]  [BUGGY]  return  state.getRemovableAssignment()  -  1;  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignment()  -  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignment()  -  1;	  return    state.getRemovableAssignment()    +    1;    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
938	[BUG]  [BUGGY]  return  state.getRemovableAssignment()  +  2;  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignment()  +  2;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignment()  +  2;	  return    state.getRemovableAssignment()    +    1;    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
939	[BUG]  [BUGGY]  return  state.getRemovableAssignment()  *  1;  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignment()  *  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignment()  *  1;	  return    state.getRemovableAssignment()    +    1;    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
940	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.RETURN);  Preconditions.checkState(child.getType()  ==  Token.RESTURN);  [CE]  cannot  find  symbol  RESTURN  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.RETURN);  Preconditions.checkState(child.getType()  ==  Token.RESTURN);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.RETURN);    Preconditions.checkState(child.getType()  ==  Token.RESTURN);	  	non-compiled	[CE]  cannot  find  symbol  RESTURN	167	None	add
941	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.RETURN);  Preconditions.checkNotState(child.getType()  ==  Token.RETURN);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.RETURN);  Preconditions.checkNotState(child.getType()  ==  Token.RETURN);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.RETURN);    Preconditions.checkNotState(child.getType()  ==  Token.RETURN);	  	non-compiled	[CE]  cannot  find  symbol	167	None	add
942	[BUG]  [BUGGY]  return  body.getRemovableAssignment();  [CE]  cannot  find  symbol  body  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  body.getRemovableAssignment();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  body.getRemovableAssignment();	  return    n.getRemovableAssignment();    	non-compiled	[CE]  cannot  find  symbol  body	64	None	replace
943	[BUG]  [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  ||  state.getChildCount()  >  2;  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  ||  state.getChildCount()  >  2;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state.getType()  ==  Token.CALL  ||  state.getChildCount()  >  2;	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >    2;    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
944	[BUG]  [BUGGY]  return  state  ||  isVariableReadBeforeKill(child,  variable.getString());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  ||  isVariableReadBeforeKill(child,  variable.getString());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  ||  isVariableReadBeforeKill(child,  variable.getString());	  return    state    &&    isVariableReadBeforeKill(variable,    child.getString());    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
945	[BUG]  [BUGGY]  return  state  &&  hasVariableReadBeforeKill(child,  variable.getString());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  hasVariableReadBeforeKill(child,  variable.getString());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  hasVariableReadBeforeKill(child,  variable.getString());	  return    state    &&    isVariableReadBeforeKill(variable,    child.getString());    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
946	[BUG]  [BUGGY]  Return  state  &&  isVariableReadBeforeKill(child,  variable.getString());  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Return  state  &&  isVariableReadBeforeKill(child,  variable.getString());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Return  state  &&  isVariableReadBeforeKill(child,  variable.getString());	  return    state    &&    isVariableReadBeforeKill(variable,    child.getString());    	non-compiled	[CE]  ';'  expected	62	None	replace
947	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  FUNC(param1  +  AssertionFailedError  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  FUNC(param1  +  AssertionFailedError  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  expected:  function  FUNC(param1  +  AssertionFailedError	          junit.framework.AssertionFailedError:    expected:    function    FUNC(param1    >>    AssertionFailedError    	non-compiled	[CE]  not  a  statement	115	None	replace
948	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  expected  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  expected  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  expected	          junit.framework.AssertionFailedError:    expected:    function    FUNC(param1    >>    AssertionFailedError    	non-compiled	[CE]  not  a  statement	115	None	replace
949	[BUG]  [BUGGY]  return  state.getVariableAssignment(),  child;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getVariableAssignment(),  child;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getVariableAssignment(),  child;	  return    state.getRemovableAssignment(),    child;    	non-compiled	[CE]  ';'  expected	105	None	replace
950	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(n.getString(),  child,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(n.getString(),  child,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(n.getString(),  child,  variable);	  return    state    &&    isVariableReadBeforeKill(n.getString(),    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	54	None	replace
951	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  n.getString(),  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  n.getString(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  n.getString(),  variable);	  return    state    &&    isVariableReadBeforeKill(n.getString(),    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	54	None	replace
952	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable.getString(),  variable);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable.getString(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable.getString(),  variable);	  return    state    &&    isVariableReadBeforeKill(n.getString(),    variable);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
953	[BUG]  [BUGGY]  return  state.getDeadAssignmentsElimination(),  child;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getDeadAssignmentsElimination(),  child;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getDeadAssignmentsElimination(),  child;	  return    state.getRemovableAssignments(),    variable;    	non-compiled	[CE]  ';'  expected	100	None	replace
954	[BUG]  [BUGGY]  return  state.getMutatorAssignments(),  variable;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getMutatorAssignments(),  variable;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getMutatorAssignments(),  variable;	  return    state.getRemovableAssignments(),    variable;    	non-compiled	[CE]  ';'  expected	100	None	replace
955	[BUG]  [BUGGY]  return  state.getVariableAssignments(),  child;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getVariableAssignments(),  child;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getVariableAssignments(),  child;	  return    state.getRemovableAssignments(),    variable;    	non-compiled	[CE]  ';'  expected	100	None	replace
956	[BUG]  [BUGGY]  return  state.getDeadAssignmentsElimination(),  variable;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getDeadAssignmentsElimination(),  variable;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getDeadAssignmentsElimination(),  variable;	  return    state.getRemovableAssignments(),    variable;    	non-compiled	[CE]  ';'  expected	100	None	replace
957	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.CALL);  Preconditions.checkState(child.getType()  ==  Token.CRALL);  [CE]  cannot  find  symbol  CRALL  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.CALL);  Preconditions.checkState(child.getType()  ==  Token.CRALL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.CALL);    Preconditions.checkState(child.getType()  ==  Token.CRALL);	  	non-compiled	[CE]  cannot  find  symbol  CRALL	165	None	add
958	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.CALL);  Preconditions.checkState(child.getType()  ==  Token.RCALL);  [CE]  cannot  find  symbol  RCALL  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.CALL);  Preconditions.checkState(child.getType()  ==  Token.RCALL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.CALL);    Preconditions.checkState(child.getType()  ==  Token.RCALL);	  	non-compiled	[CE]  cannot  find  symbol  RCALL	165	None	add
959	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.CALL);  Preconditions.checkState(child.getType()  ==  Token.CL);  [CE]  cannot  find  symbol  CL  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.CALL);  Preconditions.checkState(child.getType()  ==  Token.CL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.CALL);    Preconditions.checkState(child.getType()  ==  Token.CL);	  	non-compiled	[CE]  cannot  find  symbol  CL	165	None	add
960	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.CALL);  Preconditions.checkState(child.getType()  ==  Token.ALL);  [CE]  cannot  find  symbol  ALL  [FE]          RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.CALL);  Preconditions.checkState(child.getType()  ==  Token.ALL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.CALL);    Preconditions.checkState(child.getType()  ==  Token.ALL);	  	non-compiled	[CE]  cannot  find  symbol  ALL	165	None	add
961	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.RETURN  ||  state!=  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.RETURN  ||  state!=  VariableLiveness.MAYBE_LIVE);	          Preconditions.checkState(child.getType()    ==    Token.RETURN);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	168	61	replace
962	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.RETURN  ||  state!=  VariableLiveness.MAYBE_LIVE);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.RETURN  ||  state!=  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.RETURN  ||  state!=  VariableLiveness.MAYBE_LIVE);	          Preconditions.checkState(child.getType()    ==    Token.RETURN);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	168	61	replace
963	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  type);  [CE]  cannot  find  symbol  type  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  type);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  type);	  return    state    &&    isVariableReadBeforeKill(n,    child,    variable);    	non-compiled	[CE]  cannot  find  symbol  type	26	None	replace
964	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >  4;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >  4;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >  4;	  return    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
965	[BUG]  [BUGGY]  return  state.getValue(),  Child.MAXBE_LIVE;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValue(),  Child.MAXBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValue(),  Child.MAXBE_LIVE;	  return    state.getValue(),    variable;    	non-compiled	[CE]  ';'  expected	39	None	replace
966	[BUG]  [BUGGY]  return  state.getValue()  -  1,  variable;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValue()  -  1,  variable;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValue()  -  1,  variable;	  return    state.getValue(),    variable;    	non-compiled	[CE]  ';'  expected	39	None	replace
967	[BUG]  [BUGGY]  return  state.getValue(),  Child.MAYBE_LIVE;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValue(),  Child.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValue(),  Child.MAYBE_LIVE;	  return    state.getValue(),    variable;    	non-compiled	[CE]  ';'  expected	39	None	replace
968	[BUG]  [BUGGY]  return  state.invoke(child,  variable,  REGEXP);  [CE]  cannot  find  symbol  REGEXP  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(child,  variable,  REGEXP);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(child,  variable,  REGEXP);	  return    state.invoke(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  REGEXP	78	None	replace
969	[BUG]  [BUGGY]  return  state.invoke(child,  variable,  MILL);  [CE]  cannot  find  symbol  MILL  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(child,  variable,  MILL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(child,  variable,  MILL);	  return    state.invoke(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  MILL	78	None	replace
970	[BUG]  [BUGGY]  return  state.invoke(child,  variable,  mayBE_LIVE);  [CE]  cannot  find  symbol  mayBE_LIVE  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(child,  variable,  mayBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(child,  variable,  mayBE_LIVE);	  return    state.invoke(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  mayBE_LIVE	78	None	replace
971	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  isVariableReadBeforeKill(n,  variable);  }  [CE]  unreachable  statement  [FE]    StackOverflowError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  isVariableReadBeforeKill(n,  variable);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(n,    variable);    if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  isVariableReadBeforeKill(n,  variable);  }	  	non-compiled	[CE]  unreachable  statement	186	None	add
972	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  return  isVariableReadBeforeKill(n,  variable);  }  [CE]  unreachable  statement  [FE]      StackOverflowError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  return  isVariableReadBeforeKill(n,  variable);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(n,    variable);    if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  return  isVariableReadBeforeKill(n,  variable);  }	  	non-compiled	[CE]  unreachable  statement	186	None	add
973	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  isVariableReadBeforeKill(n,  variable);  }  else  {  Predicate  matchRemovableAssignsElimination  =  matchRemovableAssigns;  return  state;  }  [CE]  unreachable  statement  [FE]        StackOverflowError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  isVariableReadBeforeKill(n,  variable);  }  else  {  Predicate  matchRemovableAssignsElimination  =  matchRemovableAssigns;  return  state;  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(n,    variable);    if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  isVariableReadBeforeKill(n,  variable);  }  else  {  Predicate  matchRemovableAssignsElimination  =  matchRemovableAssigns;  return  state;  }	  	non-compiled	[CE]  unreachable  statement	186	None	add
974	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  return  isVariableReadBeforeKill(n,  variable);  }  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]          StackOverflowError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  return  isVariableReadBeforeKill(n,  variable);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(n,    variable);    if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  return  isVariableReadBeforeKill(n,  variable);  }	  	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	186	None	add
975	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  isVariableReadBeforeKill(n,  variable);  }  else  {  Predicate  matchRemovableAssignsElimination  =  new  Predicate  <  Predicate>(compiler  [CE]  ')'  expected  [FE]            StackOverflowError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  isVariableReadBeforeKill(n,  variable);  }  else  {  Predicate  matchRemovableAssignsElimination  =  new  Predicate  <  Predicate>(compiler  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(n,    variable);    if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  isVariableReadBeforeKill(n,  variable);  }  else  {  Predicate  matchRemovableAssignsElimination  =  new  Predicate  <  Predicate>(compiler	  	non-compiled	[CE]  ')'  expected	186	None	add
976	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  isVariableReadBeforeKill(n,  variable);  }  else  {  Predicate  matchRemovableAssignsElimination  =  new  Predicate  <  Predicate>(compiler);  [CE]  reached  end  of  file  while  parsing  [FE]              StackOverflowError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  isVariableReadBeforeKill(n,  variable);  }  else  {  Predicate  matchRemovableAssignsElimination  =  new  Predicate  <  Predicate>(compiler);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(n,    variable);    if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  isVariableReadBeforeKill(n,  variable);  }  else  {  Predicate  matchRemovableAssignsElimination  =  new  Predicate  <  Predicate>(compiler);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	186	None	add
977	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  state.getLastChild(),  variable);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  state.getLastChild(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  state.getLastChild(),  variable);	  return    state    &&    isVariableReadBeforeKill(child.getLastChild(),    variable);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
978	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  child.getLastChild(),  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  child.getLastChild(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  child.getLastChild(),  variable);	  return    state    &&    isVariableReadBeforeKill(child.getLastChild(),    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	91	None	replace
979	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getLastChild(),  variable,  state);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getLastChild(),  variable,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getLastChild(),  variable,  state);	  return    state    &&    isVariableReadBeforeKill(child.getLastChild(),    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	91	None	replace
980	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(variable,  child.getString());  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(variable,  child.getString());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(variable,  child.getString());	  return    isVariableReadBeforeKill(child.getString());    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	189	None	replace
981	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getString(),  state);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getString(),  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child.getString(),  state);	  return    isVariableReadBeforeKill(child.getString());    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	189	None	replace
982	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  }	          VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state    ==    VariableLiveness.MAYBE_LIVE)    {    }    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	44	None	replace
983	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  }	          VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state    ==    VariableLiveness.MAYBE_LIVE)    {    }    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	44	None	replace
984	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.SEMI_LIVE)  {  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.SEMI_LIVE)  {  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.SEMI_LIVE)  {  }	          VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state    ==    VariableLiveness.MAYBE_LIVE)    {    }    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	44	None	replace
985	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.BLOCK);  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  preconditions.checkState(child.getType()  ==  Token.BLOCK);  [CE]  cannot  find  symbol  preconditions  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.BLOCK);  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  preconditions.checkState(child.getType()  ==  Token.BLOCK);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.BLOCK);    Preconditions.checkState(child.getType()  ==  Token.BLOCK);  preconditions.checkState(child.getType()  ==  Token.BLOCK);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	163	None	add
986	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.BLOCK);  Preconditions.checkState(child.getType()  ==  Token.BLOCK);Preconditions.checkState(child.getType()  ==  Token.BLOCK);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	                Preconditions.checkState(child.getType()    ==    Token.BLOCK);    Preconditions.checkState(child.getType()  ==  Token.BLOCK);Preconditions.checkState(child.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	163	61	add
987	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.BLOCK);  Preconditions.checkState(child.getType()  ==  Token.BLOCK);Preconditions.checkState(child.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.BLOCK);  Preconditions.checkState(child.getType()  ==  Token.BLOCK);Preconditions.checkState(child.getType()  ==  Token.BLOCK);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.BLOCK);    Preconditions.checkState(child.getType()  ==  Token.BLOCK);Preconditions.checkState(child.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	163	61	add
988	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.BLOCK);  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  }  else  {  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	                Preconditions.checkState(child.getType()    ==    Token.BLOCK);    Preconditions.checkState(child.getType()  ==  Token.BLOCK);  }  else  {  Preconditions.checkState(child.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	163	61	add
989	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.BLOCK);  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  }  else  {  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.BLOCK);  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  }  else  {  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.BLOCK);    Preconditions.checkState(child.getType()  ==  Token.BLOCK);  }  else  {  Preconditions.checkState(child.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	163	61	add
990	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.BLOCK);  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  ==  return  VariableLiveness.READ);  [CE]  not  a  statement  [FE]          RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.BLOCK);  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  ==  return  VariableLiveness.READ);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.BLOCK);    Preconditions.checkState(child.getType()  ==  Token.BLOCK);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  ==  return  VariableLiveness.READ);	  	non-compiled	[CE]  not  a  statement	163	None	add
991	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.BLOCK);  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param2  ==  return  VariableLiveness.READ);  [CE]  not  a  statement  [FE]            RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.BLOCK);  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param2  ==  return  VariableLiveness.READ);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.BLOCK);    Preconditions.checkState(child.getType()  ==  Token.BLOCK);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param2  ==  return  VariableLiveness.READ);	  	non-compiled	[CE]  not  a  statement	163	None	add
992	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  FUNC(param2  [Delete]  AssertionFailedError  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  FUNC(param2  [Delete]  AssertionFailedError  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  expected:  function  FUNC(param2  [Delete]  AssertionFailedError	          junit.framework.AssertionFailedError:    expected:    function    FUNC(param2    >>    AssertionFailedError    	non-compiled	[CE]  not  a  statement	116	None	replace
993	[BUG]  [BUGGY]  return  state.getFunctionAssignment(),  variable;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getFunctionAssignment(),  variable;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getFunctionAssignment(),  variable;	  return    state.getRemovableAssignment(),    variable;    	non-compiled	[CE]  ';'  expected	66	None	replace
994	[BUG]  [BUGGY]  return  state.getDeadAssignment(),  child;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getDeadAssignment(),  child;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getDeadAssignment(),  child;	  return    state.getRemovableAssignment(),    variable;    	non-compiled	[CE]  ';'  expected	66	None	replace
995	[BUG]  [BUGGY]  return  state.getDeadAssignmentsElimination(),  child);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getDeadAssignmentsElimination(),  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getDeadAssignmentsElimination(),  child);	  return    state.getRemovableAssignments(),    child);    	non-compiled	[CE]  ';'  expected	104	None	replace
996	[BUG]  [BUGGY]  return  state.getMutatorAssignments(),  child);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getMutatorAssignments(),  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getMutatorAssignments(),  child);	  return    state.getRemovableAssignments(),    child);    	non-compiled	[CE]  ';'  expected	104	None	replace
997	[BUG]  [BUGGY]  return  state.invoke(matchRemovableAssignsElimination,  child);  [CE]  cannot  find  symbol  matchRemovableAssignsElimination  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(matchRemovableAssignsElimination,  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(matchRemovableAssignsElimination,  child);	  return    state.invoke(variable,    child);    	non-compiled	[CE]  cannot  find  symbol  matchRemovableAssignsElimination	79	None	replace
998	[BUG]  [BUGGY]  return  state.invoke(variable,  child,  null);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(variable,  child,  null);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(variable,  child,  null);	  return    state.invoke(variable,    child);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
999	[BUG]  [BUGGY]  return  state.invoke(matchRemovableAssigns,  child);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(matchRemovableAssigns,  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(matchRemovableAssigns,  child);	  return    state.invoke(variable,    child);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
1000	[BUG]  [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  ||  state.getChildCount()!=  1)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  ||  state.getChildCount()!=  1)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state.getType()  ==  Token.CALL  ||  state.getChildCount()!=  1)  {	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()!=    1)    {    	non-compiled	[CE]  ';'  expected	139	None	replace
1001	[BUG]  [BUGGY]  RemovableAssignments  n  =  state.getRemovableAssignments();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  RemovableAssignments  n  =  state.getRemovableAssignments();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	RemovableAssignments  n  =  state.getRemovableAssignments();	  return    n.getRemovableAssignments();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
1002	[BUG]  [BUGGY]  return  n.getRemovableAssignments()  ||  state.isVariableReadBeforeKill(child);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  n.getRemovableAssignments()  ||  state.isVariableReadBeforeKill(child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n.getRemovableAssignments()  ||  state.isVariableReadBeforeKill(child);	  return    n.getRemovableAssignments();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
1003	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  null,  state);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  null,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  null,  state);	  return    state    &&    isVariableReadBeforeKill(child,    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	145	None	replace
1004	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  null,  MAXBE_LIVE);  [CE]  cannot  find  symbol  MAXBE_LIVE  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  null,  MAXBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  null,  MAXBE_LIVE);	  return    state    &&    isVariableReadBeforeKill(child,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  MAXBE_LIVE	145	None	replace
1005	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  null,  REGEXP);  [CE]  cannot  find  symbol  REGEXP  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  null,  REGEXP);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  null,  REGEXP);	  return    state    &&    isVariableReadBeforeKill(child,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  REGEXP	145	None	replace
1006	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  null,  MOVED);  [CE]  cannot  find  symbol  MOVED  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  null,  MOVED);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  null,  MOVED);	  return    state    &&    isVariableReadBeforeKill(child,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  MOVED	145	None	replace
1007	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  BAD_FACTOR);  [CE]  cannot  find  symbol  BAD_FACTOR  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  BAD_FACTOR);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  BAD_FACTOR);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    VEAD);    	non-compiled	[CE]  cannot  find  symbol  BAD_FACTOR	153	None	replace
1008	[BUG]  [BUGGY]  return  state.getRemovableAssignments()  ||  state.getMatchRemovableAssignments();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignments()  ||  state.getMatchRemovableAssignments();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignments()  ||  state.getMatchRemovableAssignments();	  return    state.getRemovableAssignments()    ||    state.getRemovableAssignments();    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
1009	[BUG]  [BUGGY]  return  state.getRemovableAssignments()  ||  state.getDeadAssignments();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignments()  ||  state.getDeadAssignments();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignments()  ||  state.getDeadAssignments();	  return    state.getRemovableAssignments()    ||    state.getRemovableAssignments();    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
1010	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  state.getString());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  state.getString());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  state.getString());	  return    state    &&    isVariableReadBeforeKill(child,    variable.getString());    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
1011	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable.cloneTree());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable.cloneTree());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable.cloneTree());	  return    state    &&    isVariableReadBeforeKill(child,    variable.getString());    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
1012	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  child.getString());  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  child.getString());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  child.getString());	  return    state    &&    isVariableReadBeforeKill(child,    variable.getString());    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	58	None	replace
1013	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable.getFirstChild());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable.getFirstChild());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable.getFirstChild());	  return    state    &&    isVariableReadBeforeKill(child,    variable.getString());    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
1014	[BUG]  [BUGGY]  Return  child.getRemovableAssigns();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Return  child.getRemovableAssigns();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Return  child.getRemovableAssigns();	  return    child.getRemovableAssigns();    	non-compiled	[CE]  ';'  expected	88	None	replace
1015	[BUG]  [BUGGY]  return  State.KILL.getRemovableAssigns();  [CE]  package  State  does  not  exist  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.KILL.getRemovableAssigns();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.KILL.getRemovableAssigns();	  return    child.getRemovableAssigns();    	non-compiled	[CE]  package  State  does  not  exist	88	None	replace
1016	[BUG]  [BUGGY]  return  body.getRemovableAssigns();  [CE]  cannot  find  symbol  body  [FE]                                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  body.getRemovableAssigns();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  body.getRemovableAssigns();	  return    child.getRemovableAssigns();    	non-compiled	[CE]  cannot  find  symbol  body	88	None	replace
1017	[BUG]  [BUGGY]  return  state.getValueAssignment(),  child);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValueAssignment(),  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValueAssignment(),  child);	  return    state.getValueAssignment();    	non-compiled	[CE]  ';'  expected	127	None	replace
1018	[BUG]  [BUGGY]  return  state.getRemovableAssigns()  *  1;  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssigns()  *  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssigns()  *  1;	  return    state.getRemovableAssigns()    +    1;    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
1019	[BUG]  [BUGGY]  return  state.getRemovableAssigns()  +  2;  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssigns()  +  2;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssigns()  +  2;	  return    state.getRemovableAssigns()    +    1;    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
1020	[BUG]  [BUGGY]  return  state.getRemovableAssignmentsElimination(),  Child.MAYBE_LIVE;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignmentsElimination(),  Child.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignmentsElimination(),  Child.MAYBE_LIVE;	  return    state.getRemovableAssignmentsElimination(),    variable;    	non-compiled	[CE]  ';'  expected	33	None	replace
1021	[BUG]  [BUGGY]  return  state.getRemovableAssignmentsElimination(),  Child.MAXBE_LIVE;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignmentsElimination(),  Child.MAXBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignmentsElimination(),  Child.MAXBE_LIVE;	  return    state.getRemovableAssignmentsElimination(),    variable;    	non-compiled	[CE]  ';'  expected	33	None	replace
1022	[BUG]  [BUGGY]  return  state.getRemovableAssignmentsElimination(),  children;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignmentsElimination(),  children;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignmentsElimination(),  children;	  return    state.getRemovableAssignmentsElimination(),    variable;    	non-compiled	[CE]  ';'  expected	33	None	replace
1023	[BUG]  [BUGGY]  return  NEGATING_FACTOR;  [CE]  cannot  find  symbol  NEGATING_FACTOR  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  NEGATING_FACTOR;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  NEGATING_FACTOR;	  return    MAJBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  NEGATING_FACTOR	9	None	replace
1024	[BUG]  [BUGGY]  return  NEGATING_A_SIGNATURE;  [CE]  cannot  find  symbol  NEGATING_A_SIGNATURE  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  NEGATING_A_SIGNATURE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  NEGATING_A_SIGNATURE;	  return    MAJBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  NEGATING_A_SIGNATURE	9	None	replace
1025	[BUG]  [BUGGY]  return  NEGATING_THIS;  [CE]  cannot  find  symbol  NEGATING_THIS  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  NEGATING_THIS;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  NEGATING_THIS;	  return    MAJBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  NEGATING_THIS	9	None	replace
1026	[BUG]  [BUGGY]  return  NEGATING_A_STANDARD;  [CE]  cannot  find  symbol  NEGATING_A_STANDARD  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  NEGATING_A_STANDARD;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  NEGATING_A_STANDARD;	  return    MAJBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  NEGATING_A_STANDARD	9	None	replace
1027	[BUG]  [BUGGY]  return  state.isRemovableAssignment()?  KILL  :  matchRemovableAssignmentsElimination.getRemovableAssignment();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.isRemovableAssignment()?  KILL  :  matchRemovableAssignmentsElimination.getRemovableAssignment();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.isRemovableAssignment()?  KILL  :  matchRemovableAssignmentsElimination.getRemovableAssignment();	  return    matchRemovableAssignmentsElimination.getRemovableAssignment();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
1028	[BUG]  [BUGGY]  return  state.isRemovableAssignment()?  null  :  state.getRemovableAssignment();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.isRemovableAssignment()?  null  :  state.getRemovableAssignment();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.isRemovableAssignment()?  null  :  state.getRemovableAssignment();	  return    matchRemovableAssignmentsElimination.getRemovableAssignment();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
1029	[BUG]  [BUGGY]  return  state.isRemovableAssignment()?  state.getRemovableAssignment()  :  KILL;  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.isRemovableAssignment()?  state.getRemovableAssignment()  :  KILL;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.isRemovableAssignment()?  state.getRemovableAssignment()  :  KILL;	  return    matchRemovableAssignmentsElimination.getRemovableAssignment();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
1030	[BUG]  [BUGGY]  return  state.isRemovableAssignment()?  state.getRemovableAssignment()  :  null;  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.isRemovableAssignment()?  state.getRemovableAssignment()  :  null;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.isRemovableAssignment()?  state.getRemovableAssignment()  :  null;	  return    matchRemovableAssignmentsElimination.getRemovableAssignment();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
1031	[BUG]  [BUGGY]  return  state.isRemovableAssignment()?  child.getRemovableAssignment()  :  KILL;  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.isRemovableAssignment()?  child.getRemovableAssignment()  :  KILL;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.isRemovableAssignment()?  child.getRemovableAssignment()  :  KILL;	  return    matchRemovableAssignmentsElimination.getRemovableAssignment();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
1032	[BUG]  [BUGGY]  return  state  ||  parent  ==  VariableLiveness.MAYBE_LIVE;  [CE]  cannot  find  symbol  parent  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  ||  parent  ==  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  ||  parent  ==  VariableLiveness.MAYBE_LIVE;	  return    state    ||    module    ==    VariableLiveness.MAYBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  parent	191	None	replace
1033	[BUG]  [BUGGY]  return  getRemovableAssigns().getRemovableAssigns();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  getRemovableAssigns().getRemovableAssigns();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  getRemovableAssigns().getRemovableAssigns();	  return    matchRemovableAssigns.getRemovableAssigns();    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
1034	[BUG]  [BUGGY]  Return  state.getRemovableAssigns();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Return  state.getRemovableAssigns();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Return  state.getRemovableAssigns();	  return    matchRemovableAssigns.getRemovableAssigns();    	non-compiled	[CE]  ';'  expected	86	None	replace
1035	[BUG]  [BUGGY]  return  matchRemovableAssignments(child.getRemovableAssignments());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  matchRemovableAssignments(child.getRemovableAssignments());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  matchRemovableAssignments(child.getRemovableAssignments());	  return    child.getRemovableAssignments();    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
1036	[BUG]  [BUGGY]  Return  child.getRemovableAssignments();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Return  child.getRemovableAssignments();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Return  child.getRemovableAssignments();	  return    child.getRemovableAssignments();    	non-compiled	[CE]  ';'  expected	103	None	replace
1037	[BUG]  [BUGGY]  return  body.getRemovableAssignments();  [CE]  cannot  find  symbol  body  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  body.getRemovableAssignments();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  body.getRemovableAssignments();	  return    child.getRemovableAssignments();    	non-compiled	[CE]  cannot  find  symbol  body	103	None	replace
1038	[BUG]  [BUGGY]  return  state,  child.getFirstChild();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state,  child.getFirstChild();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state,  child.getFirstChild();	  return    state,    child.getValue();    	non-compiled	[CE]  ';'  expected	182	None	replace
1039	[BUG]  [BUGGY]  return  state,  child.getChildCount();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state,  child.getChildCount();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state,  child.getChildCount();	  return    state,    child.getValue();    	non-compiled	[CE]  ';'  expected	182	None	replace
1040	[BUG]  [BUGGY]  return  state.getType()  >=  Token.CALL  &&  state.getChildCount()  >  1)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()  >=  Token.CALL  &&  state.getChildCount()  >  1)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  >=  Token.CALL  &&  state.getChildCount()  >  1)  {	  return    state.getType()    ==    Token.CALL    ||    state.getChildCount()    >    1)    {    	non-compiled	[CE]  ';'  expected	47	None	replace
1041	[BUG]  [BUGGY]  return  state.getValueAssignments(n);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValueAssignments(n);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValueAssignments(n);	  return    state.getValueAssignments();    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
1042	[BUG]  [BUGGY]  return  state.getValueAssignments(),  child);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValueAssignments(),  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValueAssignments(),  child);	  return    state.getValueAssignments();    	non-compiled	[CE]  ';'  expected	126	None	replace
1043	[BUG]  [BUGGY]  return  state.invoke(variable,  new  VariableLiveness(n));  [CE]  enum  types  may  not  be  instantiated  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(variable,  new  VariableLiveness(n));  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(variable,  new  VariableLiveness(n));	  return    n.invoke(variable,    state);    	non-compiled	[CE]  enum  types  may  not  be  instantiated	81	None	replace
1044	[BUG]  [BUGGY]  Return  state.invoke(variable,  n);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Return  state.invoke(variable,  n);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Return  state.invoke(variable,  n);	  return    n.invoke(variable,    state);    	non-compiled	[CE]  ';'  expected	81	None	replace
1045	[BUG]  [BUGGY]  return  state.invoke(variable,  new  VariableLiveness());  [CE]  enum  types  may  not  be  instantiated  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(variable,  new  VariableLiveness());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(variable,  new  VariableLiveness());	  return    n.invoke(variable,    state);    	non-compiled	[CE]  enum  types  may  not  be  instantiated	81	None	replace
1046	[BUG]  [BUGGY]  return  state.invoke(variable,  n).invoke(n);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(variable,  n).invoke(n);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(variable,  n).invoke(n);	  return    n.invoke(variable,    state);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
1047	[BUG]  [BUGGY]  return  State.FALSE  ||  state  ==  VariableLiveness.KILL_LIVE;  [CE]  cannot  find  symbol  State  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.FALSE  ||  state  ==  VariableLiveness.KILL_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.FALSE  ||  state  ==  VariableLiveness.KILL_LIVE;	  return    State.FALSE;    	non-compiled	[CE]  cannot  find  symbol  State	129	None	replace
1048	[BUG]  [BUGGY]  return  State.KILL.getValue();  [CE]  package  State  does  not  exist  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.KILL.getValue();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.KILL.getValue();	  return    child.getValue();    	non-compiled	[CE]  package  State  does  not  exist	40	None	replace
1049	[BUG]  [BUGGY]  return  body.getValue();  [CE]  cannot  find  symbol  body  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  body.getValue();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  body.getValue();	  return    child.getValue();    	non-compiled	[CE]  cannot  find  symbol  body	40	None	replace
1050	[BUG]  [BUGGY]  Return  child.getValue();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Return  child.getValue();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Return  child.getValue();	  return    child.getValue();    	non-compiled	[CE]  ';'  expected	40	None	replace
1051	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  return  isVariableReadBeforeKill(child,  variable);  }  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  return  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(child,    variable);    if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  return  isVariableReadBeforeKill(child,  variable);  }	  	non-compiled	[CE]  unreachable  statement	184	None	add
1052	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  isVariableReadBeforeKill(child,  variable);  }  else  {  Predicate  matchRemovableAssignsElimination  =  matchRemovableAssigns;  return  state;  }  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  isVariableReadBeforeKill(child,  variable);  }  else  {  Predicate  matchRemovableAssignsElimination  =  matchRemovableAssigns;  return  state;  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(child,    variable);    if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  isVariableReadBeforeKill(child,  variable);  }  else  {  Predicate  matchRemovableAssignsElimination  =  matchRemovableAssigns;  return  state;  }	  	non-compiled	[CE]  unreachable  statement	184	None	add
1053	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(child,    variable);    if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state  =  isVariableReadBeforeKill(child,  variable);  }	  	non-compiled	[CE]  unreachable  statement	184	None	add
1054	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state    ==    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	21	None	replace
1055	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state    ==    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	21	None	replace
1056	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.READ)  {  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.READ)  {  return  state;  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.READ)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state    ==    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	21	None	replace
1057	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  n,  child);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  n,  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  n,  child);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    child);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	142	None	replace
1058	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  child,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  child,  null);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  child,  null);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    child);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	142	None	replace
1059	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  child,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  child,  n);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  child,  n);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    child);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	142	None	replace
1060	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  child,  MILL_LIVE);  [CE]  cannot  find  symbol  MILL_LIVE  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  child,  MILL_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  child,  MILL_LIVE);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    child);    	non-compiled	[CE]  cannot  find  symbol  MILL_LIVE	142	None	replace
1061	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  child,  MOVED);  [CE]  cannot  find  symbol  MOVED  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  child,  MOVED);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  child,  MOVED);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    child);    	non-compiled	[CE]  cannot  find  symbol  MOVED	142	None	replace
1062	[BUG]  [BUGGY]  return  state.invoke(child,  variable,  VariableLiveness.KILL);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(child,  variable,  VariableLiveness.KILL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(child,  variable,  VariableLiveness.KILL);	  return    state.invoke(n,    variable,    MAYBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
1063	[BUG]  [BUGGY]  return  state.invoke(child,  variable,  MOVED);  [CE]  cannot  find  symbol  MOVED  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(child,  variable,  MOVED);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(child,  variable,  MOVED);	  return    state.invoke(n,    variable,    MAYBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  MOVED	76	None	replace
1064	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child,  n.getFirstChild());  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child,  n.getFirstChild());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child,  n.getFirstChild());	  return    isVariableReadBeforeKill(child.getFirstChild());    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	188	None	replace
1065	[BUG]  [BUGGY]  return  state.getRemovableAssigns()  ||  n.getRemovableAssigns();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssigns()  ||  n.getRemovableAssigns();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssigns()  ||  n.getRemovableAssigns();	  return    state.getRemovableAssigns()    ||    state.getRemovableAssigns();    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
1066	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getString(),  variables,  state);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getString(),  variables,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child.getString(),  variables,  state);	  return    isVariableReadBeforeKill(child.getString(),    variable);    	non-compiled	[CE]  cannot  find  symbol  	63	None	replace
1067	[BUG]  [BUGGY]  return  state  &&  state.getType()!=  Token.CALL  ||  state.getChildCount()  >  1;  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  state.getType()!=  Token.CALL  ||  state.getChildCount()  >  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state.getType()!=  Token.CALL  ||  state.getChildCount()  >  1;	  return    state    &&    state.getType()!=    Token.CALL    &&    state.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
1068	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE;  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE;	  return    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  incompatible  types	185	None	replace
1069	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state!=  VariableLiveness.MAYBE_LIVE?  null  :  isVariableReadBeforeKill(child,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	return  state!=  VariableLiveness.MAYBE_LIVE?  null  :  isVariableReadBeforeKill(child,  variable);	  return    isVariableReadBeforeKill(child,    variable);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	185	61	replace
1070	[BUG]  [BUGGY]  return  state!=  VariableLiveness.MAYBE_LIVE?  null  :  isVariableReadBeforeKill(child,  variable);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state!=  VariableLiveness.MAYBE_LIVE?  null  :  isVariableReadBeforeKill(child,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state!=  VariableLiveness.MAYBE_LIVE?  null  :  isVariableReadBeforeKill(child,  variable);	  return    isVariableReadBeforeKill(child,    variable);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	185	61	replace
1071	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child,  variable  &  VariableLiveness.MAYBE_LIVE);  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]        AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child,  variable  &  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child,  variable  &  VariableLiveness.MAYBE_LIVE);	  return    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	185	None	replace
1072	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    StackOverflowError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  ==  VariableLiveness.READ?  null  :  isVariableReadBeforeKill(child,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	return  state  ==  VariableLiveness.READ?  null  :  isVariableReadBeforeKill(child,  variable);	  return    isVariableReadBeforeKill(n,    variable);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	187	61	replace
1073	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.READ?  null  :  isVariableReadBeforeKill(child,  variable);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    StackOverflowError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  ==  VariableLiveness.READ?  null  :  isVariableReadBeforeKill(child,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  ==  VariableLiveness.READ?  null  :  isVariableReadBeforeKill(child,  variable);	  return    isVariableReadBeforeKill(n,    variable);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	187	61	replace
1074	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.READ  &&  isVariableReadBeforeKill(child,  variable);  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]      StackOverflowError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  ==  VariableLiveness.READ  &&  isVariableReadBeforeKill(child,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  ==  VariableLiveness.READ  &&  isVariableReadBeforeKill(child,  variable);	  return    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	187	None	replace
1075	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        StackOverflowError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE?  isVariableReadBeforeKill(child,  variable):  state;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	return  state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE?  isVariableReadBeforeKill(child,  variable):  state;	  return    isVariableReadBeforeKill(n,    variable);    	compilable	  [FE]  AssertionFailedError  	187	57	replace
1076	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE?  isVariableReadBeforeKill(child,  variable):  state;  [FE]  AssertionFailedError  [FE]        StackOverflowError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE?  isVariableReadBeforeKill(child,  variable):  state;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE?  isVariableReadBeforeKill(child,  variable):  state;	  return    isVariableReadBeforeKill(n,    variable);    	compilable	  [FE]  AssertionFailedError  	187	57	replace
1077	[BUG]  [BUGGY]  return  state  ||  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >  2)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  ||  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >  2)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  ||  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >  2)  {	  return    state    ||    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1)    {    	non-compiled	[CE]  ';'  expected	149	None	replace
1078	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  BYTE_LIVE);  [CE]  cannot  find  symbol  BYTE_LIVE  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  BYTE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  BYTE_LIVE);	  return    state    &&    isVariableReadBeforeKill(child,    variable,    mayBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  BYTE_LIVE	29	None	replace
1079	[BUG]  [BUGGY]  return  state.getRemovableAssignments(child,  variables);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignments(child,  variables);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignments(child,  variables);	  return    state.getRemovableAssignments(child);    	non-compiled	[CE]  cannot  find  symbol  	123	None	replace
1080	[BUG]  [BUGGY]  return  state.getRemovableAssignments(child,  n);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignments(child,  n);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignments(child,  n);	  return    state.getRemovableAssignments(child);    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
1081	[BUG]  [BUGGY]  return  state  &&  state  ==  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  state  ==  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state  ==  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE;	  return    state    &&    state    ==    VariableLiveness.MAYBE_LIVE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	12	None	replace
1082	[BUG]  [BUGGY]  return  state  &&  state.getType()!=  Token.CALL  &&  state.getChildCount()  >  2)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  state.getType()!=  Token.CALL  &&  state.getChildCount()  >  2)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state.getType()!=  Token.CALL  &&  state.getChildCount()  >  2)  {	  return    state    &&    state.getType()!=    Token.CALL    &&    state.getChildCount()    >    1)    {    	non-compiled	[CE]  ';'  expected	150	None	replace
1083	[BUG]  [BUGGY]  return  state.getVariableAssigns(),  child;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getVariableAssigns(),  child;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getVariableAssigns(),  child;	  return    state.getRemovableAssigns(),    variable;    	non-compiled	[CE]  ';'  expected	84	None	replace
1084	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child,  n,  state);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,VariableLiveness)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child,  n,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	NodeTraversal.traverse(compiler,  child,  n,  state);	          NodeTraversal.traverse(compiler,    n,    state);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,VariableLiveness)	169	None	replace
1085	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child,  n);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child,  n);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	NodeTraversal.traverse(compiler,  child,  n);	          NodeTraversal.traverse(compiler,    n,    state);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	169	None	replace
1086	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  KILL_LIVE,  state);  [CE]  cannot  find  symbol  KILL_LIVE  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  KILL_LIVE,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	NodeTraversal.traverse(compiler,  n,  KILL_LIVE,  state);	          NodeTraversal.traverse(compiler,    n,    state);    	non-compiled	[CE]  cannot  find  symbol  KILL_LIVE	169	None	replace
1087	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  state,  child);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,VariableLiveness,Node)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  state,  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	NodeTraversal.traverse(compiler,  n,  state,  child);	          NodeTraversal.traverse(compiler,    n,    state);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,VariableLiveness,Node)	169	None	replace
1088	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()!=  2)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()!=  2)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  &&  state.getChildCount()!=  2)  {	  return    state.getType()    ==    Token.CALL    &&    state.getChildCount()!=    1)    {    	non-compiled	[CE]  ';'  expected	49	None	replace
1089	[BUG]  [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable  -  1);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	state  =  isVariableReadBeforeKill(child,  variable  -  1);	  state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	20	None	replace
1090	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  FUNC(param3  >>  AssertionFailedError);  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  FUNC(param3  >>  AssertionFailedError);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  expected:  function  FUNC(param3  >>  AssertionFailedError);	          junit.framework.AssertionFailedError:    expected:    function    FUNC(param2    >>    AssertionFailedError);    	non-compiled	[CE]  not  a  statement	114	None	replace
1091	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  FUNC(param2!=  AssertionFailedError);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  FUNC(param2!=  AssertionFailedError);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  expected:  function  FUNC(param2!=  AssertionFailedError);	          junit.framework.AssertionFailedError:    expected:    function    FUNC(param2    >>    AssertionFailedError);    	non-compiled	[CE]  not  a  statement	114	None	replace
1092	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  MOVE);  [CE]  cannot  find  symbol  MOVE  [FE]            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  MOVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  MOVE);	  return    state    &&    isVariableReadBeforeKill(child,    variable,    MOVED);    	non-compiled	[CE]  cannot  find  symbol  MOVE	144	None	replace
1093	[BUG]  [BUGGY]  returns  state.getRemovableAssignment();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  returns  state.getRemovableAssignment();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	returns  state.getRemovableAssignment();	  return    matchRemovableAssignments.getRemovableAssignment();    	non-compiled	[CE]  ';'  expected	192	None	replace
1094	[BUG]  [BUGGY]  return  state.isRemovableAssignment();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.isRemovableAssignment();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.isRemovableAssignment();	  return    matchRemovableAssignments.getRemovableAssignment();    	non-compiled	[CE]  cannot  find  symbol	192	None	replace
1095	[BUG]  [BUGGY]  return  getRemovableAssignment(child.getRemovableAssignment());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  getRemovableAssignment(child.getRemovableAssignment());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  getRemovableAssignment(child.getRemovableAssignment());	  return    child.getRemovableAssignment();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
1096	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  ||  n.getChildCount()  >  1;  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()  ==  Token.CALL  ||  n.getChildCount()  >  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  ||  n.getChildCount()  >  1;	  return    state.getType()    ==    Token.CALL    ||    state.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
1097	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MILL_BOOLEAN);  [CE]  cannot  find  symbol  MILL_BOOLEAN  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MILL_BOOLEAN);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MILL_BOOLEAN);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    MILL_LIVE);    	non-compiled	[CE]  cannot  find  symbol  MILL_BOOLEAN	141	None	replace
1098	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  MAID);  [CE]  cannot  find  symbol  MAID  [FE]            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  MAID);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  MAID);	  return    state    &&    isVariableReadBeforeKill(child,    variable,    VAR);    	non-compiled	[CE]  cannot  find  symbol  MAID	193	None	replace
1099	[BUG]  [BUGGY]  return  state,  n.getChildCount();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state,  n.getChildCount();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state,  n.getChildCount();	  return    state,    n.getValue();    	non-compiled	[CE]  ';'  expected	181	None	replace
1100	[BUG]  [BUGGY]          n.removeChild(child);  n.removeChild(child);  this.matchRemovableAssignsElimination  =  isVariableReadBeforeKill(child,  variable);  [CE]  cannot  find  symbol  matchRemovableAssignsElimination  [FE]    AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          n.removeChild(child);  n.removeChild(child);  this.matchRemovableAssignsElimination  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                n.removeChild(child);    n.removeChild(child);  this.matchRemovableAssignsElimination  =  isVariableReadBeforeKill(child,  variable);	  	non-compiled	[CE]  cannot  find  symbol  matchRemovableAssignsElimination	172	None	add
1101	[BUG]  [BUGGY]          n.removeChild(child);  n.removeChild(child);  this.matchRemovableAssignsElimination$VariableLiveness  =  isVariableReadBeforeKill(child,  variable);  [CE]  cannot  find  symbol  matchRemovableAssignsElimination$VariableLiveness  [FE]      AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          n.removeChild(child);  n.removeChild(child);  this.matchRemovableAssignsElimination$VariableLiveness  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                n.removeChild(child);    n.removeChild(child);  this.matchRemovableAssignsElimination$VariableLiveness  =  isVariableReadBeforeKill(child,  variable);	  	non-compiled	[CE]  cannot  find  symbol  matchRemovableAssignsElimination$VariableLiveness	172	None	add
1102	[BUG]  [BUGGY]          n.removeChild(child);  Predicate  n  =  getControlFlowGraph().getEnteringNewCfgNode(child);  n.removeChild(child);  [CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]        AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          n.removeChild(child);  Predicate  n  =  getControlFlowGraph().getEnteringNewCfgNode(child);  n.removeChild(child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                n.removeChild(child);    Predicate  n  =  getControlFlowGraph().getEnteringNewCfgNode(child);  n.removeChild(child);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	172	None	add
1103	[BUG]  [BUGGY]          n.removeChild(child);  Predicate  n  =  getControlFlowGraph().getEnteringNewCfgNode(child,  variable);  n.removeChild(child);  [CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]          AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          n.removeChild(child);  Predicate  n  =  getControlFlowGraph().getEnteringNewCfgNode(child,  variable);  n.removeChild(child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                n.removeChild(child);    Predicate  n  =  getControlFlowGraph().getEnteringNewCfgNode(child,  variable);  n.removeChild(child);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	172	None	add
1104	[BUG]  [BUGGY]          n.removeChild(child);  n.removeChild(child);  this.matchRemovableAssignsElimination$VariableLiveness  =  isVariableReadBeforeKill(variable,  child);  [CE]  cannot  find  symbol  matchRemovableAssignsElimination$VariableLiveness  [FE]            AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          n.removeChild(child);  n.removeChild(child);  this.matchRemovableAssignsElimination$VariableLiveness  =  isVariableReadBeforeKill(variable,  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                n.removeChild(child);    n.removeChild(child);  this.matchRemovableAssignsElimination$VariableLiveness  =  isVariableReadBeforeKill(variable,  child);	  	non-compiled	[CE]  cannot  find  symbol  matchRemovableAssignsElimination$VariableLiveness	172	None	add
1105	[BUG]  [BUGGY]          n.removeChild(child);  n.removeChild(child);  this.matchRemovableAssignsElimination  =  isVariableReadBeforeKill(variable,  child);  [CE]  cannot  find  symbol  matchRemovableAssignsElimination  [FE]              AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          n.removeChild(child);  n.removeChild(child);  this.matchRemovableAssignsElimination  =  isVariableReadBeforeKill(variable,  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                n.removeChild(child);    n.removeChild(child);  this.matchRemovableAssignsElimination  =  isVariableReadBeforeKill(variable,  child);	  	non-compiled	[CE]  cannot  find  symbol  matchRemovableAssignsElimination	172	None	add
1106	[BUG]  [BUGGY]  RemovableAssigns  n  =  state.getRemovableAssigns();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  RemovableAssigns  n  =  state.getRemovableAssigns();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	RemovableAssigns  n  =  state.getRemovableAssigns();	  return    n.getRemovableAssigns();    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
1107	[BUG]  [BUGGY]  Return  n.getRemovableAssigns();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Return  n.getRemovableAssigns();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Return  n.getRemovableAssigns();	  return    n.getRemovableAssigns();    	non-compiled	[CE]  ';'  expected	83	None	replace
1108	[BUG]  [BUGGY]  return  state  &&  n.getType()  ==  Token.CALL  &&  state.getChildCount()  >  4;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  n.getType()  ==  Token.CALL  &&  state.getChildCount()  >  4;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  n.getType()  ==  Token.CALL  &&  state.getChildCount()  >  4;	  return    state    &&    n.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	179	None	replace
1109	[BUG]  [BUGGY]  return  state  &&  n.getType()  ==  Token.CALL  &&  state.getChildCount()  >  3;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  n.getType()  ==  Token.CALL  &&  state.getChildCount()  >  3;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  n.getType()  ==  Token.CALL  &&  state.getChildCount()  >  3;	  return    state    &&    n.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	179	None	replace
1110	[BUG]  [BUGGY]  return  state  &&  n.getType()  ==  Token.CALL  ||  state.getChildCount()  >  1;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  n.getType()  ==  Token.CALL  ||  state.getChildCount()  >  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  n.getType()  ==  Token.CALL  ||  state.getChildCount()  >  1;	  return    state    &&    n.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	179	None	replace
1111	[BUG]  [BUGGY]  return  state.invoke(n,  variable,  REGEXP);  [CE]  cannot  find  symbol  REGEXP  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(n,  variable,  REGEXP);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(n,  variable,  REGEXP);	  return    state.invoke(n,    variable,    mayBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  REGEXP	82	None	replace
1112	[BUG]  [BUGGY]  return  state.invoke(n,  variable,  MILL);  [CE]  cannot  find  symbol  MILL  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(n,  variable,  MILL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(n,  variable,  MILL);	  return    state.invoke(n,    variable,    mayBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  MILL	82	None	replace
1113	[BUG]  [BUGGY]  return  state.invoke(n,  variable,  JSON_SYNTHETIC);  [CE]  cannot  find  symbol  JSON_SYNTHETIC  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(n,  variable,  JSON_SYNTHETIC);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(n,  variable,  JSON_SYNTHETIC);	  return    state.invoke(n,    variable,    mayBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  JSON_SYNTHETIC	82	None	replace
1114	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(n.getFirstChild(),  child,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(n.getFirstChild(),  child,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(n.getFirstChild(),  child,  variable);	  return    state    &&    isVariableReadBeforeKill(n.getFirstChild(),    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	89	None	replace
1115	[BUG]  [BUGGY]  return  state  &&  child.getType()  ==  Token.CALL  &&  child.getChildCount()  >=  1;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  child.getType()  ==  Token.CALL  &&  child.getChildCount()  >=  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  child.getType()  ==  Token.CALL  &&  child.getChildCount()  >=  1;	  return    state    &&    state.getType()    ==    Token.CALL    &&    child.getChildCount()    >=    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	177	None	replace
1116	[BUG]  [BUGGY]  return  state  &&  child.getType()  ==  Token.CALL  &&  child.getChildCount()!=  1;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  child.getType()  ==  Token.CALL  &&  child.getChildCount()!=  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  child.getType()  ==  Token.CALL  &&  child.getChildCount()!=  1;	  return    state    &&    state.getType()    ==    Token.CALL    &&    child.getChildCount()    >=    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	177	None	replace
1117	[BUG]  [BUGGY]  return  state  &&  child.getType()  ==  Token.CALL  &&  child.getChildCount()  >>  1;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  child.getType()  ==  Token.CALL  &&  child.getChildCount()  >>  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  child.getType()  ==  Token.CALL  &&  child.getChildCount()  >>  1;	  return    state    &&    state.getType()    ==    Token.CALL    &&    child.getChildCount()    >=    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	177	None	replace
1118	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variables.getString());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variables.getString());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variables.getString());	  return    state    &&    isVariableReadBeforeKill(variable.getString());    	non-compiled	[CE]  cannot  find  symbol  	60	None	replace
1119	[BUG]  [BUGGY]  return  state  &&  hasVariableReadBeforeKill(child.getString());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  hasVariableReadBeforeKill(child.getString());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  hasVariableReadBeforeKill(child.getString());	  return    state    &&    isVariableReadBeforeKill(variable.getString());    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
1120	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  null,  state);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  null,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  null,  state);	  return    state    &&    isVariableReadBeforeKill(child.getFirstChild(),    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	93	None	replace
1121	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  null,  caseRemovableAssignsElimination);  [CE]  cannot  find  symbol  caseRemovableAssignsElimination  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  null,  caseRemovableAssignsElimination);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  null,  caseRemovableAssignsElimination);	  return    state    &&    isVariableReadBeforeKill(child.getFirstChild(),    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  caseRemovableAssignsElimination	93	None	replace
1122	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  null,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  null,  MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  null,  MAYBE_LIVE);	  return    state    &&    isVariableReadBeforeKill(child.getFirstChild(),    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	93	None	replace
1123	[BUG]  [BUGGY]  return  state.removeValue(variable);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.removeValue(variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.removeValue(variable);	  return    state.removeValue();    	non-compiled	[CE]  cannot  find  symbol	183	None	replace
1124	[BUG]  [BUGGY]  return  state.getFunctionValue();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getFunctionValue();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getFunctionValue();	  return    state.removeValue();    	non-compiled	[CE]  cannot  find  symbol	183	None	replace
1125	[BUG]  [BUGGY]  return  state.getVariableValue();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getVariableValue();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getVariableValue();	  return    state.removeValue();    	non-compiled	[CE]  cannot  find  symbol	183	None	replace
1126	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.NAME);  Preconditions.checkState(child.getType()  ==  Token.NAME);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param2  ==  return  VariableLiveness.READ);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.NAME);  Preconditions.checkState(child.getType()  ==  Token.NAME);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param2  ==  return  VariableLiveness.READ);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.NAME);    Preconditions.checkState(child.getType()  ==  Token.NAME);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param2  ==  return  VariableLiveness.READ);	  	non-compiled	[CE]  not  a  statement	161	None	add
1127	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.NAME);  Preconditions.checkState(child.getType()  ==  Token.NAME);Preconditions.checkState(child.getType()  ==  Token.NAME);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	                Preconditions.checkState(child.getType()    ==    Token.NAME);    Preconditions.checkState(child.getType()  ==  Token.NAME);Preconditions.checkState(child.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	161	58	add
1128	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.NAME);  Preconditions.checkState(child.getType()  ==  Token.NAME);Preconditions.checkState(child.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.NAME);  Preconditions.checkState(child.getType()  ==  Token.NAME);Preconditions.checkState(child.getType()  ==  Token.NAME);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.NAME);    Preconditions.checkState(child.getType()  ==  Token.NAME);Preconditions.checkState(child.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	161	58	add
1129	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.NAME);  Preconditions.checkState(child.getType()  ==  Token.NAME);  if(!matchRemovableAssignsElimination)  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  }  [CE]  cannot  find  symbol  matchRemovableAssignsElimination  [FE]        AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.NAME);  Preconditions.checkState(child.getType()  ==  Token.NAME);  if(!matchRemovableAssignsElimination)  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.NAME);    Preconditions.checkState(child.getType()  ==  Token.NAME);  if(!matchRemovableAssignsElimination)  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  }	  	non-compiled	[CE]  cannot  find  symbol  matchRemovableAssignsElimination	161	None	add
1130	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.VAR);  Preconditions.checkState(child.getType()  ==  Token.READ);  [CE]  cannot  find  symbol  READ  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.VAR);  Preconditions.checkState(child.getType()  ==  Token.READ);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.VAR);    Preconditions.checkState(child.getType()  ==  Token.READ);	  	non-compiled	[CE]  cannot  find  symbol  READ	170	None	add
1131	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.VAR);  Preconditions.checkState(child.getType()  ==  Token.CAR);  [CE]  cannot  find  symbol  CAR  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.VAR);  Preconditions.checkState(child.getType()  ==  Token.CAR);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.VAR);    Preconditions.checkState(child.getType()  ==  Token.CAR);	  	non-compiled	[CE]  cannot  find  symbol  CAR	170	None	add
1132	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.VAR);  Preconditions.checkState(child.getType()  ==  Token.VOID);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	                Preconditions.checkState(child.getType()    ==    Token.VAR);    Preconditions.checkState(child.getType()  ==  Token.VOID);	  	compilable	  [FE]  RuntimeException  	170	61	add
1133	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.VAR);  Preconditions.checkState(child.getType()  ==  Token.VOID);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.VAR);  Preconditions.checkState(child.getType()  ==  Token.VOID);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.VAR);    Preconditions.checkState(child.getType()  ==  Token.VOID);	  	compilable	  [FE]  RuntimeException  	170	61	add
1134	[BUG]  [BUGGY]  return  state.getType()  >=  Token.CALL  &&  n.getChildCount()  >  1;  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()  >=  Token.CALL  &&  n.getChildCount()  >  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  >=  Token.CALL  &&  n.getChildCount()  >  1;	  return    n.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
1135	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  &&  n.getChildCount()  >  1);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()  ==  Token.CALL  &&  n.getChildCount()  >  1);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  &&  n.getChildCount()  >  1);	  return    n.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1;    	non-compiled	[CE]  ';'  expected	6	None	replace
1136	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  }  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(child.getFirstChild(),    variable);    if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  }	  	non-compiled	[CE]  unreachable  statement	94	None	add
1137	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  return  isVariableReadBeforeKill(child.getFirstChild()  [CE]  ')'  expected  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  return  isVariableReadBeforeKill(child.getFirstChild()  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(child.getFirstChild(),    variable);    if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  return  isVariableReadBeforeKill(child.getFirstChild()	  	non-compiled	[CE]  ')'  expected	94	None	add
1138	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  return  isVariableReadBeforeKill(child.getFirstCh  [CE]  ')'  expected  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  return  isVariableReadBeforeKill(child.getFirstCh  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(child.getFirstChild(),    variable);    if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  return  isVariableReadBeforeKill(child.getFirstCh	  	non-compiled	[CE]  ')'  expected	94	None	add
1139	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  Return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  [CE]  ';'  expected  [FE]          RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  Return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(child.getFirstChild(),    variable);    Return  isVariableReadBeforeKill(child.getFirstChild(),  variable);	  	non-compiled	[CE]  ';'  expected	94	None	add
1140	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  VariableLiveness  n  =  state.getVariable(variable);  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  [CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  VariableLiveness  n  =  state.getVariable(variable);  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(n.getFirstChild(),    variable);    VariableLiveness  n  =  state.getVariable(variable);  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	155	None	add
1141	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  VariableLiveness  n  =  state.getVariable();  [CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  VariableLiveness  n  =  state.getVariable();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(n.getFirstChild(),    variable);    VariableLiveness  n  =  state.getVariable();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	155	None	add
1142	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  n,  MOVED);  [CE]  cannot  find  symbol  MOVED  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  n,  MOVED);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  n,  MOVED);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  MOVED	53	None	replace
1143	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  n,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  n,  null);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  n,  null);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	53	None	replace
1144	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  &&  child.getChildCount()  >  1)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()  ==  Token.CALL  &&  child.getChildCount()  >  1)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  &&  child.getChildCount()  >  1)  {	  return    state.getType()    ==    Token.CALL    &&    child.getChildCount()    >    1;    	non-compiled	[CE]  ';'  expected	5	None	replace
1145	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  VariableLiveness.MAYBE_LIVE);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  VariableLiveness.MAYBE_LIVE);	  return    state    &&    isVariableReadBeforeKill(child.getString()    +    1);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	61	None	replace
1146	[BUG]  [BUGGY]  return  state.invoke(child,  variable,  variable);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(child,  variable,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(child,  variable,  variable);	  return    state.invoke(n,    variable,    child);    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
1147	[BUG]  [BUGGY]  return  state.invoke(child,  variable,  child);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(child,  variable,  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(child,  variable,  child);	  return    state.invoke(n,    variable,    child);    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
1148	[BUG]  [BUGGY]  return  state.invoke(child,  variable,  n);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(child,  variable,  n);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(child,  variable,  n);	  return    state.invoke(n,    variable,    child);    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
1149	[BUG]  [BUGGY]  return  state.invoke(child,  variable,  null);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(child,  variable,  null);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(child,  variable,  null);	  return    state.invoke(n,    variable,    child);    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
1150	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  HOUR);  [CE]  cannot  find  symbol  HOUR  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  HOUR);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  HOUR);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    MOVED);    	non-compiled	[CE]  cannot  find  symbol  HOUR	140	None	replace
1151	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MOVE);  [CE]  cannot  find  symbol  MOVE  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MOVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MOVE);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    MOVED);    	non-compiled	[CE]  cannot  find  symbol  MOVE	140	None	replace
1152	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MOVE_BEFORE);  [CE]  cannot  find  symbol  MOVE_BEFORE  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MOVE_BEFORE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  MOVE_BEFORE);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    MOVED);    	non-compiled	[CE]  cannot  find  symbol  MOVE_BEFORE	140	None	replace
1153	[BUG]  [BUGGY]  return  state.getRemovableAssignmentsElimination(child,  variables);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignmentsElimination(child,  variables);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignmentsElimination(child,  variables);	  return    state.getRemovableAssignmentsElimination(child);    	non-compiled	[CE]  cannot  find  symbol  	37	None	replace
1154	[BUG]  [BUGGY]  return  state.getRemovableAssignmentsElimination(child,  n);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignmentsElimination(child,  n);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignmentsElimination(child,  n);	  return    state.getRemovableAssignmentsElimination(child);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
1155	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(n,  variable);  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(n,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(n,  variable);	  return    state    &&    isVariableReadBeforeKill(n.getString());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	59	None	replace
1156	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(variable,  n.getString());  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(variable,  n.getString());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(variable,  n.getString());	  return    state    &&    isVariableReadBeforeKill(n.getString());    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	59	None	replace
1157	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(child));  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(child));  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(child));	          NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(variable));    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
1158	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  null,  state);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  null,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  null,  state);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	55	None	replace
1159	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  null,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  null,  MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  null,  MAYBE_LIVE);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	55	None	replace
1160	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  null,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  null,  liveness);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  null,  liveness);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	55	None	replace
1161	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  null,  caseRemovableAssignsElimination);  [CE]  cannot  find  symbol  caseRemovableAssignsElimination  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  null,  caseRemovableAssignsElimination);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  null,  caseRemovableAssignsElimination);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  caseRemovableAssignsElimination	55	None	replace
1162	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  null,  MAXBE_LIVE);  [CE]  cannot  find  symbol  MAXBE_LIVE  [FE]                                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  null,  MAXBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  null,  MAXBE_LIVE);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  MAXBE_LIVE	55	None	replace
1163	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  KILL,  null);  [CE]  cannot  find  symbol  KILL  [FE]                                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  KILL,  null);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  KILL,  null);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  KILL	55	None	replace
1164	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable.getString(),  null);  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable.getString(),  null);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable.getString(),  null);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    null);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
1165	[BUG]  [BUGGY]  return  State.MILLEGAL;  [CE]  cannot  find  symbol  State  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.MILLEGAL;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.MILLEGAL;	  return    MAIBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  State	10	None	replace
1166	[BUG]  [BUGGY]  return  State.MOVED;  [CE]  cannot  find  symbol  State  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.MOVED;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.MOVED;	  return    MAIBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  State	10	None	replace
1167	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  READ);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  READ);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  READ);  if(state!=  VariableLiveness.MAYBE_LIVE)  {	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
1168	[BUG]  [BUGGY]  return  REGEXP_NON_SYNTHETIC;  [CE]  cannot  find  symbol  REGEXP_NON_SYNTHETIC  [FE]            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  REGEXP_NON_SYNTHETIC;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  REGEXP_NON_SYNTHETIC;	  return    MAYBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  REGEXP_NON_SYNTHETIC	7	None	replace
1169	[BUG]  [BUGGY]  return  BAD_ASsignmentsElimination;  [CE]  cannot  find  symbol  BAD_ASsignmentsElimination  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  BAD_ASsignmentsElimination;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  BAD_ASsignmentsElimination;	  return    MAYBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  BAD_ASsignmentsElimination	7	None	replace
1170	[BUG]  [BUGGY]  return  REGEXP;  [CE]  cannot  find  symbol  REGEXP  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  REGEXP;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  REGEXP;	  return    MAYBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  REGEXP	7	None	replace
1171	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getString(),  variable,  state,  MOVED);  [CE]  cannot  find  symbol  MOVED  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getString(),  variable,  state,  MOVED);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child.getString(),  variable,  state,  MOVED);	  return    isVariableReadBeforeKill(child.getString(),    variable,    state);    	non-compiled	[CE]  cannot  find  symbol  MOVED	57	None	replace
1172	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getString(),  variable,  state,  MILL_LIVE);  [CE]  cannot  find  symbol  MILL_LIVE  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getString(),  variable,  state,  MILL_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child.getString(),  variable,  state,  MILL_LIVE);	  return    isVariableReadBeforeKill(child.getString(),    variable,    state);    	non-compiled	[CE]  cannot  find  symbol  MILL_LIVE	57	None	replace
1173	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getString(),  variable,  state,  KILL);  [CE]  cannot  find  symbol  KILL  [FE]                                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getString(),  variable,  state,  KILL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child.getString(),  variable,  state,  KILL);	  return    isVariableReadBeforeKill(child.getString(),    variable,    state);    	non-compiled	[CE]  cannot  find  symbol  KILL	57	None	replace
1174	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  HEAD);  [CE]  cannot  find  symbol  HEAD  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  HEAD);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  HEAD);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    REGEXP);    	non-compiled	[CE]  cannot  find  symbol  HEAD	56	None	replace
1175	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  JSON_SIZE);  [CE]  cannot  find  symbol  JSON_SIZE  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  JSON_SIZE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  JSON_SIZE);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    REGEXP);    	non-compiled	[CE]  cannot  find  symbol  JSON_SIZE	56	None	replace
1176	[BUG]  [BUGGY]  return  State.MILLISECOND  -  1;  [CE]  cannot  find  symbol  State  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.MILLISECOND  -  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.MILLISECOND  -  1;	  return    State.MILLISECOND;    	non-compiled	[CE]  cannot  find  symbol  State	11	None	replace
1177	[BUG]  [BUGGY]  return  State.MILLISECOND  ||  state  ==  VariableLiveness.MAYBE_LIVE;  [CE]  cannot  find  symbol  State  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.MILLISECOND  ||  state  ==  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.MILLISECOND  ||  state  ==  VariableLiveness.MAYBE_LIVE;	  return    State.MILLISECOND;    	non-compiled	[CE]  cannot  find  symbol  State	11	None	replace
1178	[BUG]  [BUGGY]  return  State.MILLISECOND  &&  state  ==  VariableLiveness.MAYBE_LIVE;  [CE]  cannot  find  symbol  State  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.MILLISECOND  &&  state  ==  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.MILLISECOND  &&  state  ==  VariableLiveness.MAYBE_LIVE;	  return    State.MILLISECOND;    	non-compiled	[CE]  cannot  find  symbol  State	11	None	replace
1179	[BUG]  [BUGGY]  return  State.MILLISECOND  +  state.toString();  [CE]  cannot  find  symbol  State  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.MILLISECOND  +  state.toString();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.MILLISECOND  +  state.toString();	  return    State.MILLISECOND;    	non-compiled	[CE]  cannot  find  symbol  State	11	None	replace
1180	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n.getFirstChild(),  child);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n.getFirstChild(),  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(n.getFirstChild(),  child);	  return    isVariableReadBeforeKill(n.getFirstChild(),    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	156	None	replace
1181	[BUG]  [BUGGY]  return  state,  liveness.getRemovableAssigns();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state,  liveness.getRemovableAssigns();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state,  liveness.getRemovableAssigns();	  return    state,    matchRemovableAssigns.getRemovableAssigns();    	non-compiled	[CE]  ';'  expected	160	None	replace
1182	[BUG]  [BUGGY]  return  state,  testVariableAssigns.getRemovableAssigns();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state,  testVariableAssigns.getRemovableAssigns();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state,  testVariableAssigns.getRemovableAssigns();	  return    state,    matchRemovableAssigns.getRemovableAssigns();    	non-compiled	[CE]  ';'  expected	160	None	replace
1183	[BUG]  [BUGGY]  return  state,  state.getRemovableAssigns();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state,  state.getRemovableAssigns();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state,  state.getRemovableAssigns();	  return    state,    matchRemovableAssigns.getRemovableAssigns();    	non-compiled	[CE]  ';'  expected	160	None	replace
1184	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child,  child.getFirstChild(),  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child,  child.getFirstChild(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child,  child.getFirstChild(),  variable);	  return    isVariableReadBeforeKill(child,    state.getFirstChild(),    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	157	None	replace
1185	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child,  state.getFirstChild(),  n);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child,  state.getFirstChild(),  n);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child,  state.getFirstChild(),  n);	  return    isVariableReadBeforeKill(child,    state.getFirstChild(),    variable);    	non-compiled	[CE]  cannot  find  symbol	157	None	replace
1186	[BUG]  [BUGGY]  return  state  &&  child.getType()  ==  Token.CALL  &&  state.getChildCount()  ==  1;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  child.getType()  ==  Token.CALL  &&  state.getChildCount()  ==  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  child.getType()  ==  Token.CALL  &&  state.getChildCount()  ==  1;	  return    state    &&    child.getType()    ==    Token.CALL    &&    state.getChildCount()    >=    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	176	None	replace
1187	[BUG]  [BUGGY]  return  state  &&  n.getType()  ==  Token.CALL  &&  state.getChildCount()!=  1;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  n.getType()  ==  Token.CALL  &&  state.getChildCount()!=  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  n.getType()  ==  Token.CALL  &&  state.getChildCount()!=  1;	  return    state    &&    n.getType()    ==    Token.CALL    &&    state.getChildCount()    >=    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	178	None	replace
1188	[BUG]  [BUGGY]  return  state  &&  n.getType()  ==  Token.CALL  &&  state.getChildCount()  >=  2;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  n.getType()  ==  Token.CALL  &&  state.getChildCount()  >=  2;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  n.getType()  ==  Token.CALL  &&  state.getChildCount()  >=  2;	  return    state    &&    n.getType()    ==    Token.CALL    &&    state.getChildCount()    >=    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	178	None	replace
1189	[BUG]  [BUGGY]  return  state  &&  n.getType()  ==  Token.CALL  ||  state.getChildCount()  >=  1;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  n.getType()  ==  Token.CALL  ||  state.getChildCount()  >=  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  n.getType()  ==  Token.CALL  ||  state.getChildCount()  >=  1;	  return    state    &&    n.getType()    ==    Token.CALL    &&    state.getChildCount()    >=    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	178	None	replace
1190	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  STRING);  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  STRING);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  STRING);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	17	None	replace
1191	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  REGEXP);  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  REGEXP);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  REGEXP);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	17	None	replace
1192	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  2);  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  2);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  2);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	17	None	replace
1193	[BUG]  [BUGGY]  return  n.getValue()  +  state;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  n.getValue()  +  state;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n.getValue()  +  state;	  return    n.getValue();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
1194	[BUG]  [BUGGY]  return  State.MAYBE_LIVE  +  1;  [CE]  cannot  find  symbol  State  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.MAYBE_LIVE  +  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.MAYBE_LIVE  +  1;	  return    State.MAYBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  State	8	None	replace
1195	[BUG]  [BUGGY]  return  State.MAYBE_LIVE  +  state.toString();  [CE]  cannot  find  symbol  State  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.MAYBE_LIVE  +  state.toString();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.MAYBE_LIVE  +  state.toString();	  return    State.MAYBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  State	8	None	replace
1196	[BUG]  [BUGGY]  return  State.MAYBE_LIVE  +  state;  [CE]  cannot  find  symbol  State  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.MAYBE_LIVE  +  state;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.MAYBE_LIVE  +  state;	  return    State.MAYBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  State	8	None	replace
1197	[BUG]  [BUGGY]  return  State.MAYBE_LIVE  -  state;  [CE]  cannot  find  symbol  State  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.MAYBE_LIVE  -  state;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.MAYBE_LIVE  -  state;	  return    State.MAYBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  State	8	None	replace
1198	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()!=  Token.NAME);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()!=  Token.NAME);	          Preconditions.checkState(child.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	162	61	replace
1199	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()!=  Token.NAME);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()!=  Token.NAME);	          Preconditions.checkState(child.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	162	61	replace
1200	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.CALL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.CALL);	          Preconditions.checkState(child.getType()    ==    Token.NAME);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	162	61	replace
1201	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.CALL);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.CALL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.CALL);	          Preconditions.checkState(child.getType()    ==    Token.NAME);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	162	61	replace
1202	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]        AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.BLOCK);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.BLOCK);	          Preconditions.checkState(child.getType()    ==    Token.NAME);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	162	61	replace
1203	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.BLOCK);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]        AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.BLOCK);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.BLOCK);	          Preconditions.checkState(child.getType()    ==    Token.NAME);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	162	61	replace
1204	[BUG]  [BUGGY]  return  matchRemovableAssigns.invoke(child,  variable);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  matchRemovableAssigns.invoke(child,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  matchRemovableAssigns.invoke(child,  variable);	  return    state.invoke(variable,    child);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
1205	[BUG]  [BUGGY]  return  matchRemovableAssigns.invoke(child,  state);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  matchRemovableAssigns.invoke(child,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  matchRemovableAssigns.invoke(child,  state);	  return    state.invoke(variable,    child);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
1206	[BUG]  [BUGGY]  return  state.invoke(parent,  variable);  [CE]  cannot  find  symbol  parent  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(parent,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(parent,  variable);	  return    state.invoke(variable,    child);    	non-compiled	[CE]  cannot  find  symbol  parent	79	None	replace
1207	[BUG]  [BUGGY]  return  matchRemovableAssigns.invoke(variable,  child);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  matchRemovableAssigns.invoke(variable,  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  matchRemovableAssigns.invoke(variable,  child);	  return    state.invoke(variable,    child);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
1208	[BUG]  [BUGGY]  return  state  &&  state.getType()!=  Token.CALL  &&  child.getChildCount()  >  1;  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  state.getType()!=  Token.CALL  &&  child.getChildCount()  >  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state.getType()!=  Token.CALL  &&  child.getChildCount()  >  1;	  return    state    &&    state.getType()!=    Token.CALL    &&    state.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
1209	[BUG]  [BUGGY]  return  state  &&  n.getType()!=  Token.CALL  &&  state.getChildCount()  >  1;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  n.getType()!=  Token.CALL  &&  state.getChildCount()  >  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  n.getType()!=  Token.CALL  &&  state.getChildCount()  >  1;	  return    state    &&    state.getType()!=    Token.CALL    &&    state.getChildCount()    >    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	109	None	replace
1210	[BUG]  [BUGGY]  return  state  &&  parent.getType()!=  Token.CALL  &&  state.getChildCount()  >  1;  [CE]  cannot  find  symbol  parent  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  parent.getType()!=  Token.CALL  &&  state.getChildCount()  >  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  parent.getType()!=  Token.CALL  &&  state.getChildCount()  >  1;	  return    state    &&    state.getType()!=    Token.CALL    &&    state.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol  parent	109	None	replace
1211	[BUG]  [BUGGY]  return  state.isRemovableAssignmentsElimination()?  child.getRemovableAssignments()  :  KILL;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.isRemovableAssignmentsElimination()?  child.getRemovableAssignments()  :  KILL;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.isRemovableAssignmentsElimination()?  child.getRemovableAssignments()  :  KILL;	  return    matchRemovableAssignmentsElimination.getRemovableAssignments();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
1212	[BUG]  [BUGGY]  return  state.isRemovableAssignmentsElimination()?  child.getRemovableAssignments()  :  null;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.isRemovableAssignmentsElimination()?  child.getRemovableAssignments()  :  null;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.isRemovableAssignmentsElimination()?  child.getRemovableAssignments()  :  null;	  return    matchRemovableAssignmentsElimination.getRemovableAssignments();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
1213	[BUG]  [BUGGY]  return  state.getRemovableAssigns()  ||  child.getRemovableAssigns();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssigns()  ||  child.getRemovableAssigns();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssigns()  ||  child.getRemovableAssigns();	  return    state.getRemovableAssigns()    ||    state.getRemovableAssigns();    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
1214	[BUG]  [BUGGY]  return  state.getRemovableAssigns()  ||  matchRemovableAssigns.getRemovableAssigns();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssigns()  ||  matchRemovableAssigns.getRemovableAssigns();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssigns()  ||  matchRemovableAssigns.getRemovableAssigns();	  return    state.getRemovableAssigns()    ||    state.getRemovableAssigns();    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
1215	[BUG]  [BUGGY]  return  state.getRemovableAssigns()  ||  state.getRemoveAssigns();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssigns()  ||  state.getRemoveAssigns();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssigns()  ||  state.getRemoveAssigns();	  return    state.getRemovableAssigns()    ||    state.getRemovableAssigns();    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
1216	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  VariableLiveness.MAYBE_LIVE);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  VariableLiveness.MAYBE_LIVE);	  return    state    &&    isVariableReadBeforeKill(child,    variable,    MILL_LIVE);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	30	None	replace
1217	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  VEAD);  [CE]  cannot  find  symbol  VEAD  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  VEAD);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  VEAD);	  return    state    &&    isVariableReadBeforeKill(child,    variable,    MILL_LIVE);    	non-compiled	[CE]  cannot  find  symbol  VEAD	30	None	replace
1218	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  MILL_BOOLEAN);  [CE]  cannot  find  symbol  MILL_BOOLEAN  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  MILL_BOOLEAN);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  MILL_BOOLEAN);	  return    state    &&    isVariableReadBeforeKill(child,    variable,    MILL_LIVE);    	non-compiled	[CE]  cannot  find  symbol  MILL_BOOLEAN	30	None	replace
1219	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  buffer.getString());  [CE]  cannot  find  symbol  buffer  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  buffer.getString());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  buffer.getString());	  return    state    &&    isVariableReadBeforeKill(child,    variable.getString());    	non-compiled	[CE]  cannot  find  symbol  buffer	58	None	replace
1220	[BUG]  [BUGGY]  return  child.getRemovableAssignments()  &&  state.isVariableReadBeforeKill(child);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  child.getRemovableAssignments()  &&  state.isVariableReadBeforeKill(child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  child.getRemovableAssignments()  &&  state.isVariableReadBeforeKill(child);	  return    child.getRemovableAssignments();    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
1221	[BUG]  [BUGGY]  return  child.getRemovableAssignments()  &&  state.isVariableReadBeforeKill(child,  variable);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  child.getRemovableAssignments()  &&  state.isVariableReadBeforeKill(child,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  child.getRemovableAssignments()  &&  state.isVariableReadBeforeKill(child,  variable);	  return    child.getRemovableAssignments();    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
1222	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getLastChild(),  variable,  state);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getLastChild(),  variable,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child.getLastChild(),  variable,  state);	  return    state    &&    isVariableReadBeforeKill(child.getLastChild(),    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	91	None	replace
1223	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.SEMI_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.SEMI_LIVE)  {	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
1224	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.READ)  {  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.READ)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.READ)  {	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
1225	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MOVED)  {  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MOVED)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MOVED)  {	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
1226	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.BOTTOM)  {  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.BOTTOM)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.BOTTOM)  {	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
1227	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child,  variable,  n.getString());  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child,  variable,  n.getString());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child,  variable,  n.getString());	  return    isVariableReadBeforeKill(child,    variable.getString());    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	190	None	replace
1228	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child,  variable.removeFirstChild());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child,  variable.removeFirstChild());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child,  variable.removeFirstChild());	  return    isVariableReadBeforeKill(child,    variable.getString());    	non-compiled	[CE]  cannot  find  symbol	190	None	replace
1229	[BUG]  [BUGGY]  return  state  &&  child.getType()  ==  Token.CALL  &&  state.getChildCount()  >=  2;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  child.getType()  ==  Token.CALL  &&  state.getChildCount()  >=  2;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  child.getType()  ==  Token.CALL  &&  state.getChildCount()  >=  2;	  return    state    &&    child.getType()    ==    Token.CALL    &&    state.getChildCount()    >=    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	176	None	replace
1230	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.RETURN);  Preconditions.checkState(child.getType()  ==  Token.RETURN);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.RETURN);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	                Preconditions.checkState(child.getType()    ==    Token.RETURN);    Preconditions.checkState(child.getType()  ==  Token.RETURN);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.RETURN);  }	  	compilable	  [FE]  RuntimeException  	167	61	add
1231	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.RETURN);  Preconditions.checkState(child.getType()  ==  Token.RETURN);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.RETURN);  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.RETURN);  Preconditions.checkState(child.getType()  ==  Token.RETURN);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.RETURN);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.RETURN);    Preconditions.checkState(child.getType()  ==  Token.RETURN);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.RETURN);  }	  	compilable	  [FE]  RuntimeException  	167	61	add
1232	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.RETURN);  Preconditions.checkState(child.getType()  ==  Token.RETURN);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.RETURN);  }  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.RETURN);  Preconditions.checkState(child.getType()  ==  Token.RETURN);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.RETURN);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.RETURN);    Preconditions.checkState(child.getType()  ==  Token.RETURN);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.RETURN);  }	  	non-compiled	[CE]  illegal  start  of  type	167	None	add
1233	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.RETURN);  Preconditions.checkState(child.getType()  ==  Token.RETURN);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  preconditions.checkState(child.getType()  ==  Token.RETURN);  }  [CE]  cannot  find  symbol  preconditions  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.RETURN);  Preconditions.checkState(child.getType()  ==  Token.RETURN);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  preconditions.checkState(child.getType()  ==  Token.RETURN);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.RETURN);    Preconditions.checkState(child.getType()  ==  Token.RETURN);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  preconditions.checkState(child.getType()  ==  Token.RETURN);  }	  	non-compiled	[CE]  cannot  find  symbol  preconditions	167	None	add
1234	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.RETURN);  Preconditions.checkState(child.getType()  ==  Token.RETURN);  preconditions.checkState(child.getType()  ==  Token.RETURN);  [CE]  cannot  find  symbol  preconditions  [FE]          RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.RETURN);  Preconditions.checkState(child.getType()  ==  Token.RETURN);  preconditions.checkState(child.getType()  ==  Token.RETURN);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.RETURN);    Preconditions.checkState(child.getType()  ==  Token.RETURN);  preconditions.checkState(child.getType()  ==  Token.RETURN);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	167	None	add
1235	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.RETURN);  Preconditions.checkState(child.getType()  ==  Token.RETURN);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.RETURN);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	                Preconditions.checkState(child.getType()    ==    Token.RETURN);    Preconditions.checkState(child.getType()  ==  Token.RETURN);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	167	61	add
1236	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.RETURN);  Preconditions.checkState(child.getType()  ==  Token.RETURN);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.RETURN);  Preconditions.checkState(child.getType()  ==  Token.RETURN);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.RETURN);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.RETURN);    Preconditions.checkState(child.getType()  ==  Token.RETURN);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	167	61	add
1237	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.RETURN);  Preconditions.checkState(child.getType()  ==  Token.RETURN);Preconditions.checkState(child.getType()  ==  Token.RETURN);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	                Preconditions.checkState(child.getType()    ==    Token.RETURN);    Preconditions.checkState(child.getType()  ==  Token.RETURN);Preconditions.checkState(child.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	167	61	add
1238	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.RETURN);  Preconditions.checkState(child.getType()  ==  Token.RETURN);Preconditions.checkState(child.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.RETURN);  Preconditions.checkState(child.getType()  ==  Token.RETURN);Preconditions.checkState(child.getType()  ==  Token.RETURN);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.RETURN);    Preconditions.checkState(child.getType()  ==  Token.RETURN);Preconditions.checkState(child.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	167	61	add
1239	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.RETURN);  Preconditions.checkState(child.getType()  ==  Token.RETURN);  }  else  {  Preconditions.checkState(child.getType()  ==  Token.RETURN);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	                Preconditions.checkState(child.getType()    ==    Token.RETURN);    Preconditions.checkState(child.getType()  ==  Token.RETURN);  }  else  {  Preconditions.checkState(child.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	167	61	add
1240	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.RETURN);  Preconditions.checkState(child.getType()  ==  Token.RETURN);  }  else  {  Preconditions.checkState(child.getType()  ==  Token.RETURN);  [FE]  RuntimeException  [FE]                RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.RETURN);  Preconditions.checkState(child.getType()  ==  Token.RETURN);  }  else  {  Preconditions.checkState(child.getType()  ==  Token.RETURN);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.RETURN);    Preconditions.checkState(child.getType()  ==  Token.RETURN);  }  else  {  Preconditions.checkState(child.getType()  ==  Token.RETURN);	  	compilable	  [FE]  RuntimeException  	167	61	add
1241	[BUG]  [BUGGY]  return  state.getRemovableAssignments(),  child,  VariableLiveness.KILL;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignments(),  child,  VariableLiveness.KILL;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignments(),  child,  VariableLiveness.KILL;	  return    state.getRemovableAssignments(),    child;    	non-compiled	[CE]  ';'  expected	122	None	replace
1242	[BUG]  [BUGGY]  return  state!=  VariableLiveness.MAYBE_LIVE?  getVariableReadBeforeKill(child,  variable):  state;  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state!=  VariableLiveness.MAYBE_LIVE?  getVariableReadBeforeKill(child,  variable):  state;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state!=  VariableLiveness.MAYBE_LIVE?  getVariableReadBeforeKill(child,  variable):  state;	  return    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol	187	None	replace
1243	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n,  state);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]      StackOverflowError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(n,  state);	  return    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	187	None	replace
1244	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  VariableLiveness.MAYBE_LIVE);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  VariableLiveness.MAYBE_LIVE);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    MAXBE_LIVE);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	52	None	replace
1245	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  VEAD);  [CE]  cannot  find  symbol  VEAD  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  VEAD);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  VEAD);	  return    state    &&    isVariableReadBeforeKill(child.getFirstChild(),    variable,    state);    	non-compiled	[CE]  cannot  find  symbol  VEAD	121	None	replace
1246	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  child,  state);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  child,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  child,  state);	  return    state    &&    isVariableReadBeforeKill(child.getFirstChild(),    variable,    state);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	121	None	replace
1247	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  expected;  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  expected;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  expected;	          junit.framework.AssertionFailedError:    expected:    function    FUNC(param1    >>    AssertionFailedError    	non-compiled	[CE]  not  a  statement	115	None	replace
1248	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  expected  =  function  FUNC(param1  >>  AssertionFailedError  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  expected  =  function  FUNC(param1  >>  AssertionFailedError  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  expected  =  function  FUNC(param1  >>  AssertionFailedError	          junit.framework.AssertionFailedError:    expected:    function    FUNC(param1    >>    AssertionFailedError    	non-compiled	[CE]  not  a  statement	115	None	replace
1249	[BUG]  [BUGGY]  return  BAD_VARIABLE;  [CE]  cannot  find  symbol  BAD_VARIABLE  [FE]            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  BAD_VARIABLE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  BAD_VARIABLE;	  return    MAYBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  BAD_VARIABLE	7	None	replace
1250	[BUG]  [BUGGY]  return  READ;  [CE]  cannot  find  symbol  READ  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  READ;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  READ;	  return    MAYBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  READ	7	None	replace
1251	[BUG]  [BUGGY]  return  matchRemovableAssignments.getRemovableAssignments(child);  [CE]  cannot  find  symbol  matchRemovableAssignments  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  matchRemovableAssignments.getRemovableAssignments(child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  matchRemovableAssignments.getRemovableAssignments(child);	  return    state.getRemovableAssignments(child);    	non-compiled	[CE]  cannot  find  symbol  matchRemovableAssignments	123	None	replace
1252	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.BLOCK);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.BLOCK);	          Preconditions.checkState(child.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	166	61	replace
1253	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.BLOCK);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.BLOCK);	          Preconditions.checkState(child.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	166	61	replace
1254	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.CALL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.CALL);	          Preconditions.checkState(child.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	166	61	replace
1255	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.CALL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.CALL);	          Preconditions.checkState(child.getType()    ==    Token.CALL);    	compilable	  [FE]  RuntimeException  	166	61	replace
1256	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  expected;  function  FUNC(param2  >>  AssertionFailedError  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  expected;  function  FUNC(param2  >>  AssertionFailedError  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  expected;  function  FUNC(param2  >>  AssertionFailedError	          junit.framework.AssertionFailedError:    expected:    function    FUNC(param2    >>    AssertionFailedError    	non-compiled	[CE]  not  a  statement	116	None	replace
1257	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	state    =    isVariableReadBeforeKill(child,    variable);    if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  state  =  isVariableReadBeforeKill(child,  variable);  }	  	compilable	  [FE]  AssertionFailedError  	19	57	add
1258	[BUG]  [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  state  =  isVariableReadBeforeKill(child,  variable);  }  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	state    =    isVariableReadBeforeKill(child,    variable);    if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  state  =  isVariableReadBeforeKill(child,  variable);  }	  	compilable	  [FE]  AssertionFailedError  	19	57	add
1259	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	state    =    isVariableReadBeforeKill(child,    variable);    if(state!=  VariableLiveness.MAYBE_LIVE)  {  state  =  isVariableReadBeforeKill(child,  variable);  }	  	compilable	  [FE]  AssertionFailedError  	19	57	add
1260	[BUG]  [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  state  =  isVariableReadBeforeKill(child,  variable);  }  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	state    =    isVariableReadBeforeKill(child,    variable);    if(state!=  VariableLiveness.MAYBE_LIVE)  {  state  =  isVariableReadBeforeKill(child,  variable);  }	  	compilable	  [FE]  AssertionFailedError  	19	57	add
1261	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	state    =    isVariableReadBeforeKill(child,    variable);    if(state  ==  VariableLiveness.MAYBE_LIVE)  {  state  =  isVariableReadBeforeKill(child,  variable);  }	  	compilable	  [FE]  AssertionFailedError  	19	57	add
1262	[BUG]  [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  state  =  isVariableReadBeforeKill(child,  variable);  }  [FE]  AssertionFailedError  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	state    =    isVariableReadBeforeKill(child,    variable);    if(state  ==  VariableLiveness.MAYBE_LIVE)  {  state  =  isVariableReadBeforeKill(child,  variable);  }	  	compilable	  [FE]  AssertionFailedError  	19	57	add
1263	[BUG]  [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1!=  return  VariableLiveness.READ);  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1!=  return  VariableLiveness.READ);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	state    =    isVariableReadBeforeKill(child,    variable);    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1!=  return  VariableLiveness.READ);	  	non-compiled	[CE]  not  a  statement	19	None	add
1264	[BUG]  [BUGGY]  return  state.getRemovableAssignment()  *  2  +  1;  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignment()  *  2  +  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignment()  *  2  +  1;	  return    state.getRemovableAssignment()    +    1;    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
1265	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  RETURN);  [CE]  cannot  find  symbol  RETURN  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  RETURN);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  RETURN);	  return    state    &&    isVariableReadBeforeKill(child,    variable,    MISSING);    	non-compiled	[CE]  cannot  find  symbol  RETURN	194	None	replace
1266	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child,  child.getString(),  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child,  child.getString(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child,  child.getString(),  variable);	  return    isVariableReadBeforeKill(child.getString(),    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	63	None	replace
1267	[BUG]  [BUGGY]          n.removeChild(child);  n.removeChild(child);  }  else  {  Predicate  matchRemovableAssigns  =  new  Predicate(variable,  state);  for(Node  n  =  child.getFirstChild();  n!=  null;)  {  Predicate  matchRemovableAssigns  =  matchRemov  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          n.removeChild(child);  n.removeChild(child);  }  else  {  Predicate  matchRemovableAssigns  =  new  Predicate(variable,  state);  for(Node  n  =  child.getFirstChild();  n!=  null;)  {  Predicate  matchRemovableAssigns  =  matchRemov  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                n.removeChild(child);    n.removeChild(child);  }  else  {  Predicate  matchRemovableAssigns  =  new  Predicate(variable,  state);  for(Node  n  =  child.getFirstChild();  n!=  null;)  {  Predicate  matchRemovableAssigns  =  matchRemov	  	non-compiled	[CE]  ';'  expected	172	None	add
1268	[BUG]  [BUGGY]          n.removeChild(child);  n.removeChild(child);  }  else  {  Predicate  matchRemovableAssigns  =  new  Predicate(variable,  state);  for(Node  n  =  child.getFirstChild();  n!=  null;)  {  Predicate  matchRemovableAssigns  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          n.removeChild(child);  n.removeChild(child);  }  else  {  Predicate  matchRemovableAssigns  =  new  Predicate(variable,  state);  for(Node  n  =  child.getFirstChild();  n!=  null;)  {  Predicate  matchRemovableAssigns  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                n.removeChild(child);    n.removeChild(child);  }  else  {  Predicate  matchRemovableAssigns  =  new  Predicate(variable,  state);  for(Node  n  =  child.getFirstChild();  n!=  null;)  {  Predicate  matchRemovableAssigns	  	non-compiled	[CE]  ';'  expected	172	None	add
1269	[BUG]  [BUGGY]          n.removeChild(child);  n.removeChild(child);  }  else  {  Predicate  matchRemovableAssigns  =  new  Predicate(variable,  state);  for(Node  n  =  child.getFirstChild();  n!=  null;)  {  Predicate  matchRemovableAssigns  =  match  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          n.removeChild(child);  n.removeChild(child);  }  else  {  Predicate  matchRemovableAssigns  =  new  Predicate(variable,  state);  for(Node  n  =  child.getFirstChild();  n!=  null;)  {  Predicate  matchRemovableAssigns  =  match  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                n.removeChild(child);    n.removeChild(child);  }  else  {  Predicate  matchRemovableAssigns  =  new  Predicate(variable,  state);  for(Node  n  =  child.getFirstChild();  n!=  null;)  {  Predicate  matchRemovableAssigns  =  match	  	non-compiled	[CE]  ';'  expected	172	None	add
1270	[BUG]  [BUGGY]          n.removeChild(child);  n.removeChild(child);  }  else  {  Predicate  matchRemovableAssigns  =  new  Predicate(variable,  state);  for(Node  n  =  child.getFirstChild();  n!=  null;)  {  Predicate  matchRemovableAssigns  =  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          n.removeChild(child);  n.removeChild(child);  }  else  {  Predicate  matchRemovableAssigns  =  new  Predicate(variable,  state);  for(Node  n  =  child.getFirstChild();  n!=  null;)  {  Predicate  matchRemovableAssigns  =  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                n.removeChild(child);    n.removeChild(child);  }  else  {  Predicate  matchRemovableAssigns  =  new  Predicate(variable,  state);  for(Node  n  =  child.getFirstChild();  n!=  null;)  {  Predicate  matchRemovableAssigns  =	  	non-compiled	[CE]  illegal  start  of  expression	172	None	add
1271	[BUG]  [BUGGY]          n.removeChild(child);  n.removeChild(child);  }  else  {  Predicate  matchRemovableAssigns  =  new  Predicate(variable,  state);  for(Node  n  =  child.getFirstChild();  n!=  null;)  {  Predicate  matchRemovableAssigns  =  MatchRemov  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          n.removeChild(child);  n.removeChild(child);  }  else  {  Predicate  matchRemovableAssigns  =  new  Predicate(variable,  state);  for(Node  n  =  child.getFirstChild();  n!=  null;)  {  Predicate  matchRemovableAssigns  =  MatchRemov  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                n.removeChild(child);    n.removeChild(child);  }  else  {  Predicate  matchRemovableAssigns  =  new  Predicate(variable,  state);  for(Node  n  =  child.getFirstChild();  n!=  null;)  {  Predicate  matchRemovableAssigns  =  MatchRemov	  	non-compiled	[CE]  ';'  expected	172	None	add
1272	[BUG]  [BUGGY]          n.removeChild(child);  n.removeChild(child);  }  else  {  Predicate  matchRemovableAssigns  =  new  Predicate(variable,  state);  for(Node  n  =  child.getFirstChild();  n!=  null;)  {  Predicate  matchRemovableAssigns  =  get  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          n.removeChild(child);  n.removeChild(child);  }  else  {  Predicate  matchRemovableAssigns  =  new  Predicate(variable,  state);  for(Node  n  =  child.getFirstChild();  n!=  null;)  {  Predicate  matchRemovableAssigns  =  get  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                n.removeChild(child);    n.removeChild(child);  }  else  {  Predicate  matchRemovableAssigns  =  new  Predicate(variable,  state);  for(Node  n  =  child.getFirstChild();  n!=  null;)  {  Predicate  matchRemovableAssigns  =  get	  	non-compiled	[CE]  ';'  expected	172	None	add
1273	[BUG]  [BUGGY]          n.removeChild(child);  n.removeChild(child);  }  else  {  Predicate  matchRemovableAssigns  =  new  Predicate(variable,  state);  for(Node  n  =  child.getFirstChild();  n!=  null;)  {  Predicate  matchRemovableAssign  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          n.removeChild(child);  n.removeChild(child);  }  else  {  Predicate  matchRemovableAssigns  =  new  Predicate(variable,  state);  for(Node  n  =  child.getFirstChild();  n!=  null;)  {  Predicate  matchRemovableAssign  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                n.removeChild(child);    n.removeChild(child);  }  else  {  Predicate  matchRemovableAssigns  =  new  Predicate(variable,  state);  for(Node  n  =  child.getFirstChild();  n!=  null;)  {  Predicate  matchRemovableAssign	  	non-compiled	[CE]  ';'  expected	172	None	add
1274	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child),  state)  {  return  isVariableReadBeforeKill(child,  variable);  }  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child),  state)  {  return  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(child,    variable);    if(!ControlFlowGraph.isEnteringNewCfgNode(child),  state)  {  return  isVariableReadBeforeKill(child,  variable);  }	  	non-compiled	[CE]  ')'  expected	184	None	add
1275	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child,  variable);  isVariableReadBeforeKill(child,  variable);  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child,  variable);  isVariableReadBeforeKill(child,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(child,    variable);    isVariableReadBeforeKill(child,  variable);	  	non-compiled	[CE]  unreachable  statement	184	None	add
1276	[BUG]  [BUGGY]  return  child.getRemovableAssignment(),  state);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  child.getRemovableAssignment(),  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  child.getRemovableAssignment(),  state);	  return    child.getRemovableAssignment();    	non-compiled	[CE]  ';'  expected	65	None	replace
1277	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  VEAD);  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  VEAD);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  VEAD);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	17	None	replace
1278	[BUG]  [BUGGY]  return  state  &&  parent.getType()  ==  Token.CALL  ||  state.getChildCount()  >  1;  [CE]  cannot  find  symbol  parent  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  parent.getType()  ==  Token.CALL  ||  state.getChildCount()  >  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  parent.getType()  ==  Token.CALL  ||  state.getChildCount()  >  1;	  return    state    &&    state.getType()    ==    Token.CALL    ||    state.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol  parent	2	None	replace
1279	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  state,  matchRemovableAssigns);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,VariableLiveness,Predicate<Node>)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  state,  matchRemovableAssigns);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	NodeTraversal.traverse(compiler,  n,  state,  matchRemovableAssigns);	          NodeTraversal.traverse(compiler,    n,    state);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,VariableLiveness,Predicate<Node>)	169	None	replace
1280	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  child);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	NodeTraversal.traverse(compiler,  n,  child);	          NodeTraversal.traverse(compiler,    n,    state);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	169	None	replace
1281	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.THIS);  Preconditions.checkState(child.getType()  ==  Token.THIS);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.THIS);  }  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.THIS);  Preconditions.checkState(child.getType()  ==  Token.THIS);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.THIS);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.THIS);    Preconditions.checkState(child.getType()  ==  Token.THIS);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.THIS);  }	  	non-compiled	[CE]  illegal  start  of  type	174	None	add
1282	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.THIS);  Preconditions.checkState(child.getType()  ==  Token.THIS);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.THIS);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	                Preconditions.checkState(child.getType()    ==    Token.THIS);    Preconditions.checkState(child.getType()  ==  Token.THIS);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.THIS);	  	compilable	  [FE]  RuntimeException  	174	61	add
1283	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.THIS);  Preconditions.checkState(child.getType()  ==  Token.THIS);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.THIS);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.THIS);  Preconditions.checkState(child.getType()  ==  Token.THIS);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.THIS);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.THIS);    Preconditions.checkState(child.getType()  ==  Token.THIS);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.THIS);	  	compilable	  [FE]  RuntimeException  	174	61	add
1284	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.THIS);  Preconditions.checkState(child.getType()  ==  Token.THIS);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.THIS);  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.THIS);  Preconditions.checkState(child.getType()  ==  Token.THIS);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.THIS);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.THIS);    Preconditions.checkState(child.getType()  ==  Token.THIS);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.THIS);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	174	None	add
1285	[BUG]  [BUGGY]  return  state,  children.getRemovableAssigns();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state,  children.getRemovableAssigns();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state,  children.getRemovableAssigns();	  return    state,    matchRemovableAssigns.getRemovableAssigns();    	non-compiled	[CE]  ';'  expected	160	None	replace
1286	[BUG]  [BUGGY]  return  state.getRemovableAssigns()  *  2  +  1;  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssigns()  *  2  +  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssigns()  *  2  +  1;	  return    state.getRemovableAssigns()    +    1;    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
1287	[BUG]  [BUGGY]  return  state  &&  state.getType()!=  Token.CALL  ||  state.getChildCount()  >  1)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  state.getType()!=  Token.CALL  ||  state.getChildCount()  >  1)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state.getType()!=  Token.CALL  ||  state.getChildCount()  >  1)  {	  return    state    &&    state.getType()    ==    Token.CALL    ||    state.getChildCount()    >    1)    {    	non-compiled	[CE]  ';'  expected	136	None	replace
1288	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MOVED)  {  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MOVED)  {  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MOVED)  {  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    }    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	23	None	replace
1289	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MIN_LIVE)  {  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MIN_LIVE)  {  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MIN_LIVE)  {  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    }    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	23	None	replace
1290	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  variable,  null,  state);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  variable,  null,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child.getFirstChild(),  variable,  null,  state);	  return    state    &&    isVariableReadBeforeKill(child.getFirstChild(),    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	93	None	replace
1291	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  null,  VEAD);  [CE]  cannot  find  symbol  VEAD  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  null,  VEAD);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  null,  VEAD);	  return    state    &&    isVariableReadBeforeKill(child.getFirstChild(),    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  VEAD	93	None	replace
1292	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  KILL,  null);  [CE]  cannot  find  symbol  KILL  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  KILL,  null);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getFirstChild(),  variable,  KILL,  null);	  return    state    &&    isVariableReadBeforeKill(child.getFirstChild(),    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  KILL	93	None	replace
1293	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.NAME);  Preconditions.checkState(child.getType()  ==  Token.NAME);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	                Preconditions.checkState(child.getType()    ==    Token.NAME);    Preconditions.checkState(child.getType()  ==  Token.NAME);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  }	  	compilable	  [FE]  AssertionFailedError  	161	58	add
1294	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.NAME);  Preconditions.checkState(child.getType()  ==  Token.NAME);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.NAME);  Preconditions.checkState(child.getType()  ==  Token.NAME);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.NAME);    Preconditions.checkState(child.getType()  ==  Token.NAME);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  }	  	compilable	  [FE]  AssertionFailedError  	161	58	add
1295	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.NAME);  Preconditions.checkState(child.getType()  ==  Token.NAME);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  preconditions.checkState(child.getType()  ==  Token.NAME);  }  [CE]  cannot  find  symbol  preconditions  [FE]      AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.NAME);  Preconditions.checkState(child.getType()  ==  Token.NAME);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  preconditions.checkState(child.getType()  ==  Token.NAME);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.NAME);    Preconditions.checkState(child.getType()  ==  Token.NAME);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  preconditions.checkState(child.getType()  ==  Token.NAME);  }	  	non-compiled	[CE]  cannot  find  symbol  preconditions	161	None	add
1296	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.NAME);  Preconditions.checkState(child.getType()  ==  Token.NAME);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	                Preconditions.checkState(child.getType()    ==    Token.NAME);    Preconditions.checkState(child.getType()  ==  Token.NAME);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  }	  	compilable	  [FE]  AssertionFailedError  	161	58	add
1297	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.NAME);  Preconditions.checkState(child.getType()  ==  Token.NAME);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.NAME);  Preconditions.checkState(child.getType()  ==  Token.NAME);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.NAME);    Preconditions.checkState(child.getType()  ==  Token.NAME);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  }	  	compilable	  [FE]  AssertionFailedError  	161	58	add
1298	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.NAME);  Preconditions.checkState(child.getType()  ==  Token.NAME);  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  }  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.NAME);  Preconditions.checkState(child.getType()  ==  Token.NAME);  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.NAME);    Preconditions.checkState(child.getType()  ==  Token.NAME);  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  }	  	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	161	None	add
1299	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.NAME);  Preconditions.checkState(child.getType()  ==  Token.NAME);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.NAME);  Preconditions.checkState(child.getType()  ==  Token.NAME);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.NAME);    Preconditions.checkState(child.getType()  ==  Token.NAME);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.NAME);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	161	None	add
1300	[BUG]  [BUGGY]  return  state.isRemovableAssignment()?  KILL  :  matchRemovableAssignments.getRemovableAssignment();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.isRemovableAssignment()?  KILL  :  matchRemovableAssignments.getRemovableAssignment();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.isRemovableAssignment()?  KILL  :  matchRemovableAssignments.getRemovableAssignment();	  return    matchRemovableAssignments.getRemovableAssignment();    	non-compiled	[CE]  cannot  find  symbol	192	None	replace
1301	[BUG]  [BUGGY]  return  state.isRemovableAssignment()?  KILL  :  child.getRemovableAssignment();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.isRemovableAssignment()?  KILL  :  child.getRemovableAssignment();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.isRemovableAssignment()?  KILL  :  child.getRemovableAssignment();	  return    matchRemovableAssignments.getRemovableAssignment();    	non-compiled	[CE]  cannot  find  symbol	192	None	replace
1302	[BUG]  [BUGGY]  return  state.isRemovableAssignment()?  child.getRemovableAssignment()  :  null;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.isRemovableAssignment()?  child.getRemovableAssignment()  :  null;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.isRemovableAssignment()?  child.getRemovableAssignment()  :  null;	  return    matchRemovableAssignments.getRemovableAssignment();    	non-compiled	[CE]  cannot  find  symbol	192	None	replace
1303	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  VariableLiveness.BOTTOM);  [CE]  cannot  find  symbol  BOTTOM  [FE]            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  VariableLiveness.BOTTOM);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  VariableLiveness.BOTTOM);	  return    state    &&    isVariableReadBeforeKill(child,    variable,    VAR);    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	193	None	replace
1304	[BUG]  [BUGGY]  return  child.removeValue();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  child.removeValue();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  child.removeValue();	  return    state.removeValue();    	non-compiled	[CE]  cannot  find  symbol	183	None	replace
1305	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.getType()  ==  Token.CALL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.getType()  ==  Token.CALL);	          Preconditions.checkState(child.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	171	61	replace
1306	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.getType()  ==  Token.CALL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.getType()  ==  Token.CALL);	          Preconditions.checkState(child.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	171	61	replace
1307	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.getType()  ==  Token.BLOCK);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.getType()  ==  Token.BLOCK);	          Preconditions.checkState(child.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	171	61	replace
1308	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.getType()  ==  Token.BLOCK);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.getType()  ==  Token.BLOCK);	          Preconditions.checkState(child.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	171	61	replace
1309	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.getType()  ==  Token.FUNCTION);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(child.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	171	61	replace
1310	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.getType()  ==  Token.FUNCTION);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(child.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	171	61	replace
1311	[BUG]  [BUGGY]  return  state.getRemoveAssignments();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemoveAssignments();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemoveAssignments();	  return    matchRemovableAssignments.getRemovableAssignments();    	non-compiled	[CE]  cannot  find  symbol	158	None	replace
1312	[BUG]  [BUGGY]  return  state.isRemovableAssignments();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.isRemovableAssignments();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.isRemovableAssignments();	  return    matchRemovableAssignments.getRemovableAssignments();    	non-compiled	[CE]  cannot  find  symbol	158	None	replace
1313	[BUG]  [BUGGY]  return  state.getRemovableStructure();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableStructure();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableStructure();	  return    matchRemovableAssignments.getRemovableAssignments();    	non-compiled	[CE]  cannot  find  symbol	158	None	replace
1314	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n,  state.getString());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n,  state.getString());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(n,  state.getString());	  return    state    &&    isVariableReadBeforeKill(n.getString());    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
1315	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getString(),  variable,  null,  state);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getString(),  variable,  null,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child.getString(),  variable,  null,  state);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	55	None	replace
1316	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  null,  VEAD);  [CE]  cannot  find  symbol  VEAD  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  null,  VEAD);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  null,  VEAD);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  VEAD	55	None	replace
1317	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getString(),  variable,  state,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getString(),  variable,  state,  null);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child.getString(),  variable,  state,  null);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	55	None	replace
1318	[BUG]  [BUGGY]  return  state  &&  n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  1;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  1;	  return    state    &&    n.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	179	None	replace
1319	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  [CE]  unreachable  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(n.getFirstChild(),    variable);    Preconditions.checkState(child.getType()  ==  Token.BLOCK);  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);	  	non-compiled	[CE]  unreachable  statement	155	None	add
1320	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  Preconditions.checkState(child.getType()  ==  Token.NAME);  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  [CE]  unreachable  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  Preconditions.checkState(child.getType()  ==  Token.NAME);  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(n.getFirstChild(),    variable);    Preconditions.checkState(child.getType()  ==  Token.NAME);  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);	  	non-compiled	[CE]  unreachable  statement	155	None	add
1321	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  Predicate  matchRemovableAssigns  =  compiler.getCfgNodeForId(child);  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  Predicate  matchRemovableAssigns  =  compiler.getCfgNodeForId(child);  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(n.getFirstChild(),    variable);    Predicate  matchRemovableAssigns  =  compiler.getCfgNodeForId(child);  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);	  	non-compiled	[CE]  cannot  find  symbol	155	None	add
1322	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  Predicate  matchRemovableAssigns  =  compiler.getCfgNode(child);  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  Predicate  matchRemovableAssigns  =  compiler.getCfgNode(child);  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(n.getFirstChild(),    variable);    Predicate  matchRemovableAssigns  =  compiler.getCfgNode(child);  return  isVariableReadBeforeKill(n.getFirstChild(),  variable);	  	non-compiled	[CE]  cannot  find  symbol	155	None	add
1323	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  ||  parent.getChildCount()  >  1;  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()  ==  Token.CALL  ||  parent.getChildCount()  >  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  ||  parent.getChildCount()  >  1;	  return    state.getType()    ==    Token.CALL    ||    state.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
1324	[BUG]  [BUGGY]  return  matchRemovableAssignmentsElimination(child);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  matchRemovableAssignmentsElimination(child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  matchRemovableAssignmentsElimination(child);	  return    state.getRemovableAssignmentsElimination(variable);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
1325	[BUG]  [BUGGY]  return  matchRemovableAssignmentsElimination(child,  state);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  matchRemovableAssignmentsElimination(child,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  matchRemovableAssignmentsElimination(child,  state);	  return    state.getRemovableAssignmentsElimination(variable);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
1326	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  &&  child.getChildCount()  >  4;  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()  ==  Token.CALL  &&  child.getChildCount()  >  4;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  &&  child.getChildCount()  >  4;	  return    state.getType()    ==    Token.CALL    &&    child.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
1327	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.CALL);  Preconditions.checkState(child.getType()  ==  Token.CALL);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.CALL);  }  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.CALL);  Preconditions.checkState(child.getType()  ==  Token.CALL);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.CALL);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.CALL);    Preconditions.checkState(child.getType()  ==  Token.CALL);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.CALL);  }	  	non-compiled	[CE]  illegal  start  of  type	165	None	add
1328	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.CALL);  Preconditions.checkState(child.getType()  ==  Token.CALL);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.CALL);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	                Preconditions.checkState(child.getType()    ==    Token.CALL);    Preconditions.checkState(child.getType()  ==  Token.CALL);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.CALL);  }	  	compilable	  [FE]  RuntimeException  	165	61	add
1329	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.CALL);  Preconditions.checkState(child.getType()  ==  Token.CALL);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.CALL);  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.CALL);  Preconditions.checkState(child.getType()  ==  Token.CALL);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.CALL);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.CALL);    Preconditions.checkState(child.getType()  ==  Token.CALL);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.CALL);  }	  	compilable	  [FE]  RuntimeException  	165	61	add
1330	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.CALL);  Preconditions.checkState(child.getType()  ==  Token.CALL);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  preconditions.checkState(child.getType()  ==  Token.CALL);  }  [CE]  cannot  find  symbol  preconditions  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.CALL);  Preconditions.checkState(child.getType()  ==  Token.CALL);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  preconditions.checkState(child.getType()  ==  Token.CALL);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.CALL);    Preconditions.checkState(child.getType()  ==  Token.CALL);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  preconditions.checkState(child.getType()  ==  Token.CALL);  }	  	non-compiled	[CE]  cannot  find  symbol  preconditions	165	None	add
1331	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.CALL);  Preconditions.checkState(child.getType()  ==  Token.CALL);  preconditions.checkState(child.getType()  ==  Token.CALL);  [CE]  cannot  find  symbol  preconditions  [FE]          RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.CALL);  Preconditions.checkState(child.getType()  ==  Token.CALL);  preconditions.checkState(child.getType()  ==  Token.CALL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.CALL);    Preconditions.checkState(child.getType()  ==  Token.CALL);  preconditions.checkState(child.getType()  ==  Token.CALL);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	165	None	add
1332	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.CALL);  Preconditions.checkState(child.getType()  ==  Token.CALL);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.CALL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	                Preconditions.checkState(child.getType()    ==    Token.CALL);    Preconditions.checkState(child.getType()  ==  Token.CALL);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	165	61	add
1333	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.CALL);  Preconditions.checkState(child.getType()  ==  Token.CALL);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.CALL);  Preconditions.checkState(child.getType()  ==  Token.CALL);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.CALL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.CALL);    Preconditions.checkState(child.getType()  ==  Token.CALL);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	165	61	add
1334	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.CALL);  Preconditions.checkState(child.getType()  ==  Token.CALL);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.CALL);  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.CALL);  Preconditions.checkState(child.getType()  ==  Token.CALL);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.CALL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.CALL);    Preconditions.checkState(child.getType()  ==  Token.CALL);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.CALL);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	165	None	add
1335	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n.getString(),  variable,  child);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n.getString(),  variable,  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(n.getString(),  variable,  child);	  return    state    &&    isVariableReadBeforeKill(n.getString(),    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	54	None	replace
1336	[BUG]  [BUGGY]  return  state.getRemovableAssignments(),  child,  variables);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignments(),  child,  variables);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignments(),  child,  variables);	  return    state.getRemovableAssignments(),    child);    	non-compiled	[CE]  ';'  expected	104	None	replace
1337	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  VariableLiveness.READ);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  VariableLiveness.READ);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  VariableLiveness.READ);	  return    state    &&    isVariableReadBeforeKill(child,    variable,    MAYBE_LIVE);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	25	None	replace
1338	[BUG]  [BUGGY]  return  state  &&  child.getType()  ==  Token.CALL  ||  state.getChildCount()  >>  1;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  child.getType()  ==  Token.CALL  ||  state.getChildCount()  >>  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  child.getType()  ==  Token.CALL  ||  state.getChildCount()  >>  1;	  return    state    &&    state.getType()    ==    Token.CALL    ||    state.getChildCount()    >=    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	143	None	replace
1339	[BUG]  [BUGGY]  return  state  &&  parent.getType()  ==  Token.CALL  ||  state.getChildCount()  >=  1;  [CE]  cannot  find  symbol  parent  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  parent.getType()  ==  Token.CALL  ||  state.getChildCount()  >=  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  parent.getType()  ==  Token.CALL  ||  state.getChildCount()  >=  1;	  return    state    &&    state.getType()    ==    Token.CALL    ||    state.getChildCount()    >=    1;    	non-compiled	[CE]  cannot  find  symbol  parent	143	None	replace
1340	[BUG]  [BUGGY]  return  State.MILLISECOND  ||  state!=  VariableLiveness.MAYBE_LIVE;  [CE]  cannot  find  symbol  State  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.MILLISECOND  ||  state!=  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.MILLISECOND  ||  state!=  VariableLiveness.MAYBE_LIVE;	  return    State.MILLISECOND;    	non-compiled	[CE]  cannot  find  symbol  State	11	None	replace
1341	[BUG]  [BUGGY]  return  State.MILLISECOND  ||  state  ==  VariableLiveness.READ;  [CE]  cannot  find  symbol  State  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.MILLISECOND  ||  state  ==  VariableLiveness.READ;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.MILLISECOND  ||  state  ==  VariableLiveness.READ;	  return    State.MILLISECOND;    	non-compiled	[CE]  cannot  find  symbol  State	11	None	replace
1342	[BUG]  [BUGGY]  return  State.MILLISECOND  ||  state  ==  VariableLiveness.KILL_LIVE;  [CE]  cannot  find  symbol  State  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.MILLISECOND  ||  state  ==  VariableLiveness.KILL_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.MILLISECOND  ||  state  ==  VariableLiveness.KILL_LIVE;	  return    State.MILLISECOND;    	non-compiled	[CE]  cannot  find  symbol  State	11	None	replace
1343	[BUG]  [BUGGY]  return  State.MILLISECOND  ||  state  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  State  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.MILLISECOND  ||  state  ==  VariableLiveness.KILL;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.MILLISECOND  ||  state  ==  VariableLiveness.KILL;	  return    State.MILLISECOND;    	non-compiled	[CE]  cannot  find  symbol  State	11	None	replace
1344	[BUG]  [BUGGY]  return  State.READ  ||  state  ==  VariableLiveness.BOTTOM;  [CE]  cannot  find  symbol  State  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.READ  ||  state  ==  VariableLiveness.BOTTOM;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.READ  ||  state  ==  VariableLiveness.BOTTOM;	  return    State.READ;    	non-compiled	[CE]  cannot  find  symbol  State	130	None	replace
1345	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n,  child,  variable,  state);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n,  child,  variable,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(n,  child,  variable,  state);	  return    state    &&    isVariableReadBeforeKill(n,    child,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	26	None	replace
1346	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(n,  child,  variable,  VEAD);  [CE]  cannot  find  symbol  VEAD  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(n,  child,  variable,  VEAD);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(n,  child,  variable,  VEAD);	  return    state    &&    isVariableReadBeforeKill(n,    child,    variable);    	non-compiled	[CE]  cannot  find  symbol  VEAD	26	None	replace
1347	[BUG]  [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable)&&  state  <  VariableLiveness.MAYBE_LIVE;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable)&&  state  <  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	state  =  isVariableReadBeforeKill(child,  variable)&&  state  <  VariableLiveness.MAYBE_LIVE;	  state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	20	None	replace
1348	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(n,  variable,  child.getString());  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(n,  variable,  child.getString());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(n,  variable,  child.getString());	  return    state    &&    isVariableReadBeforeKill(n,    child.getString());    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	119	None	replace
1349	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(n,  child,  variable.getString());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(n,  child,  variable.getString());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(n,  child,  variable.getString());	  return    state    &&    isVariableReadBeforeKill(n,    child.getString());    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
1350	[BUG]  [BUGGY]  return  variable  ||  state!=  VariableLiveness.MAYBE_LIVE;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  variable  ||  state!=  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  variable  ||  state!=  VariableLiveness.MAYBE_LIVE;	  return    state    ||    variable!=    VariableLiveness.MAYBE_LIVE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	15	None	replace
1351	[BUG]  [BUGGY]  n.addChildToFront(variable);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  n.addChildToFront(variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	n.addChildToFront(variable);	          n.removeChild(child);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	173	None	replace
1352	[BUG]  [BUGGY]  n.setChild(child);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  n.setChild(child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	n.setChild(child);	          n.removeChild(child);    	non-compiled	[CE]  cannot  find  symbol	173	None	replace
1353	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable).if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  <identifier>  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable).if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable).if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
1354	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	18	None	replace
1355	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	State  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
1356	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  MOVE_BEFORE);  [CE]  cannot  find  symbol  MOVE_BEFORE  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  MOVE_BEFORE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  MOVE_BEFORE);	  return    state    &&    isVariableReadBeforeKill(child,    variable,    MOVE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  MOVE_BEFORE	31	None	replace
1357	[BUG]  [BUGGY]  return  state.getRemovableAssignments()  ||  child.getRemovableAssignments()!=  null;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignments()  ||  child.getRemovableAssignments()!=  null;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignments()  ||  child.getRemovableAssignments()!=  null;	  return    state.getRemovableAssignments()    ||    state.getRemovableAssignments()!=    null;    	non-compiled	[CE]  cannot  find  symbol	159	None	replace
1358	[BUG]  [BUGGY]  return  child.getRemovableAssignments()  ||  state.getRemovableAssignments()!=  null;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  child.getRemovableAssignments()  ||  state.getRemovableAssignments()!=  null;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  child.getRemovableAssignments()  ||  state.getRemovableAssignments()!=  null;	  return    state.getRemovableAssignments()    ||    state.getRemovableAssignments()!=    null;    	non-compiled	[CE]  cannot  find  symbol	159	None	replace
1359	[BUG]  [BUGGY]  return  state.getRemovableAssignments()  ||  parent.getRemovableAssignments()!=  null;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignments()  ||  parent.getRemovableAssignments()!=  null;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignments()  ||  parent.getRemovableAssignments()!=  null;	  return    state.getRemovableAssignments()    ||    state.getRemovableAssignments()!=    null;    	non-compiled	[CE]  cannot  find  symbol	159	None	replace
1360	[BUG]  [BUGGY]  return  state.invoke(n,  vfgNode);  [CE]  cannot  find  symbol  vfgNode  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(n,  vfgNode);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(n,  vfgNode);	  return    n.invoke(state,    variable);    	non-compiled	[CE]  cannot  find  symbol  vfgNode	80	None	replace
1361	[BUG]  [BUGGY]  return  state.invoke(v,  n);  [CE]  cannot  find  symbol  v  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(v,  n);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(v,  n);	  return    n.invoke(state,    variable);    	non-compiled	[CE]  cannot  find  symbol  v	80	None	replace
1362	[BUG]  [BUGGY]  return  state.getMask();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getMask();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getMask();	  return    MAJBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
1363	[BUG]  [BUGGY]  return  state.getMajorBE();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getMajorBE();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getMajorBE();	  return    MAJBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
1364	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [Delete]  AssertionFailedError  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [Delete]  AssertionFailedError  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [Delete]  AssertionFailedError	          junit.framework.AssertionFailedError:    Expected:    function    FUNC(param1    >>    AssertionFailedError    	non-compiled	[CE]  not  a  statement	117	None	replace
1365	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  <  1  ||  state.getChildCount()  >  1)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  <  1  ||  state.getChildCount()  >  1)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  <  1  ||  state.getChildCount()  >  1)  {	  return    state.getType()    ==    Token.CALL    &&    state.getChildCount()    <    1)    {    	non-compiled	[CE]  ';'  expected	46	None	replace
1366	[BUG]  [BUGGY]  return  state.getValue(),  child);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValue(),  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValue(),  child);	  return    state.getValue(),    variable;    	non-compiled	[CE]  ';'  expected	39	None	replace
1367	[BUG]  [BUGGY]  return  child.getValue(),  variable;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  child.getValue(),  variable;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  child.getValue(),  variable;	  return    state.getValue(),    variable;    	non-compiled	[CE]  ';'  expected	39	None	replace
1368	[BUG]  [BUGGY]  return  state.getValue(),  child.getFirstChild();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValue(),  child.getFirstChild();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValue(),  child.getFirstChild();	  return    state.getValue(),    variable;    	non-compiled	[CE]  ';'  expected	39	None	replace
1369	[BUG]  [BUGGY]  return  state.getValue(),  child.getNext();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValue(),  child.getNext();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValue(),  child.getNext();	  return    state.getValue(),    variable;    	non-compiled	[CE]  ';'  expected	39	None	replace
1370	[BUG]  [BUGGY]  return  child.getValue()  &&  state!=  VariableLiveness.MAYBE_LIVE;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  child.getValue()  &&  state!=  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  child.getValue()  &&  state!=  VariableLiveness.MAYBE_LIVE;	  return    child.getValue();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
1371	[BUG]  [BUGGY]  return  child.getValue()  &&  state  ==  VariableLiveness.MAYBE_LIVE;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  child.getValue()  &&  state  ==  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  child.getValue()  &&  state  ==  VariableLiveness.MAYBE_LIVE;	  return    child.getValue();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
1372	[BUG]  [BUGGY]  return  state?  child.getValue()  :  KILL;  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state?  child.getValue()  :  KILL;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state?  child.getValue()  :  KILL;	  return    child.getValue();    	non-compiled	[CE]  incompatible  types	40	None	replace
1373	[BUG]  [BUGGY]  return  state?  child.getValue()  :  child.getValue();  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state?  child.getValue()  :  child.getValue();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state?  child.getValue()  :  child.getValue();	  return    child.getValue();    	non-compiled	[CE]  incompatible  types	40	None	replace
1374	[BUG]  [BUGGY]  return  State.BLOCK;  [CE]  cannot  find  symbol  State  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.BLOCK;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.BLOCK;	  return    MAIBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  State	10	None	replace
1375	[BUG]  [BUGGY]  return  State.BOTTOM;  [CE]  cannot  find  symbol  State  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.BOTTOM;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.BOTTOM;	  return    MAIBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  State	10	None	replace
1376	[BUG]  [BUGGY]  return  n.getRemovableAssignment()  ||  state!=  VariableLiveness.MAYBE_LIVE;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  n.getRemovableAssignment()  ||  state!=  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n.getRemovableAssignment()  ||  state!=  VariableLiveness.MAYBE_LIVE;	  return    n.getRemovableAssignment();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
1377	[BUG]  [BUGGY]  return  n.getRemovableAssignment()  ||  state  ==  VariableLiveness.MAYBE_LIVE;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  n.getRemovableAssignment()  ||  state  ==  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n.getRemovableAssignment()  ||  state  ==  VariableLiveness.MAYBE_LIVE;	  return    n.getRemovableAssignment();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
1378	[BUG]  [BUGGY]  return  n.getRemovableAssignment()  ||  state.getRemovableAssignment()!=  null;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  n.getRemovableAssignment()  ||  state.getRemovableAssignment()!=  null;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n.getRemovableAssignment()  ||  state.getRemovableAssignment()!=  null;	  return    n.getRemovableAssignment();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
1379	[BUG]  [BUGGY]  return  State.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  State  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL;	  return    State.MAYBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  State	8	None	replace
1380	[BUG]  [BUGGY]  return  State.MAYBE_LIVE  ||  state  ==  VariableLiveness.READ;  [CE]  cannot  find  symbol  State  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.MAYBE_LIVE  ||  state  ==  VariableLiveness.READ;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.MAYBE_LIVE  ||  state  ==  VariableLiveness.READ;	  return    State.MAYBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  State	8	None	replace
1381	[BUG]  [BUGGY]  return  State.MAYBE_LIVE  ||  state  ==  VariableLiveness.CREAD;  [CE]  cannot  find  symbol  State  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.MAYBE_LIVE  ||  state  ==  VariableLiveness.CREAD;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.MAYBE_LIVE  ||  state  ==  VariableLiveness.CREAD;	  return    State.MAYBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  State	8	None	replace
1382	[BUG]  [BUGGY]  return  State.MAYBE_LIVE  ||  state  ==  VariableLiveness.FOR;  [CE]  cannot  find  symbol  State  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.MAYBE_LIVE  ||  state  ==  VariableLiveness.FOR;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.MAYBE_LIVE  ||  state  ==  VariableLiveness.FOR;	  return    State.MAYBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  State	8	None	replace
1383	[BUG]  [BUGGY]  return  state  ||  state.getType()  ==  Token.CALL  &&  child.getChildCount()  >  1)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  ||  state.getType()  ==  Token.CALL  &&  child.getChildCount()  >  1)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  ||  state.getType()  ==  Token.CALL  &&  child.getChildCount()  >  1)  {	  return    state    ||    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1)    {    	non-compiled	[CE]  ';'  expected	149	None	replace
1384	[BUG]  [BUGGY]  return  state  &&  parent.getType()  ==  Token.CALL  &&  child.getChildCount()  >=  1;  [CE]  cannot  find  symbol  parent  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  parent.getType()  ==  Token.CALL  &&  child.getChildCount()  >=  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  parent.getType()  ==  Token.CALL  &&  child.getChildCount()  >=  1;	  return    state    &&    state.getType()    ==    Token.CALL    &&    child.getChildCount()    >=    1;    	non-compiled	[CE]  cannot  find  symbol  parent	177	None	replace
1385	[BUG]  [BUGGY]  return  state  &&  children.getType()  ==  Token.CALL  &&  child.getChildCount()  >=  1;  [CE]  cannot  find  symbol  children  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  children.getType()  ==  Token.CALL  &&  child.getChildCount()  >=  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  children.getType()  ==  Token.CALL  &&  child.getChildCount()  >=  1;	  return    state    &&    state.getType()    ==    Token.CALL    &&    child.getChildCount()    >=    1;    	non-compiled	[CE]  cannot  find  symbol  children	177	None	replace
1386	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(variable,  n.getString(),  child);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(variable,  n.getString(),  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(variable,  n.getString(),  child);	  return    state    &&    isVariableReadBeforeKill(variable.getString(),    child);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	51	None	replace
1387	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(n.getString(),  child);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(n.getString(),  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(n.getString(),  child);	  return    state    &&    isVariableReadBeforeKill(variable.getString(),    child);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	51	None	replace
1388	[BUG]  [BUGGY]  return  state.invoke(n,  child,  VariableLiveness.KILL);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(n,  child,  VariableLiveness.KILL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(n,  child,  VariableLiveness.KILL);	  return    state.invoke(n,    variable,    MAYBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
1389	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  &&  parent.getChildCount()  >  1;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()  ==  Token.CALL  &&  parent.getChildCount()  >  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  &&  parent.getChildCount()  >  1;	  return    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
1390	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state    ==    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
1391	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable).if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable).if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable).if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state    ==    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
1392	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	State  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state    ==    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
1393	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MIN_LIVE)  {  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MIN_LIVE)  {  return  state;  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MIN_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state    ==    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	21	None	replace
1394	[BUG]  [BUGGY]  return  state.invoke(var,  variable);  [CE]  cannot  find  symbol  var  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(var,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(var,  variable);	  return    state.invoke(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  var	78	None	replace
1395	[BUG]  [BUGGY]  return  state.invoke(varator,  child);  [CE]  cannot  find  symbol  varator  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(varator,  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(varator,  child);	  return    state.invoke(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  varator	78	None	replace
1396	[BUG]  [BUGGY]  return  n  ==  VariableLiveness.MAYBE_LIVE;  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  n  ==  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  n  ==  VariableLiveness.MAYBE_LIVE;	  return    state    ||    n    ==    VariableLiveness.MAYBE_LIVE;    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	106	None	replace
1397	[BUG]  [BUGGY]  return  state  ||  child.getType()  ==  Token.CALL  &&  state.getChildCount()  >  1)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  ||  child.getType()  ==  Token.CALL  &&  state.getChildCount()  >  1)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  ||  child.getType()  ==  Token.CALL  &&  state.getChildCount()  >  1)  {	  return    state    &&    child.getType()    ==    Token.CALL    &&    state.getChildCount()    >    1)    {    	non-compiled	[CE]  ';'  expected	151	None	replace
1398	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n,  variable);  VariableLiveness  n  =  isVariableReadBeforeKill(child,  variable);  [CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]    StackOverflowError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n,  variable);  VariableLiveness  n  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(n,    variable);    VariableLiveness  n  =  isVariableReadBeforeKill(child,  variable);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	186	None	add
1399	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n,  variable);  isVariableReadBeforeKill(n,  variable);  [CE]  unreachable  statement  [FE]      StackOverflowError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n,  variable);  isVariableReadBeforeKill(n,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(n,    variable);    isVariableReadBeforeKill(n,  variable);	  	non-compiled	[CE]  unreachable  statement	186	None	add
1400	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n,  variable);  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  return  isVariableReadBeforeKill(n,  variable);  [CE]  unreachable  statement  [FE]        StackOverflowError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n,  variable);  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  return  isVariableReadBeforeKill(n,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(n,    variable);    Preconditions.checkState(child.getType()  ==  Token.BLOCK);  return  isVariableReadBeforeKill(n,  variable);	  	non-compiled	[CE]  unreachable  statement	186	None	add
1401	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n,  variable);  Predicate  matchRemovableAssigns  =  compiler.getCfgNodeForId(child);  return  isVariableReadBeforeKill(n,  variable);  [CE]  cannot  find  symbol  [FE]          StackOverflowError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n,  variable);  Predicate  matchRemovableAssigns  =  compiler.getCfgNodeForId(child);  return  isVariableReadBeforeKill(n,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(n,    variable);    Predicate  matchRemovableAssigns  =  compiler.getCfgNodeForId(child);  return  isVariableReadBeforeKill(n,  variable);	  	non-compiled	[CE]  cannot  find  symbol	186	None	add
1402	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n,  variable);  VariableLiveness  n  =  isVariableReadBeforeKill(n,  variable);  [CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]            StackOverflowError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n,  variable);  VariableLiveness  n  =  isVariableReadBeforeKill(n,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(n,    variable);    VariableLiveness  n  =  isVariableReadBeforeKill(n,  variable);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	186	None	add
1403	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n,  variable);  Predicate  matchRemovableAssigns  =  compiler.getCfgNodeForPattern(child);  return  isVariableReadBeforeKill(n,  variable);  [CE]  cannot  find  symbol  [FE]              StackOverflowError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(n,  variable);  Predicate  matchRemovableAssigns  =  compiler.getCfgNodeForPattern(child);  return  isVariableReadBeforeKill(n,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(n,    variable);    Predicate  matchRemovableAssigns  =  compiler.getCfgNodeForPattern(child);  return  isVariableReadBeforeKill(n,  variable);	  	non-compiled	[CE]  cannot  find  symbol	186	None	add
1404	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getString(),  variable,  state,  VEAD);  [CE]  cannot  find  symbol  VEAD  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getString(),  variable,  state,  VEAD);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child.getString(),  variable,  state,  VEAD);	  return    isVariableReadBeforeKill(child.getString(),    variable,    state);    	non-compiled	[CE]  cannot  find  symbol  VEAD	57	None	replace
1405	[BUG]  [BUGGY]  return  state.invoke(variable,  n).returnNull();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(variable,  n).returnNull();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(variable,  n).returnNull();	  return    state.invoke(variable,    n);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
1406	[BUG]  [BUGGY]  return  state.invoke(n,  child,  VariableLiveness.FIELD_NAME);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(n,  child,  VariableLiveness.FIELD_NAME);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(n,  child,  VariableLiveness.FIELD_NAME);	  return    state.invoke(n,    variable,    KILL);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	135	None	replace
1407	[BUG]  [BUGGY]  return  state.invoke(n,  child,  VariableLiveness.SEMI);  [CE]  cannot  find  symbol  SEMI  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(n,  child,  VariableLiveness.SEMI);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(n,  child,  VariableLiveness.SEMI);	  return    state.invoke(n,    variable,    KILL);    	non-compiled	[CE]  cannot  find  symbol  SEMI	135	None	replace
1408	[BUG]  [BUGGY]  return  state.invoke(n,  child,  VariableLiveness.MILLIS);  [CE]  cannot  find  symbol  MILLIS  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(n,  child,  VariableLiveness.MILLIS);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(n,  child,  VariableLiveness.MILLIS);	  return    state.invoke(n,    variable,    KILL);    	non-compiled	[CE]  cannot  find  symbol  MILLIS	135	None	replace
1409	[BUG]  [BUGGY]  return  state.getValueAssignments(variable).getValueAssignments();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValueAssignments(variable).getValueAssignments();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValueAssignments(variable).getValueAssignments();	  return    state.getValueAssignments();    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
1410	[BUG]  [BUGGY]  return  state.getValueAssignments()  ||  state.getValueAssignments()!=  null;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValueAssignments()  ||  state.getValueAssignments()!=  null;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValueAssignments()  ||  state.getValueAssignments()!=  null;	  return    state.getValueAssignments();    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
1411	[BUG]  [BUGGY]  return  state,  matchRemovableAssignments.getValueAssignments();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state,  matchRemovableAssignments.getValueAssignments();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state,  matchRemovableAssignments.getValueAssignments();	  return    state.getValueAssignments();    	non-compiled	[CE]  ';'  expected	126	None	replace
1412	[BUG]  [BUGGY]  return  child.getValueAssignments();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  child.getValueAssignments();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  child.getValueAssignments();	  return    state.getValueAssignments();    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
1413	[BUG]  [BUGGY]  return  state.getValue()  *  2  +  1;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValue()  *  2  +  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValue()  *  2  +  1;	  return    state.getValue()    +    1;    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
1414	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  null,  VEAD);  [CE]  cannot  find  symbol  VEAD  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  null,  VEAD);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  null,  VEAD);	  return    state    &&    isVariableReadBeforeKill(child,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  VEAD	145	None	replace
1415	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child,  variable,  null,  state);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child,  variable,  null,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child,  variable,  null,  state);	  return    state    &&    isVariableReadBeforeKill(child,    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	145	None	replace
1416	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  null,  REEAD);  [CE]  cannot  find  symbol  REEAD  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  null,  REEAD);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  null,  REEAD);	  return    state    &&    isVariableReadBeforeKill(child,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  REEAD	145	None	replace
1417	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  VEAD,  null);  [CE]  cannot  find  symbol  VEAD  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  VEAD,  null);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  VEAD,  null);	  return    state    &&    isVariableReadBeforeKill(child,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  VEAD	145	None	replace
1418	[BUG]  [BUGGY]  return  state.getRemoveableAssignment(),  child;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemoveableAssignment(),  child;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemoveableAssignment(),  child;	  return    state.getRemovableAssignment(),    variable;    	non-compiled	[CE]  ';'  expected	66	None	replace
1419	[BUG]  [BUGGY]  return  state.getRemovedAssignment(),  child;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovedAssignment(),  child;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovedAssignment(),  child;	  return    state.getRemovableAssignment(),    variable;    	non-compiled	[CE]  ';'  expected	66	None	replace
1420	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.CALL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.CALL);	          Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	164	61	replace
1421	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.CALL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.CALL);	          Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	164	61	replace
1422	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.SCRIPT);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.SCRIPT);	          Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	164	61	replace
1423	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.SCRIPT);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.SCRIPT);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.SCRIPT);	          Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	compilable	  [FE]  RuntimeException  	164	61	replace
1424	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.NAME);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.NAME);	          Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	164	61	replace
1425	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.NAME);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.NAME);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.NAME);	          Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	164	61	replace
1426	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  child,  VEAD);  [CE]  cannot  find  symbol  VEAD  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  child,  VEAD);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  child,  VEAD);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    child);    	non-compiled	[CE]  cannot  find  symbol  VEAD	142	None	replace
1427	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  null,  child);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  null,  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  null,  child);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    child);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	142	None	replace
1428	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  child,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  child,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  child,  variable);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    child);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	142	None	replace
1429	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  child,  MISSING);  [CE]  cannot  find  symbol  MISSING  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  child,  MISSING);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  child,  MISSING);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    child);    	non-compiled	[CE]  cannot  find  symbol  MISSING	142	None	replace
1430	[BUG]  [BUGGY]  return  child,  state.getValue();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  child,  state.getValue();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  child,  state.getValue();	  return    state,    child.getValue();    	non-compiled	[CE]  ';'  expected	182	None	replace
1431	[BUG]  [BUGGY]  return  state.isRemovableAssignmentsElimination();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.isRemovableAssignmentsElimination();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.isRemovableAssignmentsElimination();	  return    matchRemovableAssignmentsElimination.getRemovableAssignmentsElimination();    	non-compiled	[CE]  cannot  find  symbol	154	None	replace
1432	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.RETURN  ||  child.getType()  ==  Token.CALL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.RETURN  ||  child.getType()  ==  Token.CALL);	          Preconditions.checkState(child.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	168	61	replace
1433	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.RETURN  ||  child.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.RETURN  ||  child.getType()  ==  Token.CALL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.RETURN  ||  child.getType()  ==  Token.CALL);	          Preconditions.checkState(child.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	168	61	replace
1434	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.RETURN  ||  child.getType()  ==  Token.BLOCK);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.RETURN  ||  child.getType()  ==  Token.BLOCK);	          Preconditions.checkState(child.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	168	61	replace
1435	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.RETURN  ||  child.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.RETURN  ||  child.getType()  ==  Token.BLOCK);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.RETURN  ||  child.getType()  ==  Token.BLOCK);	          Preconditions.checkState(child.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	168	61	replace
1436	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.RETURN  ||  child.getType()  ==  Token.FUNCTION);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.RETURN  ||  child.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(child.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	168	61	replace
1437	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.RETURN  ||  child.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.RETURN  ||  child.getType()  ==  Token.FUNCTION);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.RETURN  ||  child.getType()  ==  Token.FUNCTION);	          Preconditions.checkState(child.getType()    ==    Token.RETURN);    	compilable	  [FE]  RuntimeException  	168	61	replace
1438	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >=  1  &&  isVariableReadBeforeKill(child,  variable))  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >=  1  &&  isVariableReadBeforeKill(child,  variable))  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()  ==  Token.CALL  &&  state.getChildCount()  >=  1  &&  isVariableReadBeforeKill(child,  variable))  {	  return    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >=    1)    {    	non-compiled	[CE]  ';'  expected	48	None	replace
1439	[BUG]  [BUGGY]  return  state  &&  n.getType()  ==  Token.CALL  &&  child.getChildCount()  >=  1;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  n.getType()  ==  Token.CALL  &&  child.getChildCount()  >=  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  n.getType()  ==  Token.CALL  &&  child.getChildCount()  >=  1;	  return    state    &&    n.getType()    ==    Token.CALL    &&    state.getChildCount()    >=    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	178	None	replace
1440	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.THIS  ||  child.getType()  ==  Token.CALL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.THIS  ||  child.getType()  ==  Token.CALL);	          Preconditions.checkState(child.getType()    ==    Token.THIS);    	compilable	  [FE]  RuntimeException  	175	61	replace
1441	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.THIS  ||  child.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.THIS  ||  child.getType()  ==  Token.CALL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.THIS  ||  child.getType()  ==  Token.CALL);	          Preconditions.checkState(child.getType()    ==    Token.THIS);    	compilable	  [FE]  RuntimeException  	175	61	replace
1442	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.THIS  ||  child.getType()  ==  Token.BLOCK);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.THIS  ||  child.getType()  ==  Token.BLOCK);	          Preconditions.checkState(child.getType()    ==    Token.THIS);    	compilable	  [FE]  RuntimeException  	175	61	replace
1443	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.THIS  ||  child.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.THIS  ||  child.getType()  ==  Token.BLOCK);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.THIS  ||  child.getType()  ==  Token.BLOCK);	          Preconditions.checkState(child.getType()    ==    Token.THIS);    	compilable	  [FE]  RuntimeException  	175	61	replace
1444	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.THIS  ||  child.getType()  ==  Token.GETPROP);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	Preconditions.checkState(child.getType()  ==  Token.THIS  ||  child.getType()  ==  Token.GETPROP);	          Preconditions.checkState(child.getType()    ==    Token.THIS);    	compilable	  [FE]  RuntimeException  	175	61	replace
1445	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.THIS  ||  child.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.THIS  ||  child.getType()  ==  Token.GETPROP);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	Preconditions.checkState(child.getType()  ==  Token.THIS  ||  child.getType()  ==  Token.GETPROP);	          Preconditions.checkState(child.getType()    ==    Token.THIS);    	compilable	  [FE]  RuntimeException  	175	61	replace
1446	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  VILL);  [CE]  cannot  find  symbol  VILL  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  VILL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  VILL);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    VEAD);    	non-compiled	[CE]  cannot  find  symbol  VILL	153	None	replace
1447	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.VAR);  Preconditions.checkState(child.getType()  ==  Token.VAR);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.VAR);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	                Preconditions.checkState(child.getType()    ==    Token.VAR);    Preconditions.checkState(child.getType()  ==  Token.VAR);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.VAR);  }	  	compilable	  [FE]  RuntimeException  	170	61	add
1448	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.VAR);  Preconditions.checkState(child.getType()  ==  Token.VAR);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.VAR);  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.VAR);  Preconditions.checkState(child.getType()  ==  Token.VAR);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.VAR);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.VAR);    Preconditions.checkState(child.getType()  ==  Token.VAR);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.VAR);  }	  	compilable	  [FE]  RuntimeException  	170	61	add
1449	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.VAR);  Preconditions.checkState(child.getType()  ==  Token.VAR);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  Preconditions.checkState(child.getType()  ==  Token.VAR);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	                Preconditions.checkState(child.getType()    ==    Token.VAR);    Preconditions.checkState(child.getType()  ==  Token.VAR);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  Preconditions.checkState(child.getType()  ==  Token.VAR);  }	  	compilable	  [FE]  RuntimeException  	170	61	add
1450	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.VAR);  Preconditions.checkState(child.getType()  ==  Token.VAR);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  Preconditions.checkState(child.getType()  ==  Token.VAR);  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.VAR);  Preconditions.checkState(child.getType()  ==  Token.VAR);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  Preconditions.checkState(child.getType()  ==  Token.VAR);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.VAR);    Preconditions.checkState(child.getType()  ==  Token.VAR);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  Preconditions.checkState(child.getType()  ==  Token.VAR);  }	  	compilable	  [FE]  RuntimeException  	170	61	add
1451	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.VAR);  Preconditions.checkState(child.getType()  ==  Token.VAR);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  preconditions.checkState(child.getType()  ==  Token.VAR);  }  [CE]  cannot  find  symbol  preconditions  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.VAR);  Preconditions.checkState(child.getType()  ==  Token.VAR);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  preconditions.checkState(child.getType()  ==  Token.VAR);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.VAR);    Preconditions.checkState(child.getType()  ==  Token.VAR);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  preconditions.checkState(child.getType()  ==  Token.VAR);  }	  	non-compiled	[CE]  cannot  find  symbol  preconditions	170	None	add
1452	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.VAR);  Preconditions.checkState(child.getType()  ==  Token.VAR);  preconditions.checkState(child.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]          RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.VAR);  Preconditions.checkState(child.getType()  ==  Token.VAR);  preconditions.checkState(child.getType()  ==  Token.VAR);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.VAR);    Preconditions.checkState(child.getType()  ==  Token.VAR);  preconditions.checkState(child.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	170	None	add
1453	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.VAR);  Preconditions.checkState(child.getType()  ==  Token.VAR);Preconditions.checkState(child.getType()  ==  Token.VAR);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	                Preconditions.checkState(child.getType()    ==    Token.VAR);    Preconditions.checkState(child.getType()  ==  Token.VAR);Preconditions.checkState(child.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	170	61	add
1454	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.VAR);  Preconditions.checkState(child.getType()  ==  Token.VAR);Preconditions.checkState(child.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.VAR);  Preconditions.checkState(child.getType()  ==  Token.VAR);Preconditions.checkState(child.getType()  ==  Token.VAR);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.VAR);    Preconditions.checkState(child.getType()  ==  Token.VAR);Preconditions.checkState(child.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	170	61	add
1455	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.VAR);  Preconditions.checkState(child.getType()  ==  Token.VAR);  }  else  {  Preconditions.checkState(child.getType()  ==  Token.VAR);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	                Preconditions.checkState(child.getType()    ==    Token.VAR);    Preconditions.checkState(child.getType()  ==  Token.VAR);  }  else  {  Preconditions.checkState(child.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	170	61	add
1456	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.VAR);  Preconditions.checkState(child.getType()  ==  Token.VAR);  }  else  {  Preconditions.checkState(child.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.VAR);  Preconditions.checkState(child.getType()  ==  Token.VAR);  }  else  {  Preconditions.checkState(child.getType()  ==  Token.VAR);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.VAR);    Preconditions.checkState(child.getType()  ==  Token.VAR);  }  else  {  Preconditions.checkState(child.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	170	61	add
1457	[BUG]  [BUGGY]  return  state.getRemoveableAssignments(),  child;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemoveableAssignments(),  child;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemoveableAssignments(),  child;	  return    state.getRemovableAssignments(),    variable;    	non-compiled	[CE]  ';'  expected	100	None	replace
1458	[BUG]  [BUGGY]  return  state.getDeadAssignments(),  child;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getDeadAssignments(),  child;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getDeadAssignments(),  child;	  return    state.getRemovableAssignments(),    variable;    	non-compiled	[CE]  ';'  expected	100	None	replace
1459	[BUG]  [BUGGY]  return  state.getRemovableAssignments()  |  variable;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignments()  |  variable;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignments()  |  variable;	  return    state.getRemovableAssignments(),    variable;    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
1460	[BUG]  [BUGGY]  return  child.getRemovableAssigns()  &&  state.isVariableReadBeforeKill(child,  variable);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  child.getRemovableAssigns()  &&  state.isVariableReadBeforeKill(child,  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  child.getRemovableAssigns()  &&  state.isVariableReadBeforeKill(child,  variable);	  return    child.getRemovableAssigns();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
1461	[BUG]  [BUGGY]  return  child.getRemovableAssigns()  &&  state.isVariableReadBeforeKill(child);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  child.getRemovableAssigns()  &&  state.isVariableReadBeforeKill(child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  child.getRemovableAssigns()  &&  state.isVariableReadBeforeKill(child);	  return    child.getRemovableAssigns();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
1462	[BUG]  [BUGGY]  return  state.getRemovableAssignmentsElimination()  +  child.getFirstChild().getNext(),  variable;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignmentsElimination()  +  child.getFirstChild().getNext(),  variable;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignmentsElimination()  +  child.getFirstChild().getNext(),  variable;	  return    state.getRemovableAssignmentsElimination(),    variable;    	non-compiled	[CE]  ';'  expected	33	None	replace
1463	[BUG]  [BUGGY]  return  state.getRemovableAssignmentsElimination()  +  child.getFirstChild().getString(),  variable;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignmentsElimination()  +  child.getFirstChild().getString(),  variable;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignmentsElimination()  +  child.getFirstChild().getString(),  variable;	  return    state.getRemovableAssignmentsElimination(),    variable;    	non-compiled	[CE]  ';'  expected	33	None	replace
1464	[BUG]  [BUGGY]  return  state.getRemovableAssignmentsElimination()  +  child.getFirstChild().getString();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignmentsElimination()  +  child.getFirstChild().getString();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignmentsElimination()  +  child.getFirstChild().getString();	  return    state.getRemovableAssignmentsElimination(),    variable;    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
1465	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  n,  VAR);  [CE]  cannot  find  symbol  VAR  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  n,  VAR);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  n,  VAR);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  VAR	53	None	replace
1466	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  n,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  n,  n);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child.getString(),  variable,  n,  n);	  return    state    &&    isVariableReadBeforeKill(child.getString(),    variable,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	53	None	replace
1467	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  MILLIS);  [CE]  cannot  find  symbol  MILLIS  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  variable,  MILLIS);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  variable,  MILLIS);	  return    state    &&    isVariableReadBeforeKill(child,    variable,    maybe_LIVE);    	non-compiled	[CE]  cannot  find  symbol  MILLIS	27	None	replace
1468	[BUG]  [BUGGY]  return  State.FALSE  ||  state  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  State  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  State.FALSE  ||  state  ==  VariableLiveness.KILL;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  State.FALSE  ||  state  ==  VariableLiveness.KILL;	  return    State.FALSE;    	non-compiled	[CE]  cannot  find  symbol  State	129	None	replace
1469	[BUG]  [BUGGY]  return  state.getRemovableAssignments()  ||  child.getRemovableAssignments();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignments()  ||  child.getRemovableAssignments();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignments()  ||  child.getRemovableAssignments();	  return    state.getRemovableAssignments()    ||    state.getRemovableAssignments();    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
1470	[BUG]  [BUGGY]  return  state.getRemovableAssignments()  ||  state.getRemoveAssignments();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignments()  ||  state.getRemoveAssignments();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignments()  ||  state.getRemoveAssignments();	  return    state.getRemovableAssignments()    ||    state.getRemovableAssignments();    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
1471	[BUG]  [BUGGY]  return  state.getRemovableAssignments()  ||  parent.getRemovableAssignments();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignments()  ||  parent.getRemovableAssignments();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignments()  ||  parent.getRemovableAssignments();	  return    state.getRemovableAssignments()    ||    state.getRemovableAssignments();    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
1472	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child,  variable,  child.getString());  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child,  variable,  child.getString());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child,  variable,  child.getString());	  return    state    &&    isVariableReadBeforeKill(variable,    child.getString());    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	62	None	replace
1473	[BUG]  [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  &&  child.getChildCount()  >  2;  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  &&  child.getChildCount()  >  2;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state.getType()  ==  Token.CALL  &&  child.getChildCount()  >  2;	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()    >    2;    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
1474	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.SEMI_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.SEMI_LIVE)  {	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	replace
1475	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.READ)  {  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.READ)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.READ)  {	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	replace
1476	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.BOTTOM)  {  [CE]  reached  end  of  file  while  parsing  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.BOTTOM)  {	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	replace
1477	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  NodeTraversal.traverse(compiler,  n,  variable);  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,String)  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  NodeTraversal.traverse(compiler,  n,  variable);  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(child.getFirstChild(),    variable);    NodeTraversal.traverse(compiler,  n,  variable);  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,String)	94	None	add
1478	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  Predicate  matchRemovableAssigns  =  compiler.getCfgNode(child);  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  Predicate  matchRemovableAssigns  =  compiler.getCfgNode(child);  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(child.getFirstChild(),    variable);    Predicate  matchRemovableAssigns  =  compiler.getCfgNode(child);  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);	  	non-compiled	[CE]  cannot  find  symbol	94	None	add
1479	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  Predicate  matchRemovableAssigns  =  compiler.getCfgNodeForId(child);  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  Predicate  matchRemovableAssigns  =  compiler.getCfgNodeForId(child);  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(child.getFirstChild(),    variable);    Predicate  matchRemovableAssigns  =  compiler.getCfgNodeForId(child);  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);	  	non-compiled	[CE]  cannot  find  symbol	94	None	add
1480	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  Predicate  matchRemovableAssigns  =  compiler.getCfgNode(n);  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  Predicate  matchRemovableAssigns  =  compiler.getCfgNode(n);  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(child.getFirstChild(),    variable);    Predicate  matchRemovableAssigns  =  compiler.getCfgNode(n);  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);	  	non-compiled	[CE]  cannot  find  symbol	94	None	add
1481	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  Predicate  matchRemovableAssigns  =  compiler.getCfgNodeForPath(child);  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  Predicate  matchRemovableAssigns  =  compiler.getCfgNodeForPath(child);  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(child.getFirstChild(),    variable);    Predicate  matchRemovableAssigns  =  compiler.getCfgNodeForPath(child);  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);	  	non-compiled	[CE]  cannot  find  symbol	94	None	add
1482	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  Predicate  matchRemovableAssigns  =  compiler.getCfgNodeForPath(n);  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  [CE]  cannot  find  symbol  [FE]              RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  Predicate  matchRemovableAssigns  =  compiler.getCfgNodeForPath(n);  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return    isVariableReadBeforeKill(child.getFirstChild(),    variable);    Predicate  matchRemovableAssigns  =  compiler.getCfgNodeForPath(n);  return  isVariableReadBeforeKill(child.getFirstChild(),  variable);	  	non-compiled	[CE]  cannot  find  symbol	94	None	add
1483	[BUG]  [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  &&  child.getChildCount()!=  1;  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  state.getType()  ==  Token.CALL  &&  child.getChildCount()!=  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  state.getType()  ==  Token.CALL  &&  child.getChildCount()!=  1;	  return    state    &&    state.getType()    ==    Token.CALL    &&    state.getChildCount()!=    1;    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
1484	[BUG]  [BUGGY]  return  state.invoke(parent,  variable,  child);  [CE]  cannot  find  symbol  parent  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.invoke(parent,  variable,  child);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.invoke(parent,  variable,  child);	  return    state.invoke(n,    variable,    child);    	non-compiled	[CE]  cannot  find  symbol  parent	133	None	replace
1485	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child,  variable  +  1);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	return  isVariableReadBeforeKill(child,  variable  +  1);	  return    isVariableReadBeforeKill(child,    variable);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	185	61	replace
1486	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child,  variable  +  1);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child,  variable  +  1);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child,  variable  +  1);	  return    isVariableReadBeforeKill(child,    variable);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	185	61	replace
1487	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child,  variable)&&  state!=  VariableLiveness.MAYBE_LIVE;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]      AssertionFailedError    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  isVariableReadBeforeKill(child,  variable)&&  state!=  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  isVariableReadBeforeKill(child,  variable)&&  state!=  VariableLiveness.MAYBE_LIVE;	  return    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	185	None	replace
1488	[BUG]  [BUGGY]  return  state.getRemovableAssignmentsElimination()  ||  state.getRemovableAssignmentsElimination()  +  1;  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignmentsElimination()  ||  state.getRemovableAssignmentsElimination()  +  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignmentsElimination()  ||  state.getRemovableAssignmentsElimination()  +  1;	  return    state.getRemovableAssignmentsElimination()    +    1;    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
1489	[BUG]  [BUGGY]  return  state.getRemovableAssignmentsElimination(),  child.getLastChild());  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignmentsElimination(),  child.getLastChild());  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignmentsElimination(),  child.getLastChild());	  return    state.getRemovableAssignmentsElimination()    +    1;    	non-compiled	[CE]  ';'  expected	35	None	replace
1490	[BUG]  [BUGGY]  return  state.getRemovableAssignmentsElimination(),  child.getFirstChild()  +  1;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getRemovableAssignmentsElimination(),  child.getFirstChild()  +  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getRemovableAssignmentsElimination(),  child.getFirstChild()  +  1;	  return    state.getRemovableAssignmentsElimination()    +    1;    	non-compiled	[CE]  ';'  expected	35	None	replace
1491	[BUG]  [BUGGY]  return  child.getType()!=  Token.CALL  &&  state.getChildCount()  >  1;  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  child.getType()!=  Token.CALL  &&  state.getChildCount()  >  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  child.getType()!=  Token.CALL  &&  state.getChildCount()  >  1;	  return    state.getType()!=    Token.CALL    &&    state.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
1492	[BUG]  [BUGGY]  return  state.getType()!=  Token.CALL  &&  parent.getChildCount()  >  1;  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()!=  Token.CALL  &&  parent.getChildCount()  >  1;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()!=  Token.CALL  &&  parent.getChildCount()  >  1;	  return    state.getType()!=    Token.CALL    &&    state.getChildCount()    >    1;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
1493	[BUG]  [BUGGY]  return  state.getType()!=  Token.CALL  ||  state.getChildCount()  >  1)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getType()!=  Token.CALL  ||  state.getChildCount()  >  1)  {  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getType()!=  Token.CALL  ||  state.getChildCount()  >  1)  {	  return    state.getType()    ==    Token.CALL    ||    state.getChildCount()    >    1)    {    	non-compiled	[CE]  ';'  expected	47	None	replace
1494	[BUG]  [BUGGY]  return  variable  ||  state  ==  VariableLiveness.MAYBE_LIVE;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  variable  ||  state  ==  VariableLiveness.MAYBE_LIVE;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  variable  ||  state  ==  VariableLiveness.MAYBE_LIVE;	  return    state    ||    variable    ==    VariableLiveness.MAYBE_LIVE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	13	None	replace
1495	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(n.getFirstChild(),  variable,  state);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(n.getFirstChild(),  variable,  state);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(n.getFirstChild(),  variable,  state);	  return    state    &&    isVariableReadBeforeKill(n.getFirstChild(),    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	89	None	replace
1496	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  child.getFirstChild(),  variable,  VEAD);  [CE]  cannot  find  symbol  VEAD  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state  &&  isVariableReadBeforeKill(child,  child.getFirstChild(),  variable,  VEAD);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state  &&  isVariableReadBeforeKill(child,  child.getFirstChild(),  variable,  VEAD);	  return    state    &&    isVariableReadBeforeKill(n,    child.getFirstChild(),    variable);    	non-compiled	[CE]  cannot  find  symbol  VEAD	92	None	replace
1497	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.BLOCK);  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  }  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.BLOCK);  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.BLOCK);    Preconditions.checkState(child.getType()  ==  Token.BLOCK);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  }	  	non-compiled	[CE]  illegal  start  of  type	163	None	add
1498	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.BLOCK);  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	                Preconditions.checkState(child.getType()    ==    Token.BLOCK);    Preconditions.checkState(child.getType()  ==  Token.BLOCK);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  }	  	compilable	  [FE]  RuntimeException  	163	61	add
1499	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.BLOCK);  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.BLOCK);  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.BLOCK);    Preconditions.checkState(child.getType()  ==  Token.BLOCK);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  }	  	compilable	  [FE]  RuntimeException  	163	61	add
1500	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.BLOCK);  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	                Preconditions.checkState(child.getType()    ==    Token.BLOCK);    Preconditions.checkState(child.getType()  ==  Token.BLOCK);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  }	  	compilable	  [FE]  RuntimeException  	163	61	add
1501	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.BLOCK);  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  }  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.BLOCK);  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.BLOCK);    Preconditions.checkState(child.getType()  ==  Token.BLOCK);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  }	  	compilable	  [FE]  RuntimeException  	163	61	add
1502	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.BLOCK);  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  preconditions.checkState(child.getType()  ==  Token.BLOCK);  }  [CE]  cannot  find  symbol  preconditions  [FE]          RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.BLOCK);  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  preconditions.checkState(child.getType()  ==  Token.BLOCK);  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.BLOCK);    Preconditions.checkState(child.getType()  ==  Token.BLOCK);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  preconditions.checkState(child.getType()  ==  Token.BLOCK);  }	  	non-compiled	[CE]  cannot  find  symbol  preconditions	163	None	add
1503	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.BLOCK);  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	add	                Preconditions.checkState(child.getType()    ==    Token.BLOCK);    Preconditions.checkState(child.getType()  ==  Token.BLOCK);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	163	61	add
1504	[BUG]  [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.BLOCK);  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]          Preconditions.checkState(child.getType()  ==  Token.BLOCK);  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	                Preconditions.checkState(child.getType()    ==    Token.BLOCK);    Preconditions.checkState(child.getType()  ==  Token.BLOCK);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Preconditions.checkState(child.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	163	61	add
1505	[BUG]  [BUGGY]  return  STRING;  [CE]  cannot  find  symbol  STRING  [FE]            AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  STRING;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  STRING;	  return    MayBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  STRING	128	None	replace
1506	[BUG]  [BUGGY]  return  state.getValue()!=  null?  state.getValue()  :  null;  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValue()!=  null?  state.getValue()  :  null;  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValue()!=  null?  state.getValue()  :  null;	  return    state.getValue()    :    null;    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
1507	[BUG]  [BUGGY]  return  state.getValue()  ==  null?  null  :  state.getValue();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValue()  ==  null?  null  :  state.getValue();  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValue()  ==  null?  null  :  state.getValue();	  return    state.getValue()    :    null;    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
1508	[BUG]  [BUGGY]  return  state.getValue(variable).evaluate(VariableLiveness.MAYBE_LIVE);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValue(variable).evaluate(VariableLiveness.MAYBE_LIVE);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValue(variable).evaluate(VariableLiveness.MAYBE_LIVE);	  return    state.getValue(variable);    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
1509	[BUG]  [BUGGY]  return  matchRemovableAssigns.getValue(variable);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  matchRemovableAssigns.getValue(variable);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  matchRemovableAssigns.getValue(variable);	  return    state.getValue(variable);    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
1510	[BUG]  [BUGGY]  return  state.getValue(variable).evaluate(VariableLiveness.KILL);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValue(variable).evaluate(VariableLiveness.KILL);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValue(variable).evaluate(VariableLiveness.KILL);	  return    state.getValue(variable);    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
1511	[BUG]  [BUGGY]  return  state.getValue(variable).evaluate(VariableLiveness.EXPR_RESULT);  [CE]  cannot  find  symbol  EXPR_RESULT  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  return  state.getValue(variable).evaluate(VariableLiveness.EXPR_RESULT);  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	return  state.getValue(variable).evaluate(VariableLiveness.EXPR_RESULT);	  return    state.getValue(variable);    	non-compiled	[CE]  cannot  find  symbol  EXPR_RESULT	125	None	replace
1512	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MOVED)  {  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MOVED)  {  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MOVED)  {  }	          VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state    ==    VariableLiveness.MAYBE_LIVE)    {    }    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	44	None	replace
1513	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.READ)  {  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.READ)  {  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.READ)  {  }	          VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state    ==    VariableLiveness.MAYBE_LIVE)    {    }    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	44	None	replace
1514	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MIN_LIVE)  {  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MIN_LIVE)  {  }  [BUGGY]      }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	342	342	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MIN_LIVE)  {  }	          VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state    ==    VariableLiveness.MAYBE_LIVE)    {    }    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	44	None	replace
