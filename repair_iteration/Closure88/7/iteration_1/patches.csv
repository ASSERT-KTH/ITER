bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	10	61	replace
2	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	10	61	replace
3	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	10	61	replace
4	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	10	61	replace
5	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	10	None	replace
6	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	10	61	replace
7	[BUG]  [BUGGY]  if(state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	10	61	replace
8	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MOVED  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  MOVED  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.MOVED  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MOVED  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	10	None	replace
9	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MINUTE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  MINUTE  [FE]              AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.MINUTE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MINUTE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MINUTE	10	None	replace
10	[BUG]  [BUGGY]  if(state!=  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.KILL)  {  [CE]  reached  end  of  file  while  parsing  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.KILL)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.KILL)    {    if(state!=  VariableLiveness.KILL)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	add
11	[BUG]  [BUGGY]  if(state!=  VariableLiveness.KILL)  {  if(state  ==  VariableLiveness.KILL)  {  [CE]  reached  end  of  file  while  parsing  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.KILL)  {  if(state  ==  VariableLiveness.KILL)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.KILL)    {    if(state  ==  VariableLiveness.KILL)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	add
12	[BUG]  [BUGGY]  if(state!=  VariableLiveness.KILL)  {  if(state  >=  VariableLiveness.KILL)  {  [CE]  reached  end  of  file  while  parsing  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.KILL)  {  if(state  >=  VariableLiveness.KILL)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.KILL)    {    if(state  >=  VariableLiveness.KILL)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	add
13	[BUG]  [BUGGY]  if(state!=  VariableLiveness.KILL)  {  If(state!=  VariableLiveness.KILL)  {  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.KILL)  {  If(state!=  VariableLiveness.KILL)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.KILL)    {    If(state!=  VariableLiveness.KILL)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
14	[BUG]  [BUGGY]  if(state!=  VariableLiveness.KILL)  {  if(state  >>  VariableLiveness.KILL)  {  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.KILL)  {  if(state  >>  VariableLiveness.KILL)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.KILL)    {    if(state  >>  VariableLiveness.KILL)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	add
15	[BUG]  [BUGGY]  if(state!=  VariableLiveness.KILL)  {  if(state  [Delete]  VariableLiveness.KILL)  {  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.KILL)  {  if(state  [Delete]  VariableLiveness.KILL)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.KILL)    {    if(state  [Delete]  VariableLiveness.KILL)  {	  	non-compiled	[CE]  ')'  expected	7	None	add
16	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.SEMI_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.SEMI_LIVE)  {	  if(state!=    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	13	None	replace
17	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MILLBE_LIVE)  {  [CE]  cannot  find  symbol  MILLBE_LIVE  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.MILLBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MILLBE_LIVE)  {	  if(state!=    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLBE_LIVE	13	None	replace
18	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.SEMI_BACKSLASH)  {  [CE]  cannot  find  symbol  SEMI_BACKSLASH  [FE]              AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.SEMI_BACKSLASH)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.SEMI_BACKSLASH)  {	  if(state!=    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_BACKSLASH	13	None	replace
19	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MILLBE_LIVE)  {  [CE]  cannot  find  symbol  MILLBE_LIVE  [FE]                AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MILLBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MILLBE_LIVE)  {	  if(state!=    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLBE_LIVE	13	None	replace
20	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MIN_LIVE)  {  [CE]  cannot  find  symbol  MIN_LIVE  [FE]                  AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.MIN_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MIN_LIVE)  {	  if(state!=    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MIN_LIVE	13	None	replace
21	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL_LIVE)  {  [CE]  cannot  find  symbol  KILL_LIVE  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL_LIVE)  {	  if(state!=    VariableLiveness.KILL_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  KILL_LIVE	4	None	replace
22	[BUG]  [BUGGY]  if(value!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  value  [FE]              AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(value!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(value!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.KILL_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  value	4	None	replace
23	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL_LIVE)  {  [CE]  cannot  find  symbol  KILL_LIVE  [FE]                AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL_LIVE)  {	  if(state!=    VariableLiveness.KILL_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  KILL_LIVE	4	None	replace
24	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.MAYBE_LIVE)    {    if(state  ==  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
25	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.MAYBE_LIVE)    {    if(state!=  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
26	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  If(state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  If(state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.MAYBE_LIVE)    {    If(state  ==  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
27	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state  >=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state  >=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.MAYBE_LIVE)    {    if(state  >=  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
28	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.MINUTE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.MINUTE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.MAYBE_LIVE)    {    if(state  ==  VariableLiveness.MINUTE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
29	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.MOVED)  {  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.MOVED)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.MAYBE_LIVE)    {    if(state  ==  VariableLiveness.MOVED)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
30	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ)  {  if(state!=  VariableLiveness.READ)  {  [CE]  reached  end  of  file  while  parsing  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.READ)  {  if(state!=  VariableLiveness.READ)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.READ)    {    if(state!=  VariableLiveness.READ)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	add
31	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ)  {  if(state  ==  VariableLiveness.READ)  {  [CE]  reached  end  of  file  while  parsing  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.READ)  {  if(state  ==  VariableLiveness.READ)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.READ)    {    if(state  ==  VariableLiveness.READ)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	add
32	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ)  {  if(state  >=  VariableLiveness.READ)  {  [CE]  reached  end  of  file  while  parsing  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.READ)  {  if(state  >=  VariableLiveness.READ)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.READ)    {    if(state  >=  VariableLiveness.READ)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	add
33	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ)  {  If(state!=  VariableLiveness.READ)  {  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.READ)  {  If(state!=  VariableLiveness.READ)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.READ)    {    If(state!=  VariableLiveness.READ)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
34	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ)  {  if(state  >>  VariableLiveness.READ)  {  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.READ)  {  if(state  >>  VariableLiveness.READ)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.READ)    {    if(state  >>  VariableLiveness.READ)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	add
35	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ)  {  if(state  [Delete]  VariableLiveness.READ)  {  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.READ)  {  if(state  [Delete]  VariableLiveness.READ)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.READ)    {    if(state  [Delete]  VariableLiveness.READ)  {	  	non-compiled	[CE]  ')'  expected	5	None	add
36	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FOR  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.KILL_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	3	None	replace
37	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MILLIS_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  MILLIS_LIVE  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.MILLIS_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MILLIS_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.KILL_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLIS_LIVE	3	None	replace
38	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FOR_LIVE  [FE]              AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.FOR_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FOR_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.KILL_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR_LIVE	3	None	replace
39	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	2	61	replace
40	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	2	61	replace
41	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	2	60	replace
42	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	2	60	replace
43	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state  ==  VariableLiveness.READ)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state  ==  VariableLiveness.READ)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	2	52	replace
44	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state  ==  VariableLiveness.READ)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.READ)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	2	52	replace
45	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  AssertionFailedError  	2	57	replace
46	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [FE]  AssertionFailedError  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  AssertionFailedError  	2	57	replace
47	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.KILL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	8	61	replace
48	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.KILL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	8	61	replace
49	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.KILL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	8	60	replace
50	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.KILL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	8	60	replace
51	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.KILL)    {    	compilable	  [FE]  AssertionFailedError  	8	57	replace
52	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.KILL)    {    	compilable	  [FE]  AssertionFailedError  	8	57	replace
53	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MILLISECOND  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  MILLISECOND  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.MILLISECOND  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MILLISECOND  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  MILLISECOND	8	None	replace
54	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MILLISECOND)  {  [CE]  cannot  find  symbol  MILLISECOND  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.MILLISECOND)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MILLISECOND)  {	  if(state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  MILLISECOND	8	None	replace
55	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	add
56	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	add
57	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	add
58	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  >>  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  >>  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  >>  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	add
59	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	add
60	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state  >=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state  >=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state  >=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	add
61	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state  >>  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state  >>  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state  >>  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	add
62	[BUG]  [BUGGY]  if(state!=  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]        AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.SEMI_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	14	None	replace
63	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.SEMI_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state  ==  VariableLiveness.SEMI_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.SEMI_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.SEMI_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	14	None	replace
64	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {	  if(state!=    VariableLiveness.READ)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	6	61	replace
65	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {	  if(state!=    VariableLiveness.READ)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	6	61	replace
66	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {	  if(state!=    VariableLiveness.READ)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	6	61	replace
67	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {	  if(state!=    VariableLiveness.READ)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	6	61	replace
68	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  null  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state!=  null  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.READ)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	6	61	replace
69	[BUG]  [BUGGY]  if(state!=  null  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  null  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  null  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.READ)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	6	61	replace
70	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  FOR  [FE]        AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.FOR)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.FOR)  {	  if(state!=    VariableLiveness.FOR)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	12	None	replace
71	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state.equals(VariableLiveness.MAYBE_LIVE))  {  [CE]  cannot  find  symbol  FOR  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state.equals(VariableLiveness.MAYBE_LIVE))  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FOR  ||  state.equals(VariableLiveness.MAYBE_LIVE))  {	  if(state!=    VariableLiveness.FOR)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	12	None	replace
72	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MIN_LIVE  ||  state!=  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  MIN_LIVE  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.MIN_LIVE  ||  state!=  VariableLiveness.FOR)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MIN_LIVE  ||  state!=  VariableLiveness.FOR)  {	  if(state!=    VariableLiveness.FOR)    {    	non-compiled	[CE]  cannot  find  symbol  MIN_LIVE	12	None	replace
73	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
74	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	State  state  =  isVariableReadBeforeKill(child,  variable);	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
75	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  state);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  state);  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	NodeTraversal.traverse(compiler,  n,  state);	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
76	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  Compiler.getInstance();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  Predicate  matchRemovableAssigns  =  Compiler.getInstance();  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Predicate  matchRemovableAssigns  =  Compiler.getInstance();	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
77	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME);  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME);	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
78	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	NodeTraversal.traverse(compiler,  n,  this);	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
79	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child,  state);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  NodeTraversal.traverse(compiler,  child,  state);  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	NodeTraversal.traverse(compiler,  child,  state);	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
80	[BUG]  [BUGGY]  if(state!=  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.SKILL)  {  [CE]  reached  end  of  file  while  parsing  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.SKILL)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.KILL)    {    if(state!=  VariableLiveness.SKILL)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	add
81	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.MINIVE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.MINIVE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.MAYBE_LIVE)    {    if(state  ==  VariableLiveness.MINIVE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
82	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MIN_VALUE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  MIN_VALUE  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.MIN_VALUE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MIN_VALUE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  MIN_VALUE	6	None	replace
83	[BUG]  [BUGGY]  if(state  >=  VariableLiveness.MAYBE_LIVE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state  >=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  >=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.READ)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	6	None	replace
84	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR  &&  state!=  VariableLiveness.KILL_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.FOR  &&  state!=  VariableLiveness.KILL_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FOR  &&  state!=  VariableLiveness.KILL_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.KILL_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	3	None	replace
85	[BUG]  [BUGGY]  if(state!=  VariableLiveness.KILL_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  KILL_LIVE  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.KILL_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.KILL_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.KILL_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  KILL_LIVE	3	None	replace
86	[BUG]  [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	state  =  isVariableReadBeforeKill(child,  variable);	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
87	[BUG]  [BUGGY]  Predicates.checkNotNull(child);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  Predicates.checkNotNull(child);  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Predicates.checkNotNull(child);	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
88	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state  ==  VariableLiveness.KILL)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state  ==  VariableLiveness.KILL)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	2	61	replace
89	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.KILL)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state  ==  VariableLiveness.KILL)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.KILL)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	2	61	replace
90	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  MOVED  [FE]        AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.MOVED)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MOVED)  {	  if(state!=    VariableLiveness.FOR)    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	12	None	replace
91	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MINUTE)  {  [CE]  cannot  find  symbol  MINUTE  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.MINUTE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MINUTE)  {	  if(state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  MINUTE	8	None	replace
92	[BUG]  [BUGGY]  if(state!=  VariableLiveness.SEMI_LIVE  ||  state!=  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.SEMI_LIVE  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.SEMI_LIVE  ||  state!=  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	8	None	replace
93	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR  &&  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]    AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.FOR  &&  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FOR  &&  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	10	None	replace
94	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MINUS_LIVE)  {  [CE]  cannot  find  symbol  MINUS_LIVE  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.MINUS_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MINUS_LIVE)  {	  if(state!=    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MINUS_LIVE	13	None	replace
95	[BUG]  [BUGGY]  if(state!=  VariableLiveness.LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  LIVE  [FE]        AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.SEMI_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  LIVE	14	None	replace
96	[BUG]  [BUGGY]  if(state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.SEMI_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.SEMI_LIVE)  {	  if(state!=    VariableLiveness.SEMI_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	14	None	replace
97	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MILL_LIVE)  {  [CE]  cannot  find  symbol  MILL_LIVE  [FE]            AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.MILL_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MILL_LIVE)  {	  if(state!=    VariableLiveness.KILL_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILL_LIVE	4	None	replace
98	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MILLI_LIVE)  {  [CE]  cannot  find  symbol  MILLI_LIVE  [FE]              AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.MILLI_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MILLI_LIVE)  {	  if(state!=    VariableLiveness.KILL_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLI_LIVE	4	None	replace
99	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.MIN_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.MIN_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.MAYBE_LIVE)    {    if(state  ==  VariableLiveness.MIN_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
100	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MIN_VALUE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  MIN_VALUE  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.MIN_VALUE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MIN_VALUE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MIN_VALUE	2	None	replace
101	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state  ==  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	2	None	replace
102	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Preconditions.checkState(child.getType()  ==  Token.BLOCK);	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
103	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL);  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Preconditions.checkState(child.getType()  ==  Token.CALL);	      	non-compiled	[CE]  illegal  start  of  type	11	None	replace
104	[BUG]  [BUGGY]  if(state!=  VariableLiveness.BOTTOM  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]        AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.BOTTOM  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.BOTTOM  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.SEMI_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	14	None	replace
105	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MILLE_LIVE)  {  [CE]  cannot  find  symbol  MILLE_LIVE  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.MILLE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MILLE_LIVE)  {	  if(state!=    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLE_LIVE	13	None	replace
106	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]        AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.FOR)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	12	None	replace
107	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MIN_VALUE  ||  state!=  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  MIN_VALUE  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.MIN_VALUE  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MIN_VALUE  ||  state!=  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  MIN_VALUE	8	None	replace
108	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state!=  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.KILL_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	3	61	replace
109	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.KILL_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	3	61	replace
110	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state!=  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  AssertionFailedError  	10	57	replace
111	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  AssertionFailedError  	10	57	replace
112	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.DEAD)  {  [CE]  cannot  find  symbol  DEAD  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);    [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.DEAD)  {  [BUGGY]    return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.DEAD)  {	  if(state!=    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  DEAD	6	None	replace
