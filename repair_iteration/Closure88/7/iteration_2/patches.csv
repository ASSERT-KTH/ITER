bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(state!=  VariableLiveness.KILL_LIVE  ||  state!=  VariableLiveness.KILL_LIVE)  {  [CE]  cannot  find  symbol  KILL_LIVE  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.KILL_LIVE  ||  state!=  VariableLiveness.KILL_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.KILL_LIVE  ||  state!=  VariableLiveness.KILL_LIVE)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state!=    VariableLiveness.MAYBE_LIVE    ||    state    >=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  KILL_LIVE	59	None	replace
2	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.KILL_LIVE  ||  state!=  VariableLiveness.KILL_LIVE)  {  [CE]  cannot  find  symbol  KILL_LIVE  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.KILL_LIVE  ||  state!=  VariableLiveness.KILL_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.KILL_LIVE  ||  state!=  VariableLiveness.KILL_LIVE)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state!=    VariableLiveness.MAYBE_LIVE    ||    state    >=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  KILL_LIVE	59	None	replace
3	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MIN_LIVE  ||  state!=  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  MIN_LIVE  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MIN_LIVE  ||  state!=  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MIN_LIVE  ||  state!=  VariableLiveness.SEMI_LIVE)  {	  if(state!=    VariableLiveness.KILL    ||    state!=    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MIN_LIVE	96	None	replace
4	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MILLI  ||  state!=  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  MILLI  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MILLI  ||  state!=  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MILLI  ||  state!=  VariableLiveness.SEMI_LIVE)  {	  if(state!=    VariableLiveness.KILL    ||    state!=    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLI	96	None	replace
5	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MILLIS  ||  state!=  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  MILLIS  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MILLIS  ||  state!=  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MILLIS  ||  state!=  VariableLiveness.SEMI_LIVE)  {	  if(state!=    VariableLiveness.KILL    ||    state!=    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLIS	96	None	replace
6	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MILLI  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  MILLI  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MILLI  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MILLI  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.KILL    ||    state!=    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLI	96	None	replace
7	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.READ  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state!=  VariableLiveness.READ  &&  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.READ    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	109	61	replace
8	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.READ  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.READ  &&  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.READ    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	109	61	replace
9	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.READ  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.READ    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	109	None	replace
10	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MILLISECOND)  {  [CE]  cannot  find  symbol  MILLISECOND  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MILLISECOND)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MILLISECOND)  {	  if(state!=    VariableLiveness.KILL)    {    if(state    >=    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  MILLISECOND	12	None	replace
11	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MIN_VALUE)  {  [CE]  cannot  find  symbol  MIN_VALUE  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MIN_VALUE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MIN_VALUE)  {	  if(state!=    VariableLiveness.MIN_VALUE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MIN_VALUE	82	None	replace
12	[BUG]  [BUGGY]  if(state!=  VariableLiveness.KILL_VALUE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  KILL_VALUE  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.KILL_VALUE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.KILL_VALUE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MIN_VALUE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  KILL_VALUE	82	None	replace
13	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MILLIS  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  MILLIS  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MILLIS  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MILLIS  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MIN_VALUE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLIS	82	None	replace
14	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  state,  variable);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  state,  variable);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	NodeTraversal.traverse(compiler,  n,  state,  variable);	  NodeTraversal.traverse(compiler,    n,    state);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
15	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  state,  liveness);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  state,  liveness);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	NodeTraversal.traverse(compiler,  n,  state,  liveness);	  NodeTraversal.traverse(compiler,    n,    state);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
16	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  state,  dataArea);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  state,  dataArea);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	NodeTraversal.traverse(compiler,  n,  state,  dataArea);	  NodeTraversal.traverse(compiler,    n,    state);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
17	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  child,  state);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  child,  state);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	NodeTraversal.traverse(compiler,  n,  child,  state);	  NodeTraversal.traverse(compiler,    n,    state);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
18	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  state,  child);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  state,  child);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	NodeTraversal.traverse(compiler,  n,  state,  child);	  NodeTraversal.traverse(compiler,    n,    state);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
19	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  state,  false);  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  state,  false);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	NodeTraversal.traverse(compiler,  n,  state,  false);	  NodeTraversal.traverse(compiler,    n,    state);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
20	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.SEMI_LIVE)  {	  if(state    ==    VariableLiveness.SEMI_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	63	None	replace
21	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FOR  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.FOR  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.FOR  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state    ==    VariableLiveness.SEMI_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	63	None	replace
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state    ==    VariableLiveness.SEMI_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  AssertionFailedError  	63	57	replace
23	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state    ==    VariableLiveness.SEMI_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  AssertionFailedError  	63	57	replace
24	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MOVED  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  MOVED  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MOVED  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.MOVED  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state    ==    VariableLiveness.SEMI_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	63	None	replace
25	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.BOTTOM  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]                      AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.BOTTOM  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.BOTTOM  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state    ==    VariableLiveness.SEMI_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	63	None	replace
26	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME,  state);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME,  state);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME,  state);	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
27	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()!=  Token.NAME,  state);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Preconditions.checkState(child.getType()!=  Token.NAME,  state);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Preconditions.checkState(child.getType()!=  Token.NAME,  state);	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
28	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME,  variable);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME,  variable);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME,  variable);	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
29	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
30	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()!=  Token.NAME);  [CE]  illegal  start  of  type  [FE]                                        AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Preconditions.checkState(child.getType()!=  Token.NAME);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Preconditions.checkState(child.getType()!=  Token.NAME);	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
31	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  ||  state  ==  VariableLiveness.MAYBE_LIVE);  [CE]  illegal  start  of  type  [FE]                                          AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  ||  state  ==  VariableLiveness.MAYBE_LIVE);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME  ||  state  ==  VariableLiveness.MAYBE_LIVE);	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
32	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	add
33	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	add
34	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  If(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  If(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    If(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  ';'  expected	39	None	add
35	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state  >=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state  >=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    if(state  >=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	add
36	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state  >>  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state  >>  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    if(state  >>  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	add
37	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.READ  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.READ  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    if(state!=  VariableLiveness.READ  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	add
38	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	add
39	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.READ    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state!=  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	108	None	add
40	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.READ    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	108	None	add
41	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.READ    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	108	None	add
42	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.READ  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.READ  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.READ    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state!=  VariableLiveness.READ  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	108	None	add
43	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.READ  ||  state  >>  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.READ  ||  state  >>  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.READ    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state!=  VariableLiveness.READ  ||  state  >>  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	108	None	add
44	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state  >=  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state  >=  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.READ    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state  >=  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	108	None	add
45	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  If(state!=  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  If(state!=  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.READ    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    If(state!=  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  ';'  expected	108	None	add
46	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.SEMI_LIVE)  {	  if(state!=    VariableLiveness.SEMI_LIVE    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	62	None	replace
47	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.SEMI_LIVE    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	62	60	replace
48	[BUG]  [BUGGY]  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.SEMI_LIVE    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	62	60	replace
49	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MOVED  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  MOVED  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MOVED  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MOVED  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.SEMI_LIVE    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	62	None	replace
50	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FOR_LIVE  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.FOR_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FOR_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.SEMI_LIVE    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR_LIVE	62	None	replace
51	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MINUTE_LIVE)  {  [CE]  cannot  find  symbol  MINUTE_LIVE  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MINUTE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.MINUTE_LIVE)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE)    {    if(state    ==    VariableLiveness.MINUTE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MINUTE_LIVE	28	None	replace
52	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MINUTE_LIVE)  {  [CE]  cannot  find  symbol  MINUTE_LIVE  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MINUTE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MINUTE_LIVE)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE)    {    if(state    ==    VariableLiveness.MINUTE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MINUTE_LIVE	28	None	replace
53	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MINUTE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  MINUTE_LIVE  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MINUTE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.MINUTE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE)    {    if(state    ==    VariableLiveness.MINUTE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MINUTE_LIVE	28	None	replace
54	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MINUTE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  MINUTE_LIVE  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MINUTE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MINUTE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE)    {    if(state    ==    VariableLiveness.MINUTE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MINUTE_LIVE	28	None	replace
55	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MINUTE_LIVE)  {  [CE]  cannot  find  symbol  MINUTE_LIVE  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MINUTE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MINUTE_LIVE)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE)    {    if(state    ==    VariableLiveness.MINUTE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MINUTE_LIVE	28	None	replace
56	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MILLISECOND)  {  [CE]  cannot  find  symbol  MILLISECOND  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MILLISECOND)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MILLISECOND)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state    ==    VariableLiveness.KILL_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLISECOND	23	None	replace
57	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                      AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state    ==    VariableLiveness.KILL_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	23	61	replace
58	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                      AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state    ==    VariableLiveness.KILL_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	23	61	replace
59	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MILLIS_LIVE)  {  [CE]  cannot  find  symbol  MILLIS_LIVE  [FE]                        AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MILLIS_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MILLIS_LIVE)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state    ==    VariableLiveness.KILL_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLIS_LIVE	23	None	replace
60	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  MOVED  [FE]                          AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MOVED)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MOVED)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state    ==    VariableLiveness.KILL_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	23	None	replace
61	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MINIVE_LIVE)  {  [CE]  cannot  find  symbol  MINIVE_LIVE  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MINIVE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.MINIVE_LIVE)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE)    {    if(state    ==    VariableLiveness.MINIVE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MINIVE_LIVE	81	None	replace
62	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MINIVE_LIVE)  {  [CE]  cannot  find  symbol  MINIVE_LIVE  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MINIVE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MINIVE_LIVE)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE)    {    if(state    ==    VariableLiveness.MINIVE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MINIVE_LIVE	81	None	replace
63	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MINIVE_LIVE)  {  [CE]  cannot  find  symbol  MINIVE_LIVE  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MINIVE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MINIVE_LIVE)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE)    {    if(state    ==    VariableLiveness.MINIVE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MINIVE_LIVE	81	None	replace
64	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MINIVE_LIVE)  {  [CE]  cannot  find  symbol  MINIVE_LIVE  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MINIVE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MINIVE_LIVE)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE)    {    if(state    ==    VariableLiveness.MINIVE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MINIVE_LIVE	81	None	replace
65	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MINIVE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  MINIVE_LIVE  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MINIVE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.MINIVE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE)    {    if(state    ==    VariableLiveness.MINIVE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MINIVE_LIVE	81	None	replace
66	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK,  state);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK,  state);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Preconditions.checkState(child.getType()  ==  Token.BLOCK,  state);	  Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
67	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.BLOCK);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.BLOCK);	  Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
68	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()!=  Token.BLOCK);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Preconditions.checkState(child.getType()!=  Token.BLOCK);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Preconditions.checkState(child.getType()!=  Token.BLOCK);	  Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
69	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
70	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.GETPROP);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.GETPROP);	  Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
71	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.CALL);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.CALL);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.CALL);	  Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
72	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MILLIS_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  MILLIS_LIVE  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MILLIS_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MILLIS_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.KILL_LIVE    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLIS_LIVE	85	None	replace
73	[BUG]  [BUGGY]  if(state!=  null  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state!=  null  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  null  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state!=  null  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    null    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state!=  null  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	68	None	add
74	[BUG]  [BUGGY]  if(state!=  null  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  null  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  null  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  null  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    null    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state  ==  null  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	68	None	add
75	[BUG]  [BUGGY]  if(state!=  null  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state!=  null  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  null  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state!=  null  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    null    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state!=  null  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	68	None	add
76	[BUG]  [BUGGY]  if(state!=  null  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state!=  null  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  null  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state!=  null  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    null    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state!=  null  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	68	None	add
77	[BUG]  [BUGGY]  if(state!=  null  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  If(state!=  null  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  null  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  If(state!=  null  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    null    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    If(state!=  null  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  ';'  expected	68	None	add
78	[BUG]  [BUGGY]  if(state!=  null  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state  >=  null  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  null  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state  >=  null  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    null    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state  >=  null  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	68	None	add
79	[BUG]  [BUGGY]  if(state!=  null  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state!=  null  ||  state!=  VariableLiveness.MINUTE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  null  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state!=  null  ||  state!=  VariableLiveness.MINUTE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    null    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state!=  null  ||  state!=  VariableLiveness.MINUTE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	68	None	add
80	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MILLBE_LIVE  ||  state!=  VariableLiveness.MILLBE_LIVE)  {  [CE]  cannot  find  symbol  MILLBE_LIVE  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MILLBE_LIVE  ||  state!=  VariableLiveness.MILLBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MILLBE_LIVE  ||  state!=  VariableLiveness.MILLBE_LIVE)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MILLBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLBE_LIVE	19	None	replace
81	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MILLBE_LIVE)  {  [CE]  cannot  find  symbol  MILLBE_LIVE  [FE]                      AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MILLBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MILLBE_LIVE)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MILLBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLBE_LIVE	19	None	replace
82	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MILLBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  MILLBE_LIVE  [FE]                        AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MILLBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MILLBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MILLBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLBE_LIVE	19	None	replace
83	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MILLBE_READ  ||  state!=  VariableLiveness.MILLBE_LIVE)  {  [CE]  cannot  find  symbol  MILLBE_READ  [FE]                          AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MILLBE_READ  ||  state!=  VariableLiveness.MILLBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MILLBE_READ  ||  state!=  VariableLiveness.MILLBE_LIVE)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MILLBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLBE_READ	19	None	replace
84	[BUG]  [BUGGY]  if(state!=  VariableLiveness.SEMI_LIVE  ||  state!=  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.SEMI_LIVE  ||  state!=  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.SEMI_LIVE  ||  state!=  VariableLiveness.SEMI_LIVE)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state    >>    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	61	None	replace
85	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.LIVE)  {  [CE]  cannot  find  symbol  LIVE  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.LIVE)  {	  if(state!=    VariableLiveness.LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  LIVE	95	None	replace
86	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MINUTE)  {  [CE]  cannot  find  symbol  MINUTE  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MINUTE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MINUTE)  {	  if(state!=    VariableLiveness.MINUTE)    {    	non-compiled	[CE]  cannot  find  symbol  MINUTE	91	None	replace
87	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state!=  VariableLiveness.KILL_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state!=  VariableLiveness.KILL_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FOR  ||  state!=  VariableLiveness.KILL_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.FOR    &&    state!=    VariableLiveness.KILL_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	84	None	replace
88	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR  &&  state!=  VariableLiveness.KILL_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.FOR  &&  state!=  VariableLiveness.KILL_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FOR  &&  state!=  VariableLiveness.KILL_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.FOR    &&    state!=    VariableLiveness.KILL_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	84	None	replace
89	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state!=  VariableLiveness.KILL_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state!=  VariableLiveness.KILL_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FOR  ||  state!=  VariableLiveness.KILL_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.FOR    &&    state!=    VariableLiveness.KILL_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	84	None	replace
90	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FOR  ||  state!=  VariableLiveness.KILL_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.FOR  ||  state!=  VariableLiveness.KILL_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.FOR  ||  state!=  VariableLiveness.KILL_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.FOR    &&    state!=    VariableLiveness.KILL_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	84	None	replace
91	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.KILL_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]                      AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.KILL_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.KILL_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.FOR    &&    state!=    VariableLiveness.KILL_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	84	None	replace
92	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR  &&  state!=  VariableLiveness.KILL_LIVE  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]                        AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.FOR  &&  state!=  VariableLiveness.KILL_LIVE  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FOR  &&  state!=  VariableLiveness.KILL_LIVE  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.FOR    &&    state!=    VariableLiveness.KILL_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	84	None	replace
93	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MIN_LIVE)  {  [CE]  cannot  find  symbol  MIN_LIVE  [FE]                      AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MIN_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MIN_LIVE)  {	  if(state!=    VariableLiveness.MIN_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MIN_LIVE	20	None	replace
94	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MILLIS_LIVE)  {  [CE]  cannot  find  symbol  MILLIS_LIVE  [FE]                        AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MILLIS_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MILLIS_LIVE)  {	  if(state!=    VariableLiveness.MIN_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLIS_LIVE	20	None	replace
95	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  Compiler.getInstance(variable);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Predicate  matchRemovableAssigns  =  Compiler.getInstance(variable);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Predicate  matchRemovableAssigns  =  Compiler.getInstance(variable);	  Predicate    matchRemovableAssigns    =    Compiler.getInstance();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
96	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  state.getInstance();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Predicate  matchRemovableAssigns  =  state.getInstance();  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Predicate  matchRemovableAssigns  =  state.getInstance();	  Predicate    matchRemovableAssigns    =    Compiler.getInstance();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
97	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  n.getInstance();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Predicate  matchRemovableAssigns  =  n.getInstance();  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Predicate  matchRemovableAssigns  =  n.getInstance();	  Predicate    matchRemovableAssigns    =    Compiler.getInstance();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
98	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  child.getInstance();  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Predicate  matchRemovableAssigns  =  child.getInstance();  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Predicate  matchRemovableAssigns  =  child.getInstance();	  Predicate    matchRemovableAssigns    =    Compiler.getInstance();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
99	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  Compiler.getInstance(),  state;  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Predicate  matchRemovableAssigns  =  Compiler.getInstance(),  state;  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Predicate  matchRemovableAssigns  =  Compiler.getInstance(),  state;	  Predicate    matchRemovableAssigns    =    Compiler.getInstance();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
100	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  compiler.getInstance();  [CE]  illegal  start  of  type  [FE]                                        AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Predicate  matchRemovableAssigns  =  compiler.getInstance();  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Predicate  matchRemovableAssigns  =  compiler.getInstance();	  Predicate    matchRemovableAssigns    =    Compiler.getInstance();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
101	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  [CE]  reached  end  of  file  while  parsing  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.READ)    {    if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	add
102	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  [CE]  reached  end  of  file  while  parsing  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.READ)    {    if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	add
103	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  >=  VariableLiveness.READ)  {  [CE]  reached  end  of  file  while  parsing  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  >=  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.READ)    {    if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  >=  VariableLiveness.READ)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	add
104	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  If(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  If(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.READ)    {    If(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {	  	non-compiled	[CE]  ';'  expected	66	None	add
105	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  >>  VariableLiveness.READ)  {  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  >>  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.READ)    {    if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  >>  VariableLiveness.READ)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	add
106	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  if(state  ==  VariableLiveness.MIN_LIVE  ||  state!=  VariableLiveness.READ)  {  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  if(state  ==  VariableLiveness.MIN_LIVE  ||  state!=  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.READ)    {    if(state  ==  VariableLiveness.MIN_LIVE  ||  state!=  VariableLiveness.READ)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	add
107	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  if(state  ==  VariableLiveness.MINUTE_LIVE  ||  state!=  VariableLiveness.READ)  {  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  if(state  ==  VariableLiveness.MINUTE_LIVE  ||  state!=  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.READ)    {    if(state  ==  VariableLiveness.MINUTE_LIVE  ||  state!=  VariableLiveness.READ)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	add
108	[BUG]  [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable,  n);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable,  n);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	state  =  isVariableReadBeforeKill(child,  variable,  n);	  state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
109	[BUG]  [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable,  liveness);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable,  liveness);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	state  =  isVariableReadBeforeKill(child,  variable,  liveness);	  state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
110	[BUG]  [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable,  MAYBE_LIVE);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable,  MAYBE_LIVE);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	state  =  isVariableReadBeforeKill(child,  variable,  MAYBE_LIVE);	  state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
111	[BUG]  [BUGGY]  state  =  isVariableReadBeforeKill(child,  n);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  state  =  isVariableReadBeforeKill(child,  n);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	state  =  isVariableReadBeforeKill(child,  n);	  state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
112	[BUG]  [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable,  null);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable,  null);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	state  =  isVariableReadBeforeKill(child,  variable,  null);	  state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
113	[BUG]  [BUGGY]  state  =  isVariableReadBeforeKill(n,  variable);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  state  =  isVariableReadBeforeKill(n,  variable);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	state  =  isVariableReadBeforeKill(n,  variable);	  state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
114	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MIN_LIVE  ||  state!=  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  MIN_LIVE  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MIN_LIVE  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MIN_LIVE  ||  state!=  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.SEMI_LIVE    ||    state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  MIN_LIVE	92	None	replace
115	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FOR_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FOR_LIVE  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.FOR_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.FOR_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.FOR_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR_LIVE	38	None	replace
116	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR_LIVE  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FOR_LIVE  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.FOR_LIVE  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FOR_LIVE  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.FOR_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR_LIVE	38	None	replace
117	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR_LIVE  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FOR_LIVE  [FE]                      AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.FOR_LIVE  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FOR_LIVE  &&  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.FOR_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR_LIVE	38	None	replace
118	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MINUTE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  MINUTE  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MINUTE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MINUTE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MINUTE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MINUTE	9	None	replace
119	[BUG]  [BUGGY]  if(parent!=  null)  {  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(parent!=  null)  {  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(parent!=  null)  {  if(state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.READ)    {    if(state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	replace
120	[BUG]  [BUGGY]  if(parent!=  null)  {  if(state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(parent!=  null)  {  if(state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(parent!=  null)  {  if(state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.READ)    {    if(state!=    VariableLiveness.READ)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	30	None	replace
121	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child,  this);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  NodeTraversal.traverse(compiler,  child,  this);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	NodeTraversal.traverse(compiler,  child,  this);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
122	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  variable);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  variable);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	NodeTraversal.traverse(compiler,  n,  this,  variable);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
123	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  state);  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  state);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	NodeTraversal.traverse(compiler,  n,  this,  state);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
124	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  KILL);  [CE]  illegal  start  of  type  [FE]                                        AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  KILL);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	NodeTraversal.traverse(compiler,  n,  KILL);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
125	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  child);  [CE]  illegal  start  of  type  [FE]                                          AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  child);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	NodeTraversal.traverse(compiler,  n,  this,  child);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
126	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  [CE]  illegal  start  of  type  [FE]                                            AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	NodeTraversal.traverse(compiler,  n,  null);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
127	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE)  {  If(state!=  VariableLiveness.KILL)  {  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE)  {  If(state!=  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE)  {  If(state!=  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.KILL)    {    If(state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
128	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  If(state!=  VariableLiveness.KILL)  {  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  If(state!=  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.MAYBE_LIVE)  {  If(state!=  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.KILL)    {    If(state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
129	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE)  {  If(state  ==  VariableLiveness.KILL)  {  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE)  {  If(state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE)  {  If(state  ==  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.KILL)    {    If(state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
130	[BUG]  [BUGGY]  If(state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  If(state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	If(state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.KILL)    {    If(state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
131	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE)  {  If(state!=  VariableLiveness.MILLISECOND)  {  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE)  {  If(state!=  VariableLiveness.MILLISECOND)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE)  {  If(state!=  VariableLiveness.MILLISECOND)  {	  if(state!=    VariableLiveness.KILL)    {    If(state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
132	[BUG]  [BUGGY]  if(parent  ==  null)  {  if(state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(parent  ==  null)  {  if(state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(parent  ==  null)  {  if(state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.READ)    {    if(state    >=    VariableLiveness.READ)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	32	None	replace
133	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MILL_LIVE)  {  [CE]  cannot  find  symbol  MILL_LIVE  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MILL_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MILL_LIVE)  {	  if(state!=    VariableLiveness.MILL_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILL_LIVE	97	None	replace
134	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MILL_FOR)  {  [CE]  cannot  find  symbol  MILL_FOR  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MILL_FOR)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MILL_FOR)  {	  if(state!=    VariableLiveness.MILL_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILL_FOR	97	None	replace
135	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.MAYBE_LIVE    &&    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state!=  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	110	None	add
136	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionFailedError    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.MAYBE_LIVE    &&    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state  ==  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	110	None	add
137	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.MAYBE_LIVE  &&  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionFailedError    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.MAYBE_LIVE  &&  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.MAYBE_LIVE    &&    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state!=  VariableLiveness.MAYBE_LIVE  &&  state  ==  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	110	None	add
138	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state  >=  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionFailedError    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state  >=  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.MAYBE_LIVE    &&    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state  >=  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	110	None	add
139	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.MAYBE_LIVE  &&  state  >=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.MAYBE_LIVE  &&  state  >=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.MAYBE_LIVE    &&    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state!=  VariableLiveness.MAYBE_LIVE  &&  state  >=  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	110	None	add
140	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.MAYBE_LIVE  &&  state  >>  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.MAYBE_LIVE  &&  state  >>  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.MAYBE_LIVE    &&    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state!=  VariableLiveness.MAYBE_LIVE  &&  state  >>  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	110	None	add
141	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state  >>  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state  >>  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.MAYBE_LIVE    &&    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state  >>  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	110	None	add
142	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  MOVED  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MOVED)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MOVED)  {	  if(state!=    VariableLiveness.MOVED    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	8	None	replace
143	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MOVED  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  MOVED  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MOVED  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MOVED  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MOVED    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	8	None	replace
144	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MILLIS_LIVE)  {  [CE]  cannot  find  symbol  MILLIS_LIVE  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MILLIS_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MILLIS_LIVE)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.KILL_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLIS_LIVE	21	None	replace
145	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  MOVED  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MOVED)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.MOVED)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE)    {    if(state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	29	None	replace
146	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.DEAD)  {  [CE]  cannot  find  symbol  DEAD  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.DEAD)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.DEAD)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.DEAD)    {    	non-compiled	[CE]  cannot  find  symbol  DEAD	112	None	replace
147	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.DEAD)  {  [CE]  cannot  find  symbol  DEAD  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.DEAD)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.DEAD)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.DEAD)    {    	non-compiled	[CE]  cannot  find  symbol  DEAD	112	None	replace
148	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MIN_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  MIN_LIVE  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MIN_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MIN_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.DEAD)    {    	non-compiled	[CE]  cannot  find  symbol  MIN_LIVE	112	None	replace
149	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.SECOND)  {  [CE]  cannot  find  symbol  SECOND  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.SECOND)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.SECOND)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.DEAD)    {    	non-compiled	[CE]  cannot  find  symbol  SECOND	112	None	replace
150	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MILLIS)  {  [CE]  cannot  find  symbol  MILLIS  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MILLIS)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MILLIS)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.DEAD)    {    	non-compiled	[CE]  cannot  find  symbol  MILLIS	112	None	replace
151	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
152	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  liveness);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  liveness);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
153	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
154	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
155	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  true);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  true);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  true);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
156	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MOVE_LIVE);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MOVE_LIVE);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MOVE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
157	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	add
158	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	add
159	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	add
160	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  >>  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  >>  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  >>  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	add
161	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  If(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  If(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    If(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
162	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.MIN_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.MIN_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state  ==  VariableLiveness.MIN_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	add
163	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  FOR  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.FOR)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.FOR)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.FOR)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	70	None	replace
164	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  FOR  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.FOR)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.FOR)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.FOR)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	70	None	replace
165	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MOVED  ||  state!=  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  MOVED  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MOVED  ||  state!=  VariableLiveness.FOR)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MOVED  ||  state!=  VariableLiveness.FOR)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.FOR)    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	70	None	replace
166	[BUG]  [BUGGY]  if(state!=  VariableLiveness.SEMI_LIVE  ||  state!=  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.SEMI_LIVE  ||  state!=  VariableLiveness.FOR)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.SEMI_LIVE  ||  state!=  VariableLiveness.FOR)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.FOR)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	70	None	replace
167	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  &&  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state!=  VariableLiveness.MAYBE_LIVE  &&  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	2	61	replace
168	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  &&  state  ==  VariableLiveness.MAYBE_LIVE)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  &&  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  &&  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	2	61	replace
169	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ)  {  if(state  ==  VariableLiveness.READ)  {  [CE]  reached  end  of  file  while  parsing  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ)  {  if(state  ==  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.READ)    {    if(state  ==  VariableLiveness.READ)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	add
170	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ)  {  if(state!=  VariableLiveness.READ)  {  [CE]  reached  end  of  file  while  parsing  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ)  {  if(state!=  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.READ)    {    if(state!=  VariableLiveness.READ)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	add
171	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ)  {  If(state  ==  VariableLiveness.READ)  {  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ)  {  If(state  ==  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.READ)    {    If(state  ==  VariableLiveness.READ)  {	  	non-compiled	[CE]  ';'  expected	43	None	add
172	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ)  {  if(state  >=  VariableLiveness.READ)  {  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ)  {  if(state  >=  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.READ)    {    if(state  >=  VariableLiveness.READ)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	add
173	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ)  {  if(state  >>  VariableLiveness.READ)  {  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ)  {  if(state  >>  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.READ)    {    if(state  >>  VariableLiveness.READ)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	add
174	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ)  {  while(state  ==  VariableLiveness.READ)  {  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ)  {  while(state  ==  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.READ)    {    while(state  ==  VariableLiveness.READ)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	add
175	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.READ)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.READ)    {    	compilable	  [FE]  AssertionFailedError  	65	57	replace
176	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.READ)  {  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.READ)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.READ)    {    	compilable	  [FE]  AssertionFailedError  	65	57	replace
177	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state!=  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.READ)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.READ)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	65	61	replace
178	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.READ)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.READ)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.READ)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	65	61	replace
179	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  >=  VariableLiveness.READ)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  >=  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  >=  VariableLiveness.READ)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.READ)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	65	None	replace
180	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MOVED  ||  state!=  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  MOVED  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MOVED  ||  state!=  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MOVED  ||  state!=  VariableLiveness.READ)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	65	None	replace
181	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  [CE]  reached  end  of  file  while  parsing  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.READ)    {    if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	64	None	add
182	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  [CE]  reached  end  of  file  while  parsing  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.READ)    {    if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	64	None	add
183	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.READ)  {  [CE]  reached  end  of  file  while  parsing  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.READ)    {    if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.READ)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	64	None	add
184	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  if(state  >=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  if(state  >=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.READ)    {    if(state  >=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	64	None	add
185	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  >=  VariableLiveness.READ)  {  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  >=  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.READ)    {    if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  >=  VariableLiveness.READ)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	64	None	add
186	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  If(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  If(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.READ)    {    If(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {	  	non-compiled	[CE]  ';'  expected	64	None	add
187	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  >>  VariableLiveness.READ)  {  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  >>  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.READ)    {    if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  >>  VariableLiveness.READ)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	64	None	add
188	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FOR  &&  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.FOR  &&  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.FOR  &&  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	4	None	replace
189	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.FOR  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FOR  &&  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.FOR    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	36	None	replace
190	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FOR  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.FOR    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	36	None	replace
191	[BUG]  [BUGGY]  if(variable!=  VariableLiveness.FOR  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(variable!=  VariableLiveness.FOR  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(variable!=  VariableLiveness.FOR  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.FOR    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	36	None	replace
192	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FOR  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.FOR  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.FOR  &&  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.FOR    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	36	None	replace
193	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  null  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state!=  null  &&  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    null    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  AssertionFailedError  	69	57	replace
194	[BUG]  [BUGGY]  if(state!=  null  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  null  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  null  &&  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    null    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  AssertionFailedError  	69	57	replace
195	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  null  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state!=  null  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    null    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	69	61	replace
196	[BUG]  [BUGGY]  if(state!=  null  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  null  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  null  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    null    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	69	61	replace
197	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  null  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state  ==  null  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    null    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  AssertionFailedError  	69	57	replace
198	[BUG]  [BUGGY]  if(state  ==  null  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [FE]  AssertionFailedError  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  null  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  null  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    null    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  AssertionFailedError  	69	57	replace
199	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  null  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state  ==  null  &&  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    null    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	69	61	replace
200	[BUG]  [BUGGY]  if(state  ==  null  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  null  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  null  &&  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    null    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	69	61	replace
201	[BUG]  [BUGGY]  if(state!=  null  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  null  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  null  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    null    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	69	None	replace
202	[BUG]  [BUGGY]  if(state!=  null  ||  state!=  VariableLiveness.MIN_LIVE)  {  [CE]  cannot  find  symbol  MIN_LIVE  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  null  ||  state!=  VariableLiveness.MIN_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  null  ||  state!=  VariableLiveness.MIN_LIVE)  {	  if(state!=    null    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MIN_LIVE	69	None	replace
203	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MILLI_LIVE)  {  [CE]  cannot  find  symbol  MILLI_LIVE  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MILLI_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MILLI_LIVE)  {	  if(state!=    VariableLiveness.MILLI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLI_LIVE	98	None	replace
204	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MILLI_FOR)  {  [CE]  cannot  find  symbol  MILLI_FOR  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MILLI_FOR)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MILLI_FOR)  {	  if(state!=    VariableLiveness.MILLI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLI_FOR	98	None	replace
205	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MILLI_LIVE)  {  [CE]  cannot  find  symbol  MILLI_LIVE  [FE]                      AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MILLI_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MILLI_LIVE)  {	  if(state!=    VariableLiveness.MILLI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLI_LIVE	98	None	replace
206	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL,  state);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL,  state);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Preconditions.checkState(child.getType()  ==  Token.CALL,  state);	  Preconditions.checkState(child.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
207	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.CALL);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.CALL);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.CALL);	  Preconditions.checkState(child.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
208	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()!=  Token.CALL);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Preconditions.checkState(child.getType()!=  Token.CALL);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Preconditions.checkState(child.getType()!=  Token.CALL);	  Preconditions.checkState(child.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
209	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  state  ==  VariableLiveness.MAYBE_LIVE);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  state  ==  VariableLiveness.MAYBE_LIVE);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Preconditions.checkState(child.getType()  ==  Token.CALL  ||  state  ==  VariableLiveness.MAYBE_LIVE);	  Preconditions.checkState(child.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
210	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Preconditions.checkState(n.getType()  ==  Token.CALL);	  Preconditions.checkState(child.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
211	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.GETPROP);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.GETPROP);	  Preconditions.checkState(child.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
212	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR  &&  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.FOR  &&  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FOR  &&  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.FOR    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	106	None	replace
213	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.FOR    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	106	None	replace
214	[BUG]  [BUGGY]  if(variable!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(variable!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(variable!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.FOR    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	106	None	replace
215	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]        AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FOR  ||  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.FOR    &&    state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	93	None	replace
216	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR  &&  state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]          AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.FOR  &&  state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FOR  &&  state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.FOR    &&    state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	93	None	replace
217	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FOR  ||  state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.FOR    &&    state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	93	None	replace
218	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FOR  ||  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.FOR  ||  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.FOR  ||  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.FOR    &&    state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	93	None	replace
219	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.FOR    &&    state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	93	None	replace
220	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.READ    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	add
221	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionFailedError    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.READ    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state!=  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	add
222	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.READ  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionFailedError    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.READ  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.READ    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state  ==  VariableLiveness.READ  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	add
223	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.READ  ||  state  >>  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionFailedError    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.READ  ||  state  >>  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.READ    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state  ==  VariableLiveness.READ  ||  state  >>  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	add
224	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  If(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  If(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.READ    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    If(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  ';'  expected	45	None	add
225	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state  >=  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state  >=  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.READ    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state  >=  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	add
226	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.READ  ||  state  [Delete]  VariableLiveness.MAYBE_LIVE)  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.READ  ||  state  [Delete]  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.READ    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state  ==  VariableLiveness.READ  ||  state  [Delete]  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  ')'  expected	45	None	add
227	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR  &&  state.equals(VariableLiveness.MAYBE_LIVE))  {  [CE]  cannot  find  symbol  FOR  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.FOR  &&  state.equals(VariableLiveness.MAYBE_LIVE))  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FOR  &&  state.equals(VariableLiveness.MAYBE_LIVE))  {	  if(state!=    VariableLiveness.FOR    ||    state.equals(VariableLiveness.MAYBE_LIVE))    {    	non-compiled	[CE]  cannot  find  symbol  FOR	71	None	replace
228	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR  ||  variable.equals(VariableLiveness.MAYBE_LIVE))  {  [CE]  cannot  find  symbol  FOR  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.FOR  ||  variable.equals(VariableLiveness.MAYBE_LIVE))  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FOR  ||  variable.equals(VariableLiveness.MAYBE_LIVE))  {	  if(state!=    VariableLiveness.FOR    ||    state.equals(VariableLiveness.MAYBE_LIVE))    {    	non-compiled	[CE]  cannot  find  symbol  FOR	71	None	replace
229	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FOR  &&  state.equals(VariableLiveness.MAYBE_LIVE))  {  [CE]  cannot  find  symbol  FOR  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.FOR  &&  state.equals(VariableLiveness.MAYBE_LIVE))  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.FOR  &&  state.equals(VariableLiveness.MAYBE_LIVE))  {	  if(state!=    VariableLiveness.FOR    ||    state.equals(VariableLiveness.MAYBE_LIVE))    {    	non-compiled	[CE]  cannot  find  symbol  FOR	71	None	replace
230	[BUG]  [BUGGY]  if(variable!=  VariableLiveness.FOR  ||  state.equals(VariableLiveness.MAYBE_LIVE))  {  [CE]  cannot  find  symbol  FOR  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(variable!=  VariableLiveness.FOR  ||  state.equals(VariableLiveness.MAYBE_LIVE))  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(variable!=  VariableLiveness.FOR  ||  state.equals(VariableLiveness.MAYBE_LIVE))  {	  if(state!=    VariableLiveness.FOR    ||    state.equals(VariableLiveness.MAYBE_LIVE))    {    	non-compiled	[CE]  cannot  find  symbol  FOR	71	None	replace
231	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state.equals(VariableLiveness.MAYBE_LIVE,  variable))  {  [CE]  cannot  find  symbol  FOR  [FE]                      AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state.equals(VariableLiveness.MAYBE_LIVE,  variable))  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FOR  ||  state.equals(VariableLiveness.MAYBE_LIVE,  variable))  {	  if(state!=    VariableLiveness.FOR    ||    state.equals(VariableLiveness.MAYBE_LIVE))    {    	non-compiled	[CE]  cannot  find  symbol  FOR	71	None	replace
232	[BUG]  [BUGGY]  if(child!=  VariableLiveness.FOR  ||  state.equals(VariableLiveness.MAYBE_LIVE))  {  [CE]  cannot  find  symbol  FOR  [FE]                        AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(child!=  VariableLiveness.FOR  ||  state.equals(VariableLiveness.MAYBE_LIVE))  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(child!=  VariableLiveness.FOR  ||  state.equals(VariableLiveness.MAYBE_LIVE))  {	  if(state!=    VariableLiveness.FOR    ||    state.equals(VariableLiveness.MAYBE_LIVE))    {    	non-compiled	[CE]  cannot  find  symbol  FOR	71	None	replace
233	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.READ)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.READ)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	67	60	replace
234	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.READ)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.READ)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.READ)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	67	60	replace
235	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state  ==  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.READ)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.READ)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	67	61	replace
236	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.READ)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.READ)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.READ)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	67	61	replace
237	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MOVED  ||  state!=  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  MOVED  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MOVED  ||  state!=  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.MOVED  ||  state!=  VariableLiveness.READ)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	67	None	replace
238	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.KILL_LIVE)  {  If(state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.KILL_LIVE)  {  If(state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.KILL_LIVE)  {  If(state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE)    {    If(state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
239	[BUG]  [BUGGY]  If(state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  If(state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	If(state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE)    {    If(state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
240	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.KILL_LIVE)  {  If(state  ==  VariableLiveness.KILL_LIVE)  {  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.KILL_LIVE)  {  If(state  ==  VariableLiveness.KILL_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.KILL_LIVE)  {  If(state  ==  VariableLiveness.KILL_LIVE)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE)    {    If(state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
241	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE)  {  If(state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE)  {  If(state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE)  {  If(state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.READ)    {    If(state!=    VariableLiveness.READ)    {    	non-compiled	[CE]  ';'  expected	33	None	replace
242	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE)  {  If(state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE)  {  If(state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE)  {  If(state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.READ)    {    If(state!=    VariableLiveness.READ)    {    	non-compiled	[CE]  ';'  expected	33	None	replace
243	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  If(state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  If(state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.MAYBE_LIVE)  {  If(state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.READ)    {    If(state!=    VariableLiveness.READ)    {    	non-compiled	[CE]  ';'  expected	33	None	replace
244	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE)  {  If(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE)  {  If(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE)  {  If(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.READ)    {    If(state!=    VariableLiveness.READ)    {    	non-compiled	[CE]  ';'  expected	33	None	replace
245	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE)  {  If(state!=  VariableLiveness.READ)  {  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE)  {  If(state!=  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE)  {  If(state!=  VariableLiveness.READ)  {	  if(state!=    VariableLiveness.READ)    {    If(state!=    VariableLiveness.READ)    {    	non-compiled	[CE]  ';'  expected	33	None	replace
246	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE)  {  If(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE)  {  If(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE)  {  If(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.READ)    {    If(state!=    VariableLiveness.READ)    {    	non-compiled	[CE]  ';'  expected	33	None	replace
247	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MIN_LIVE  ||  state!=  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  MIN_LIVE  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MIN_LIVE  ||  state!=  VariableLiveness.MOVED)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MIN_LIVE  ||  state!=  VariableLiveness.MOVED)  {	  if(state!=    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  MIN_LIVE	90	None	replace
248	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	add
249	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	add
250	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	add
251	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  If(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  If(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    If(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  ';'  expected	41	None	add
252	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.READ  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.READ  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    if(state  ==  VariableLiveness.READ  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	add
253	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state  >=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state  >=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    if(state  >=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	add
254	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MINUTE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MINUTE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MINUTE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	add
255	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state    >=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	60	60	replace
256	[BUG]  [BUGGY]  if(state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.KILL)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state    >=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	60	60	replace
257	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.MAYBE_LIVE    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
258	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.MAYBE_LIVE    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
259	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state  >=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state  >=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.MAYBE_LIVE    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    if(state  >=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
260	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  If(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  If(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.MAYBE_LIVE    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    If(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
261	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state  >>  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state  >>  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.MAYBE_LIVE    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    if(state  >>  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
262	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.MIN_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.MIN_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.MAYBE_LIVE    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    if(state!=  VariableLiveness.MIN_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
263	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.MINIVE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.MINIVE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.MAYBE_LIVE    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    if(state!=  VariableLiveness.MINIVE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
264	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MIN_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  MIN_LIVE  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MIN_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MIN_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MIN_LIVE    ||    state!=    VariableLiveness.FOR)    {    	non-compiled	[CE]  cannot  find  symbol  MIN_LIVE	72	None	replace
265	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MIN_LIVE  ||  state  ==  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  MIN_LIVE  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MIN_LIVE  ||  state  ==  VariableLiveness.FOR)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MIN_LIVE  ||  state  ==  VariableLiveness.FOR)  {	  if(state!=    VariableLiveness.MIN_LIVE    ||    state!=    VariableLiveness.FOR)    {    	non-compiled	[CE]  cannot  find  symbol  MIN_LIVE	72	None	replace
266	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    AssertionFailedError    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state    ==    VariableLiveness.KILL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	52	61	replace
267	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    AssertionFailedError    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state    ==    VariableLiveness.KILL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	52	61	replace
268	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      AssertionFailedError    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  &&  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state!=  VariableLiveness.MAYBE_LIVE  &&  state  ==  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state    ==    VariableLiveness.KILL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	52	61	replace
269	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  &&  state  ==  VariableLiveness.KILL)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      AssertionFailedError    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  &&  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  &&  state  ==  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state    ==    VariableLiveness.KILL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	52	61	replace
270	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MIN_VALUE)  {  [CE]  cannot  find  symbol  MIN_VALUE  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MIN_VALUE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MIN_VALUE)  {	  if(state!=    VariableLiveness.MIN_VALUE    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MIN_VALUE	100	None	replace
271	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MIN_VALUE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  MIN_VALUE  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MIN_VALUE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.MIN_VALUE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MIN_VALUE    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MIN_VALUE	100	None	replace
272	[BUG]  [BUGGY]  if(state!=  VariableLiveness.KILL_VALUE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  KILL_VALUE  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.KILL_VALUE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.KILL_VALUE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MIN_VALUE    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  KILL_VALUE	100	None	replace
273	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MILLIS  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  MILLIS  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MILLIS  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MILLIS  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MIN_VALUE    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLIS	100	None	replace
274	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MILLBE_READ)  {  [CE]  cannot  find  symbol  MILLBE_READ  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MILLBE_READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MILLBE_READ)  {	  if(state!=    VariableLiveness.MILLBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLBE_READ	17	None	replace
275	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MILLBE_FOR)  {  [CE]  cannot  find  symbol  MILLBE_FOR  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MILLBE_FOR)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MILLBE_FOR)  {	  if(state!=    VariableLiveness.MILLBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLBE_FOR	17	None	replace
276	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	42	61	replace
277	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	42	61	replace
278	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  &&  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state  ==  VariableLiveness.READ  &&  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	42	61	replace
279	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  &&  state  ==  VariableLiveness.MAYBE_LIVE)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  &&  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.READ  &&  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	42	61	replace
280	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.KILL)  {  if(state  ==  VariableLiveness.KILL)  {  [CE]  reached  end  of  file  while  parsing  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.KILL)  {  if(state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.KILL)    {    if(state  ==  VariableLiveness.KILL)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	88	None	add
281	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.KILL)  {  [CE]  reached  end  of  file  while  parsing  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.KILL)    {    if(state!=  VariableLiveness.KILL)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	88	None	add
282	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.KILL)  {  If(state  ==  VariableLiveness.KILL)  {  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.KILL)  {  If(state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.KILL)    {    If(state  ==  VariableLiveness.KILL)  {	  	non-compiled	[CE]  ';'  expected	88	None	add
283	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.KILL)  {  if(state  >=  VariableLiveness.KILL)  {  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.KILL)  {  if(state  >=  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.KILL)    {    if(state  >=  VariableLiveness.KILL)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	88	None	add
284	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.KILL)  {  if(state  ==  VariableLiveness.SKILL)  {  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.KILL)  {  if(state  ==  VariableLiveness.SKILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.KILL)    {    if(state  ==  VariableLiveness.SKILL)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	88	None	add
285	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.MAYBE_LIVE    ||    state    ==    VariableLiveness.KILL)    {    if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	51	None	add
286	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL)  {  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionFailedError    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL)  {  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.MAYBE_LIVE    ||    state    ==    VariableLiveness.KILL)    {    if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	51	None	add
287	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL)  {  if(state  >=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionFailedError    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL)  {  if(state  >=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.MAYBE_LIVE    ||    state    ==    VariableLiveness.KILL)    {    if(state  >=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	51	None	add
288	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL)  {  If(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL)  {  If(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.MAYBE_LIVE    ||    state    ==    VariableLiveness.KILL)    {    If(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL)  {	  	non-compiled	[CE]  ';'  expected	51	None	add
289	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL)  {  if(state  >>  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL)  {  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL)  {  if(state  >>  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.MAYBE_LIVE    ||    state    ==    VariableLiveness.KILL)    {    if(state  >>  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	51	None	add
290	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.MIN_LIVE  ||  state  ==  VariableLiveness.KILL)  {  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.MIN_LIVE  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.MAYBE_LIVE    ||    state    ==    VariableLiveness.KILL)    {    if(state!=  VariableLiveness.MIN_LIVE  ||  state  ==  VariableLiveness.KILL)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	51	None	add
291	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MILLI_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  MILLI_LIVE  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MILLI_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MILLI_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MILLIS_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLI_LIVE	37	None	replace
292	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MILLE_READ)  {  [CE]  cannot  find  symbol  MILLE_READ  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MILLE_READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MILLE_READ)  {	  if(state!=    VariableLiveness.MILLE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLE_READ	105	None	replace
293	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.BOTTOM)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.BOTTOM)  {	  if(state!=    VariableLiveness.BOTTOM    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	104	None	replace
294	[BUG]  [BUGGY]  if(state!=  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.BOTTOM    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	104	None	replace
295	[BUG]  [BUGGY]  if(state!=  VariableLiveness.KILL_LIVE  ||  state  ==  VariableLiveness.KILL_LIVE)  {  [CE]  cannot  find  symbol  KILL_LIVE  [FE]          AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.KILL_LIVE  ||  state  ==  VariableLiveness.KILL_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.KILL_LIVE  ||  state  ==  VariableLiveness.KILL_LIVE)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state    ==    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  KILL_LIVE	56	None	replace
296	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state!=  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.KILL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	48	52	replace
297	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.KILL)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.KILL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	48	52	replace
298	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MINUS  ||  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  MINUS  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MINUS  ||  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MINUS  ||  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  MINUS	48	None	replace
299	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  >=  VariableLiveness.KILL)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  >=  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  >=  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	48	None	replace
300	[BUG]  [BUGGY]  Predicates.checkNotNull(variable);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Predicates.checkNotNull(variable);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Predicates.checkNotNull(variable);	  Predicates.checkNotNull(child);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
301	[BUG]  [BUGGY]  Predicates.checkNotNull(state);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Predicates.checkNotNull(state);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Predicates.checkNotNull(state);	  Predicates.checkNotNull(child);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
302	[BUG]  [BUGGY]  Predicates.checkNotNull(child,  state);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Predicates.checkNotNull(child,  state);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Predicates.checkNotNull(child,  state);	  Predicates.checkNotNull(child);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
303	[BUG]  [BUGGY]  Predicates.checkState(child.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Predicates.checkState(child.getType()  ==  Token.NAME);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Predicates.checkState(child.getType()  ==  Token.NAME);	  Predicates.checkNotNull(child);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
304	[BUG]  [BUGGY]  Predicates.checkNotNull(parent);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Predicates.checkNotNull(parent);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Predicates.checkNotNull(parent);	  Predicates.checkNotNull(child);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
305	[BUG]  [BUGGY]  Predicates.checkState(child.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Predicates.checkState(child.getType()  ==  Token.FUNCTION);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Predicates.checkState(child.getType()  ==  Token.FUNCTION);	  Predicates.checkNotNull(child);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
306	[BUG]  [BUGGY]  if(variable!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  incomparable  types:  String  and  VariableLiveness  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(variable!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(variable!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MINUS_LIVE)    {    	non-compiled	[CE]  incomparable  types:  String  and  VariableLiveness	94	None	replace
307	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  variable!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  incomparable  types:  String  and  VariableLiveness  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  variable!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  ||  variable!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state    >=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  incomparable  types:  String  and  VariableLiveness	5	None	replace
308	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  >>  VariableLiveness.MAYBE_LIVE)  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  >>  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  >>  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state    >=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	5	None	replace
309	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.KILL  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state!=  VariableLiveness.KILL  &&  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.KILL    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	7	52	replace
310	[BUG]  [BUGGY]  if(state!=  VariableLiveness.KILL  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.KILL  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.KILL  &&  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.KILL    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	7	52	replace
311	[BUG]  [BUGGY]  if(state!=  VariableLiveness.KILL  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.KILL  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.KILL  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.KILL    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	7	None	replace
312	[BUG]  [BUGGY]  if(state  >=  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  >=  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  >=  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.KILL    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	7	None	replace
313	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  [CE]  reached  end  of  file  while  parsing  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.KILL)    {    if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	49	None	add
314	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  [CE]  reached  end  of  file  while  parsing  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.KILL)    {    if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	49	None	add
315	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  If(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  If(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.KILL)    {    If(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {	  	non-compiled	[CE]  ';'  expected	49	None	add
316	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  >=  VariableLiveness.KILL)  {  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  >=  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.KILL)    {    if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  >=  VariableLiveness.KILL)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	49	None	add
317	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  >>  VariableLiveness.KILL)  {  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  >>  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.KILL)    {    if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  >>  VariableLiveness.KILL)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	49	None	add
318	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  if(state  ==  VariableLiveness.MINUTE_LIVE  ||  state!=  VariableLiveness.KILL)  {  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  if(state  ==  VariableLiveness.MINUTE_LIVE  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.KILL)    {    if(state  ==  VariableLiveness.MINUTE_LIVE  ||  state!=  VariableLiveness.KILL)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	49	None	add
319	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  if(state  ==  VariableLiveness.MIN_LIVE  ||  state!=  VariableLiveness.KILL)  {  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  if(state  ==  VariableLiveness.MIN_LIVE  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.KILL)    {    if(state  ==  VariableLiveness.MIN_LIVE  ||  state!=  VariableLiveness.KILL)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	49	None	add
320	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.READ  &&  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state!=  VariableLiveness.READ  &&  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	40	61	replace
321	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  &&  state  ==  VariableLiveness.MAYBE_LIVE)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.READ  &&  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.READ  &&  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	40	61	replace
322	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable,  n);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable,  n);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	State  state  =  isVariableReadBeforeKill(child,  variable,  n);	  State    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
323	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable,  liveness);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable,  liveness);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	State  state  =  isVariableReadBeforeKill(child,  variable,  liveness);	  State    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
324	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  n);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  n);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	State  state  =  isVariableReadBeforeKill(child,  n);	  State    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
325	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable,  null);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable,  null);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	State  state  =  isVariableReadBeforeKill(child,  variable,  null);	  State    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
326	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(n,  variable);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  State  state  =  isVariableReadBeforeKill(n,  variable);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	State  state  =  isVariableReadBeforeKill(n,  variable);	  State    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
327	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable,  true);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable,  true);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	State  state  =  isVariableReadBeforeKill(child,  variable,  true);	  State    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
328	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable,  REGEXP);  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable,  REGEXP);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	State  state  =  isVariableReadBeforeKill(child,  variable,  REGEXP);	  State    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
329	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child,  state,  variable);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  NodeTraversal.traverse(compiler,  child,  state,  variable);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	NodeTraversal.traverse(compiler,  child,  state,  variable);	  NodeTraversal.traverse(compiler,    child,    state);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
330	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child,  state,  liveness);  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  NodeTraversal.traverse(compiler,  child,  state,  liveness);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	NodeTraversal.traverse(compiler,  child,  state,  liveness);	  NodeTraversal.traverse(compiler,    child,    state);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
331	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child,  state,  matchRemovableAssignsElimination);  [CE]  illegal  start  of  type  [FE]                                        AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  NodeTraversal.traverse(compiler,  child,  state,  matchRemovableAssignsElimination);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	NodeTraversal.traverse(compiler,  child,  state,  matchRemovableAssignsElimination);	  NodeTraversal.traverse(compiler,    child,    state);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
332	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child,  state,  n);  [CE]  illegal  start  of  type  [FE]                                          AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  NodeTraversal.traverse(compiler,  child,  state,  n);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	NodeTraversal.traverse(compiler,  child,  state,  n);	  NodeTraversal.traverse(compiler,    child,    state);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
333	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child,  state,  dataArea);  [CE]  illegal  start  of  type  [FE]                                            AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  NodeTraversal.traverse(compiler,  child,  state,  dataArea);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	NodeTraversal.traverse(compiler,  child,  state,  dataArea);	  NodeTraversal.traverse(compiler,    child,    state);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
334	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child,  state,  matchRemovableAssigns);  [CE]  illegal  start  of  type  [FE]                                              AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  NodeTraversal.traverse(compiler,  child,  state,  matchRemovableAssigns);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	NodeTraversal.traverse(compiler,  child,  state,  matchRemovableAssigns);	  NodeTraversal.traverse(compiler,    child,    state);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
335	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MINUS  ||  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.SEMI_BACKSLASH)  {  [CE]  cannot  find  symbol  MINUS  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MINUS  ||  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.SEMI_BACKSLASH)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MINUS  ||  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.SEMI_BACKSLASH)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.SEMI_BACKSLASH)    {    	non-compiled	[CE]  cannot  find  symbol  MINUS	18	None	replace
336	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MIN_LIVE)  {  [CE]  cannot  find  symbol  MIN_LIVE  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MIN_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.MIN_LIVE)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE)    {    if(state    ==    VariableLiveness.MIN_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MIN_LIVE	99	None	replace
337	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MIN_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  MIN_LIVE  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MIN_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.MIN_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE)    {    if(state    ==    VariableLiveness.MIN_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MIN_LIVE	99	None	replace
338	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MIN_LIVE)  {  [CE]  cannot  find  symbol  MIN_LIVE  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MIN_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MIN_LIVE)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE)    {    if(state    ==    VariableLiveness.MIN_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MIN_LIVE	99	None	replace
339	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    AssertionFailedError    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state  ==  VariableLiveness.READ  &&  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state    ==    VariableLiveness.READ    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	46	52	replace
340	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    AssertionFailedError    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.READ  &&  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state    ==    VariableLiveness.READ    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	46	52	replace
341	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]      AssertionFailedError    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.READ  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {	  if(state    ==    VariableLiveness.READ    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	46	None	replace
342	[BUG]  [BUGGY]  if(n!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(n!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(n!=  VariableLiveness.MAYBE_LIVE)  {	  if(value!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	22	None	replace
343	[BUG]  [BUGGY]  if(child!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(child!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(child!=  VariableLiveness.MAYBE_LIVE)  {	  if(value!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	22	None	replace
344	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MILLISECOND)  {  [CE]  cannot  find  symbol  MILLISECOND  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MILLISECOND)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.MILLISECOND)  {	  if(state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  MILLISECOND	89	None	replace
345	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.SEMI_LIVE)  {	  if(state    ==    VariableLiveness.SEMI_LIVE    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	101	None	replace
346	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MOVED  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  MOVED  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MOVED  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.MOVED  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state    ==    VariableLiveness.SEMI_LIVE    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	101	None	replace
347	[BUG]  [BUGGY]  if(state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.KILL    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
348	[BUG]  [BUGGY]  if(state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.KILL    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
349	[BUG]  [BUGGY]  if(state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.KILL    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
350	[BUG]  [BUGGY]  if(state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.KILL  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.KILL  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.KILL    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state!=  VariableLiveness.KILL  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
351	[BUG]  [BUGGY]  if(state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.KILL  ||  state  >>  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.KILL  ||  state  >>  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.KILL    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state!=  VariableLiveness.KILL  ||  state  >>  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
352	[BUG]  [BUGGY]  if(state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state  >=  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state  >=  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.KILL    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state  >=  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
353	[BUG]  [BUGGY]  if(state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  If(state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  If(state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.KILL    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    If(state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  ';'  expected	6	None	add
354	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  [CE]  reached  end  of  file  while  parsing  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.KILL)    {    if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	add
355	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  [CE]  reached  end  of  file  while  parsing  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.KILL)    {    if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	add
356	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL)  {  [CE]  reached  end  of  file  while  parsing  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.KILL)    {    if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	add
357	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  If(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  If(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.KILL)    {    If(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {	  	non-compiled	[CE]  ';'  expected	47	None	add
358	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  >=  VariableLiveness.KILL)  {  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  >=  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.KILL)    {    if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  >=  VariableLiveness.KILL)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	add
359	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  if(state  >=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  if(state  >=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.KILL)    {    if(state  >=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	add
360	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.MIN_LIVE  ||  state!=  VariableLiveness.KILL)  {  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.MIN_LIVE  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.KILL)    {    if(state!=  VariableLiveness.MIN_LIVE  ||  state!=  VariableLiveness.KILL)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	add
361	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MILLISECOND  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  MILLISECOND  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MILLISECOND  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MILLISECOND  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MILLISECOND    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLISECOND	53	None	replace
362	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MILLISECOND  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  MILLISECOND  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MILLISECOND  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.MILLISECOND  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MILLISECOND    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLISECOND	53	None	replace
363	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    AssertionFailedError    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state  ==  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    &&    state!=    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	111	61	replace
364	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    AssertionFailedError    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    &&    state!=    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	111	61	replace
365	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state  ==  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.KILL)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.KILL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	50	61	replace
366	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.KILL)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.KILL)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.KILL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	50	61	replace
367	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MOVED  ||  state!=  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  MOVED  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MOVED  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.MOVED  ||  state!=  VariableLiveness.KILL)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	50	None	replace
368	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.MINIVE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.MINIVE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state  ==  VariableLiveness.MINIVE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	add
369	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.MINUTE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.MINUTE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state  ==  VariableLiveness.MINUTE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	add
370	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  ||  state!=  null);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  ||  state!=  null);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME  ||  state!=  null);	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
371	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MINUS  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  MINUS  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MINUS  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MINUS  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state    ==    VariableLiveness.KILL_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MINUS	23	None	replace
372	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  null)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state!=  null)  {	  if(state!=    VariableLiveness.READ)    {    if(state!=    VariableLiveness.READ)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	30	61	replace
373	[BUG]  [BUGGY]  if(state!=  null)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  null)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  null)  {	  if(state!=    VariableLiveness.READ)    {    if(state!=    VariableLiveness.READ)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	30	61	replace
374	[BUG]  [BUGGY]  if(state!=  null)  {  If(state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  null)  {  If(state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  null)  {  If(state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.READ)    {    If(state!=    VariableLiveness.READ)    {    	non-compiled	[CE]  ';'  expected	33	None	replace
375	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MINUS  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  MINUS  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MINUS  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MINUS  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state    >=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MINUS	5	None	replace
376	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  FALSE  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.FALSE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FALSE)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE)    {    if(state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	29	None	replace
377	[BUG]  [BUGGY]  if(state!=  null)  {  if(state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  null)  {  if(state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  null)  {  if(state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.READ)    {    if(state    >>    VariableLiveness.READ)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	34	None	replace
378	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  Compiler.getInstance(child);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Predicate  matchRemovableAssigns  =  Compiler.getInstance(child);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Predicate  matchRemovableAssigns  =  Compiler.getInstance(child);	  Predicate    matchRemovableAssigns    =    Compiler.getInstance();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
379	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  Compiler.getInstance(n);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Predicate  matchRemovableAssigns  =  Compiler.getInstance(n);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Predicate  matchRemovableAssigns  =  Compiler.getInstance(n);	  Predicate    matchRemovableAssigns    =    Compiler.getInstance();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
380	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  Compiler.getInstance(state);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Predicate  matchRemovableAssigns  =  Compiler.getInstance(state);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Predicate  matchRemovableAssigns  =  Compiler.getInstance(state);	  Predicate    matchRemovableAssigns    =    Compiler.getInstance();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
381	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  Compiler.getInstanceUTC();  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Predicate  matchRemovableAssigns  =  Compiler.getInstanceUTC();  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Predicate  matchRemovableAssigns  =  Compiler.getInstanceUTC();	  Predicate    matchRemovableAssigns    =    Compiler.getInstance();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
382	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE)  {  [CE]  cannot  find  symbol  MAYBE  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE)  {	  if(state!=    VariableLiveness.MILLBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MAYBE	17	None	replace
383	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MINUS  ||  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  MINUS  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MINUS  ||  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.FOR)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MINUS  ||  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.FOR)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.FOR)    {    	non-compiled	[CE]  cannot  find  symbol  MINUS	70	None	replace
384	[BUG]  [BUGGY]  if(state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  FOR  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.FOR)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.FOR)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.FOR)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	70	None	replace
385	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MILL  ||  state!=  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  MILL  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MILL  ||  state!=  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MILL  ||  state!=  VariableLiveness.SEMI_LIVE)  {	  if(state!=    VariableLiveness.KILL    ||    state!=    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILL	96	None	replace
386	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state!=  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state!=  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FOR  ||  state!=  VariableLiveness.SEMI_LIVE)  {	  if(state!=    VariableLiveness.KILL    ||    state!=    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	96	None	replace
387	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MILLBACK_LIVE)  {  [CE]  cannot  find  symbol  MILLBACK_LIVE  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MILLBACK_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MILLBACK_LIVE)  {	  if(state!=    VariableLiveness.MILL_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLBACK_LIVE	97	None	replace
388	[BUG]  [BUGGY]  Predicates.checkState(state!=  null);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Predicates.checkState(state!=  null);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Predicates.checkState(state!=  null);	  Predicates.checkNotNull(child);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
389	[BUG]  [BUGGY]  Predicates.checkState(child!=  null);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Predicates.checkState(child!=  null);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Predicates.checkState(child!=  null);	  Predicates.checkNotNull(child);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
390	[BUG]  [BUGGY]  if(state  >=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  >=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  >=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	44	None	replace
391	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.MINUTE_LIVE  ||  state  ==  VariableLiveness.KILL)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.MINUTE_LIVE  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.MAYBE_LIVE    ||    state    ==    VariableLiveness.KILL)    {    if(state!=  VariableLiveness.MINUTE_LIVE  ||  state  ==  VariableLiveness.KILL)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	51	None	add
392	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  state,  matchRemovableAssigns);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  state,  matchRemovableAssigns);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	NodeTraversal.traverse(compiler,  n,  state,  matchRemovableAssigns);	  NodeTraversal.traverse(compiler,    n,    state);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
393	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  state,  matchRemovableAssignsElimination);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  state,  matchRemovableAssignsElimination);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	NodeTraversal.traverse(compiler,  n,  state,  matchRemovableAssignsElimination);	  NodeTraversal.traverse(compiler,    n,    state);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
394	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  if(state  ==  VariableLiveness.MINIVE_LIVE  ||  state!=  VariableLiveness.READ)  {  [CE]  reached  end  of  file  while  parsing  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  if(state  ==  VariableLiveness.MINIVE_LIVE  ||  state!=  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state    ==    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.READ)    {    if(state  ==  VariableLiveness.MINIVE_LIVE  ||  state!=  VariableLiveness.READ)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	add
395	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MINUS  ||  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.DEAD)  {  [CE]  cannot  find  symbol  MINUS  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MINUS  ||  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.DEAD)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MINUS  ||  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.DEAD)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.DEAD)    {    	non-compiled	[CE]  cannot  find  symbol  MINUS	112	None	replace
396	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.SEMI_DEAD)  {  [CE]  cannot  find  symbol  SEMI_DEAD  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.SEMI_DEAD)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.SEMI_DEAD)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.DEAD)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_DEAD	112	None	replace
397	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.MINUTE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  if(state!=  VariableLiveness.MINUTE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.MAYBE_LIVE    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    if(state!=  VariableLiveness.MINUTE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
398	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FALSE  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state    ==    VariableLiveness.SEMI_LIVE    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	101	None	replace
399	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FINAL  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FINAL  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.FINAL  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.FINAL  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state    ==    VariableLiveness.SEMI_LIVE    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FINAL	101	None	replace
400	[BUG]  [BUGGY]  if(state!=  null)  {  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  null)  {  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  null)  {  if(state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.READ)    {    if(state    >=    VariableLiveness.READ)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	32	None	replace
401	[BUG]  [BUGGY]  state  =  isVariableReadBeforeKill(child,  VariableLiveness.MAYBE_LIVE);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  state  =  isVariableReadBeforeKill(child,  VariableLiveness.MAYBE_LIVE);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	state  =  isVariableReadBeforeKill(child,  VariableLiveness.MAYBE_LIVE);	  state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
402	[BUG]  [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable  +  1);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	state  =  isVariableReadBeforeKill(child,  variable  +  1);	  state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
403	[BUG]  [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable,  MOVED);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable,  MOVED);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	state  =  isVariableReadBeforeKill(child,  variable,  MOVED);	  state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
404	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state!=  VariableLiveness.MIN_LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state!=  VariableLiveness.MIN_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FOR  ||  state!=  VariableLiveness.MIN_LIVE)  {	  if(state!=    VariableLiveness.MIN_LIVE    ||    state!=    VariableLiveness.FOR)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	72	None	replace
405	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  state!=  null);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  state!=  null);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Preconditions.checkState(child.getType()  ==  Token.CALL  ||  state!=  null);	  Preconditions.checkState(child.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
406	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  state  ==  Node.MAYBE_LIVE);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  state  ==  Node.MAYBE_LIVE);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Preconditions.checkState(child.getType()  ==  Token.CALL  ||  state  ==  Node.MAYBE_LIVE);	  Preconditions.checkState(child.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
407	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  state!=  Node.MAYBE_LIVE);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  state!=  Node.MAYBE_LIVE);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Preconditions.checkState(child.getType()  ==  Token.CALL  ||  state!=  Node.MAYBE_LIVE);	  Preconditions.checkState(child.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
408	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MINUS  ||  state  ==  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  MINUS  [FE]    AssertionFailedError    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MINUS  ||  state  ==  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MINUS  ||  state  ==  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  MINUS	52	None	replace
409	[BUG]  [BUGGY]  if(state!=  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]      AssertionFailedError    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	52	None	replace
410	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MAYBE_LIVE);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MAYBE_LIVE);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MAYBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
411	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  REGEXP);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  REGEXP);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  REGEXP);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
412	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MILL_LIVE);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MILL_LIVE);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MILL_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
413	[BUG]  [BUGGY]  if(state!=  VariableLiveness.SEMI_LIVE  ||  state!=  VariableLiveness.MILLBE_LIVE)  {  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.SEMI_LIVE  ||  state!=  VariableLiveness.MILLBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.SEMI_LIVE  ||  state!=  VariableLiveness.MILLBE_LIVE)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MILLBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	19	None	replace
414	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FALSE  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	40	None	replace
415	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MILLI_BACKSLASH)  {  [CE]  cannot  find  symbol  MILLI_BACKSLASH  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MILLI_BACKSLASH)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MILLI_BACKSLASH)  {	  if(state!=    VariableLiveness.MILLI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLI_BACKSLASH	98	None	replace
416	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MILLI_BLOCK)  {  [CE]  cannot  find  symbol  MILLI_BLOCK  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MILLI_BLOCK)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MILLI_BLOCK)  {	  if(state!=    VariableLiveness.MILLI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLI_BLOCK	98	None	replace
417	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MILLIE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  MILLIE  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MILLIE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MILLIE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MILLIS_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLIE	37	None	replace
418	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MINUS)  {  If(state!=  VariableLiveness.KILL)  {  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MINUS)  {  If(state!=  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MINUS)  {  If(state!=  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.KILL)    {    If(state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
419	[BUG]  [BUGGY]  if(state!=  VariableLiveness.KILL)  {  If(state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.KILL)  {  If(state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.KILL)  {  If(state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.KILL)    {    If(state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
420	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MINUTE)  {  If(state!=  VariableLiveness.KILL)  {  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MINUTE)  {  If(state!=  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MINUTE)  {  If(state!=  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.KILL)    {    If(state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
421	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MINUS  ||  state!=  VariableLiveness.SEMI_LIVE  ||  state!=  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  MINUS  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MINUS  ||  state!=  VariableLiveness.SEMI_LIVE  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MINUS  ||  state!=  VariableLiveness.SEMI_LIVE  ||  state!=  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.SEMI_LIVE    ||    state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  MINUS	92	None	replace
422	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FIELD  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FIELD  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.FIELD  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FIELD  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MIN_VALUE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD	82	None	replace
423	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	4	61	replace
424	[BUG]  [BUGGY]  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	4	61	replace
425	[BUG]  [BUGGY]  if(state!=  VariableLiveness.SEMI_LIVE  ||  state!=  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.SEMI_LIVE  ||  state!=  VariableLiveness.MOVED)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.SEMI_LIVE  ||  state!=  VariableLiveness.MOVED)  {	  if(state!=    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	90	None	replace
426	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.READ)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	65	61	replace
427	[BUG]  [BUGGY]  if(state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.READ)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	65	61	replace
428	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MINUS  ||  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  MINUS  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MINUS  ||  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MINUS  ||  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  MINUS	65	None	replace
429	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  null  &&  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state!=  null  &&  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    null    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	69	61	replace
430	[BUG]  [BUGGY]  if(state!=  null  &&  state  ==  VariableLiveness.MAYBE_LIVE)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  null  &&  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  null  &&  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    null    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	69	61	replace
431	[BUG]  [BUGGY]  if(state!=  null  &&  state!=  VariableLiveness.MIN_LIVE)  {  [CE]  cannot  find  symbol  MIN_LIVE  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  null  &&  state!=  VariableLiveness.MIN_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  null  &&  state!=  VariableLiveness.MIN_LIVE)  {	  if(state!=    null    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MIN_LIVE	69	None	replace
432	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FOR  &&  state!=  VariableLiveness.KILL_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.FOR  &&  state!=  VariableLiveness.KILL_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.FOR  &&  state!=  VariableLiveness.KILL_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.FOR    &&    state!=    VariableLiveness.KILL_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	84	None	replace
433	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR  &&  state  ==  VariableLiveness.KILL_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.FOR  &&  state  ==  VariableLiveness.KILL_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FOR  &&  state  ==  VariableLiveness.KILL_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.FOR    &&    state!=    VariableLiveness.KILL_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	84	None	replace
434	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR  &&  state!=  VariableLiveness.KILL_LIVE  ||  state  >>  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.FOR  &&  state!=  VariableLiveness.KILL_LIVE  ||  state  >>  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FOR  &&  state!=  VariableLiveness.KILL_LIVE  ||  state  >>  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.FOR    &&    state!=    VariableLiveness.KILL_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	84	None	replace
435	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MIN_VALUE  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  MIN_VALUE  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MIN_VALUE  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MIN_VALUE  ||  state  ==  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.MIN_VALUE    ||    state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  MIN_VALUE	107	None	replace
436	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MILLE_LIVE)  {  [CE]  cannot  find  symbol  MILLE_LIVE  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MILLE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MILLE_LIVE)  {	  if(state!=    VariableLiveness.MILLE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLE_LIVE	105	None	replace
437	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MILLE_FIRST  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  MILLE_FIRST  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MILLE_FIRST  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MILLE_FIRST  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MILLE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLE_FIRST	105	None	replace
438	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MILLE_FIRST  ||  state!=  VariableLiveness.MILLE_LIVE)  {  [CE]  cannot  find  symbol  MILLE_FIRST  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MILLE_FIRST  ||  state!=  VariableLiveness.MILLE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MILLE_FIRST  ||  state!=  VariableLiveness.MILLE_LIVE)  {	  if(state!=    VariableLiveness.MILLE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLE_FIRST	105	None	replace
439	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state!=  VariableLiveness.MILLISECOND)  {  [CE]  cannot  find  symbol  MILLISECOND  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.READ  ||  state!=  VariableLiveness.MILLISECOND)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.READ  ||  state!=  VariableLiveness.MILLISECOND)  {	  if(state!=    VariableLiveness.MILLISECOND    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLISECOND	53	None	replace
440	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.READ)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	67	61	replace
441	[BUG]  [BUGGY]  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.READ)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	67	61	replace
442	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.READ)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	67	61	replace
443	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.READ)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	67	61	replace
444	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable,  STRING);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable,  STRING);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	State  state  =  isVariableReadBeforeKill(child,  variable,  STRING);	  State    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
445	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable,  MOVED);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable,  MOVED);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	State  state  =  isVariableReadBeforeKill(child,  variable,  MOVED);	  State    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
446	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR  &&  state!=  VariableLiveness.BOTTOM  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.FOR  &&  state!=  VariableLiveness.BOTTOM  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FOR  &&  state!=  VariableLiveness.BOTTOM  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.BOTTOM    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	104	None	replace
447	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FINAL  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FINAL  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.FINAL  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FINAL  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.FOR    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FINAL	106	None	replace
448	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FIELD  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.FOR    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD	106	None	replace
449	[BUG]  [BUGGY]  if(state!=  VariableLiveness.NONE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  NONE  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.NONE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.NONE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  NONE	95	None	replace
450	[BUG]  [BUGGY]  if(state!=  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  LIVE  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  LIVE	95	None	replace
451	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FOR  ||  state.equals(VariableLiveness.MAYBE_LIVE))  {  [CE]  cannot  find  symbol  FOR  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.FOR  ||  state.equals(VariableLiveness.MAYBE_LIVE))  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.FOR  ||  state.equals(VariableLiveness.MAYBE_LIVE))  {	  if(state!=    VariableLiveness.FOR    ||    state.equals(VariableLiveness.MAYBE_LIVE))    {    	non-compiled	[CE]  cannot  find  symbol  FOR	71	None	replace
452	[BUG]  [BUGGY]  if(state!=  VariableLiveness.BOTTOM  ||  state.equals(VariableLiveness.MAYBE_LIVE))  {  [CE]  cannot  find  symbol  BOTTOM  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.BOTTOM  ||  state.equals(VariableLiveness.MAYBE_LIVE))  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.BOTTOM  ||  state.equals(VariableLiveness.MAYBE_LIVE))  {	  if(state!=    VariableLiveness.FOR    ||    state.equals(VariableLiveness.MAYBE_LIVE))    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	71	None	replace
453	[BUG]  [BUGGY]  if(state!=  VariableLiveness.KILL)  {  If(state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.KILL)  {  If(state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.KILL)  {  If(state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE)    {    If(state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
454	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ)  {  If(state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.READ)  {  If(state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.READ)  {  If(state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE)    {    If(state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
455	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.KILL)  {  If(state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.KILL)  {  If(state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.KILL)  {  If(state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE)    {    If(state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
456	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ)  {  If(state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ)  {  If(state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.READ)  {  If(state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE)    {    If(state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
457	[BUG]  [BUGGY]  if(state!=  null)  {  If(state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  null)  {  If(state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  null)  {  If(state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE)    {    If(state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
458	[BUG]  [BUGGY]  if(state!=  VariableLiveness.KILL_LIVE)  {  If(state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.KILL_LIVE)  {  If(state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.KILL_LIVE)  {  If(state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE)    {    If(state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
459	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ)  {  If(state  ==  VariableLiveness.READ)  {  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.READ)  {  If(state  ==  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.READ)  {  If(state  ==  VariableLiveness.READ)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE)    {    If(state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
460	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR_LIVE  ||  state!=  VariableLiveness.MAXBE_LIVE)  {  [CE]  cannot  find  symbol  FOR_LIVE  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.FOR_LIVE  ||  state!=  VariableLiveness.MAXBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FOR_LIVE  ||  state!=  VariableLiveness.MAXBE_LIVE)  {	  if(state!=    VariableLiveness.FOR_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR_LIVE	38	None	replace
461	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.SEMI_BACKSLIVE)  {  [CE]  cannot  find  symbol  SEMI_BACKSLIVE  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.SEMI_BACKSLIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.SEMI_BACKSLIVE)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.SEMI_BACKSLASH)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_BACKSLIVE	18	None	replace
462	[BUG]  [BUGGY]  if(state!=  VariableLiveness.SEMI_LIVE  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]    AssertionFailedError    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.SEMI_LIVE  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.SEMI_LIVE  &&  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    &&    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	111	None	replace
463	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  LIVE  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state    ==    VariableLiveness.SEMI_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  LIVE	63	None	replace
464	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FINAL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FINAL  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.FINAL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.FINAL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state    ==    VariableLiveness.SEMI_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FINAL	63	None	replace
465	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  state!=  null);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  state!=  null);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  state!=  null);	  Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
466	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  state  ==  Node.MAYBE_LIVE);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  state  ==  Node.MAYBE_LIVE);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  state  ==  Node.MAYBE_LIVE);	  Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
467	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  state  ==  VariableLiveness.MAYBE_LIVE);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  state  ==  VariableLiveness.MAYBE_LIVE);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  state  ==  VariableLiveness.MAYBE_LIVE);	  Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
468	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.MINUTE_LIVE  ||  state!=  VariableLiveness.KILL)  {  [CE]  reached  end  of  file  while  parsing  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.MINUTE_LIVE  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.KILL)    {    if(state!=  VariableLiveness.MINUTE_LIVE  ||  state!=  VariableLiveness.KILL)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	add
469	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  >>  VariableLiveness.KILL)  {  [CE]  reached  end  of  file  while  parsing  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  >>  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.KILL)    {    if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  >>  VariableLiveness.KILL)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	add
470	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FIELD_NAME  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.FIELD_NAME  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FIELD_NAME  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MIN_VALUE    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	100	None	replace
471	[BUG]  [BUGGY]  if(state!=  null  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state!=  null  ||  state  >>  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  null  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  if(state!=  null  ||  state  >>  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    null    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state!=  null  ||  state  >>  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	68	None	add
472	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR  &&  state!=  VariableLiveness.MAYBE_LIVE  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]        AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.FOR  &&  state!=  VariableLiveness.MAYBE_LIVE  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FOR  &&  state!=  VariableLiveness.MAYBE_LIVE  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.FOR    &&    state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	93	None	replace
473	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FINAL  &&  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FINAL  [FE]          AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.FINAL  &&  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FINAL  &&  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.FOR    &&    state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FINAL	93	None	replace
474	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR  &&  state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.FOR  &&  state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FOR  &&  state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.FOR    &&    state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	93	None	replace
475	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  if(state!=  VariableLiveness.MINUTE_LIVE  ||  state!=  VariableLiveness.READ)  {  [CE]  reached  end  of  file  while  parsing  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.READ)  {  if(state!=  VariableLiveness.MINUTE_LIVE  ||  state!=  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.READ)    {    if(state!=  VariableLiveness.MINUTE_LIVE  ||  state!=  VariableLiveness.READ)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	64	None	add
476	[BUG]  [BUGGY]  if(state!=  null)  {  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  null)  {  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  null)  {  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.READ)    {    if(state    [Delete]    VariableLiveness.READ)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
477	[BUG]  [BUGGY]  if(state!=  Null.MAYBE_LIVE)  {  if(state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  Null.MAYBE_LIVE)  {  if(state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  Null.MAYBE_LIVE)  {  if(state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.READ)    {    if(state    [Delete]    VariableLiveness.READ)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
478	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR  &&  state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.FOR  &&  state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FOR  &&  state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.KILL    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	7	None	replace
479	[BUG]  [BUGGY]  if(state!=  Null.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  Null.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  Null.MAYBE_LIVE)  {  if(state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.READ)    {    if(state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	replace
480	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FIRST  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FIRST  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.FIRST  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FIRST  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.SEMI_LIVE    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FIRST	62	None	replace
481	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state!=    VariableLiveness.MAYBE_LIVE    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	57	61	replace
482	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state!=    VariableLiveness.MAYBE_LIVE    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	57	61	replace
483	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MINUS  ||  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  MINUS  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MINUS  ||  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MINUS  ||  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.SEMI_LIVE)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MINUS	16	None	replace
484	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MOVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  MOVE  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MOVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MOVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MOVED    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MOVE	8	None	replace
485	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  KILL_LIVE);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  KILL_LIVE);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	NodeTraversal.traverse(compiler,  n,  KILL_LIVE);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
486	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.DEAD)  {  [CE]  cannot  find  symbol  DEAD  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.DEAD)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  &&  state!=  VariableLiveness.DEAD)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.DEAD)    {    	non-compiled	[CE]  cannot  find  symbol  DEAD	112	None	replace
487	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MILL_LIVE)  {  [CE]  cannot  find  symbol  MILL_LIVE  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MILL_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.MILL_LIVE)  {	  if(state!=    VariableLiveness.MILL_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILL_LIVE	97	None	replace
488	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MILL_SINGLE)  {  [CE]  cannot  find  symbol  MILL_SINGLE  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MILL_SINGLE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MILL_SINGLE)  {	  if(state!=    VariableLiveness.MILL_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILL_SINGLE	97	None	replace
489	[BUG]  [BUGGY]  Predicates.checkState(child.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Predicates.checkState(child.getType()  ==  Token.BLOCK);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Predicates.checkState(child.getType()  ==  Token.BLOCK);	  Predicates.checkNotNull(child);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
490	[BUG]  [BUGGY]  Predicates.checkState(child.getType()  ==  Token.CALL);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Predicates.checkState(child.getType()  ==  Token.CALL);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Predicates.checkState(child.getType()  ==  Token.CALL);	  Predicates.checkNotNull(child);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
491	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FINAL  ||  state.equals(VariableLiveness.MAYBE_LIVE))  {  [CE]  cannot  find  symbol  FINAL  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.FINAL  ||  state.equals(VariableLiveness.MAYBE_LIVE))  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FINAL  ||  state.equals(VariableLiveness.MAYBE_LIVE))  {	  if(state!=    VariableLiveness.FOR    ||    state.equals(VariableLiveness.MAYBE_LIVE))    {    	non-compiled	[CE]  cannot  find  symbol  FINAL	71	None	replace
492	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FIELD  ||  state.equals(VariableLiveness.MAYBE_LIVE))  {  [CE]  cannot  find  symbol  FIELD  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.FIELD  ||  state.equals(VariableLiveness.MAYBE_LIVE))  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FIELD  ||  state.equals(VariableLiveness.MAYBE_LIVE))  {	  if(state!=    VariableLiveness.FOR    ||    state.equals(VariableLiveness.MAYBE_LIVE))    {    	non-compiled	[CE]  cannot  find  symbol  FIELD	71	None	replace
493	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.SKILL)  {  [CE]  cannot  find  symbol  SKILL  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.SKILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.SKILL)  {	  if(state!=    VariableLiveness.KILL)    {    if(state!=    VariableLiveness.SKILL)    {    	non-compiled	[CE]  cannot  find  symbol  SKILL	80	None	replace
494	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  &&  state  ==  VariableLiveness.KILL_LIVE)  {  [CE]  cannot  find  symbol  KILL_LIVE  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  &&  state  ==  VariableLiveness.KILL_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  &&  state  ==  VariableLiveness.KILL_LIVE)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state    ==    VariableLiveness.KILL_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  KILL_LIVE	23	None	replace
495	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state    ==    VariableLiveness.SEMI_LIVE    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	101	None	replace
496	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MILLBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  MILLBE_LIVE  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MILLBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MILLBE_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MILLBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLBE_LIVE	17	None	replace
497	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MILLBE_LIVE)  {  [CE]  cannot  find  symbol  MILLBE_LIVE  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MILLBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.MILLBE_LIVE)  {	  if(state!=    VariableLiveness.MILLBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLBE_LIVE	17	None	replace
498	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.CALL);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.CALL);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.CALL);	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
499	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.BLOCK);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.BLOCK);	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
500	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.VAR);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.VAR);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.VAR);	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
501	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MOVE)  {  [CE]  cannot  find  symbol  MOVE  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MOVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MOVE)  {	  if(state!=    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  MOVE	90	None	replace
502	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MILLI  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  MILLI  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MILLI  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MILLI  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MIN_VALUE    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLI	100	None	replace
503	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state!=    VariableLiveness.MAYBE_LIVE    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	57	61	replace
504	[BUG]  [BUGGY]  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    if(state!=    VariableLiveness.MAYBE_LIVE    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	57	61	replace
505	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MILLI  ||  state!=  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  MILLI  [FE]                AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MILLI  ||  state!=  VariableLiveness.FOR)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MILLI  ||  state!=  VariableLiveness.FOR)  {	  if(state!=    VariableLiveness.MIN_LIVE    ||    state!=    VariableLiveness.FOR)    {    	non-compiled	[CE]  cannot  find  symbol  MILLI	72	None	replace
506	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  If(state!=  VariableLiveness.READ)  {  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  If(state!=  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.MAYBE_LIVE)  {  If(state!=  VariableLiveness.READ)  {	  if(state!=    VariableLiveness.READ)    {    If(state!=    VariableLiveness.READ)    {    	non-compiled	[CE]  ';'  expected	33	None	replace
507	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  Compiler.getInstance(variable,  state);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Predicate  matchRemovableAssigns  =  Compiler.getInstance(variable,  state);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Predicate  matchRemovableAssigns  =  Compiler.getInstance(variable,  state);	  Predicate    matchRemovableAssigns    =    Compiler.getInstance();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
508	[BUG]  [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable,  READ);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  state  =  isVariableReadBeforeKill(child,  variable,  READ);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	state  =  isVariableReadBeforeKill(child,  variable,  READ);	  state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
509	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MILLI)  {  [CE]  cannot  find  symbol  MILLI  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MILLI)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MILLI)  {	  if(state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  MILLI	89	None	replace
510	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  &&  state  >=  VariableLiveness.MAYBE_LIVE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  &&  state  >=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  &&  state  >=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state    >=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	5	None	replace
511	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state  >=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state    >=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	5	None	replace
512	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MIN_VALUE)  {  [CE]  cannot  find  symbol  MIN_VALUE  [FE]                      AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MIN_VALUE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MIN_VALUE)  {	  if(state!=    VariableLiveness.MIN_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MIN_VALUE	20	None	replace
513	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MIN_BLOCK)  {  [CE]  cannot  find  symbol  MIN_BLOCK  [FE]                        AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MIN_BLOCK)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MIN_BLOCK)  {	  if(state!=    VariableLiveness.MIN_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MIN_BLOCK	20	None	replace
514	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.SEMI_LIVE  ||  state!=  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.SEMI_LIVE  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.SEMI_LIVE  ||  state!=  VariableLiveness.KILL)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	50	None	replace
515	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FINAL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FINAL  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.FINAL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FINAL  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.FOR    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FINAL	36	None	replace
516	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	add	if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.READ)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	67	61	replace
517	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.READ)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	67	61	replace
518	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MILLISECOND  ||  state!=  VariableLiveness.MIN_VALUE)  {  [CE]  cannot  find  symbol  MILLISECOND  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MILLISECOND  ||  state!=  VariableLiveness.MIN_VALUE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MILLISECOND  ||  state!=  VariableLiveness.MIN_VALUE)  {	  if(state!=    VariableLiveness.MIN_VALUE    ||    state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  MILLISECOND	107	None	replace
519	[BUG]  [BUGGY]  if(state!=  Null  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  Null  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  Null  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  Null  &&  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    null    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  Null	69	None	replace
520	[BUG]  [BUGGY]  if(state  >=  null  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  >=  null  &&  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  >=  null  &&  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    null    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	69	None	replace
521	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  READ);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  READ);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  READ);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
522	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
523	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable  +  1);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	State  state  =  isVariableReadBeforeKill(child,  variable  +  1);	  State    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
524	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable,  READ);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable,  READ);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	State  state  =  isVariableReadBeforeKill(child,  variable,  READ);	  State    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
525	[BUG]  [BUGGY]  if(state!=  VariableLiveness.SEMI_LIVE  &&  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.SEMI_LIVE  &&  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.SEMI_LIVE  &&  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.SEMI_LIVE    ||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	62	None	replace
526	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR  &&  child!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]        AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.FOR  &&  child!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FOR  &&  child!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.FOR    &&    state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	93	None	replace
527	[BUG]  [BUGGY]  if(state!=  VariableLiveness.BOTTOM  &&  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]          AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.BOTTOM  &&  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.BOTTOM  &&  state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.FOR    &&    state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	93	None	replace
528	[BUG]  [BUGGY]  if(state!=  VariableLiveness.SEMI_LIVE)  {  If(state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.SEMI_LIVE)  {  If(state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.SEMI_LIVE)  {  If(state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE)    {    If(state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  ';'  expected	26	None	replace
529	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MILLE_LIVE)  {  [CE]  cannot  find  symbol  MILLE_LIVE  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MILLE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.MILLE_LIVE)  {	  if(state!=    VariableLiveness.MILLE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLE_LIVE	105	None	replace
530	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.BLOCK);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.BLOCK);	  Preconditions.checkState(child.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
531	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.FUNCTION);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(child.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
532	[BUG]  [BUGGY]  if(state!=  VariableLiveness.LEFT  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  LEFT  [FE]            AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.LEFT  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.LEFT  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  LEFT	95	None	replace
533	[BUG]  [BUGGY]  if(state!=  VariableLiveness.LIMIT  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  LIMIT  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.LIMIT  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.LIMIT  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  LIMIT	95	None	replace
534	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MILLI_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  MILLI_LIVE  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MILLI_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MILLI_LIVE  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MILLI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLI_LIVE	98	None	replace
535	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MILLI_LIVE)  {  [CE]  cannot  find  symbol  MILLI_LIVE  [FE]                    AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MILLI_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.MILLI_LIVE)  {	  if(state!=    VariableLiveness.MILLI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLI_LIVE	98	None	replace
536	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MILLI_BACKSLASH  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  MILLI_BACKSLASH  [FE]                      AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MILLI_BACKSLASH  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MILLI_BACKSLASH  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MILLI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLI_BACKSLASH	98	None	replace
537	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child,  state,  date);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  NodeTraversal.traverse(compiler,  child,  state,  date);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	NodeTraversal.traverse(compiler,  child,  state,  date);	  NodeTraversal.traverse(compiler,    child,    state);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
538	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child,  state,  this);  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  NodeTraversal.traverse(compiler,  child,  state,  this);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	NodeTraversal.traverse(compiler,  child,  state,  this);	  NodeTraversal.traverse(compiler,    child,    state);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
539	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.SEMI_BACKSLASH)  {  [CE]  cannot  find  symbol  SEMI_BACKSLASH  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.SEMI_BACKSLASH)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.SEMI_BACKSLASH)  {	  if(state!=    VariableLiveness.MAYBE_LIVE    ||    state!=    VariableLiveness.SEMI_BACKSLASH)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_BACKSLASH	18	None	replace
540	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.MAYBE_LIVE);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.MAYBE_LIVE);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.MAYBE_LIVE);	  Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
541	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.NAME);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.NAME);	  Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
542	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Action());  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Action());  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	NodeTraversal.traverse(compiler,  n,  new  Action());	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
543	[BUG]  [BUGGY]  if(parent!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  parent  [FE]                  AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(parent!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(parent!=  VariableLiveness.MAYBE_LIVE)  {	  if(value!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  parent	22	None	replace
544	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  FOR  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.FOR)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.FOR)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE)    {    if(state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	29	None	replace
545	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR  &&  child!=  VariableLiveness.KILL_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]              AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.FOR  &&  child!=  VariableLiveness.KILL_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FOR  &&  child!=  VariableLiveness.KILL_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.FOR    &&    state!=    VariableLiveness.KILL_LIVE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	84	None	replace
546	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MINUTE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  MINUTE_LIVE  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MINUTE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.MINUTE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE)    {    if(state    ==    VariableLiveness.MINUTE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MINUTE_LIVE	28	None	replace
547	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.BIGINT)  {  [CE]  cannot  find  symbol  BIGINT  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.BIGINT)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE  ||  state  ==  VariableLiveness.BIGINT)  {	  if(state    >=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  BIGINT	83	None	replace
548	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FIELD_NAME  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state!=  VariableLiveness.FIELD_NAME  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state!=  VariableLiveness.FIELD_NAME  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.MIN_VALUE    ||    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	82	None	replace
549	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  state,  this);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  state,  this);  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	NodeTraversal.traverse(compiler,  n,  state,  this);	  NodeTraversal.traverse(compiler,    n,    state);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
550	[BUG]  [BUGGY]  if(n  ==  null)  {  if(state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(n  ==  null)  {  if(state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(n  ==  null)  {  if(state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.READ)    {    if(state    [Delete]    VariableLiveness.READ)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
551	[BUG]  [BUGGY]  if(parent!=  null)  {  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(parent!=  null)  {  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(parent!=  null)  {  if(state!=  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(state!=    VariableLiveness.READ)    {    if(state    [Delete]    VariableLiveness.READ)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
552	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MINIVE_LIVE)  {  [CE]  cannot  find  symbol  MINIVE_LIVE  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);      [BUGGY]  if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MINIVE_LIVE)  {  [BUGGY]      return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	341	341	6	replace	if(state  ==  VariableLiveness.MAYBE_LIVE  ||  state!=  VariableLiveness.MINIVE_LIVE)  {	  if(state    ==    VariableLiveness.MAYBE_LIVE)    {    if(state    ==    VariableLiveness.MINIVE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MINIVE_LIVE	81	None	replace
