bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	add	child!=  null;  child  =  child.getLastChild())  {	  child!=    null;    child    =    child.getFirstChild())    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	14	61	replace
2	[BUG]  [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getLastChild())  {	  child!=    null;    child    =    child.getFirstChild())    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	14	61	replace
3	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	add	n!=  null;  child  =  child.getFirstChild())  {	  child!=    null;    child    =    child.getFirstChild())    {    	compilable	  [FE]  RuntimeException  	14	63	replace
4	[BUG]  [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  [FE]  RuntimeException  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getFirstChild())  {	  child!=    null;    child    =    child.getFirstChild())    {    	compilable	  [FE]  RuntimeException  	14	63	replace
5	[BUG]  [BUGGY]  Node  child  =  n.getFirstChild();  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  Node  child  =  n.getFirstChild();  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  n.getFirstChild();	  child!=    null;    child    =    child.getFirstChild())    {    	non-compiled	[CE]  ';'  expected	14	None	replace
6	[BUG]  [BUGGY]  Child  child  =  child.getFirstChild())  {  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  Child  child  =  child.getFirstChild())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getFirstChild())  {	  child!=    null;    child    =    child.getFirstChild())    {    	non-compiled	[CE]  ';'  expected	14	None	replace
7	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  n!=  null;  child  =  child.getParent())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	add	n!=  null;  child  =  child.getParent())  {	  n!=    null;    child    =    child.getNext())    {    	compilable	  [FE]  RuntimeException  	17	63	replace
8	[BUG]  [BUGGY]  n!=  null;  child  =  child.getParent())  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  n!=  null;  child  =  child.getParent())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getParent())  {	  n!=    null;    child    =    child.getNext())    {    	compilable	  [FE]  RuntimeException  	17	63	replace
9	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  n  ==  null;  child  =  child.getNext())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	add	n  ==  null;  child  =  child.getNext())  {	  n!=    null;    child    =    child.getNext())    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	17	61	replace
10	[BUG]  [BUGGY]  n  ==  null;  child  =  child.getNext())  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  n  ==  null;  child  =  child.getNext())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n  ==  null;  child  =  child.getNext())  {	  n!=    null;    child    =    child.getNext())    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	17	61	replace
11	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  n!=  child;  child  =  child.getNext())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	add	n!=  child;  child  =  child.getNext())  {	  n!=    null;    child    =    child.getNext())    {    	compilable	  [FE]  RuntimeException  	17	63	replace
12	[BUG]  [BUGGY]  n!=  child;  child  =  child.getNext())  {  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  n!=  child;  child  =  child.getNext())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  child;  child  =  child.getNext())  {	  n!=    null;    child    =    child.getNext())    {    	compilable	  [FE]  RuntimeException  	17	63	replace
13	[BUG]  [BUGGY]  n!=  null;  child  =  child.getPrevious())  {  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  n!=  null;  child  =  child.getPrevious())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getPrevious())  {	  n!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
14	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child,  this);  [CE]  illegal  start  of  expression  [FE]            RuntimeException    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  NodeTraversal.traverse(compiler,  child,  this);  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	NodeTraversal.traverse(compiler,  child,  this);	  n!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
15	[BUG]  [BUGGY]  if(child!=  null)  {  child  ==  null;  child  =  child.getNext())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  if(child!=  null)  {  child  ==  null;  child  =  child.getNext())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  ==  null;  child  =  child.getNext())  {	  if(child    ==    null)    {    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
16	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  if(child!=  null)  {  child  =  child.getNext())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getNext())  {	  if(child    ==    null)    {    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
17	[BUG]  [BUGGY]  if(child!=  null  ||  child.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  if(child!=  null  ||  child.getType()  ==  Token.FUNCTION)  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null  ||  child.getType()  ==  Token.FUNCTION)  {	  if(child    ==    null)    {    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
18	[BUG]  [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getParent())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getParent())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child!=  null;  child  =  child.getParent())  {	  if(child    ==    null)    {    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
19	[BUG]  [BUGGY]  if(child!=  null  ||  child.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  if(child!=  null  ||  child.getType()  ==  Token.NAME)  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null  ||  child.getType()  ==  Token.NAME)  {	  if(child    ==    null)    {    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
20	[BUG]  [BUGGY]  if(child!=  null)  {  child  >=  null;  child  =  child.getNext())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  if(child!=  null)  {  child  >=  null;  child  =  child.getNext())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  >=  null;  child  =  child.getNext())  {	  if(child!=    null)    {    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
21	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext())  {  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child!=  null;  child  =  child.getNext())  {  }  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext())  {  }	  if(child    ==    null)    {    child!=    null;    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
22	[BUG]  [BUGGY]  Child  <  KILL  ||  child  ==  null;  child  =  child.getNext())  {  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  Child  <  KILL  ||  child  ==  null;  child  =  child.getNext())  {  }  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  <  KILL  ||  child  ==  null;  child  =  child.getNext())  {  }	  if(child    ==    null)    {    child!=    null;    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
23	[BUG]  [BUGGY]  child  =  child.getNext())  {  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child  =  child.getNext())  {  }  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  =  child.getNext())  {  }	  if(child!=    null)    {    child    =    child.getNext())    {    }    	non-compiled	[CE]  ';'  expected	15	None	replace
24	[BUG]  [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getNext())  {  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getNext())  {  }  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	while(child!=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getNext())  {  }	  if(child!=    null)    {    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
25	[BUG]  [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.FUNCTION)  {  child  =  child.getNext())  {  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.FUNCTION)  {  child  =  child.getNext())  {  }  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	while(child!=  null  &&  child.getType()  ==  Token.FUNCTION)  {  child  =  child.getNext())  {  }	  if(child!=    null)    {    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
26	[BUG]  [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.CALL)  {  child  =  child.getNext())  {  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.CALL)  {  child  =  child.getNext())  {  }  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	while(child!=  null  &&  child.getType()  ==  Token.CALL)  {  child  =  child.getNext())  {  }	  if(child!=    null)    {    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
27	[BUG]  [BUGGY]  child  =  child.getNext())  {  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child  =  child.getNext())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  =  child.getNext())  {	  if(child!=    null)    {    child    =    child.getNext())    {    }    	non-compiled	[CE]  ';'  expected	15	None	replace
28	[BUG]  [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.RETURN)  {  child  =  child.getNext())  {  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.RETURN)  {  child  =  child.getNext())  {  }  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	while(child!=  null  &&  child.getType()  ==  Token.RETURN)  {  child  =  child.getNext())  {  }	  if(child!=    null)    {    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
29	[BUG]  [BUGGY]  Child  <  KILL  ||  child!=  null;  child  =  child.getNext())  {  [CE]  cannot  find  symbol  Child  [FE]        AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  Child  <  KILL  ||  child!=  null;  child  =  child.getNext())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  <  KILL  ||  child!=  null;  child  =  child.getNext())  {	  if(child!=    null)    {    child!=    null;    child    =    child.getNext())    {    }    	non-compiled	[CE]  cannot  find  symbol  Child	9	None	replace
30	[BUG]  [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  Node  child  =  n.getFirstChild();  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  Node  child  =  n.getFirstChild();  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=    null;    child    =    child.getFirstChild())    {    Node  child  =  n.getFirstChild();	  	non-compiled	[CE]  not  a  statement	13	None	add
31	[BUG]  [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  child!=  null;  child  =  child.getFirstChild())  {  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  child!=  null;  child  =  child.getFirstChild())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=    null;    child    =    child.getFirstChild())    {    child!=  null;  child  =  child.getFirstChild())  {	  	non-compiled	[CE]  not  a  statement	13	None	add
32	[BUG]  [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  Node  child  =  n.getLastChild();  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  Node  child  =  n.getLastChild();  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=    null;    child    =    child.getFirstChild())    {    Node  child  =  n.getLastChild();	  	non-compiled	[CE]  not  a  statement	13	None	add
33	[BUG]  [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  Child  child  =  n.getFirstChild();  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  Child  child  =  n.getFirstChild();  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=    null;    child    =    child.getFirstChild())    {    Child  child  =  n.getFirstChild();	  	non-compiled	[CE]  not  a  statement	13	None	add
34	[BUG]  [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  Node  n  =  child.getFirstChild();  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  Node  n  =  child.getFirstChild();  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=    null;    child    =    child.getFirstChild())    {    Node  n  =  child.getFirstChild();	  	non-compiled	[CE]  not  a  statement	13	None	add
35	[BUG]  [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  Child  child  =  child.getFirstChild();  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  Child  child  =  child.getFirstChild();  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=    null;    child    =    child.getFirstChild())    {    Child  child  =  child.getFirstChild();	  	non-compiled	[CE]  not  a  statement	13	None	add
36	[BUG]  [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  Node  parent  =  child.getParent();  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  Node  parent  =  child.getParent();  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=    null;    child    =    child.getFirstChild())    {    Node  parent  =  child.getParent();	  	non-compiled	[CE]  not  a  statement	13	None	add
37	[BUG]  [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  Node  child  =  n.getNext();  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  Node  child  =  n.getNext();  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=    null;    child    =    child.getFirstChild())    {    Node  child  =  n.getNext();	  	non-compiled	[CE]  not  a  statement	13	None	add
38	[BUG]  [BUGGY]  n!=  null;  child  =  child.getNext())  {  n!=  null;  child  =  child.getNext())  {  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  n!=  null;  child  =  child.getNext())  {  n!=  null;  child  =  child.getNext())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=    null;    child    =    child.getNext())    {    n!=  null;  child  =  child.getNext())  {	  	non-compiled	[CE]  not  a  statement	16	None	add
39	[BUG]  [BUGGY]  n!=  null;  child  =  child.getNext())  {  Node  n  =  child.getFirstChild();  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  n!=  null;  child  =  child.getNext())  {  Node  n  =  child.getFirstChild();  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=    null;    child    =    child.getNext())    {    Node  n  =  child.getFirstChild();	  	non-compiled	[CE]  not  a  statement	16	None	add
40	[BUG]  [BUGGY]  n!=  null;  child  =  child.getNext())  {  Node  n  =  child.getNext();  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  n!=  null;  child  =  child.getNext())  {  Node  n  =  child.getNext();  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=    null;    child    =    child.getNext())    {    Node  n  =  child.getNext();	  	non-compiled	[CE]  not  a  statement	16	None	add
41	[BUG]  [BUGGY]  n!=  null;  child  =  child.getNext())  {  Node  n  =  child.getLastChild();  [CE]  not  a  statement  [FE]          RuntimeException    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  n!=  null;  child  =  child.getNext())  {  Node  n  =  child.getLastChild();  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=    null;    child    =    child.getNext())    {    Node  n  =  child.getLastChild();	  	non-compiled	[CE]  not  a  statement	16	None	add
42	[BUG]  [BUGGY]  n!=  null;  child  =  child.getNext())  {  Node  n  =  child.getParent();  [CE]  not  a  statement  [FE]            RuntimeException    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  n!=  null;  child  =  child.getNext())  {  Node  n  =  child.getParent();  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=    null;    child    =    child.getNext())    {    Node  n  =  child.getParent();	  	non-compiled	[CE]  not  a  statement	16	None	add
43	[BUG]  [BUGGY]  n!=  null;  child  =  child.getNext())  {  n  ==  null;  child  =  child.getNext())  {  [CE]  not  a  statement  [FE]              RuntimeException    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  n!=  null;  child  =  child.getNext())  {  n  ==  null;  child  =  child.getNext())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=    null;    child    =    child.getNext())    {    n  ==  null;  child  =  child.getNext())  {	  	non-compiled	[CE]  not  a  statement	16	None	add
44	[BUG]  [BUGGY]  n!=  null;  child  =  child.getNext())  {  n  >=  null;  child  =  child.getNext())  {  [CE]  not  a  statement  [FE]                RuntimeException    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  n!=  null;  child  =  child.getNext())  {  n  >=  null;  child  =  child.getNext())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=    null;    child    =    child.getNext())    {    n  >=  null;  child  =  child.getNext())  {	  	non-compiled	[CE]  not  a  statement	16	None	add
45	[BUG]  [BUGGY]  n!=  null;  child  =  child.getNext())  {  n!=  null;  child  =  child.getParent())  {  [CE]  not  a  statement  [FE]                  RuntimeException    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  n!=  null;  child  =  child.getNext())  {  n!=  null;  child  =  child.getParent())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=    null;    child    =    child.getNext())    {    n!=  null;  child  =  child.getParent())  {	  	non-compiled	[CE]  not  a  statement	16	None	add
46	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child  ==  null;  child  =  child.getParent())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	add	child  ==  null;  child  =  child.getParent())  {	  child    ==    null;    child    =    child.getNext())    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	5	63	replace
47	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getParent())  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child  ==  null;  child  =  child.getParent())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  ==  null;  child  =  child.getParent())  {	  child    ==    null;    child    =    child.getNext())    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	5	63	replace
48	[BUG]  [BUGGY]  node  ==  null;  child  =  child.getNext())  {  [CE]  cannot  find  symbol  node  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  node  ==  null;  child  =  child.getNext())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	node  ==  null;  child  =  child.getNext())  {	  child    ==    null;    child    =    child.getNext())    {    	non-compiled	[CE]  cannot  find  symbol  node	5	None	replace
49	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getNext())  {  Node  child  =  n.getFirstChild();  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child  ==  null;  child  =  child.getNext())  {  Node  child  =  n.getFirstChild();  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child    ==    null;    child    =    child.getNext())    {    Node  child  =  n.getFirstChild();	  	non-compiled	[CE]  not  a  statement	4	None	add
50	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child  ==  null;  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child    ==    null;    child    =    child.getNext())    {    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);	  	non-compiled	[CE]  not  a  statement	4	None	add
51	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getNext())  {  Node  child  =  n.getLastChild();  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child  ==  null;  child  =  child.getNext())  {  Node  child  =  n.getLastChild();  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child    ==    null;    child    =    child.getNext())    {    Node  child  =  n.getLastChild();	  	non-compiled	[CE]  not  a  statement	4	None	add
52	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child  ==  null;  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child    ==    null;    child    =    child.getNext())    {    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  	non-compiled	[CE]  not  a  statement	4	None	add
53	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getNext())  {  Node  child  =  n.getNext();  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child  ==  null;  child  =  child.getNext())  {  Node  child  =  n.getNext();  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child    ==    null;    child    =    child.getNext())    {    Node  child  =  n.getNext();	  	non-compiled	[CE]  not  a  statement	4	None	add
54	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child  ==  null;  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child    ==    null;    child    =    child.getNext())    {    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  	non-compiled	[CE]  not  a  statement	4	None	add
55	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getNext())  {  child!=  null;  child  =  child.getNext())  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child  ==  null;  child  =  child.getNext())  {  child!=  null;  child  =  child.getNext())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child    ==    null;    child    =    child.getNext())    {    child!=  null;  child  =  child.getNext())  {	  	non-compiled	[CE]  not  a  statement	4	None	add
56	[BUG]  [BUGGY]  child!=  null;  child  =  child.getParent())  {  child!=  null;  child  =  child.getParent())  {  [CE]  not  a  statement  [FE]    StackOverflowError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child!=  null;  child  =  child.getParent())  {  child!=  null;  child  =  child.getParent())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=    null;    child    =    child.getParent())    {    child!=  null;  child  =  child.getParent())  {	  	non-compiled	[CE]  not  a  statement	1	None	add
57	[BUG]  [BUGGY]  child!=  null;  child  =  child.getParent())  {  Child  }  null;  child  =  child.getParent())  {  [CE]  not  a  statement  [FE]      StackOverflowError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child!=  null;  child  =  child.getParent())  {  Child  }  null;  child  =  child.getParent())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=    null;    child    =    child.getParent())    {    Child  }  null;  child  =  child.getParent())  {	  	non-compiled	[CE]  not  a  statement	1	None	add
58	[BUG]  [BUGGY]  child!=  null;  child  =  child.getParent())  {  Node  child  =  n.getFirstChild();  [CE]  not  a  statement  [FE]        StackOverflowError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child!=  null;  child  =  child.getParent())  {  Node  child  =  n.getFirstChild();  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=    null;    child    =    child.getParent())    {    Node  child  =  n.getFirstChild();	  	non-compiled	[CE]  not  a  statement	1	None	add
59	[BUG]  [BUGGY]  child!=  null;  child  =  child.getParent())  {  Child  <  null;  child  =  child.getParent())  {  [CE]  illegal  start  of  type  [FE]          StackOverflowError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child!=  null;  child  =  child.getParent())  {  Child  <  null;  child  =  child.getParent())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=    null;    child    =    child.getParent())    {    Child  <  null;  child  =  child.getParent())  {	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
60	[BUG]  [BUGGY]  child!=  null;  child  =  child.getParent())  {  Node  child  =  n.getLastChild();  [CE]  not  a  statement  [FE]            StackOverflowError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child!=  null;  child  =  child.getParent())  {  Node  child  =  n.getLastChild();  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=    null;    child    =    child.getParent())    {    Node  child  =  n.getLastChild();	  	non-compiled	[CE]  not  a  statement	1	None	add
61	[BUG]  [BUGGY]  child!=  null;  child  =  child.getParent())  {  Node  parent  =  child.getParent();  [CE]  not  a  statement  [FE]              StackOverflowError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child!=  null;  child  =  child.getParent())  {  Node  parent  =  child.getParent();  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=    null;    child    =    child.getParent())    {    Node  parent  =  child.getParent();	  	non-compiled	[CE]  not  a  statement	1	None	add
62	[BUG]  [BUGGY]  child!=  null;  child  =  child.getParent())  {  Node  child  =  n.getNext();  [CE]  not  a  statement  [FE]                StackOverflowError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child!=  null;  child  =  child.getParent())  {  Node  child  =  n.getNext();  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=    null;    child    =    child.getParent())    {    Node  child  =  n.getNext();	  	non-compiled	[CE]  not  a  statement	1	None	add
63	[BUG]  [BUGGY]  child!=  null;  child  =  child.getParent())  {  child!=  null;  child  =  child.getNext())  {  [CE]  not  a  statement  [FE]                  StackOverflowError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child!=  null;  child  =  child.getParent())  {  child!=  null;  child  =  child.getNext())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=    null;    child    =    child.getParent())    {    child!=  null;  child  =  child.getNext())  {	  	non-compiled	[CE]  not  a  statement	1	None	add
64	[BUG]  [BUGGY]  child!=  null;  child  =  n.getPrevious())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child!=  null;  child  =  n.getPrevious())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  n.getPrevious())  {	  child!=    null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
65	[BUG]  [BUGGY]  node!=  null;  child  =  child.getPrevious())  {  [CE]  cannot  find  symbol  node  [FE]                AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  node!=  null;  child  =  child.getPrevious())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	node!=  null;  child  =  child.getPrevious())  {	  child!=    null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  cannot  find  symbol  node	6	None	replace
66	[BUG]  [BUGGY]  child!=  null;  child  =  child.getPrevious(),  variable)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child!=  null;  child  =  child.getPrevious(),  variable)  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getPrevious(),  variable)  {	  child!=    null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  not  a  statement	6	None	replace
67	[BUG]  [BUGGY]  Child  child  =  n.getPrevious())  {  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  Child  child  =  n.getPrevious())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  n.getPrevious())  {	  child!=    null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  ';'  expected	6	None	replace
68	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);	      	non-compiled	[CE]  ';'  expected	8	None	replace
69	[BUG]  [BUGGY]  Node  matchRemovableAssigns  =  child.getFirstChild();  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  Node  matchRemovableAssigns  =  child.getFirstChild();  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  matchRemovableAssigns  =  child.getFirstChild();	      	non-compiled	[CE]  ';'  expected	8	None	replace
70	[BUG]  [BUGGY]  Node  child  =  n.getLastChild();  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  Node  child  =  n.getLastChild();  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  n.getLastChild();	      	non-compiled	[CE]  ';'  expected	8	None	replace
71	[BUG]  [BUGGY]  Node  variable  =  child.getFirstChild();  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  Node  variable  =  child.getFirstChild();  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  variable  =  child.getFirstChild();	      	non-compiled	[CE]  ';'  expected	8	None	replace
72	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  child.getFirstChild();  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  Predicate  matchRemovableAssigns  =  child.getFirstChild();  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Predicate  matchRemovableAssigns  =  child.getFirstChild();	      	non-compiled	[CE]  ';'  expected	8	None	replace
73	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME);  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
74	[BUG]  [BUGGY]  child!=  null;  child  =  child.getType()  ==  Token.FUNCTION)  {  [CE]  incompatible  types  [FE]    StackOverflowError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child!=  null;  child  =  child.getType()  ==  Token.FUNCTION)  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getType()  ==  Token.FUNCTION)  {	  child!=    null;    child    =    child.getParent())    {    	non-compiled	[CE]  incompatible  types	2	None	replace
75	[BUG]  [BUGGY]  child!=  null;  child  =  child.getParent(),  variable)  {  [CE]  not  a  statement  [FE]      StackOverflowError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child!=  null;  child  =  child.getParent(),  variable)  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getParent(),  variable)  {	  child!=    null;    child    =    child.getParent())    {    	non-compiled	[CE]  not  a  statement	2	None	replace
76	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext(),  variable);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child!=  null;  child  =  child.getNext(),  variable);  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext(),  variable);	  child!=    null;    child    =    child.getNext(),    variable)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
77	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext(),  VariableLiveness.MAYBE_LIVE)  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child!=  null;  child  =  child.getNext(),  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext(),  VariableLiveness.MAYBE_LIVE)  {	  child!=    null;    child    =    child.getNext(),    variable)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
78	[BUG]  [BUGGY]  Child  child  =  child.getNext(),  variable)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  Child  child  =  child.getNext(),  variable)  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getNext(),  variable)  {	  child!=    null;    child    =    child.getNext(),    variable)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
79	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getNext(),  variable)  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child  ==  null;  child  =  child.getNext(),  variable)  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  ==  null;  child  =  child.getNext(),  variable)  {	  child!=    null;    child    =    child.getNext(),    variable)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
80	[BUG]  [BUGGY]  Node  child  =  child.getNext())  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  Node  child  =  child.getNext())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  child.getNext())  {	  node!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	7	None	replace
81	[BUG]  [BUGGY]  Node  child  =  n.getNext())  {  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  Node  child  =  n.getNext())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  n.getNext())  {	  node!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	7	None	replace
82	[BUG]  [BUGGY]  Node  }  else  if(child.getType()  ==  Token.FUNCTION)  {  Node  child  =  child.getNext())  {  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  Node  }  else  if(child.getType()  ==  Token.FUNCTION)  {  Node  child  =  child.getNext())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  else  if(child.getType()  ==  Token.FUNCTION)  {  Node  child  =  child.getNext())  {	  node!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	7	None	replace
83	[BUG]  [BUGGY]  Node  }  else  if(child.getType()  ==  Token.NAME)  {  node!=  null;  child  =  child.getNext())  {  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  Node  }  else  if(child.getType()  ==  Token.NAME)  {  node!=  null;  child  =  child.getNext())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  else  if(child.getType()  ==  Token.NAME)  {  node!=  null;  child  =  child.getNext())  {	  node!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	7	None	replace
84	[BUG]  [BUGGY]  Node  }  else  if(child.getType()  ==  Token.FUNCTION)  {  node!=  null;  child  =  child.getNext())  {  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  Node  }  else  if(child.getType()  ==  Token.FUNCTION)  {  node!=  null;  child  =  child.getNext())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  else  if(child.getType()  ==  Token.FUNCTION)  {  node!=  null;  child  =  child.getNext())  {	  node!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	7	None	replace
85	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
86	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
87	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MOVED)  {  return  state;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MOVED)  {  return  state;  }  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MOVED)  {  return  state;  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
88	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child,  new  Action())  {  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  NodeTraversal.traverse(compiler,  child,  new  Action())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	NodeTraversal.traverse(compiler,  child,  new  Action())  {	  n!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	17	None	replace
89	[BUG]  [BUGGY]  NodeUtil.copyCfgNode(child,  n);  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  NodeUtil.copyCfgNode(child,  n);  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	NodeUtil.copyCfgNode(child,  n);	  n!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
90	[BUG]  [BUGGY]  Node  child!=  null;  child  =  child.getNext())  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  Node  child!=  null;  child  =  child.getNext())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child!=  null;  child  =  child.getNext())  {	  node!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	7	None	replace
91	[BUG]  [BUGGY]  Node  node!=  null;  child  =  child.getNext())  {  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  Node  node!=  null;  child  =  child.getNext())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  node!=  null;  child  =  child.getNext())  {	  node!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	7	None	replace
92	[BUG]  [BUGGY]  Node  }  null;  child  =  child.getNext())  {  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  Node  }  null;  child  =  child.getNext())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  null;  child  =  child.getNext())  {	  node!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	7	None	replace
93	[BUG]  [BUGGY]  Node  <  Null;  child  =  child.getNext())  {  [CE]  cannot  find  symbol  Node  [FE]                      AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  Node  <  Null;  child  =  child.getNext())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  <  Null;  child  =  child.getNext())  {	  node!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  cannot  find  symbol  Node	7	None	replace
94	[BUG]  [BUGGY]  ncy!=  null;  child  =  child.getNext())  {  [CE]  cannot  find  symbol  ncy  [FE]                        AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  ncy!=  null;  child  =  child.getNext())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	ncy!=  null;  child  =  child.getNext())  {	  node!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  cannot  find  symbol  ncy	7	None	replace
95	[BUG]  [BUGGY]  if(child  ==  null)  {  child  =  child.getNext())  {  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  if(child  ==  null)  {  child  =  child.getNext())  {  }  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child  ==  null)  {  child  =  child.getNext())  {  }	  if(child!=    null)    {    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
96	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getParent())  {  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  if(child!=  null)  {  child  =  child.getParent())  {  }  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getParent())  {  }	  if(child!=    null)    {    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
97	[BUG]  [BUGGY]  Child  child  =  child.getNext())  {  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  Child  child  =  child.getNext())  {  }  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getNext())  {  }	  if(child!=    null)    {    child    =    child.getNext())    {    }    	non-compiled	[CE]  ';'  expected	15	None	replace
98	[BUG]  [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getNext(),  variable)  {  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getNext(),  variable)  {  }  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child!=  null;  child  =  child.getNext(),  variable)  {  }	  child!=    null;    child    =    child.getNext(),    variable)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
99	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext(),  VariableLiveness.KILL)  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child!=  null;  child  =  child.getNext(),  VariableLiveness.KILL)  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext(),  VariableLiveness.KILL)  {	  child!=    null;    child    =    child.getNext(),    variable)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
100	[BUG]  [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getParent())  {  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getParent())  {  }  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child!=  null;  child  =  child.getParent())  {  }	  if(child    ==    null)    {    child!=    null;    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
101	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getNext();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  if(child!=  null)  {  child  =  child.getNext();  }  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getNext();  }	  if(child    ==    null)    {    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
102	[BUG]  [BUGGY]  if(child  ==  null)  {  child  =  child.getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  if(child  ==  null)  {  child  =  child.getNext())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child  ==  null)  {  child  =  child.getNext())  {	  if(child    ==    null)    {    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
103	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getFirstChild();  child  =  child.getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  if(child!=  null)  {  child  =  child.getFirstChild();  child  =  child.getNext())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getFirstChild();  child  =  child.getNext())  {	  if(child    ==    null)    {    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
104	[BUG]  [BUGGY]  if(child  ==  null)  {  child  =  child.getNext();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  if(child  ==  null)  {  child  =  child.getNext();  }  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child  ==  null)  {  child  =  child.getNext();  }	  if(child    ==    null)    {    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
105	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getFirstChild();  child  =  child.getNext())  {  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  if(child!=  null)  {  child  =  child.getFirstChild();  child  =  child.getNext())  {  }  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getFirstChild();  child  =  child.getNext())  {  }	  if(child!=    null)    {    child!=    null;    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
106	[BUG]  [BUGGY]  n!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  Action());  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  n!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  Action());  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,  child,  new  Action());	  	non-compiled	[CE]  not  a  statement	16	None	add
107	[BUG]  [BUGGY]  n!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  this);  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  n!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  this);  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,  child,  this);	  	non-compiled	[CE]  not  a  statement	16	None	add
108	[BUG]  [BUGGY]  n!=  null;  child  =  child.getNext())  {  Node  child  =  n.getFirstChild();  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  n!=  null;  child  =  child.getNext())  {  Node  child  =  n.getFirstChild();  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=    null;    child    =    child.getNext())    {    Node  child  =  n.getFirstChild();	  	non-compiled	[CE]  not  a  statement	16	None	add
109	[BUG]  [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getFirstChild())  {  }  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getFirstChild())  {  }  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child!=  null;  child  =  child.getFirstChild())  {  }	  child!=    null;    child    =    child.getFirstChild())    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
110	[BUG]  [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getFirstChild())  {  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getFirstChild())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child!=  null;  child  =  child.getFirstChild())  {	  child!=    null;    child    =    child.getFirstChild())    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
111	[BUG]  [BUGGY]  if(child  ==  null)  {  child!=  null;  child  =  child.getFirstChild())  {  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  if(child  ==  null)  {  child!=  null;  child  =  child.getFirstChild())  {  }  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child  ==  null)  {  child!=  null;  child  =  child.getFirstChild())  {  }	  child!=    null;    child    =    child.getFirstChild())    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
112	[BUG]  [BUGGY]  if(child  ==  null)  {  child!=  null;  child  =  child.getFirstChild())  {  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  if(child  ==  null)  {  child!=  null;  child  =  child.getFirstChild())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child  ==  null)  {  child!=  null;  child  =  child.getFirstChild())  {	  child!=    null;    child    =    child.getFirstChild())    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
113	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child  ==  null;  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child    ==    null;    child    =    child.getNext())    {    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {	  	non-compiled	[CE]  not  a  statement	4	None	add
114	[BUG]  [BUGGY]  child!=  null;  child  =  child.getParent())  {  Child  child  =  child.getParent();  [CE]  not  a  statement  [FE]    StackOverflowError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child!=  null;  child  =  child.getParent())  {  Child  child  =  child.getParent();  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=    null;    child    =    child.getParent())    {    Child  child  =  child.getParent();	  	non-compiled	[CE]  not  a  statement	1	None	add
115	[BUG]  [BUGGY]  child!=  null;  child  =  child.getParent())  {  Node  child  =  child.getFirstChild();  [CE]  not  a  statement  [FE]      StackOverflowError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child!=  null;  child  =  child.getParent())  {  Node  child  =  child.getFirstChild();  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=    null;    child    =    child.getParent())    {    Node  child  =  child.getFirstChild();	  	non-compiled	[CE]  not  a  statement	1	None	add
116	[BUG]  [BUGGY]  child!=  null;  child  =  child.getParent())  {  Node  child  =  child.getParent();  [CE]  not  a  statement  [FE]        StackOverflowError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child!=  null;  child  =  child.getParent())  {  Node  child  =  child.getParent();  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=    null;    child    =    child.getParent())    {    Node  child  =  child.getParent();	  	non-compiled	[CE]  not  a  statement	1	None	add
117	[BUG]  [BUGGY]  child!=  null;  child  =  child.getParent())  {  Node  child  =  child.getNext();  [CE]  not  a  statement  [FE]          StackOverflowError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child!=  null;  child  =  child.getParent())  {  Node  child  =  child.getNext();  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=    null;    child    =    child.getParent())    {    Node  child  =  child.getNext();	  	non-compiled	[CE]  not  a  statement	1	None	add
118	[BUG]  [BUGGY]  Child  }  null;  child  =  child.getPrevious())  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  Child  }  null;  child  =  child.getPrevious())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  }  null;  child  =  child.getPrevious())  {	  child!=    null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  ';'  expected	6	None	replace
119	[BUG]  [BUGGY]  children!=  null;  child  =  child.getPrevious())  {  [CE]  cannot  find  symbol  children  [FE]                AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  children!=  null;  child  =  child.getPrevious())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	children!=  null;  child  =  child.getPrevious())  {	  child!=    null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  cannot  find  symbol  children	6	None	replace
120	[BUG]  [BUGGY]  Child  child  =  child.getPrevious())  {  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  Child  child  =  child.getPrevious())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getPrevious())  {	  child!=    null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  ';'  expected	6	None	replace
121	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getParent();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  if(child!=  null)  {  child  =  child.getParent();  }  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getParent();  }	  if(child!=    null)    {    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
122	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getFirstChild();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  if(child!=  null)  {  child  =  child.getFirstChild();  }  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getFirstChild();  }	  if(child!=    null)    {    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
123	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getParent();  child  =  child.getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  if(child!=  null)  {  child  =  child.getParent();  child  =  child.getNext())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getParent();  child  =  child.getNext())  {	  if(child!=    null)    {    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
124	[BUG]  [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=    null;    child    =    child.getFirstChild())    {    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);	  	non-compiled	[CE]  not  a  statement	13	None	add
125	[BUG]  [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=    null;    child    =    child.getFirstChild())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {	  	non-compiled	[CE]  not  a  statement	13	None	add
126	[BUG]  [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  Node  variable  =  child.getFirstChild();  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  Node  variable  =  child.getFirstChild();  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=    null;    child    =    child.getFirstChild())    {    Node  variable  =  child.getFirstChild();	  	non-compiled	[CE]  not  a  statement	13	None	add
127	[BUG]  [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  Node  newCfgNode  =  child.getFirstChild();  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  Node  newCfgNode  =  child.getFirstChild();  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=    null;    child    =    child.getFirstChild())    {    Node  newCfgNode  =  child.getFirstChild();	  	non-compiled	[CE]  not  a  statement	13	None	add
128	[BUG]  [BUGGY]  child!=  null;  child  =  child.getParent())  {  Child  child!=  null;  child  =  child.getParent())  {  [CE]  ';'  expected  [FE]    StackOverflowError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child!=  null;  child  =  child.getParent())  {  Child  child!=  null;  child  =  child.getParent())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=    null;    child    =    child.getParent())    {    Child  child!=  null;  child  =  child.getParent())  {	  	non-compiled	[CE]  ';'  expected	1	None	add
129	[BUG]  [BUGGY]  child!=  null;  child  =  child.getParent())  {  Child  child!=  null;  child  =  child.getNext())  {  [CE]  ';'  expected  [FE]      StackOverflowError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child!=  null;  child  =  child.getParent())  {  Child  child!=  null;  child  =  child.getNext())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=    null;    child    =    child.getParent())    {    Child  child!=  null;  child  =  child.getNext())  {	  	non-compiled	[CE]  ';'  expected	1	None	add
130	[BUG]  [BUGGY]  n!=  null;  child  =  child.getNext())  {  Node  n  =  child.getFirstChild();  n!=  null;  child  =  child.getNext())  {  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  n!=  null;  child  =  child.getNext())  {  Node  n  =  child.getFirstChild();  n!=  null;  child  =  child.getNext())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=    null;    child    =    child.getNext())    {    Node  n  =  child.getFirstChild();  n!=  null;  child  =  child.getNext())  {	  	non-compiled	[CE]  not  a  statement	16	None	add
131	[BUG]  [BUGGY]  n!=  null;  child  =  child.getNext())  {  Node  n  =  child.getLastChild();  n!=  null;  child  =  child.getNext())  {  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  n!=  null;  child  =  child.getNext())  {  Node  n  =  child.getLastChild();  n!=  null;  child  =  child.getNext())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=    null;    child    =    child.getNext())    {    Node  n  =  child.getLastChild();  n!=  null;  child  =  child.getNext())  {	  	non-compiled	[CE]  not  a  statement	16	None	add
132	[BUG]  [BUGGY]  n!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  this);  n!=  null;  child  =  child.getNext())  {  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  n!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  this);  n!=  null;  child  =  child.getNext())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,  child,  this);  n!=  null;  child  =  child.getNext())  {	  	non-compiled	[CE]  not  a  statement	16	None	add
133	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable));  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable));  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child    ==    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable));	  	non-compiled	[CE]  not  a  statement	4	None	add
134	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  this);  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  this);  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child    ==    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,  child,  this);	  	non-compiled	[CE]  not  a  statement	4	None	add
135	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getNext())  {  Node  newCfgNode  =  child.getFirstChild();  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child  ==  null;  child  =  child.getNext())  {  Node  newCfgNode  =  child.getFirstChild();  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child    ==    null;    child    =    child.getNext())    {    Node  newCfgNode  =  child.getFirstChild();	  	non-compiled	[CE]  not  a  statement	4	None	add
136	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getNext())  {  Node  n  =  child.getFirstChild();  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child  ==  null;  child  =  child.getNext())  {  Node  n  =  child.getFirstChild();  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child    ==    null;    child    =    child.getNext())    {    Node  n  =  child.getFirstChild();	  	non-compiled	[CE]  not  a  statement	4	None	add
137	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getNext())  {  Node  child  =  child.getFirstChild();  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child  ==  null;  child  =  child.getNext())  {  Node  child  =  child.getFirstChild();  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child    ==    null;    child    =    child.getNext())    {    Node  child  =  child.getFirstChild();	  	non-compiled	[CE]  not  a  statement	4	None	add
138	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError());  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError());  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child    ==    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError());	  	non-compiled	[CE]  not  a  statement	4	None	add
139	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable),  n);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable),  n);  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child    ==    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable),  n);	  	non-compiled	[CE]  not  a  statement	4	None	add
140	[BUG]  [BUGGY]  if(child!=  null)  {  child  ==  null;  child  =  child.getNext())  {  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  if(child!=  null)  {  child  ==  null;  child  =  child.getNext())  {  }  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  ==  null;  child  =  child.getNext())  {  }	  if(child    ==    null)    {    child!=    null;    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
141	[BUG]  [BUGGY]  if(child  ==  null  ||  child.getType()  ==  Token.NAME)  {  child!=  null;  child  =  child.getNext())  {  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  if(child  ==  null  ||  child.getType()  ==  Token.NAME)  {  child!=  null;  child  =  child.getNext())  {  }  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child  ==  null  ||  child.getType()  ==  Token.NAME)  {  child!=  null;  child  =  child.getNext())  {  }	  if(child    ==    null)    {    child!=    null;    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
142	[BUG]  [BUGGY]  if(child  ==  null  ||  child.getType()  ==  Token.CALL)  {  child!=  null;  child  =  child.getNext())  {  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  if(child  ==  null  ||  child.getType()  ==  Token.CALL)  {  child!=  null;  child  =  child.getNext())  {  }  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child  ==  null  ||  child.getType()  ==  Token.CALL)  {  child!=  null;  child  =  child.getNext())  {  }	  if(child    ==    null)    {    child!=    null;    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
143	[BUG]  [BUGGY]  if(child!=  null)  {  child.removeChild(child);  child  =  child.getNext())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  if(child!=  null)  {  child.removeChild(child);  child  =  child.getNext())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child.removeChild(child);  child  =  child.getNext())  {	  if(child!=    null)    {    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
144	[BUG]  [BUGGY]  if(child!=  null  &&  child.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  if(child!=  null  &&  child.getType()  ==  Token.FUNCTION)  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null  &&  child.getType()  ==  Token.FUNCTION)  {	  if(child!=    null)    {    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
145	[BUG]  [BUGGY]  Node  <  KILL;  child  =  child.getNext())  {  [CE]  cannot  find  symbol  Node  [FE]                AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  Node  <  KILL;  child  =  child.getNext())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  <  KILL;  child  =  child.getNext())  {	  node!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  cannot  find  symbol  Node	7	None	replace
146	[BUG]  [BUGGY]  Node  <  Node,  Child>  child  =  child.getNext())  {  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  Node  <  Node,  Child>  child  =  child.getNext())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  <  Node,  Child>  child  =  child.getNext())  {	  node!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	7	None	replace
147	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getParent();  child  =  child.getNext())  {  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  if(child!=  null)  {  child  =  child.getParent();  child  =  child.getNext())  {  }  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getParent();  child  =  child.getNext())  {  }	  if(child!=    null)    {    child!=    null;    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
148	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR);  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.VAR);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
149	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL);  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.CALL);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
150	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext(),  variable  +  1)  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child!=  null;  child  =  child.getNext(),  variable  +  1)  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext(),  variable  +  1)  {	  child!=    null;    child    =    child.getNext(),    variable)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
151	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext(),  variable).returnZero();  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child!=  null;  child  =  child.getNext(),  variable).returnZero();  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext(),  variable).returnZero();	  child!=    null;    child    =    child.getNext(),    variable)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
152	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getNext();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  child  =  child.getParent();  }  [CE]  illegal  start  of  expression  [FE]    StackOverflowError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  if(child!=  null)  {  child  =  child.getNext();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  child  =  child.getParent();  }  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getNext();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  child  =  child.getParent();  }	  child!=    null;    child    =    child.getParent())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
153	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getParent();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  child  =  child.getNext();  }  [CE]  illegal  start  of  expression  [FE]      StackOverflowError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  if(child!=  null)  {  child  =  child.getParent();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  child  =  child.getNext();  }  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getParent();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  child  =  child.getNext();  }	  child!=    null;    child    =    child.getParent())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
154	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getParent();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  child  =  child.getFirstChild();  }  [CE]  illegal  start  of  expression  [FE]        StackOverflowError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  if(child!=  null)  {  child  =  child.getParent();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  child  =  child.getFirstChild();  }  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getParent();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  child  =  child.getFirstChild();  }	  child!=    null;    child    =    child.getParent())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
155	[BUG]  [BUGGY]  if(child.getType()  ==  Token.NAME)  {  child!=  null;  child  =  child.getParent())  {  }  [CE]  illegal  start  of  expression  [FE]          StackOverflowError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  if(child.getType()  ==  Token.NAME)  {  child!=  null;  child  =  child.getParent())  {  }  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child.getType()  ==  Token.NAME)  {  child!=  null;  child  =  child.getParent())  {  }	  child!=    null;    child    =    child.getParent())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
156	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getParent();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  return  VariableLiveness.KILL;  }  [CE]  illegal  start  of  expression  [FE]            StackOverflowError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  if(child!=  null)  {  child  =  child.getParent();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  return  VariableLiveness.KILL;  }  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getParent();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  return  VariableLiveness.KILL;  }	  child!=    null;    child    =    child.getParent())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
157	[BUG]  [BUGGY]  if(child.getType()  ==  Token.NAME)  {  child  =  child.getNext();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.EXPR_RESULT);  }  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  if(child.getType()  ==  Token.NAME)  {  child  =  child.getNext();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.EXPR_RESULT);  }  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child.getType()  ==  Token.NAME)  {  child  =  child.getNext();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.EXPR_RESULT);  }	  child    ==    null;    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
158	[BUG]  [BUGGY]  child  >=  null;  child  =  child.getNext())  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child  >=  null;  child  =  child.getNext())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  >=  null;  child  =  child.getNext())  {	  child    ==    null;    child    =    child.getNext())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	5	None	replace
159	[BUG]  [BUGGY]  if(child.getType()  ==  Token.NAME)  {  child  =  child.getNext();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.CALL);  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  if(child.getType()  ==  Token.NAME)  {  child  =  child.getNext();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.CALL);  }  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child.getType()  ==  Token.NAME)  {  child  =  child.getNext();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.CALL);  }	  child    ==    null;    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
160	[BUG]  [BUGGY]  if(child.getType()  ==  Token.NAME)  {  child  =  child.getNext();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  return  null;  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  if(child.getType()  ==  Token.NAME)  {  child  =  child.getNext();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  return  null;  }  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child.getType()  ==  Token.NAME)  {  child  =  child.getNext();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  return  null;  }	  child    ==    null;    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
161	[BUG]  [BUGGY]  null;  child  =  child.getPrevious())  {  [CE]  incompatible  types  [FE]              AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  null;  child  =  child.getPrevious())  {  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	null;  child  =  child.getPrevious())  {	  child!=    null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  incompatible  types	6	None	replace
162	[BUG]  [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  Node  child  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  Node  child  =  parent.getFirstChild();  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=    null;    child    =    child.getFirstChild())    {    Node  child  =  parent.getFirstChild();	  	non-compiled	[CE]  not  a  statement	13	None	add
163	[BUG]  [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  child!=  null;  child  =  child.getFirstChild());  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  child!=  null;  child  =  child.getFirstChild());  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=    null;    child    =    child.getFirstChild())    {    child!=  null;  child  =  child.getFirstChild());	  	non-compiled	[CE]  not  a  statement	13	None	add
164	[BUG]  [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  n.removeChild(child);  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();    [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  n.removeChild(child);  [BUGGY]    if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=    null;    child    =    child.getFirstChild())    {    n.removeChild(child);	  	non-compiled	[CE]  not  a  statement	13	None	add
