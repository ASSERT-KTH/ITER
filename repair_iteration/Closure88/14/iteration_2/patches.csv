bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  child!=  null;  child  =  child.getFirstChild());  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getFirstChild());  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getFirstChild());	  child!=    null;    child    =    child.getFirstChild())    {    child!=    null;    child    =    child.getFirstChild());    	non-compiled	[CE]  illegal  start  of  type	163	None	replace
2	[BUG]  [BUGGY]  child!=  null;  child  =  child.getLastChild());  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getLastChild());  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getLastChild());	  child!=    null;    child    =    child.getFirstChild())    {    child!=    null;    child    =    child.getFirstChild());    	non-compiled	[CE]  illegal  start  of  type	163	None	replace
3	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext())  {  child!=  null;  child  =  child.getFirstChild();  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext())  {  child!=  null;  child  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext())  {  child!=  null;  child  =  child.getFirstChild();	  child!=    null;    child    =    child.getFirstChild())    {    child!=    null;    child    =    child.getFirstChild());    	non-compiled	[CE]  not  a  statement	163	None	replace
4	[BUG]  [BUGGY]  child!=  null;  child  =  child.getParent())  {  child!=  null;  child  =  child.getFirstChild();  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getParent())  {  child!=  null;  child  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getParent())  {  child!=  null;  child  =  child.getFirstChild();	  child!=    null;    child    =    child.getFirstChild())    {    child!=    null;    child    =    child.getFirstChild());    	non-compiled	[CE]  not  a  statement	163	None	replace
5	[BUG]  [BUGGY]  child!=  null;  child  =  child.getParent())  {  child!=  null;  child  =  child.getFirstChild();  }  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getParent())  {  child!=  null;  child  =  child.getFirstChild();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getParent())  {  child!=  null;  child  =  child.getFirstChild();  }	  child!=    null;    child    =    child.getFirstChild())    {    child!=    null;    child    =    child.getFirstChild());    	non-compiled	[CE]  not  a  statement	163	None	replace
6	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext())  {  child!=  null;  child  =  child.getFirstChild();  }  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext())  {  child!=  null;  child  =  child.getFirstChild();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext())  {  child!=  null;  child  =  child.getFirstChild();  }	  child!=    null;    child    =    child.getFirstChild())    {    child!=    null;    child    =    child.getFirstChild());    	non-compiled	[CE]  not  a  statement	163	None	replace
7	[BUG]  [BUGGY]  Child  child  =  child.getFirstChild();  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getFirstChild();	  child!=    null;    child    =    child.getFirstChild())    {    child!=    null;    child    =    child.getFirstChild());    	non-compiled	[CE]  ';'  expected	163	None	replace
8	[BUG]  [BUGGY]  Node  parent  =  child.getParent();  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  parent  =  child.getParent();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  parent  =  child.getParent();	  child!=    null;    child    =    child.getFirstChild())    {    Node    parent    =    child.getParent();    	non-compiled	[CE]  ';'  expected	36	None	replace
9	[BUG]  [BUGGY]  Node  child  =  child.getParent();  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  child  =  child.getParent();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  child.getParent();	  child!=    null;    child    =    child.getFirstChild())    {    Node    parent    =    child.getParent();    	non-compiled	[CE]  ';'  expected	36	None	replace
10	[BUG]  [BUGGY]  Node  child  =  parent.getFirstChild();  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  child  =  parent.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  parent.getFirstChild();	  child!=    null;    child    =    child.getFirstChild())    {    Node    parent    =    child.getParent();    	non-compiled	[CE]  ';'  expected	36	None	replace
11	[BUG]  [BUGGY]  Node  child  =  child.getFirstChild();  [CE]  ';'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  child  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  child.getFirstChild();	  child!=    null;    child    =    child.getFirstChild())    {    Node    parent    =    child.getParent();    	non-compiled	[CE]  ';'  expected	36	None	replace
12	[BUG]  [BUGGY]  Node  child  =  parent.getParent();  [CE]  ';'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  child  =  parent.getParent();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  parent.getParent();	  child!=    null;    child    =    child.getFirstChild())    {    Node    parent    =    child.getParent();    	non-compiled	[CE]  ';'  expected	36	None	replace
13	[BUG]  [BUGGY]  if(child!=  null)  {  child  >>  null;  child  =  child.getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child  >>  null;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  >>  null;  child  =  child.getNext())  {	  if(child!=    null)    {    child    >=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
14	[BUG]  [BUGGY]  if(child!=  null)  {  child  [Delete]  null;  child  =  child.getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child  [Delete]  null;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  [Delete]  null;  child  =  child.getNext())  {	  if(child!=    null)    {    child    >=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
15	[BUG]  [BUGGY]  Node  n  =  child.getFirstChild();  n!=  null;  child  =  child.getNext())  {  [CE]  ';'  expected  [FE]        RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  n  =  child.getFirstChild();  n!=  null;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  n  =  child.getFirstChild();  n!=  null;  child  =  child.getNext())  {	  n!=    null;    child    =    child.getNext())    {    Node    n    =    child.getFirstChild();    n!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	130	None	replace
16	[BUG]  [BUGGY]  Node  n  =  child.getLastChild();  n!=  null;  child  =  child.getNext())  {  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  n  =  child.getLastChild();  n!=  null;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  n  =  child.getLastChild();  n!=  null;  child  =  child.getNext())  {	  n!=    null;    child    =    child.getNext())    {    Node    n    =    child.getFirstChild();    n!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	130	None	replace
17	[BUG]  [BUGGY]  Node  child  =  child.getFirstChild();  n!=  null;  child  =  child.getNext())  {  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  child  =  child.getFirstChild();  n!=  null;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  child.getFirstChild();  n!=  null;  child  =  child.getNext())  {	  n!=    null;    child    =    child.getNext())    {    Node    n    =    child.getFirstChild();    n!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	130	None	replace
18	[BUG]  [BUGGY]  Node  child  =  n.getFirstChild();  n!=  null;  child  =  child.getNext())  {  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  child  =  n.getFirstChild();  n!=  null;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  n.getFirstChild();  n!=  null;  child  =  child.getNext())  {	  n!=    null;    child    =    child.getNext())    {    Node    n    =    child.getFirstChild();    n!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	130	None	replace
19	[BUG]  [BUGGY]  Node  n  =  child.getFirstChild();  n!=  null;  child  =  n.getNext())  {  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  n  =  child.getFirstChild();  n!=  null;  child  =  n.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  n  =  child.getFirstChild();  n!=  null;  child  =  n.getNext())  {	  n!=    null;    child    =    child.getNext())    {    Node    n    =    child.getFirstChild();    n!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	130	None	replace
20	[BUG]  [BUGGY]  Child  child!=  null;  child  =  child.getNext())  {  [CE]  ';'  expected  [FE]          StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child!=  null;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child!=  null;  child  =  child.getNext())  {	  child!=    null;    child    =    child.getParent())    {    Child    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	129	None	replace
21	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  child!=  null;  child  =  child.getParent())  {  }  [CE]  illegal  start  of  expression  [FE]            StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  child!=  null;  child  =  child.getParent())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  child!=  null;  child  =  child.getParent())  {  }	  child!=    null;    child    =    child.getParent())    {    Child    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
22	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  child!=  null;  child  =  child.getParent())  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]              StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  child!=  null;  child  =  child.getParent())  {  return  state;  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  child!=  null;  child  =  child.getParent())  {  return  state;  }	  child!=    null;    child    =    child.getParent())    {    Child    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
23	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Child  child!=  null;  child  =  child.getParent())  {  }  [CE]  illegal  start  of  expression  [FE]                StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Child  child!=  null;  child  =  child.getParent())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Child  child!=  null;  child  =  child.getParent())  {  }	  child!=    null;    child    =    child.getParent())    {    Child    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
24	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  child!=  null;  child  =  child.getParent())  {  [CE]  illegal  start  of  expression  [FE]                  StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  child!=  null;  child  =  child.getParent())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  child!=  null;  child  =  child.getParent())  {	  child!=    null;    child    =    child.getParent())    {    Child    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
25	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  child!=  null;  child  =  child.getNext())  {  [CE]  illegal  start  of  expression  [FE]                    StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  child!=  null;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  child!=  null;  child  =  child.getNext())  {	  child!=    null;    child    =    child.getParent())    {    Child    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
26	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext())  {  Node  child  =  n.getLastChild();  [CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext())  {  Node  child  =  n.getLastChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext())  {  Node  child  =  n.getLastChild();	  child    ==    null;    child    =    child.getNext())    {    Node    child    =    n.getLastChild();    	non-compiled	[CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	51	None	replace
27	[BUG]  [BUGGY]  node  ==  null;  child  =  child.getNext())  {  Node  child  =  n.getLastChild();  [CE]  cannot  find  symbol  node  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  node  ==  null;  child  =  child.getNext())  {  Node  child  =  n.getLastChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	node  ==  null;  child  =  child.getNext())  {  Node  child  =  n.getLastChild();	  child    ==    null;    child    =    child.getNext())    {    Node    child    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  node	51	None	replace
28	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext())  {  Node  child  =  n.getFirstChild();  [CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext())  {  Node  child  =  n.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext())  {  Node  child  =  n.getFirstChild();	  child    ==    null;    child    =    child.getNext())    {    Node    child    =    n.getLastChild();    	non-compiled	[CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	51	None	replace
29	[BUG]  [BUGGY]  node!=  null;  child  =  n.getPrevious())  {  [CE]  cannot  find  symbol  node  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  node!=  null;  child  =  n.getPrevious())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	node!=  null;  child  =  n.getPrevious())  {	  child!=    null;    child    =    n.getPrevious())    {    	non-compiled	[CE]  cannot  find  symbol  node	64	None	replace
30	[BUG]  [BUGGY]  Node  child  =  n.getPrevious())  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  child  =  n.getPrevious())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  n.getPrevious())  {	  child!=    null;    child    =    n.getPrevious())    {    	non-compiled	[CE]  ';'  expected	64	None	replace
31	[BUG]  [BUGGY]  child!=  null;  child  =  parent.getPrevious())  {  [CE]  cannot  find  symbol  parent  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  parent.getPrevious())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  parent.getPrevious())  {	  child!=    null;    child    =    n.getPrevious())    {    	non-compiled	[CE]  cannot  find  symbol  parent	64	None	replace
32	[BUG]  [BUGGY]  Node  n  =  child.getFirstChild();  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  n  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  n  =  child.getFirstChild();	  child    ==    null;    child    =    child.getNext())    {    Node    n    =    child.getFirstChild();    	non-compiled	[CE]  ';'  expected	136	None	replace
33	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext())  {  Node  n  =  child.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext())  {  Node  n  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext())  {  Node  n  =  child.getFirstChild();	  child    ==    null;    child    =    child.getNext())    {    Node    n    =    child.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	136	None	replace
34	[BUG]  [BUGGY]  Node  child  =  child.getNext())  {  Node  n  =  child.getFirstChild();  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  child  =  child.getNext())  {  Node  n  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  child.getNext())  {  Node  n  =  child.getFirstChild();	  child    ==    null;    child    =    child.getNext())    {    Node    n    =    child.getFirstChild();    	non-compiled	[CE]  ';'  expected	136	None	replace
35	[BUG]  [BUGGY]  node  ==  null;  child  =  child.getNext())  {  Node  n  =  child.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  node  ==  null;  child  =  child.getNext())  {  Node  n  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	node  ==  null;  child  =  child.getNext())  {  Node  n  =  child.getFirstChild();	  child    ==    null;    child    =    child.getNext())    {    Node    n    =    child.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	136	None	replace
36	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext())  {  Node  n  =  child.getLastChild();  [CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext())  {  Node  n  =  child.getLastChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext())  {  Node  n  =  child.getLastChild();	  child    ==    null;    child    =    child.getNext())    {    Node    n    =    child.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	136	None	replace
37	[BUG]  [BUGGY]  node  ==  null;  child  =  child.getNext())  {  Node  n  =  n.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  node  ==  null;  child  =  child.getNext())  {  Node  n  =  n.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	node  ==  null;  child  =  child.getNext())  {  Node  n  =  n.getFirstChild();	  child    ==    null;    child    =    child.getNext())    {    Node    n    =    child.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	136	None	replace
38	[BUG]  [BUGGY]  Child  child  =  child.getPrevious(),  variable)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getPrevious(),  variable)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getPrevious(),  variable)  {	  Child    child    =    child.getPrevious())    {    	non-compiled	[CE]  ';'  expected	120	None	replace
39	[BUG]  [BUGGY]  Child  child  =  child.getNext())  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getNext())  {	  Child    child    =    child.getPrevious())    {    	non-compiled	[CE]  ';'  expected	120	None	replace
40	[BUG]  [BUGGY]  Child  child  =  child.getLastChild())  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getLastChild())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getLastChild())  {	  Child    child    =    child.getPrevious())    {    	non-compiled	[CE]  ';'  expected	120	None	replace
41	[BUG]  [BUGGY]  Child  child  =  child.getPrevious(),  variable);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getPrevious(),  variable);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getPrevious(),  variable);	  Child    child    =    child.getPrevious())    {    	non-compiled	[CE]  ';'  expected	120	None	replace
42	[BUG]  [BUGGY]  Child  child  =  child.getParent())  {  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getParent())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getParent())  {	  Child    child    =    child.getPrevious())    {    	non-compiled	[CE]  ';'  expected	120	None	replace
43	[BUG]  [BUGGY]  Child  child!=  null;  child  =  child.getParent())  {  [CE]  ';'  expected  [FE]        StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child!=  null;  child  =  child.getParent())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child!=  null;  child  =  child.getParent())  {	  child!=    null;    child    =    child.getParent())    {    Child    child!=    null;    child    =    child.getParent())    {    	non-compiled	[CE]  ';'  expected	128	None	replace
44	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  child  >=  null;  child  =  child.getParent())  {  }  [CE]  illegal  start  of  expression  [FE]          StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  child  >=  null;  child  =  child.getParent())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  child  >=  null;  child  =  child.getParent())  {  }	  child!=    null;    child    =    child.getParent())    {    Child    child!=    null;    child    =    child.getParent())    {    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
45	[BUG]  [BUGGY]  child!=  null;  child  =  child.getChildCount())  {  [CE]  incompatible  types  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getChildCount())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getChildCount())  {	  child!=    null;    child    =    child.getFirstChild())    {    child!=    null;    child    =    child.getFirstChild())    {    	non-compiled	[CE]  incompatible  types	31	None	replace
46	[BUG]  [BUGGY]  child  =  child.getNext()  &&  variable!=  null  &&  variable.equals(child.getString()))  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  =  child.getNext()  &&  variable!=  null  &&  variable.equals(child.getString()))  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  =  child.getNext()  &&  variable!=  null  &&  variable.equals(child.getString()))  {	  child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	27	None	replace
47	[BUG]  [BUGGY]  child  =  child.getNext(),  variable)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  =  child.getNext(),  variable)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  =  child.getNext(),  variable)  {	  child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	27	None	replace
48	[BUG]  [BUGGY]  child  =  child.getParent())  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  =  child.getParent())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  =  child.getParent())  {	  child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	27	None	replace
49	[BUG]  [BUGGY]  child  =  child.getNext()  &&  variable  ==  null  &&  variable.equals(child.getString()))  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  =  child.getNext()  &&  variable  ==  null  &&  variable.equals(child.getString()))  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  =  child.getNext()  &&  variable  ==  null  &&  variable.equals(child.getString()))  {	  child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	27	None	replace
50	[BUG]  [BUGGY]  child  =  child.getNext()  &&  variable!=  null  &&  variable.equals(child.getString());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  =  child.getNext()  &&  variable!=  null  &&  variable.equals(child.getString());  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  =  child.getNext()  &&  variable!=  null  &&  variable.equals(child.getString());	  child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
51	[BUG]  [BUGGY]  child  =  child.getNext()  &&  variable!=  null  &&  variable.equals(child.getString()));  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  =  child.getNext()  &&  variable!=  null  &&  variable.equals(child.getString()));  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  =  child.getNext()  &&  variable!=  null  &&  variable.equals(child.getString()));	  child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	27	None	replace
52	[BUG]  [BUGGY]  child  =  child.getNext(),  variable)  {  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  =  child.getNext(),  variable)  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  =  child.getNext(),  variable)  {  }	  child    =    child.getNext())    {    }    	non-compiled	[CE]  ';'  expected	23	None	replace
53	[BUG]  [BUGGY]  child  =  child.getNext()  &&  variable!=  null  &&  variable.equals(child.getString()))  {  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  =  child.getNext()  &&  variable!=  null  &&  variable.equals(child.getString()))  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  =  child.getNext()  &&  variable!=  null  &&  variable.equals(child.getString()))  {  }	  child    =    child.getNext())    {    }    	non-compiled	[CE]  ';'  expected	23	None	replace
54	[BUG]  [BUGGY]  child  =  child.getParent())  {  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  =  child.getParent())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  =  child.getParent())  {  }	  child    =    child.getNext())    {    }    	non-compiled	[CE]  ';'  expected	23	None	replace
55	[BUG]  [BUGGY]  child  =  child.getNext()  &&  variable  ==  null  &&  variable.equals(child.getString()))  {  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  =  child.getNext()  &&  variable  ==  null  &&  variable.equals(child.getString()))  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  =  child.getNext()  &&  variable  ==  null  &&  variable.equals(child.getString()))  {  }	  child    =    child.getNext())    {    }    	non-compiled	[CE]  ';'  expected	23	None	replace
56	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child,  this);  n!=  null;  child  =  child.getNext())  {  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  NodeTraversal.traverse(compiler,  child,  this);  n!=  null;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	NodeTraversal.traverse(compiler,  child,  this);  n!=  null;  child  =  child.getNext())  {	  n!=    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    this);    n!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  not  a  statement	132	None	replace
57	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	State  state  =  isVariableReadBeforeKill(child,  variable);	  n!=    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    this);    n!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	132	None	replace
58	[BUG]  [BUGGY]  n.removeChild(child);  child  =  child.getNext())  {  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n.removeChild(child);  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n.removeChild(child);  child  =  child.getNext())  {	  if(child!=    null)    {    child.removeChild(child);    child    =    child.getNext())    {    	non-compiled	[CE]  incompatible  types	143	None	replace
59	[BUG]  [BUGGY]  NodeUtil.removeChild(child);  child  =  child.getNext())  {  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  NodeUtil.removeChild(child);  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	NodeUtil.removeChild(child);  child  =  child.getNext())  {	  if(child!=    null)    {    child.removeChild(child);    child    =    child.getNext())    {    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	143	None	replace
60	[BUG]  [BUGGY]  parent.removeChild(child);  child  =  child.getNext())  {  [CE]  cannot  find  symbol  parent  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  parent.removeChild(child);  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	parent.removeChild(child);  child  =  child.getNext())  {	  if(child!=    null)    {    child.removeChild(child);    child    =    child.getNext())    {    	non-compiled	[CE]  cannot  find  symbol  parent	143	None	replace
61	[BUG]  [BUGGY]  child.removeChild(child);  child  =  child.getNext())  {  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child.removeChild(child);  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child.removeChild(child);  child  =  child.getNext())  {	  if(child!=    null)    {    child.removeChild(child);    child    =    child.getNext())    {    	non-compiled	[CE]  incompatible  types	143	None	replace
62	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext(),  VariableLiveness.MILLISECOND)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext(),  VariableLiveness.MILLISECOND)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext(),  VariableLiveness.MILLISECOND)  {	  child!=    null;    child    =    child.getNext(),    VariableLiveness.KILL)    {    	non-compiled	[CE]  not  a  statement	99	None	replace
63	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext(),  VariableLiveness.FOR)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext(),  VariableLiveness.FOR)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext(),  VariableLiveness.FOR)  {	  child!=    null;    child    =    child.getNext(),    VariableLiveness.KILL)    {    	non-compiled	[CE]  not  a  statement	99	None	replace
64	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext(),  VariableLiveness.READ)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext(),  VariableLiveness.READ)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext(),  VariableLiveness.READ)  {	  child!=    null;    child    =    child.getNext(),    VariableLiveness.KILL)    {    	non-compiled	[CE]  not  a  statement	99	None	replace
65	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext(),  VariableLiveness.BOTTOM)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext(),  VariableLiveness.BOTTOM)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext(),  VariableLiveness.BOTTOM)  {	  child!=    null;    child    =    child.getNext(),    VariableLiveness.KILL)    {    	non-compiled	[CE]  not  a  statement	99	None	replace
66	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext(),  VariableLiveness.SEMI_LIVE)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext(),  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext(),  VariableLiveness.SEMI_LIVE)  {	  child!=    null;    child    =    child.getNext(),    VariableLiveness.KILL)    {    	non-compiled	[CE]  not  a  statement	99	None	replace
67	[BUG]  [BUGGY]  n!=  null;  child  =  child.getNext())  {  Node  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]          RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getNext())  {  Node  n  =  n.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getNext())  {  Node  n  =  n.getFirstChild();	  n!=    null;    child    =    child.getNext())    {    Node    n    =    child.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	39	None	replace
68	[BUG]  [BUGGY]  Node  n  =  child.getLastChild();  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  n  =  child.getLastChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  n  =  child.getLastChild();	  n!=    null;    child    =    child.getNext())    {    Node    n    =    child.getFirstChild();    	non-compiled	[CE]  ';'  expected	39	None	replace
69	[BUG]  [BUGGY]  Node  n  =  child.getNext();  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  n  =  child.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  n  =  child.getNext();	  n!=    null;    child    =    child.getNext())    {    Node    n    =    child.getFirstChild();    	non-compiled	[CE]  ';'  expected	39	None	replace
70	[BUG]  [BUGGY]  child  =  child.getParent();  child  =  child.getNext())  {  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  =  child.getParent();  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  =  child.getParent();  child  =  child.getNext())  {	  if(child!=    null)    {    child    =    child.getParent();    child    =    child.getNext())    {    	non-compiled	[CE]  incompatible  types	123	None	replace
71	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getNext();  child  =  child.getNext())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child  =  child.getNext();  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getNext();  child  =  child.getNext())  {	  if(child!=    null)    {    child    =    child.getParent();    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
72	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getNext();  child  =  child.getParent())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child  =  child.getNext();  child  =  child.getParent())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getNext();  child  =  child.getParent())  {	  if(child!=    null)    {    child    =    child.getParent();    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
73	[BUG]  [BUGGY]  Child  child  =  child.getParent();  child  =  child.getNext())  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getParent();  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getParent();  child  =  child.getNext())  {	  if(child!=    null)    {    child    =    child.getParent();    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	123	None	replace
74	[BUG]  [BUGGY]  Node  child  =  child.getParent();  child  =  child.getNext())  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  child  =  child.getParent();  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  child.getParent();  child  =  child.getNext())  {	  if(child!=    null)    {    child    =    child.getParent();    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	123	None	replace
75	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getLastChild())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	add	n!=  null;  child  =  child.getLastChild())  {	  n!=    null;    child    =    child.getParent())    {    	compilable	  [FE]  RuntimeException  	8	63	replace
76	[BUG]  [BUGGY]  n!=  null;  child  =  child.getLastChild())  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getLastChild())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getLastChild())  {	  n!=    null;    child    =    child.getParent())    {    	compilable	  [FE]  RuntimeException  	8	63	replace
77	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n  ==  null;  child  =  child.getParent())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	add	n  ==  null;  child  =  child.getParent())  {	  n!=    null;    child    =    child.getParent())    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	8	61	replace
78	[BUG]  [BUGGY]  n  ==  null;  child  =  child.getParent())  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n  ==  null;  child  =  child.getParent())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n  ==  null;  child  =  child.getParent())  {	  n!=    null;    child    =    child.getParent())    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	8	61	replace
79	[BUG]  [BUGGY]  Child!=  null;  child  =  child.getParent())  {  [CE]  cannot  find  symbol  Child  [FE]          StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child!=  null;  child  =  child.getParent())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child!=  null;  child  =  child.getParent())  {	  child!=    null;    child    =    child.getParent())    {    Child    }    null;    child    =    child.getParent())    {    	non-compiled	[CE]  cannot  find  symbol  Child	57	None	replace
80	[BUG]  [BUGGY]  child  >=  null;  child  =  child.getParent())  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  >=  null;  child  =  child.getParent())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  >=  null;  child  =  child.getParent())  {	  child!=    null;    child    =    child.getParent())    {    Child    }    null;    child    =    child.getParent())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	57	None	replace
81	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child,  new  Action(),  variable)  {  [CE]  ';'  expected  [FE]        RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  NodeTraversal.traverse(compiler,  child,  new  Action(),  variable)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	NodeTraversal.traverse(compiler,  child,  new  Action(),  variable)  {	  NodeTraversal.traverse(compiler,    child,    new    Action())    {    	non-compiled	[CE]  ';'  expected	88	None	replace
82	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Action())  {  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Action())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	NodeTraversal.traverse(compiler,  n,  new  Action())  {	  NodeTraversal.traverse(compiler,    child,    new    Action())    {    	non-compiled	[CE]  ';'  expected	88	None	replace
83	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child,  variable,  new  Action())  {  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  NodeTraversal.traverse(compiler,  child,  variable,  new  Action())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	NodeTraversal.traverse(compiler,  child,  variable,  new  Action())  {	  NodeTraversal.traverse(compiler,    child,    new    Action())    {    	non-compiled	[CE]  ';'  expected	88	None	replace
84	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child,  new  ActionArgument())  {  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  NodeTraversal.traverse(compiler,  child,  new  ActionArgument())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	NodeTraversal.traverse(compiler,  child,  new  ActionArgument())  {	  NodeTraversal.traverse(compiler,    child,    new    Action())    {    	non-compiled	[CE]  ';'  expected	88	None	replace
85	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child,  new  Action(),  this)  {  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  NodeTraversal.traverse(compiler,  child,  new  Action(),  this)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	NodeTraversal.traverse(compiler,  child,  new  Action(),  this)  {	  NodeTraversal.traverse(compiler,    child,    new    Action())    {    	non-compiled	[CE]  ';'  expected	88	None	replace
86	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child,  this)  {  [CE]  ';'  expected  [FE]                  RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  NodeTraversal.traverse(compiler,  child,  this)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	NodeTraversal.traverse(compiler,  child,  this)  {	  NodeTraversal.traverse(compiler,    child,    new    Action())    {    	non-compiled	[CE]  ';'  expected	88	None	replace
87	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child,  new  ActionParser())  {  [CE]  ';'  expected  [FE]                    RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  NodeTraversal.traverse(compiler,  child,  new  ActionParser())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	NodeTraversal.traverse(compiler,  child,  new  ActionParser())  {	  NodeTraversal.traverse(compiler,    child,    new    Action())    {    	non-compiled	[CE]  ';'  expected	88	None	replace
88	[BUG]  [BUGGY]  Node  <  Node,  Child>  child  =  child.getNext(),  variable)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  <  Node,  Child>  child  =  child.getNext(),  variable)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  <  Node,  Child>  child  =  child.getNext(),  variable)  {	  Node    <    Node,    Child>    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	146	None	replace
89	[BUG]  [BUGGY]  Node  <  Node,  Child>  child  =  child.getParent())  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  <  Node,  Child>  child  =  child.getParent())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  <  Node,  Child>  child  =  child.getParent())  {	  Node    <    Node,    Child>    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	146	None	replace
90	[BUG]  [BUGGY]  Node  <  Node,  Child>  child  =  child.getNext(),  variable);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  <  Node,  Child>  child  =  child.getNext(),  variable);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  <  Node,  Child>  child  =  child.getNext(),  variable);	  Node    <    Node,    Child>    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	146	None	replace
91	[BUG]  [BUGGY]  Node  <  Node,  Child>  child  =  child.getFirstChild())  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  <  Node,  Child>  child  =  child.getFirstChild())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  <  Node,  Child>  child  =  child.getFirstChild())  {	  Node    <    Node,    Child>    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	146	None	replace
92	[BUG]  [BUGGY]  Node  <  Node,  Child>  child  =  child.getLastChild())  {  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  <  Node,  Child>  child  =  child.getLastChild())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  <  Node,  Child>  child  =  child.getLastChild())  {	  Node    <    Node,    Child>    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	146	None	replace
93	[BUG]  [BUGGY]  Node  <  Node,  Child>  child  =  child.getPrevious())  {  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  <  Node,  Child>  child  =  child.getPrevious())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  <  Node,  Child>  child  =  child.getPrevious())  {	  Node    <    Node,    Child>    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	146	None	replace
94	[BUG]  [BUGGY]  Child  <  null;  child  =  child.getParent())  {  [CE]  cannot  find  symbol  Child  [FE]              StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  <  null;  child  =  child.getParent())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  <  null;  child  =  child.getParent())  {	  child!=    null;    child    =    child.getParent())    {    Child    <    null;    child    =    child.getParent())    {    	non-compiled	[CE]  cannot  find  symbol  Child	59	None	replace
95	[BUG]  [BUGGY]  Child  <  null;  child  =  child.getNext())  {  [CE]  cannot  find  symbol  Child  [FE]                StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  <  null;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  <  null;  child  =  child.getNext())  {	  child!=    null;    child    =    child.getParent())    {    Child    <    null;    child    =    child.getParent())    {    	non-compiled	[CE]  cannot  find  symbol  Child	59	None	replace
96	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext(),  variable)  {  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext(),  variable)  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext(),  variable)  {  }	  if(child!=    null)    {    child!=    null;    child    =    child.getNext(),    variable)    {    }    	non-compiled	[CE]  not  a  statement	98	None	replace
97	[BUG]  [BUGGY]  Child  <  KILL  ||  child!=  null;  child  =  child.getNext(),  variable)  {  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  <  KILL  ||  child!=  null;  child  =  child.getNext(),  variable)  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  <  KILL  ||  child!=  null;  child  =  child.getNext(),  variable)  {  }	  if(child!=    null)    {    child!=    null;    child    =    child.getNext(),    variable)    {    }    	non-compiled	[CE]  not  a  statement	98	None	replace
98	[BUG]  [BUGGY]  parent!=  null;  child  =  child.getNext(),  variable)  {  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  parent!=  null;  child  =  child.getNext(),  variable)  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	parent!=  null;  child  =  child.getNext(),  variable)  {  }	  if(child!=    null)    {    child!=    null;    child    =    child.getNext(),    variable)    {    }    	non-compiled	[CE]  not  a  statement	98	None	replace
99	[BUG]  [BUGGY]  Child  <  KILL  ||  child  ==  null;  child  =  child.getNext(),  variable)  {  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  <  KILL  ||  child  ==  null;  child  =  child.getNext(),  variable)  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  <  KILL  ||  child  ==  null;  child  =  child.getNext(),  variable)  {  }	  if(child!=    null)    {    child!=    null;    child    =    child.getNext(),    variable)    {    }    	non-compiled	[CE]  not  a  statement	98	None	replace
100	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  n.removeChild(child);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	add	child!=  null;  child  =  child.getLastChild())  {  n.removeChild(child);	  child!=    null;    child    =    child.getFirstChild())    {    n.removeChild(child);    	compilable	  [FE]  RuntimeException  	164	61	replace
101	[BUG]  [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  n.removeChild(child);  [FE]  RuntimeException  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  n.removeChild(child);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getLastChild())  {  n.removeChild(child);	  child!=    null;    child    =    child.getFirstChild())    {    n.removeChild(child);    	compilable	  [FE]  RuntimeException  	164	61	replace
102	[BUG]  [BUGGY]  node!=  null;  child  =  child.getFirstChild())  {  n.removeChild(child);  [CE]  cannot  find  symbol  node  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  node!=  null;  child  =  child.getFirstChild())  {  n.removeChild(child);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	node!=  null;  child  =  child.getFirstChild())  {  n.removeChild(child);	  child!=    null;    child    =    child.getFirstChild())    {    n.removeChild(child);    	non-compiled	[CE]  cannot  find  symbol  node	164	None	replace
103	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext())  {  n.removeChild(child);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	add	child!=  null;  child  =  child.getNext())  {  n.removeChild(child);	  child!=    null;    child    =    child.getFirstChild())    {    n.removeChild(child);    	compilable	  [FE]  RuntimeException  	164	61	replace
104	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext())  {  n.removeChild(child);  [FE]  RuntimeException  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext())  {  n.removeChild(child);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext())  {  n.removeChild(child);	  child!=    null;    child    =    child.getFirstChild())    {    n.removeChild(child);    	compilable	  [FE]  RuntimeException  	164	61	replace
105	[BUG]  [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  n.removeChild(child);  }  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  n.removeChild(child);  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getFirstChild())  {  n.removeChild(child);  }	  child!=    null;    child    =    child.getFirstChild())    {    n.removeChild(child);    	non-compiled	[CE]  illegal  start  of  type	164	None	replace
106	[BUG]  [BUGGY]  Child  child  =  child.getFirstChild())  {  n.removeChild(child);  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getFirstChild())  {  n.removeChild(child);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getFirstChild())  {  n.removeChild(child);	  child!=    null;    child    =    child.getFirstChild())    {    n.removeChild(child);    	non-compiled	[CE]  ';'  expected	164	None	replace
107	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.SEMI_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.SEMI_LIVE)    {    return    state;    }    	non-compiled	[CE]  ';'  expected	86	None	replace
108	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.SEMI_LIVE)    {    return    state;    }    	non-compiled	[CE]  ';'  expected	86	None	replace
109	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if(state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if(state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if(state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.SEMI_LIVE)    {    return    state;    }    	non-compiled	[CE]  ';'  expected	86	None	replace
110	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);  if(state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);  if(state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);  if(state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.SEMI_LIVE)    {    return    state;    }    	non-compiled	[CE]  ';'  expected	86	None	replace
111	[BUG]  [BUGGY]  Node  newCfgNode  =  child.getFirstChild();  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  newCfgNode  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  newCfgNode  =  child.getFirstChild();	  child!=    null;    child    =    child.getFirstChild())    {    Node    newCfgNode    =    child.getFirstChild();    	non-compiled	[CE]  ';'  expected	127	None	replace
112	[BUG]  [BUGGY]  newCfgNode  =  child.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  newCfgNode  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	newCfgNode  =  child.getFirstChild();	  child!=    null;    child    =    child.getFirstChild())    {    Node    newCfgNode    =    child.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
113	[BUG]  [BUGGY]  node!=  null;  child  =  child.getFirstChild())  {  Node  newCfgNode  =  child.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  node!=  null;  child  =  child.getFirstChild())  {  Node  newCfgNode  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	node!=  null;  child  =  child.getFirstChild())  {  Node  newCfgNode  =  child.getFirstChild();	  child!=    null;    child    =    child.getFirstChild())    {    Node    newCfgNode    =    child.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	127	None	replace
114	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  Node  newCfgNode  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	add	n!=  null;  child  =  child.getFirstChild())  {  Node  newCfgNode  =  child.getFirstChild();	  child!=    null;    child    =    child.getFirstChild())    {    Node    newCfgNode    =    child.getFirstChild();    	compilable	  [FE]  RuntimeException  	127	63	replace
115	[BUG]  [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  Node  newCfgNode  =  child.getFirstChild();  [FE]  RuntimeException  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  Node  newCfgNode  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getFirstChild())  {  Node  newCfgNode  =  child.getFirstChild();	  child!=    null;    child    =    child.getFirstChild())    {    Node    newCfgNode    =    child.getFirstChild();    	compilable	  [FE]  RuntimeException  	127	63	replace
116	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  Node  newCfgNode  =  child.getLastChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	add	child!=  null;  child  =  child.getFirstChild())  {  Node  newCfgNode  =  child.getLastChild();	  child!=    null;    child    =    child.getFirstChild())    {    Node    newCfgNode    =    child.getFirstChild();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	127	61	replace
117	[BUG]  [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  Node  newCfgNode  =  child.getLastChild();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  Node  newCfgNode  =  child.getLastChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getFirstChild())  {  Node  newCfgNode  =  child.getLastChild();	  child!=    null;    child    =    child.getFirstChild())    {    Node    newCfgNode    =    child.getFirstChild();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	127	61	replace
118	[BUG]  [BUGGY]  node!=  null;  child  =  child.getFirstChild())  {  Node  newCfgNode  =  newCfgNode.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  node!=  null;  child  =  child.getFirstChild())  {  Node  newCfgNode  =  newCfgNode.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	node!=  null;  child  =  child.getFirstChild())  {  Node  newCfgNode  =  newCfgNode.getFirstChild();	  child!=    null;    child    =    child.getFirstChild())    {    Node    newCfgNode    =    child.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	127	None	replace
119	[BUG]  [BUGGY]  Child  child  =  child.getNext(),  variable);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getNext(),  variable);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getNext(),  variable);	  Child    child    =    child.getNext(),    variable)    {    	non-compiled	[CE]  ';'  expected	78	None	replace
120	[BUG]  [BUGGY]  Child  child  =  child.getParent(),  variable)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getParent(),  variable)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getParent(),  variable)  {	  Child    child    =    child.getNext(),    variable)    {    	non-compiled	[CE]  ';'  expected	78	None	replace
121	[BUG]  [BUGGY]  Child  child  =  child.getNext(),  variable).returnNull();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getNext(),  variable).returnNull();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getNext(),  variable).returnNull();	  Child    child    =    child.getNext(),    variable)    {    	non-compiled	[CE]  ';'  expected	78	None	replace
122	[BUG]  [BUGGY]  Child  child  =  child.getNext(),  variable).returnZero();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getNext(),  variable).returnZero();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getNext(),  variable).returnZero();	  Child    child    =    child.getNext(),    variable)    {    	non-compiled	[CE]  ';'  expected	78	None	replace
123	[BUG]  [BUGGY]  Child  child  =  child.getNext(),  VariableLiveness.MAYBE_LIVE)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getNext(),  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getNext(),  VariableLiveness.MAYBE_LIVE)  {	  Child    child    =    child.getNext(),    variable)    {    	non-compiled	[CE]  ';'  expected	78	None	replace
124	[BUG]  [BUGGY]  Child  child  =  child.getNext(),  VariableLiveness.KILL)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getNext(),  VariableLiveness.KILL)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getNext(),  VariableLiveness.KILL)  {	  Child    child    =    child.getNext(),    variable)    {    	non-compiled	[CE]  ';'  expected	78	None	replace
125	[BUG]  [BUGGY]  Child  <  KILL  ||  child!=  null;  child  =  child.getNext())  {  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  <  KILL  ||  child!=  null;  child  =  child.getNext())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  <  KILL  ||  child!=  null;  child  =  child.getNext())  {  }	  Child    <    KILL    ||    child    ==    null;    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
126	[BUG]  [BUGGY]  Child  <  KILL  ||  child  ==  null;  child  =  child.getParent())  {  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  <  KILL  ||  child  ==  null;  child  =  child.getParent())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  <  KILL  ||  child  ==  null;  child  =  child.getParent())  {  }	  Child    <    KILL    ||    child    ==    null;    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
127	[BUG]  [BUGGY]  Child  <  KILL  ||  child!=  null;  child  =  child.getParent())  {  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  <  KILL  ||  child!=  null;  child  =  child.getParent())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  <  KILL  ||  child!=  null;  child  =  child.getParent())  {  }	  Child    <    KILL    ||    child    ==    null;    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
128	[BUG]  [BUGGY]  Child  <  KILL  &&  child!=  null;  child  =  child.getNext())  {  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  <  KILL  &&  child!=  null;  child  =  child.getNext())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  <  KILL  &&  child!=  null;  child  =  child.getNext())  {  }	  Child    <    KILL    ||    child    ==    null;    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
129	[BUG]  [BUGGY]  Child  <  KILL  ||  child.getType()  ==  Token.CALL  &&  child!=  null;  child  =  child.getNext())  {  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  <  KILL  ||  child.getType()  ==  Token.CALL  &&  child!=  null;  child  =  child.getNext())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  <  KILL  ||  child.getType()  ==  Token.CALL  &&  child!=  null;  child  =  child.getNext())  {  }	  Child    <    KILL    ||    child    ==    null;    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
130	[BUG]  [BUGGY]  Child  <  KILL  &&  child  ==  null;  child  =  child.getNext())  {  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  <  KILL  &&  child  ==  null;  child  =  child.getNext())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  <  KILL  &&  child  ==  null;  child  =  child.getNext())  {  }	  Child    <    KILL    ||    child    ==    null;    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
131	[BUG]  [BUGGY]  Node  n  =  child.getPrevious())  {  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  n  =  child.getPrevious())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  n  =  child.getPrevious())  {	  n!=    null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  ';'  expected	13	None	replace
132	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  this);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	add	child!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  this);	  child    ==    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    this);    	compilable	  [FE]  AssertionFailedError  	134	57	replace
133	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  this);  [FE]  AssertionFailedError  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  this);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  this);	  child    ==    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    this);    	compilable	  [FE]  AssertionFailedError  	134	57	replace
134	[BUG]  [BUGGY]  Child  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  this);  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  this);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  this);	  child    ==    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    this);    	non-compiled	[CE]  ';'  expected	134	None	replace
135	[BUG]  [BUGGY]  node  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  this);  [CE]  cannot  find  symbol  node  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  node  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  this);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	node  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  this);	  child    ==    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    this);    	non-compiled	[CE]  cannot  find  symbol  node	134	None	replace
136	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  this);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	add	n  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  this);	  child    ==    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    this);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	134	61	replace
137	[BUG]  [BUGGY]  n  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  this);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  this);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  this);	  child    ==    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    this);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	134	61	replace
138	[BUG]  [BUGGY]  Predicates.checkNotNull(child);  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  this);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Predicates.checkNotNull(child);  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  this);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Predicates.checkNotNull(child);  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  this);	  child    ==    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    this);    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
139	[BUG]  [BUGGY]  Node  n  =  child.getParent();  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  n  =  child.getParent();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  n  =  child.getParent();	  n!=    null;    child    =    child.getNext())    {    Node    n    =    child.getParent();    	non-compiled	[CE]  ';'  expected	42	None	replace
140	[BUG]  [BUGGY]  node!=  null;  child  =  child.getNext())  {  Node  n  =  child.getParent();  [CE]  cannot  find  symbol  node  [FE]                  RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  node!=  null;  child  =  child.getNext())  {  Node  n  =  child.getParent();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	node!=  null;  child  =  child.getNext())  {  Node  n  =  child.getParent();	  n!=    null;    child    =    child.getNext())    {    Node    n    =    child.getParent();    	non-compiled	[CE]  cannot  find  symbol  node	42	None	replace
141	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  return  null;  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  return  null;  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.BLOCK);  return  null;	  if(child.getType()    ==    Token.NAME)    {    child    =    child.getNext();    }    else    {    Preconditions.checkState(child.getType()    ==    Token.BLOCK);    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
142	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME);  return  null;  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME);  return  null;  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME);  return  null;	  if(child.getType()    ==    Token.NAME)    {    child    =    child.getNext();    }    else    {    Preconditions.checkState(child.getType()    ==    Token.BLOCK);    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
143	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.BLOCK);	  if(child.getType()    ==    Token.NAME)    {    child    =    child.getNext();    }    else    {    Preconditions.checkState(child.getType()    ==    Token.BLOCK);    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
144	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.FUNCTION);	  if(child.getType()    ==    Token.NAME)    {    child    =    child.getNext();    }    else    {    Preconditions.checkState(child.getType()    ==    Token.BLOCK);    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
145	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME,  variable);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME,  variable);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME,  variable);	  if(child.getType()    ==    Token.NAME)    {    child    =    child.getNext();    }    else    {    Preconditions.checkState(child.getType()    ==    Token.BLOCK);    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
146	[BUG]  [BUGGY]  Node  <  KILL;  child  =  n.getNext())  {  [CE]  cannot  find  symbol  Node  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  <  KILL;  child  =  n.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  <  KILL;  child  =  n.getNext())  {	  Node    <    KILL;    child    =    child.getNext())    {    	non-compiled	[CE]  cannot  find  symbol  Node	145	None	replace
147	[BUG]  [BUGGY]  Node  <  KILL;  child  =  child.getNext(),  variable)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  <  KILL;  child  =  child.getNext(),  variable)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  <  KILL;  child  =  child.getNext(),  variable)  {	  Node    <    KILL;    child    =    child.getNext())    {    	non-compiled	[CE]  not  a  statement	145	None	replace
148	[BUG]  [BUGGY]  Node  <  KILL;  child  =  child.getParent())  {  [CE]  cannot  find  symbol  Node  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  <  KILL;  child  =  child.getParent())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  <  KILL;  child  =  child.getParent())  {	  Node    <    KILL;    child    =    child.getNext())    {    	non-compiled	[CE]  cannot  find  symbol  Node	145	None	replace
149	[BUG]  [BUGGY]  Node  <  KILL;  child  =  child.getNext()  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  Node  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  <  KILL;  child  =  child.getNext()  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  <  KILL;  child  =  child.getNext()  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  Node    <    KILL;    child    =    child.getNext())    {    	non-compiled	[CE]  cannot  find  symbol  Node	145	None	replace
150	[BUG]  [BUGGY]  Node  <  KILL;  child  =  child.getNext()  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  Node  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  <  KILL;  child  =  child.getNext()  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  <  KILL;  child  =  child.getNext()  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  Node    <    KILL;    child    =    child.getNext())    {    	non-compiled	[CE]  cannot  find  symbol  Node	145	None	replace
151	[BUG]  [BUGGY]  Node  <  KILL;  child  =  child.getFirstChild().getNext())  {  [CE]  cannot  find  symbol  Node  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  <  KILL;  child  =  child.getFirstChild().getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  <  KILL;  child  =  child.getFirstChild().getNext())  {	  Node    <    KILL;    child    =    child.getNext())    {    	non-compiled	[CE]  cannot  find  symbol  Node	145	None	replace
152	[BUG]  [BUGGY]  Node  }  else  if(child.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  }  else  if(child.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  else  if(child.getType()  ==  Token.FUNCTION)  {	  Node    }    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	92	None	replace
153	[BUG]  [BUGGY]  Node  }  ;  child  =  child.getNext())  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  }  ;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  ;  child  =  child.getNext())  {	  Node    }    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	92	None	replace
154	[BUG]  [BUGGY]  Node  }  else  if(child.getType()  ==  Token.EXPR_RESULT)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  }  else  if(child.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  else  if(child.getType()  ==  Token.EXPR_RESULT)  {	  Node    }    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	92	None	replace
155	[BUG]  [BUGGY]  Node  }  else  if(child.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  }  else  if(child.getType()  ==  Token.NAME)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  else  if(child.getType()  ==  Token.NAME)  {	  Node    }    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	92	None	replace
156	[BUG]  [BUGGY]  Node  }  else  if(child.getType()  ==  Token.CALL)  {  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  }  else  if(child.getType()  ==  Token.CALL)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  else  if(child.getType()  ==  Token.CALL)  {	  Node    }    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	92	None	replace
157	[BUG]  [BUGGY]  Node  }  else  if(child.getType()  ==  Token.NAME)  {  for(Node  child  =  child.getNext())  {  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  }  else  if(child.getType()  ==  Token.NAME)  {  for(Node  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  else  if(child.getType()  ==  Token.NAME)  {  for(Node  child  =  child.getNext())  {	  Node    }    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	92	None	replace
158	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  ';'  expected	68	None	replace
159	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  ';'  expected	68	None	replace
160	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  ';'  expected	68	None	replace
161	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  n);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  n);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  ';'  expected	68	None	replace
162	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  ';'  expected	68	None	replace
163	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  0xFFFF);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  0xFFFF);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  0xFFFF);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  ';'  expected	68	None	replace
164	[BUG]  [BUGGY]  if(child.getType()  ==  Token.NAME  &&  child.getChildCount()  >  1)  {  child!=  null;  child  =  child.getParent())  {  }  [CE]  illegal  start  of  expression  [FE]              StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child.getType()  ==  Token.NAME  &&  child.getChildCount()  >  1)  {  child!=  null;  child  =  child.getParent())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child.getType()  ==  Token.NAME  &&  child.getChildCount()  >  1)  {  child!=  null;  child  =  child.getParent())  {  }	  if(child.getType()    ==    Token.NAME)    {    child!=    null;    child    =    child.getParent())    {    }    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
165	[BUG]  [BUGGY]  if(child.getType()  ==  Token.NAME  &&  child.getFirstChild()!=  n)  {  child!=  null;  child  =  child.getParent())  {  }  [CE]  illegal  start  of  expression  [FE]                StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child.getType()  ==  Token.NAME  &&  child.getFirstChild()!=  n)  {  child!=  null;  child  =  child.getParent())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child.getType()  ==  Token.NAME  &&  child.getFirstChild()!=  n)  {  child!=  null;  child  =  child.getParent())  {  }	  if(child.getType()    ==    Token.NAME)    {    child!=    null;    child    =    child.getParent())    {    }    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
166	[BUG]  [BUGGY]  if(child.getType()  ==  Token.NAME)  {  child!=  null;  child  =  child.getNext())  {  }  [CE]  illegal  start  of  expression  [FE]                  StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child.getType()  ==  Token.NAME)  {  child!=  null;  child  =  child.getNext())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child.getType()  ==  Token.NAME)  {  child!=  null;  child  =  child.getNext())  {  }	  if(child.getType()    ==    Token.NAME)    {    child!=    null;    child    =    child.getParent())    {    }    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
167	[BUG]  [BUGGY]  Child  <  KILL  ||  child.getType()  ==  Token.NAME)  {  child!=  null;  child  =  child.getParent())  {  }  [CE]  ';'  expected  [FE]                    StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  <  KILL  ||  child.getType()  ==  Token.NAME)  {  child!=  null;  child  =  child.getParent())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  <  KILL  ||  child.getType()  ==  Token.NAME)  {  child!=  null;  child  =  child.getParent())  {  }	  if(child.getType()    ==    Token.NAME)    {    child!=    null;    child    =    child.getParent())    {    }    	non-compiled	[CE]  ';'  expected	155	None	replace
168	[BUG]  [BUGGY]  child!=  null;  child  =  child.getParent())  {  }  [CE]  illegal  start  of  type  [FE]                      StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getParent())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getParent())  {  }	  if(child.getType()    ==    Token.NAME)    {    child!=    null;    child    =    child.getParent())    {    }    	non-compiled	[CE]  illegal  start  of  type	155	None	replace
169	[BUG]  [BUGGY]  Child  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  child    ==    null;    child    =    child.getNext())    {    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  ';'  expected	52	None	replace
170	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.READ)  {  return  state;  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.READ)  {  return  state;  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.READ)  {  return  state;  }	  child    ==    null;    child    =    child.getNext())    {    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  ';'  expected	52	None	replace
171	[BUG]  [BUGGY]  Child  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  child    ==    null;    child    =    child.getNext())    {    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  ';'  expected	52	None	replace
172	[BUG]  [BUGGY]  Child  child  =  child.getNext(),  variable)  {  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getNext(),  variable)  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getNext(),  variable)  {  }	  Child    child    =    child.getNext())    {    }    	non-compiled	[CE]  ';'  expected	97	None	replace
173	[BUG]  [BUGGY]  Child  child  =  child.getParent())  {  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getParent())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getParent())  {  }	  Child    child    =    child.getNext())    {    }    	non-compiled	[CE]  ';'  expected	97	None	replace
174	[BUG]  [BUGGY]  Child  child  =  child.getFirstChild())  {  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getFirstChild())  {  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getFirstChild())  {  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;  }	  Child    child    =    child.getNext())    {    }    	non-compiled	[CE]  ';'  expected	97	None	replace
175	[BUG]  [BUGGY]  Child  child  =  child.getFirstChild())  {  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getFirstChild())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getFirstChild())  {  }	  Child    child    =    child.getNext())    {    }    	non-compiled	[CE]  ';'  expected	97	None	replace
176	[BUG]  [BUGGY]  Child  child  =  child.getFirstChild())  {  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  continue;  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getFirstChild())  {  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  continue;  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getFirstChild())  {  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  continue;  }	  Child    child    =    child.getNext())    {    }    	non-compiled	[CE]  ';'  expected	97	None	replace
177	[BUG]  [BUGGY]  child!=  null;  child  =  child.getPrevious(),  variable);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getPrevious(),  variable);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getPrevious(),  variable);	  child!=    null;    child    =    child.getPrevious(),    variable)    {    	non-compiled	[CE]  not  a  statement	66	None	replace
178	[BUG]  [BUGGY]  child!=  null;  child  =  child.getPrevious(),  VariableLiveness.MAYBE_LIVE)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getPrevious(),  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getPrevious(),  VariableLiveness.MAYBE_LIVE)  {	  child!=    null;    child    =    child.getPrevious(),    variable)    {    	non-compiled	[CE]  not  a  statement	66	None	replace
179	[BUG]  [BUGGY]  node!=  null;  child  =  child.getPrevious(),  variable)  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  node!=  null;  child  =  child.getPrevious(),  variable)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	node!=  null;  child  =  child.getPrevious(),  variable)  {	  child!=    null;    child    =    child.getPrevious(),    variable)    {    	non-compiled	[CE]  not  a  statement	66	None	replace
180	[BUG]  [BUGGY]  parent  ==  null  &&  child.getParent()!=  null)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  parent  ==  null  &&  child.getParent()!=  null)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	parent  ==  null  &&  child.getParent()!=  null)  {	  if(child!=    null)    {    child    =    child.getParent())    {    }    	non-compiled	[CE]  ';'  expected	96	None	replace
181	[BUG]  [BUGGY]  Node  variable  =  child.getLastChild();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  variable  =  child.getLastChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  variable  =  child.getLastChild();	  Node    variable    =    child.getFirstChild();    	non-compiled	[CE]  ';'  expected	71	None	replace
182	[BUG]  [BUGGY]  Node  variable  =  n.getFirstChild();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  variable  =  n.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  variable  =  n.getFirstChild();	  Node    variable    =    child.getFirstChild();    	non-compiled	[CE]  ';'  expected	71	None	replace
183	[BUG]  [BUGGY]  Node  variable  =  child.getNext();  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  variable  =  child.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  variable  =  child.getNext();	  Node    variable    =    child.getFirstChild();    	non-compiled	[CE]  ';'  expected	71	None	replace
184	[BUG]  [BUGGY]  Node  variable  =  child.getType();  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  variable  =  child.getType();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  variable  =  child.getType();	  Node    variable    =    child.getFirstChild();    	non-compiled	[CE]  ';'  expected	71	None	replace
185	[BUG]  [BUGGY]  Node  variable  =  child.getString();  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  variable  =  child.getString();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  variable  =  child.getString();	  Node    variable    =    child.getFirstChild();    	non-compiled	[CE]  ';'  expected	71	None	replace
186	[BUG]  [BUGGY]  Node  variable  =  child.getChildCount();  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  variable  =  child.getChildCount();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  variable  =  child.getChildCount();	  Node    variable    =    child.getFirstChild();    	non-compiled	[CE]  ';'  expected	71	None	replace
187	[BUG]  [BUGGY]  child!=  null;  child  =  child.getChildren())  {  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getChildren())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getChildren())  {	  child!=    null;    child    =    child.getParent())    {    child!=    null;    child    =    child.getParent())    {    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
188	[BUG]  [BUGGY]  child  =  child.getParent();  child  =  child.getNext())  {  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  =  child.getParent();  child  =  child.getNext())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  =  child.getParent();  child  =  child.getNext())  {  }	  if(child!=    null)    {    child    =    child.getParent();    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
189	[BUG]  [BUGGY]  Child  child  =  child.getParent();  child  =  child.getNext())  {  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getParent();  child  =  child.getNext())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getParent();  child  =  child.getNext())  {  }	  if(child!=    null)    {    child    =    child.getParent();    child    =    child.getNext())    {    }    	non-compiled	[CE]  ';'  expected	147	None	replace
190	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  ';'  expected	85	None	replace
191	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  ';'  expected	85	None	replace
192	[BUG]  [BUGGY]  node!=  null;  child  =  child.getFirstChild())  {  Node  variable  =  child.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  node!=  null;  child  =  child.getFirstChild())  {  Node  variable  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	node!=  null;  child  =  child.getFirstChild())  {  Node  variable  =  child.getFirstChild();	  child!=    null;    child    =    child.getFirstChild())    {    Node    variable    =    child.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	126	None	replace
193	[BUG]  [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  Node  variable  =  child.getLastChild();  [CE]  variable  variable  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  Node  variable  =  child.getLastChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getFirstChild())  {  Node  variable  =  child.getLastChild();	  child!=    null;    child    =    child.getFirstChild())    {    Node    variable    =    child.getFirstChild();    	non-compiled	[CE]  variable  variable  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	126	None	replace
194	[BUG]  [BUGGY]  node!=  null;  child  =  child.getFirstChild())  {  Node  variable  =  n.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  node!=  null;  child  =  child.getFirstChild())  {  Node  variable  =  n.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	node!=  null;  child  =  child.getFirstChild())  {  Node  variable  =  n.getFirstChild();	  child!=    null;    child    =    child.getFirstChild())    {    Node    variable    =    child.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	126	None	replace
195	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n  ==  child;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	add	n  ==  child;  child  =  child.getNext())  {	  n    ==    null;    child    =    child.getNext())    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	10	61	replace
196	[BUG]  [BUGGY]  n  ==  child;  child  =  child.getNext())  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n  ==  child;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n  ==  child;  child  =  child.getNext())  {	  n    ==    null;    child    =    child.getNext())    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	10	61	replace
197	[BUG]  [BUGGY]  node!=  null;  child  =  child.getNext())  {  Node  n  =  child.getLastChild();  [CE]  cannot  find  symbol  node  [FE]              RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  node!=  null;  child  =  child.getNext())  {  Node  n  =  child.getLastChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	node!=  null;  child  =  child.getNext())  {  Node  n  =  child.getLastChild();	  n!=    null;    child    =    child.getNext())    {    Node    n    =    child.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  node	41	None	replace
198	[BUG]  [BUGGY]  n!=  null;  child  =  child.getNext())  {  Node  n  =  n.getLastChild();  [CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getNext())  {  Node  n  =  n.getLastChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getNext())  {  Node  n  =  n.getLastChild();	  n!=    null;    child    =    child.getNext())    {    Node    n    =    child.getLastChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	41	None	replace
199	[BUG]  [BUGGY]  if(child!=  null  ||  child.getType()  ==  Token.FUNCTION)  {  child  =  child.getNext())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null  ||  child.getType()  ==  Token.FUNCTION)  {  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null  ||  child.getType()  ==  Token.FUNCTION)  {  child  =  child.getNext())  {	  if(child    ==    null)    {    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
200	[BUG]  [BUGGY]  if(child!=  null  ||  child.getType()  ==  Token.NAME)  {  child  =  child.getNext())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null  ||  child.getType()  ==  Token.NAME)  {  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null  ||  child.getType()  ==  Token.NAME)  {  child  =  child.getNext())  {	  if(child    ==    null)    {    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
201	[BUG]  [BUGGY]  if(child!=  null  ||  child.getType()  ==  Token.CALL)  {  child  =  child.getNext())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null  ||  child.getType()  ==  Token.CALL)  {  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null  ||  child.getType()  ==  Token.CALL)  {  child  =  child.getNext())  {	  if(child    ==    null)    {    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
202	[BUG]  [BUGGY]  if(child.getType()  ==  Token.NAME)  {  child  =  child.getNext())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child.getType()  ==  Token.NAME)  {  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child.getType()  ==  Token.NAME)  {  child  =  child.getNext())  {	  if(child    ==    null)    {    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
203	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getParent())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child  =  child.getParent())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getParent())  {	  if(child    ==    null)    {    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
204	[BUG]  [BUGGY]  Node  <  Null;  child  =  n.getNext())  {  [CE]  cannot  find  symbol  Node  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  <  Null;  child  =  n.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  <  Null;  child  =  n.getNext())  {	  Node    <    Null;    child    =    child.getNext())    {    	non-compiled	[CE]  cannot  find  symbol  Node	93	None	replace
205	[BUG]  [BUGGY]  Node  <  Null;  child  =  child.getNext(),  variable)  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  <  Null;  child  =  child.getNext(),  variable)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  <  Null;  child  =  child.getNext(),  variable)  {	  Node    <    Null;    child    =    child.getNext())    {    	non-compiled	[CE]  not  a  statement	93	None	replace
206	[BUG]  [BUGGY]  Node  <  Null;  child  =  child.getParent())  {  [CE]  cannot  find  symbol  Node  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  <  Null;  child  =  child.getParent())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  <  Null;  child  =  child.getParent())  {	  Node    <    Null;    child    =    child.getNext())    {    	non-compiled	[CE]  cannot  find  symbol  Node	93	None	replace
207	[BUG]  [BUGGY]  Node  <  Null;  child  =  child.getFirstChild().getNext())  {  [CE]  cannot  find  symbol  Node  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  <  Null;  child  =  child.getFirstChild().getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  <  Null;  child  =  child.getFirstChild().getNext())  {	  Node    <    Null;    child    =    child.getNext())    {    	non-compiled	[CE]  cannot  find  symbol  Node	93	None	replace
208	[BUG]  [BUGGY]  Node  <  Null;  child  =  child.getNext()  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  Node  [FE]                                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  <  Null;  child  =  child.getNext()  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  <  Null;  child  =  child.getNext()  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  Node    <    Null;    child    =    child.getNext())    {    	non-compiled	[CE]  cannot  find  symbol  Node	93	None	replace
209	[BUG]  [BUGGY]  Node  <  Null;  child  =  child.getNext()  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  Node  [FE]                                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  <  Null;  child  =  child.getNext()  ||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  <  Null;  child  =  child.getNext()  ||  state!=  VariableLiveness.MAYBE_LIVE)  {	  Node    <    Null;    child    =    child.getNext())    {    	non-compiled	[CE]  cannot  find  symbol  Node	93	None	replace
210	[BUG]  [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  }  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getFirstChild())  {  }	  if(child!=    null)    {    child!=    null;    child    =    child.getFirstChild())    {    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
211	[BUG]  [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getLastChild())  {  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getLastChild())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child!=  null;  child  =  child.getLastChild())  {  }	  if(child!=    null)    {    child!=    null;    child    =    child.getFirstChild())    {    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
212	[BUG]  [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  }  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getLastChild())  {  }	  if(child!=    null)    {    child!=    null;    child    =    child.getFirstChild())    {    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
213	[BUG]  [BUGGY]  child  =  child.getParent();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  =  child.getParent();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  =  child.getParent();	  if(child!=    null)    {    child    =    child.getParent();    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
214	[BUG]  [BUGGY]  Child  child  =  child.getParent();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getParent();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getParent();	  if(child!=    null)    {    child    =    child.getParent();    }    	non-compiled	[CE]  ';'  expected	121	None	replace
215	[BUG]  [BUGGY]  child  =  child.getNext();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  =  child.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  =  child.getNext();	  if(child!=    null)    {    child    =    child.getParent();    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
216	[BUG]  [BUGGY]  parent  ==  null)  {  child  =  child.getParent();  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  parent  ==  null)  {  child  =  child.getParent();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	parent  ==  null)  {  child  =  child.getParent();  }	  if(child!=    null)    {    child    =    child.getParent();    }    	non-compiled	[CE]  ';'  expected	121	None	replace
217	[BUG]  [BUGGY]  while(child  ==  null  &&  child.getType()  ==  Token.RETURN)  {  child  =  child.getNext())  {  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  while(child  ==  null  &&  child.getType()  ==  Token.RETURN)  {  child  =  child.getNext())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	while(child  ==  null  &&  child.getType()  ==  Token.RETURN)  {  child  =  child.getNext())  {  }	  while(child!=    null    &&    child.getType()    ==    Token.RETURN)    {    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
218	[BUG]  [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.RETURN)  {  child  =  child.getParent())  {  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.RETURN)  {  child  =  child.getParent())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	while(child!=  null  &&  child.getType()  ==  Token.RETURN)  {  child  =  child.getParent())  {  }	  while(child!=    null    &&    child.getType()    ==    Token.RETURN)    {    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
219	[BUG]  [BUGGY]  while(child!=  null  &&  child.getType()  >=  Token.RETURN)  {  child  =  child.getNext())  {  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  while(child!=  null  &&  child.getType()  >=  Token.RETURN)  {  child  =  child.getNext())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	while(child!=  null  &&  child.getType()  >=  Token.RETURN)  {  child  =  child.getNext())  {  }	  while(child!=    null    &&    child.getType()    ==    Token.RETURN)    {    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
220	[BUG]  [BUGGY]  while(child!=  null  ||  child.getType()  ==  Token.RETURN)  {  child  =  child.getNext())  {  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  while(child!=  null  ||  child.getType()  ==  Token.RETURN)  {  child  =  child.getNext())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	while(child!=  null  ||  child.getType()  ==  Token.RETURN)  {  child  =  child.getNext())  {  }	  while(child!=    null    &&    child.getType()    ==    Token.RETURN)    {    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
221	[BUG]  [BUGGY]  Child  child  =  n.getFirstChild();  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  n.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  n.getFirstChild();	  child!=    null;    child    =    child.getFirstChild())    {    Child    child    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	33	None	replace
222	[BUG]  [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  Child  child  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  Child  child  =  n.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getLastChild())  {  Child  child  =  n.getFirstChild();	  child!=    null;    child    =    child.getFirstChild())    {    Child    child    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
223	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext())  {  Child  child  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext())  {  Child  child  =  n.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext())  {  Child  child  =  n.getFirstChild();	  child!=    null;    child    =    child.getFirstChild())    {    Child    child    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
224	[BUG]  [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  Child  child  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  Child  child  =  n.getLastChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getFirstChild())  {  Child  child  =  n.getLastChild();	  child!=    null;    child    =    child.getFirstChild())    {    Child    child    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
225	[BUG]  [BUGGY]  child!=  null;  child  =  child.getChildren())  {  Child  child  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getChildren())  {  Child  child  =  n.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getChildren())  {  Child  child  =  n.getFirstChild();	  child!=    null;    child    =    child.getFirstChild())    {    Child    child    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
226	[BUG]  [BUGGY]  Node  }  else  if(child.getType()  ==  Token.FUNCTION  ||  child.getType()  ==  Token.EXPR_RESULT)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  }  else  if(child.getType()  ==  Token.FUNCTION  ||  child.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  else  if(child.getType()  ==  Token.FUNCTION  ||  child.getType()  ==  Token.EXPR_RESULT)  {	  Node    }    else    if(child.getType()    ==    Token.FUNCTION)    {    node!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	84	None	replace
227	[BUG]  [BUGGY]  Node  }  else  if(child.getType()  ==  Token.FUNCTION  ||  child.getType()  ==  Token.CALL)  {  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  }  else  if(child.getType()  ==  Token.FUNCTION  ||  child.getType()  ==  Token.CALL)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  else  if(child.getType()  ==  Token.FUNCTION  ||  child.getType()  ==  Token.CALL)  {	  Node    }    else    if(child.getType()    ==    Token.FUNCTION)    {    node!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	84	None	replace
228	[BUG]  [BUGGY]  Node  }  else  if(child.getType()  ==  Token.FUNCTION  ||  child.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  }  else  if(child.getType()  ==  Token.FUNCTION  ||  child.getType()  ==  Token.NAME)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  else  if(child.getType()  ==  Token.FUNCTION  ||  child.getType()  ==  Token.NAME)  {	  Node    }    else    if(child.getType()    ==    Token.FUNCTION)    {    node!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	84	None	replace
229	[BUG]  [BUGGY]  Node  }  else  if(child.getType()  ==  Token.FUNCTION  &&  child!=  null  &&  child.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  }  else  if(child.getType()  ==  Token.FUNCTION  &&  child!=  null  &&  child.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  else  if(child.getType()  ==  Token.FUNCTION  &&  child!=  null  &&  child.getFirstChild().getType()  ==  Token.NAME)  {	  Node    }    else    if(child.getType()    ==    Token.FUNCTION)    {    node!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	84	None	replace
230	[BUG]  [BUGGY]  Node  }  else  if(child.getType()  ==  Token.FUNCTION  &&  child!=  null  &&  child.getFirstChild().getType()  ==  Token.CALL)  {  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  }  else  if(child.getType()  ==  Token.FUNCTION  &&  child!=  null  &&  child.getFirstChild().getType()  ==  Token.CALL)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  else  if(child.getType()  ==  Token.FUNCTION  &&  child!=  null  &&  child.getFirstChild().getType()  ==  Token.CALL)  {	  Node    }    else    if(child.getType()    ==    Token.FUNCTION)    {    node!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	84	None	replace
231	[BUG]  [BUGGY]  if(child  ==  null)  {  child!=  null;  child  =  child.getLastChild())  {  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child  ==  null)  {  child!=  null;  child  =  child.getLastChild())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child  ==  null)  {  child!=  null;  child  =  child.getLastChild())  {  }	  if(child    ==    null)    {    child!=    null;    child    =    child.getFirstChild())    {    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
232	[BUG]  [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  Child  child  =  child.getFirstChild();  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  Child  child  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getLastChild())  {  Child  child  =  child.getFirstChild();	  child!=    null;    child    =    child.getFirstChild())    {    Child    child    =    child.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
233	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext())  {  Child  child  =  child.getFirstChild();  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext())  {  Child  child  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext())  {  Child  child  =  child.getFirstChild();	  child!=    null;    child    =    child.getFirstChild())    {    Child    child    =    child.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
234	[BUG]  [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  Child  child  =  child.getLastChild();  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  Child  child  =  child.getLastChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getFirstChild())  {  Child  child  =  child.getLastChild();	  child!=    null;    child    =    child.getFirstChild())    {    Child    child    =    child.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
235	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext())  {  Node  parent  =  child.getParent();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	add	child!=  null;  child  =  child.getNext())  {  Node  parent  =  child.getParent();	  child!=    null;    child    =    child.getParent())    {    Node    parent    =    child.getParent();    	compilable	  [FE]  AssertionFailedError  	61	57	replace
236	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext())  {  Node  parent  =  child.getParent();  [FE]  AssertionFailedError  [FE]                  StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext())  {  Node  parent  =  child.getParent();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext())  {  Node  parent  =  child.getParent();	  child!=    null;    child    =    child.getParent())    {    Node    parent    =    child.getParent();    	compilable	  [FE]  AssertionFailedError  	61	57	replace
237	[BUG]  [BUGGY]  node!=  null;  child  =  child.getParent())  {  Node  parent  =  parent.getParent();  [CE]  cannot  find  symbol  node  [FE]                    StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  node!=  null;  child  =  child.getParent())  {  Node  parent  =  parent.getParent();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	node!=  null;  child  =  child.getParent())  {  Node  parent  =  parent.getParent();	  child!=    null;    child    =    child.getParent())    {    Node    parent    =    child.getParent();    	non-compiled	[CE]  cannot  find  symbol  node	61	None	replace
238	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                      StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getParent())  {  Node  parent  =  child.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	add	child!=  null;  child  =  child.getParent())  {  Node  parent  =  child.getNext();	  child!=    null;    child    =    child.getParent())    {    Node    parent    =    child.getParent();    	compilable	  [FE]  StackOverflowError  	61	61	replace
239	[BUG]  [BUGGY]  child!=  null;  child  =  child.getParent())  {  Node  parent  =  child.getNext();  [FE]  StackOverflowError  [FE]                      StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getParent())  {  Node  parent  =  child.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getParent())  {  Node  parent  =  child.getNext();	  child!=    null;    child    =    child.getParent())    {    Node    parent    =    child.getParent();    	compilable	  [FE]  StackOverflowError  	61	61	replace
240	[BUG]  [BUGGY]  Child  <  KILL  ||  child!=  null;  child  =  child.getParent())  {  [CE]  cannot  find  symbol  Child  [FE]            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  <  KILL  ||  child!=  null;  child  =  child.getParent())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  <  KILL  ||  child!=  null;  child  =  child.getParent())  {	  Child    <    KILL    ||    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  cannot  find  symbol  Child	29	None	replace
241	[BUG]  [BUGGY]  Child  <  KILL  ||  child  ==  null;  child  =  child.getNext())  {  [CE]  cannot  find  symbol  Child  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  <  KILL  ||  child  ==  null;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  <  KILL  ||  child  ==  null;  child  =  child.getNext())  {	  Child    <    KILL    ||    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  cannot  find  symbol  Child	29	None	replace
242	[BUG]  [BUGGY]  Child  <  KILL  ||  child  >=  null;  child  =  child.getNext())  {  [CE]  cannot  find  symbol  Child  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  <  KILL  ||  child  >=  null;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  <  KILL  ||  child  >=  null;  child  =  child.getNext())  {	  Child    <    KILL    ||    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  cannot  find  symbol  Child	29	None	replace
243	[BUG]  [BUGGY]  Node  <  KILL  ||  child!=  null;  child  =  child.getNext())  {  [CE]  cannot  find  symbol  Node  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  <  KILL  ||  child!=  null;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  <  KILL  ||  child!=  null;  child  =  child.getNext())  {	  Child    <    KILL    ||    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  cannot  find  symbol  Node	29	None	replace
244	[BUG]  [BUGGY]  Child  <  KILL  &&  child!=  null;  child  =  child.getNext())  {  [CE]  cannot  find  symbol  Child  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  <  KILL  &&  child!=  null;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  <  KILL  &&  child!=  null;  child  =  child.getNext())  {	  Child    <    KILL    ||    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  cannot  find  symbol  Child	29	None	replace
245	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext(),  variable  +  1);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext(),  variable  +  1);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext(),  variable  +  1);	  child!=    null;    child    =    child.getNext(),    variable);    	non-compiled	[CE]  not  a  statement	76	None	replace
246	[BUG]  [BUGGY]  child!=  null;  child  =  child.getParent(),  variable);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getParent(),  variable);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getParent(),  variable);	  child!=    null;    child    =    child.getNext(),    variable);    	non-compiled	[CE]  not  a  statement	76	None	replace
247	[BUG]  [BUGGY]  node!=  null;  child  =  child.getNext(),  variable);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  node!=  null;  child  =  child.getNext(),  variable);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	node!=  null;  child  =  child.getNext(),  variable);	  child!=    null;    child    =    child.getNext(),    variable);    	non-compiled	[CE]  not  a  statement	76	None	replace
248	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getNext(),  variable);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  ==  null;  child  =  child.getNext(),  variable);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  ==  null;  child  =  child.getNext(),  variable);	  child!=    null;    child    =    child.getNext(),    variable);    	non-compiled	[CE]  not  a  statement	76	None	replace
249	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.READ)  {  return  state;  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.READ)  {  return  state;  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.READ)  {  return  state;  }	  child    ==    null;    child    =    child.getNext())    {    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state    ==    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  ';'  expected	54	None	replace
250	[BUG]  [BUGGY]  Node  child  =  n.getNext();  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  child  =  n.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  n.getNext();	  Node    child    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	5	None	replace
251	[BUG]  [BUGGY]  Node  child  =  n.removeFirstChild();  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  child  =  n.removeFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  n.removeFirstChild();	  Node    child    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	5	None	replace
252	[BUG]  [BUGGY]  Node  child  =  n.getParent();  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  child  =  n.getParent();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  n.getParent();	  Node    child    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	5	None	replace
253	[BUG]  [BUGGY]  Node  child  =  n.getPreviousChild();  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  child  =  n.getPreviousChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  n.getPreviousChild();	  Node    child    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	5	None	replace
254	[BUG]  [BUGGY]  Node  child  =  n.getAncestor(1);  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  child  =  n.getAncestor(1);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  n.getAncestor(1);	  Node    child    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	5	None	replace
255	[BUG]  [BUGGY]  child  =  child.getFirstChild();  child  =  child.getNext())  {  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  =  child.getFirstChild();  child  =  child.getNext())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  =  child.getFirstChild();  child  =  child.getNext())  {  }	  if(child!=    null)    {    child    =    child.getFirstChild();    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
256	[BUG]  [BUGGY]  Child  child  =  child.getFirstChild();  child  =  child.getNext())  {  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getFirstChild();  child  =  child.getNext())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getFirstChild();  child  =  child.getNext())  {  }	  if(child!=    null)    {    child    =    child.getFirstChild();    child    =    child.getNext())    {    }    	non-compiled	[CE]  ';'  expected	105	None	replace
257	[BUG]  [BUGGY]  child  =  child.getFirstChild();  child  =  child.getNext())  {  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  =  child.getFirstChild();  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  =  child.getFirstChild();  child  =  child.getNext())  {	  if(child!=    null)    {    child    =    child.getFirstChild();    child    =    child.getNext())    {    }    	non-compiled	[CE]  incompatible  types	105	None	replace
258	[BUG]  [BUGGY]  child  =  child.getLastChild();  child  =  child.getNext())  {  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  =  child.getLastChild();  child  =  child.getNext())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  =  child.getLastChild();  child  =  child.getNext())  {  }	  if(child!=    null)    {    child    =    child.getFirstChild();    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
259	[BUG]  [BUGGY]  Child  child  =  child.getFirstChild();  child  =  child.getNext())  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getFirstChild();  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getFirstChild();  child  =  child.getNext())  {	  if(child!=    null)    {    child    =    child.getFirstChild();    child    =    child.getNext())    {    }    	non-compiled	[CE]  ';'  expected	105	None	replace
260	[BUG]  [BUGGY]  node!=  null;  child  =  child.getFirstChild())  {  Node  child  =  n.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  node!=  null;  child  =  child.getFirstChild())  {  Node  child  =  n.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	node!=  null;  child  =  child.getFirstChild())  {  Node  child  =  n.getFirstChild();	  child!=    null;    child    =    child.getFirstChild())    {    Node    child    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	30	None	replace
261	[BUG]  [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  Node  child  =  n.getFirstChild();  [CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  Node  child  =  n.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getLastChild())  {  Node  child  =  n.getFirstChild();	  child!=    null;    child    =    child.getFirstChild())    {    Node    child    =    n.getFirstChild();    	non-compiled	[CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	30	None	replace
262	[BUG]  [BUGGY]  n!=  child;  child  =  child.getNext())  {  n!=  child;  child  =  child.getNext())  {  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  child;  child  =  child.getNext())  {  n!=  child;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=    child;    child    =    child.getNext())    {    n!=  child;  child  =  child.getNext())  {	  	non-compiled	[CE]  not  a  statement	11	None	add
263	[BUG]  [BUGGY]  n!=  child;  child  =  child.getNext())  {  Node  n  =  child.getFirstChild();  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  child;  child  =  child.getNext())  {  Node  n  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=    child;    child    =    child.getNext())    {    Node  n  =  child.getFirstChild();	  	non-compiled	[CE]  not  a  statement	11	None	add
264	[BUG]  [BUGGY]  n!=  child;  child  =  child.getNext())  {  n  ==  child;  child  =  child.getNext())  {  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  child;  child  =  child.getNext())  {  n  ==  child;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=    child;    child    =    child.getNext())    {    n  ==  child;  child  =  child.getNext())  {	  	non-compiled	[CE]  not  a  statement	11	None	add
265	[BUG]  [BUGGY]  n!=  child;  child  =  child.getNext())  {  n  >=  child;  child  =  child.getNext())  {  [CE]  not  a  statement  [FE]          RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  child;  child  =  child.getNext())  {  n  >=  child;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=    child;    child    =    child.getNext())    {    n  >=  child;  child  =  child.getNext())  {	  	non-compiled	[CE]  not  a  statement	11	None	add
266	[BUG]  [BUGGY]  n!=  child;  child  =  child.getNext())  {  n  >>  child;  child  =  child.getNext())  {  [CE]  not  a  statement  [FE]            RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  child;  child  =  child.getNext())  {  n  >>  child;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=    child;    child    =    child.getNext())    {    n  >>  child;  child  =  child.getNext())  {	  	non-compiled	[CE]  not  a  statement	11	None	add
267	[BUG]  [BUGGY]  n!=  child;  child  =  child.getNext())  {  Node  child  =  n.getFirstChild();  [CE]  not  a  statement  [FE]              RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  child;  child  =  child.getNext())  {  Node  child  =  n.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=    child;    child    =    child.getNext())    {    Node  child  =  n.getFirstChild();	  	non-compiled	[CE]  not  a  statement	11	None	add
268	[BUG]  [BUGGY]  n!=  child;  child  =  child.getNext())  {  Node  n  =  child.getNext();  [CE]  not  a  statement  [FE]                RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  child;  child  =  child.getNext())  {  Node  n  =  child.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=    child;    child    =    child.getNext())    {    Node  n  =  child.getNext();	  	non-compiled	[CE]  not  a  statement	11	None	add
269	[BUG]  [BUGGY]  n!=  child;  child  =  child.getNext())  {  Node  n  =  child.getParent();  [CE]  not  a  statement  [FE]                  RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  child;  child  =  child.getNext())  {  Node  n  =  child.getParent();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=    child;    child    =    child.getNext())    {    Node  n  =  child.getParent();	  	non-compiled	[CE]  not  a  statement	11	None	add
270	[BUG]  [BUGGY]  Node  child  =  child.getNext(),  variable)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  child  =  child.getNext(),  variable)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  child.getNext(),  variable)  {	  Node    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	80	None	replace
271	[BUG]  [BUGGY]  Node  child  =  child.getFirstChild())  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  child  =  child.getFirstChild())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  child.getFirstChild())  {	  Node    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	80	None	replace
272	[BUG]  [BUGGY]  Node  child  =  child.getParent())  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  child  =  child.getParent())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  child.getParent())  {	  Node    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	80	None	replace
273	[BUG]  [BUGGY]  Node  child  =  child.getNext()  &&  variable!=  null  &&  variable.equals(child.getString()))  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  child  =  child.getNext()  &&  variable!=  null  &&  variable.equals(child.getString()))  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  child.getNext()  &&  variable!=  null  &&  variable.equals(child.getString()))  {	  Node    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	80	None	replace
274	[BUG]  [BUGGY]  Node  child  =  child.getLastChild())  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  child  =  child.getLastChild())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  child.getLastChild())  {	  Node    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	80	None	replace
275	[BUG]  [BUGGY]  Node  child  =  child.getNext(),  variable);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  child  =  child.getNext(),  variable);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  child.getNext(),  variable);	  Node    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	80	None	replace
276	[BUG]  [BUGGY]  Node  child  =  child.getPrevious())  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  child  =  child.getPrevious())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  child.getPrevious())  {	  node!=    null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  ';'  expected	65	None	replace
277	[BUG]  [BUGGY]  Node  }  else  if(child.getType()  ==  Token.FUNCTION)  {  Node  child  =  child.getPrevious())  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  }  else  if(child.getType()  ==  Token.FUNCTION)  {  Node  child  =  child.getPrevious())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  else  if(child.getType()  ==  Token.FUNCTION)  {  Node  child  =  child.getPrevious())  {	  node!=    null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  ';'  expected	65	None	replace
278	[BUG]  [BUGGY]  Node  }  else  if(child.getType()  ==  Token.NAME)  {  node!=  null;  child  =  child.getPrevious())  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  }  else  if(child.getType()  ==  Token.NAME)  {  node!=  null;  child  =  child.getPrevious())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  else  if(child.getType()  ==  Token.NAME)  {  node!=  null;  child  =  child.getPrevious())  {	  node!=    null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  ';'  expected	65	None	replace
279	[BUG]  [BUGGY]  Node  }  else  if(child.getPrevious())  {  Node  child  =  child.getPrevious())  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  }  else  if(child.getPrevious())  {  Node  child  =  child.getPrevious())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  else  if(child.getPrevious())  {  Node  child  =  child.getPrevious())  {	  node!=    null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  ';'  expected	65	None	replace
280	[BUG]  [BUGGY]  child  >>  null;  child  =  child.getNext())  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                      StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  >>  null;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  >>  null;  child  =  child.getNext())  {	  child!=    null;    child    =    child.getParent())    {    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	63	None	replace
281	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME);  child  =  child.getNext();  [CE]  ')'  expected  [FE]          StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME);  child  =  child.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME);  child  =  child.getNext();	  if(child!=    null)    {    child    =    child.getParent();    }    else    {    Preconditions.checkState(child.getType()    ==    Token.NAME);    child    =    child.getNext();    }    	non-compiled	[CE]  ')'  expected	153	None	replace
282	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME);  child  =  child.getParent();  [CE]  ')'  expected  [FE]            StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME);  child  =  child.getParent();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME);  child  =  child.getParent();	  if(child!=    null)    {    child    =    child.getParent();    }    else    {    Preconditions.checkState(child.getType()    ==    Token.NAME);    child    =    child.getNext();    }    	non-compiled	[CE]  ')'  expected	153	None	replace
283	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.FUNCTION);  child  =  child.getNext();  [CE]  ')'  expected  [FE]              StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.FUNCTION);  child  =  child.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.FUNCTION);  child  =  child.getNext();	  if(child!=    null)    {    child    =    child.getParent();    }    else    {    Preconditions.checkState(child.getType()    ==    Token.NAME);    child    =    child.getNext();    }    	non-compiled	[CE]  ')'  expected	153	None	replace
284	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()!=  Token.NAME);  child  =  child.getNext();  [CE]  ')'  expected  [FE]                StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()!=  Token.NAME);  child  =  child.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()!=  Token.NAME);  child  =  child.getNext();	  if(child!=    null)    {    child    =    child.getParent();    }    else    {    Preconditions.checkState(child.getType()    ==    Token.NAME);    child    =    child.getNext();    }    	non-compiled	[CE]  ')'  expected	153	None	replace
285	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  child  =  child.getNext();  [CE]  ')'  expected  [FE]                  StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  child  =  child.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.BLOCK);  child  =  child.getNext();	  if(child!=    null)    {    child    =    child.getParent();    }    else    {    Preconditions.checkState(child.getType()    ==    Token.NAME);    child    =    child.getNext();    }    	non-compiled	[CE]  ')'  expected	153	None	replace
286	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);	  child    ==    null;    child    =    child.getNext())    {    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	50	None	replace
287	[BUG]  [BUGGY]  n  ==  null;  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n  ==  null;  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n  ==  null;  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);	  child    ==    null;    child    =    child.getNext())    {    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	50	None	replace
288	[BUG]  [BUGGY]  Child  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);	  child    ==    null;    child    =    child.getNext())    {    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  ';'  expected	50	None	replace
289	[BUG]  [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.EXPR_RESULT)  {  child  =  child.getNext();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.EXPR_RESULT)  {  child  =  child.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	while(child!=  null  &&  child.getType()  ==  Token.EXPR_RESULT)  {  child  =  child.getNext();	  if(child!=    null)    {    child    =    child.getNext();    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
290	[BUG]  [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getNext();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	while(child!=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getNext();	  if(child!=    null)    {    child    =    child.getNext();    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
291	[BUG]  [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.FUNCTION)  {  child  =  child.getNext();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.FUNCTION)  {  child  =  child.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	while(child!=  null  &&  child.getType()  ==  Token.FUNCTION)  {  child  =  child.getNext();	  if(child!=    null)    {    child    =    child.getNext();    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
292	[BUG]  [BUGGY]  Child  child  =  child.getNext();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getNext();	  if(child!=    null)    {    child    =    child.getNext();    }    	non-compiled	[CE]  ';'  expected	101	None	replace
293	[BUG]  [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.CALL)  {  child  =  child.getNext();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.CALL)  {  child  =  child.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	while(child!=  null  &&  child.getType()  ==  Token.CALL)  {  child  =  child.getNext();	  if(child!=    null)    {    child    =    child.getNext();    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
294	[BUG]  [BUGGY]  Child  child  =  n.getFirstChild())  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  n.getFirstChild())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  n.getFirstChild())  {	  Child    child    =    n.getPrevious())    {    	non-compiled	[CE]  ';'  expected	67	None	replace
295	[BUG]  [BUGGY]  Child  child  =  n.getNext())  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  n.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  n.getNext())  {	  Child    child    =    n.getPrevious())    {    	non-compiled	[CE]  ';'  expected	67	None	replace
296	[BUG]  [BUGGY]  Child  child  =  n.getPrevious(),  variable)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  n.getPrevious(),  variable)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  n.getPrevious(),  variable)  {	  Child    child    =    n.getPrevious())    {    	non-compiled	[CE]  ';'  expected	67	None	replace
297	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext())  {  Node  child  =  child.getFirstChild();  [CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]          StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext())  {  Node  child  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext())  {  Node  child  =  child.getFirstChild();	  child!=    null;    child    =    child.getParent())    {    Node    child    =    child.getFirstChild();    	non-compiled	[CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	115	None	replace
298	[BUG]  [BUGGY]  child!=  null;  child  =  child.getParent())  {  Node  child  =  child.getLastChild();  [CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]            StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getParent())  {  Node  child  =  child.getLastChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getParent())  {  Node  child  =  child.getLastChild();	  child!=    null;    child    =    child.getParent())    {    Node    child    =    child.getFirstChild();    	non-compiled	[CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	115	None	replace
299	[BUG]  [BUGGY]  node  ==  null;  child  =  child.getNext(),  variable)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  node  ==  null;  child  =  child.getNext(),  variable)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	node  ==  null;  child  =  child.getNext(),  variable)  {	  child    ==    null;    child    =    child.getNext(),    variable)    {    	non-compiled	[CE]  not  a  statement	79	None	replace
300	[BUG]  [BUGGY]  child  >=  null;  child  =  child.getNext(),  variable)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  >=  null;  child  =  child.getNext(),  variable)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  >=  null;  child  =  child.getNext(),  variable)  {	  child    ==    null;    child    =    child.getNext(),    variable)    {    	non-compiled	[CE]  not  a  statement	79	None	replace
301	[BUG]  [BUGGY]  n  ==  null;  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n  ==  null;  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n  ==  null;  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {	  child    ==    null;    child    =    child.getNext())    {    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	113	None	replace
302	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {	  child    ==    null;    child    =    child.getNext())    {    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  ';'  expected	113	None	replace
303	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	State  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {	  child    ==    null;    child    =    child.getNext())    {    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  ';'  expected	113	None	replace
304	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {	  child    ==    null;    child    =    child.getNext())    {    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  ';'  expected	113	None	replace
305	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	State  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {	  child    ==    null;    child    =    child.getNext())    {    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  ';'  expected	113	None	replace
306	[BUG]  [BUGGY]  Child  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {	  Child    }    null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  ';'  expected	118	None	replace
307	[BUG]  [BUGGY]  Child  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  for(Node  child  =  child.getFirstChild();  child!=  null;  child  =  child.getPrevious())  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  for(Node  child  =  child.getFirstChild();  child!=  null;  child  =  child.getPrevious())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  for(Node  child  =  child.getFirstChild();  child!=  null;  child  =  child.getPrevious())  {	  Child    }    null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  ';'  expected	118	None	replace
308	[BUG]  [BUGGY]  Child  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  for(Node  child  =  child.getPrevious();  child!=  null;  child  =  child.getPrevious())  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  for(Node  child  =  child.getPrevious();  child!=  null;  child  =  child.getPrevious())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  for(Node  child  =  child.getPrevious();  child!=  null;  child  =  child.getPrevious())  {	  Child    }    null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  ';'  expected	118	None	replace
309	[BUG]  [BUGGY]  Child  }  else  if(child.getType()  ==  Token.FUNCTION)  {  child  =  child.getPrevious())  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  }  else  if(child.getType()  ==  Token.FUNCTION)  {  child  =  child.getPrevious())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  }  else  if(child.getType()  ==  Token.FUNCTION)  {  child  =  child.getPrevious())  {	  Child    }    null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  ';'  expected	118	None	replace
310	[BUG]  [BUGGY]  Child  }  else  if(child.getType()  ==  Token.NAME)  {  child  =  child.getPrevious())  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  }  else  if(child.getType()  ==  Token.NAME)  {  child  =  child.getPrevious())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  }  else  if(child.getType()  ==  Token.NAME)  {  child  =  child.getPrevious())  {	  Child    }    null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  ';'  expected	118	None	replace
311	[BUG]  [BUGGY]  Child  }  else  if(child.getType()  ==  Token.EXPR_RESULT)  {  child  =  child.getPrevious())  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  }  else  if(child.getType()  ==  Token.EXPR_RESULT)  {  child  =  child.getPrevious())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  }  else  if(child.getType()  ==  Token.EXPR_RESULT)  {  child  =  child.getPrevious())  {	  Child    }    null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  ';'  expected	118	None	replace
312	[BUG]  [BUGGY]  Child  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  for(Node  child  =  child.getNext();  child!=  null;  child  =  child.getPrevious())  {  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  for(Node  child  =  child.getNext();  child!=  null;  child  =  child.getPrevious())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  for(Node  child  =  child.getNext();  child!=  null;  child  =  child.getPrevious())  {	  Child    }    null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  ';'  expected	118	None	replace
313	[BUG]  [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getFirstChild())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);	  child!=    null;    child    =    child.getFirstChild())    {    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	124	None	replace
314	[BUG]  [BUGGY]  Child  child  =  child.getFirstChild())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getFirstChild())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getFirstChild())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);	  child!=    null;    child    =    child.getFirstChild())    {    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  ';'  expected	124	None	replace
315	[BUG]  [BUGGY]  if(child  ==  null  &&  child.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child  ==  null  &&  child.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child  ==  null  &&  child.getType()  ==  Token.FUNCTION)  {	  if(child!=    null    ||    child.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
316	[BUG]  [BUGGY]  if(child  ==  null  ||  child.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child  ==  null  ||  child.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child  ==  null  ||  child.getType()  ==  Token.FUNCTION)  {	  if(child!=    null    ||    child.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
317	[BUG]  [BUGGY]  if(child  >=  null  &&  child.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child  >=  null  &&  child.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child  >=  null  &&  child.getType()  ==  Token.FUNCTION)  {	  if(child!=    null    ||    child.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
318	[BUG]  [BUGGY]  if(child  ==  null  ||  child.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child  ==  null  ||  child.getType()!=  Token.FUNCTION)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child  ==  null  ||  child.getType()!=  Token.FUNCTION)  {	  if(child!=    null    ||    child.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
319	[BUG]  [BUGGY]  if(child!=  null  ||  child.getType()  ==  Token.CALL)  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null  ||  child.getType()  ==  Token.CALL)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null  ||  child.getType()  ==  Token.CALL)  {	  if(child!=    null    ||    child.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
320	[BUG]  [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getLastChild())  {  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getLastChild())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child!=  null;  child  =  child.getLastChild())  {	  if(child!=    null)    {    child!=    null;    child    =    child.getFirstChild())    {    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
321	[BUG]  [BUGGY]  if(child  ==  null)  {  child!=  null;  child  =  child.getLastChild())  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child  ==  null)  {  child!=  null;  child  =  child.getLastChild())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child  ==  null)  {  child!=  null;  child  =  child.getLastChild())  {	  if(child!=    null)    {    child!=    null;    child    =    child.getFirstChild())    {    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
322	[BUG]  [BUGGY]  if(child!=  null)  {  child  ==  null;  child  =  child.getFirstChild())  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child  ==  null;  child  =  child.getFirstChild())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  ==  null;  child  =  child.getFirstChild())  {	  if(child!=    null)    {    child!=    null;    child    =    child.getFirstChild())    {    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
323	[BUG]  [BUGGY]  if(child!=  null)  {  child  >=  null;  child  =  child.getFirstChild())  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child  >=  null;  child  =  child.getFirstChild())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  >=  null;  child  =  child.getFirstChild())  {	  if(child!=    null)    {    child!=    null;    child    =    child.getFirstChild())    {    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
324	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME,  state);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME,  state);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME,  state);	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
325	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.NAME);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.NAME);	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
326	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()!=  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()!=  Token.NAME);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()!=  Token.NAME);	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
327	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()!=  Token.NAME,  variable);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()!=  Token.NAME,  variable);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()!=  Token.NAME,  variable);	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
328	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME,  n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME,  n.getFirstChild());  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME,  n.getFirstChild());	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
329	[BUG]  [BUGGY]  child  =  child.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  =  child.getFirstChild();	  if(child!=    null)    {    child    =    child.getFirstChild();    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
330	[BUG]  [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	while(child!=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getFirstChild();	  if(child!=    null)    {    child    =    child.getFirstChild();    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
331	[BUG]  [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.EXPR_RESULT)  {  child  =  child.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.EXPR_RESULT)  {  child  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	while(child!=  null  &&  child.getType()  ==  Token.EXPR_RESULT)  {  child  =  child.getFirstChild();	  if(child!=    null)    {    child    =    child.getFirstChild();    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
332	[BUG]  [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.FUNCTION)  {  child  =  child.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.FUNCTION)  {  child  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	while(child!=  null  &&  child.getType()  ==  Token.FUNCTION)  {  child  =  child.getFirstChild();	  if(child!=    null)    {    child    =    child.getFirstChild();    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
333	[BUG]  [BUGGY]  child  =  child.getLastChild();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  =  child.getLastChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  =  child.getLastChild();	  if(child!=    null)    {    child    =    child.getFirstChild();    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
334	[BUG]  [BUGGY]  while(child  ==  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getNext())  {  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  while(child  ==  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getNext())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	while(child  ==  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getNext())  {  }	  while(child!=    null    &&    child.getType()    ==    Token.NAME)    {    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
335	[BUG]  [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getParent())  {  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getParent())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	while(child!=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getParent())  {  }	  while(child!=    null    &&    child.getType()    ==    Token.NAME)    {    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
336	[BUG]  [BUGGY]  while(child!=  null  &&  child.getType()  >=  Token.NAME)  {  child  =  child.getNext())  {  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  while(child!=  null  &&  child.getType()  >=  Token.NAME)  {  child  =  child.getNext())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	while(child!=  null  &&  child.getType()  >=  Token.NAME)  {  child  =  child.getNext())  {  }	  while(child!=    null    &&    child.getType()    ==    Token.NAME)    {    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
337	[BUG]  [BUGGY]  while(child  >=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getNext())  {  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  while(child  >=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getNext())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	while(child  >=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getNext())  {  }	  while(child!=    null    &&    child.getType()    ==    Token.NAME)    {    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
338	[BUG]  [BUGGY]  while(child!=  null  ||  child.getType()  ==  Token.NAME)  {  child  =  child.getNext())  {  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  while(child!=  null  ||  child.getType()  ==  Token.NAME)  {  child  =  child.getNext())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	while(child!=  null  ||  child.getType()  ==  Token.NAME)  {  child  =  child.getNext())  {  }	  while(child!=    null    &&    child.getType()    ==    Token.NAME)    {    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
339	[BUG]  [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getChildCount())  {  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getChildCount())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	while(child!=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getChildCount())  {  }	  while(child!=    null    &&    child.getType()    ==    Token.NAME)    {    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
340	[BUG]  [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  n!=  null;  child  =  child.getFirstChild())  {  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  n!=  null;  child  =  child.getFirstChild())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=    null;    child    =    child.getFirstChild())    {    n!=  null;  child  =  child.getFirstChild())  {	  	non-compiled	[CE]  not  a  statement	3	None	add
341	[BUG]  [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  n!=  null;  child  =  child.getLastChild())  {  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  n!=  null;  child  =  child.getLastChild())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=    null;    child    =    child.getFirstChild())    {    n!=  null;  child  =  child.getLastChild())  {	  	non-compiled	[CE]  not  a  statement	3	None	add
342	[BUG]  [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  Node  n  =  child.getFirstChild();  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  Node  n  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=    null;    child    =    child.getFirstChild())    {    Node  n  =  child.getFirstChild();	  	non-compiled	[CE]  not  a  statement	3	None	add
343	[BUG]  [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  n!=  null;  child  =  child.getNext())  {  [CE]  not  a  statement  [FE]          RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  n!=  null;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=    null;    child    =    child.getFirstChild())    {    n!=  null;  child  =  child.getNext())  {	  	non-compiled	[CE]  not  a  statement	3	None	add
344	[BUG]  [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  n!=  null;  child  =  child.getLastChild());  [CE]  not  a  statement  [FE]            RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  n!=  null;  child  =  child.getLastChild());  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=    null;    child    =    child.getFirstChild())    {    n!=  null;  child  =  child.getLastChild());	  	non-compiled	[CE]  not  a  statement	3	None	add
345	[BUG]  [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  Node  n  =  child.getLastChild();  [CE]  not  a  statement  [FE]              RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  Node  n  =  child.getLastChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=    null;    child    =    child.getFirstChild())    {    Node  n  =  child.getLastChild();	  	non-compiled	[CE]  not  a  statement	3	None	add
346	[BUG]  [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  Node  n  =  child.getParent();  [CE]  not  a  statement  [FE]                RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  Node  n  =  child.getParent();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=    null;    child    =    child.getFirstChild())    {    Node  n  =  child.getParent();	  	non-compiled	[CE]  not  a  statement	3	None	add
347	[BUG]  [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  n!=  null;  child  =  child.getParent())  {  [CE]  not  a  statement  [FE]                  RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  n!=  null;  child  =  child.getParent())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=    null;    child    =    child.getFirstChild())    {    n!=  null;  child  =  child.getParent())  {	  	non-compiled	[CE]  not  a  statement	3	None	add
348	[BUG]  [BUGGY]  Child  child  =  child.getFirstChild(),  variable)  {  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getFirstChild(),  variable)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getFirstChild(),  variable)  {	  Child    child    =    child.getFirstChild())    {    	non-compiled	[CE]  ';'  expected	6	None	replace
349	[BUG]  [BUGGY]  Child  child  =  child.getFirstChild(),  variable);  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getFirstChild(),  variable);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getFirstChild(),  variable);	  Child    child    =    child.getFirstChild())    {    	non-compiled	[CE]  ';'  expected	6	None	replace
350	[BUG]  [BUGGY]  Node  child  =  child.getNext();  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  child  =  child.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  child.getNext();	  child    ==    null;    child    =    child.getNext())    {    Node    child    =    child.getFirstChild();    	non-compiled	[CE]  ';'  expected	137	None	replace
351	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext())  {  Node  child  =  child.getLastChild();  [CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext())  {  Node  child  =  child.getLastChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext())  {  Node  child  =  child.getLastChild();	  child    ==    null;    child    =    child.getNext())    {    Node    child    =    child.getFirstChild();    	non-compiled	[CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	137	None	replace
352	[BUG]  [BUGGY]  node!=  null;  child  =  child.getNext())  {  Node  n  =  child.getNext();  [CE]  cannot  find  symbol  node  [FE]            RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  node!=  null;  child  =  child.getNext())  {  Node  n  =  child.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	node!=  null;  child  =  child.getNext())  {  Node  n  =  child.getNext();	  n!=    null;    child    =    child.getNext())    {    Node    n    =    child.getNext();    	non-compiled	[CE]  cannot  find  symbol  node	40	None	replace
353	[BUG]  [BUGGY]  Predicates.checkState(child!=  null);  child  =  child.getNext())  {  Node  n  =  child.getNext();  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Predicates.checkState(child!=  null);  child  =  child.getNext())  {  Node  n  =  child.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Predicates.checkState(child!=  null);  child  =  child.getNext())  {  Node  n  =  child.getNext();	  n!=    null;    child    =    child.getNext())    {    Node    n    =    child.getNext();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
354	[BUG]  [BUGGY]  n!=  null;  child  =  child.getParent())  {  Node  n  =  child.getNext();  [CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getParent())  {  Node  n  =  child.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getParent())  {  Node  n  =  child.getNext();	  n!=    null;    child    =    child.getNext())    {    Node    n    =    child.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	40	None	replace
355	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME);  return  VariableLiveness.KILL;  [CE]  illegal  start  of  expression  [FE]                StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME);  return  VariableLiveness.KILL;  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME);  return  VariableLiveness.KILL;	  if(child!=    null)    {    child    =    child.getParent();    }    else    {    Preconditions.checkState(child.getType()    ==    Token.NAME);    return    VariableLiveness.KILL;    }    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
356	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME);  return  VariableLiveness.READ;  [CE]  illegal  start  of  expression  [FE]                  StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME);  return  VariableLiveness.READ;  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME);  return  VariableLiveness.READ;	  if(child!=    null)    {    child    =    child.getParent();    }    else    {    Preconditions.checkState(child.getType()    ==    Token.NAME);    return    VariableLiveness.KILL;    }    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
357	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.FUNCTION);  return  VariableLiveness.KILL;  [CE]  illegal  start  of  expression  [FE]                    StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.FUNCTION);  return  VariableLiveness.KILL;  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.FUNCTION);  return  VariableLiveness.KILL;	  if(child!=    null)    {    child    =    child.getParent();    }    else    {    Preconditions.checkState(child.getType()    ==    Token.NAME);    return    VariableLiveness.KILL;    }    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
358	[BUG]  [BUGGY]  parent  ==  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getParent();  }  [CE]  ';'  expected  [FE]                      StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  parent  ==  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getParent();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	parent  ==  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getParent();  }	  if(child!=    null)    {    child    =    child.getParent();    }    else    {    Preconditions.checkState(child.getType()    ==    Token.NAME);    return    VariableLiveness.KILL;    }    	non-compiled	[CE]  ';'  expected	156	None	replace
359	[BUG]  [BUGGY]  parent!=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getParent();  }  [CE]  ';'  expected  [FE]                        StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  parent!=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getParent();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	parent!=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getParent();  }	  if(child!=    null)    {    child    =    child.getParent();    }    else    {    Preconditions.checkState(child.getType()    ==    Token.NAME);    return    VariableLiveness.KILL;    }    	non-compiled	[CE]  ';'  expected	156	None	replace
360	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getParent())  {  Node  child  =  n.getFirstChild();  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  ==  null;  child  =  child.getParent())  {  Node  child  =  n.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child    ==    null;    child    =    child.getParent())    {    Node  child  =  n.getFirstChild();	  	non-compiled	[CE]  not  a  statement	46	None	add
361	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getParent())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  ==  null;  child  =  child.getParent())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getType()  ==  Token.NAME);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child    ==    null;    child    =    child.getParent())    {    junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getType()  ==  Token.NAME);	  	non-compiled	[CE]  not  a  statement	46	None	add
362	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getParent())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  ==  null;  child  =  child.getParent())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child    ==    null;    child    =    child.getParent())    {    junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  not  a  statement	46	None	add
363	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getParent())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getType()  ==  Token.BLOCK);  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  ==  null;  child  =  child.getParent())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getType()  ==  Token.BLOCK);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child    ==    null;    child    =    child.getParent())    {    junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getType()  ==  Token.BLOCK);	  	non-compiled	[CE]  not  a  statement	46	None	add
364	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getParent())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getType()  ==  Token.VAR);  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  ==  null;  child  =  child.getParent())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getType()  ==  Token.VAR);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child    ==    null;    child    =    child.getParent())    {    junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getType()  ==  Token.VAR);	  	non-compiled	[CE]  not  a  statement	46	None	add
365	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getParent())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  ==  return  VariableLiveness.KILL;  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  ==  null;  child  =  child.getParent())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  ==  return  VariableLiveness.KILL;  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child    ==    null;    child    =    child.getParent())    {    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  ==  return  VariableLiveness.KILL;	  	non-compiled	[CE]  not  a  statement	46	None	add
366	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getParent())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getType()  ==  Token.KILL);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  ==  null;  child  =  child.getParent())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getType()  ==  Token.KILL);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child    ==    null;    child    =    child.getParent())    {    junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getType()  ==  Token.KILL);	  	non-compiled	[CE]  not  a  statement	46	None	add
367	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getParent())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getType()  ==  Token.GETPROP);  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  ==  null;  child  =  child.getParent())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getType()  ==  Token.GETPROP);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child    ==    null;    child    =    child.getParent())    {    junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getType()  ==  Token.GETPROP);	  	non-compiled	[CE]  not  a  statement	46	None	add
368	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext(),  variable  *  1)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext(),  variable  *  1)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext(),  variable  *  1)  {	  child!=    null;    child    =    child.getNext(),    variable    +    1)    {    	non-compiled	[CE]  not  a  statement	150	None	replace
369	[BUG]  [BUGGY]  Child  child  =  child.getNext(),  variable  +  1)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getNext(),  variable  +  1)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getNext(),  variable  +  1)  {	  child!=    null;    child    =    child.getNext(),    variable    +    1)    {    	non-compiled	[CE]  ';'  expected	150	None	replace
370	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext(),  variable  +  2)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext(),  variable  +  2)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext(),  variable  +  2)  {	  child!=    null;    child    =    child.getNext(),    variable    +    1)    {    	non-compiled	[CE]  not  a  statement	150	None	replace
371	[BUG]  [BUGGY]  Node  }  else  if(child.getType()  ==  Token.FUNCTION  ||  child.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  }  else  if(child.getType()  ==  Token.FUNCTION  ||  child.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  else  if(child.getType()  ==  Token.FUNCTION  ||  child.getType()  ==  Token.FUNCTION)  {	  Node    }    else    if(child.getType()    ==    Token.FUNCTION)    {    Node    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	82	None	replace
372	[BUG]  [BUGGY]  Node  }  else  if(child.getType()  ==  Token.FUNCTION  &&  child.getFirstChild()!=  n)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  }  else  if(child.getType()  ==  Token.FUNCTION  &&  child.getFirstChild()!=  n)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  else  if(child.getType()  ==  Token.FUNCTION  &&  child.getFirstChild()!=  n)  {	  Node    }    else    if(child.getType()    ==    Token.FUNCTION)    {    Node    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	82	None	replace
373	[BUG]  [BUGGY]  Node  }  else  if(child.getType()  ==  Token.FUNCTION  &&  child.getChildCount()  >  1)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  }  else  if(child.getType()  ==  Token.FUNCTION  &&  child.getChildCount()  >  1)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  else  if(child.getType()  ==  Token.FUNCTION  &&  child.getChildCount()  >  1)  {	  Node    }    else    if(child.getType()    ==    Token.FUNCTION)    {    Node    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	82	None	replace
374	[BUG]  [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getType()  ==  Token.NAME);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=    null;    child    =    child.getLastChild())    {    junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getType()  ==  Token.NAME);	  	non-compiled	[CE]  not  a  statement	1	None	add
375	[BUG]  [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getType()  ==  Token.BLOCK);  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getType()  ==  Token.BLOCK);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=    null;    child    =    child.getLastChild())    {    junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getType()  ==  Token.BLOCK);	  	non-compiled	[CE]  not  a  statement	1	None	add
376	[BUG]  [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=    null;    child    =    child.getLastChild())    {    junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  not  a  statement	1	None	add
377	[BUG]  [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getFirstChild()  ==  VariableLiveness.KILL);  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getFirstChild()  ==  VariableLiveness.KILL);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=    null;    child    =    child.getLastChild())    {    junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getFirstChild()  ==  VariableLiveness.KILL);	  	non-compiled	[CE]  not  a  statement	1	None	add
378	[BUG]  [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getType()  ==  Token.VAR);  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getType()  ==  Token.VAR);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=    null;    child    =    child.getLastChild())    {    junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getType()  ==  Token.VAR);	  	non-compiled	[CE]  not  a  statement	1	None	add
379	[BUG]  [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getType()  ==  Token.KILL);  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getType()  ==  Token.KILL);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=    null;    child    =    child.getLastChild())    {    junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getType()  ==  Token.KILL);	  	non-compiled	[CE]  not  a  statement	1	None	add
380	[BUG]  [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getType()  ==  Token.GETPROP);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getType()  ==  Token.GETPROP);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=    null;    child    =    child.getLastChild())    {    junit.framework.AssertionFailedError:  Expected:  function  FUNC(child.getType()  ==  Token.GETPROP);	  	non-compiled	[CE]  not  a  statement	1	None	add
381	[BUG]  [BUGGY]  null;  child  =  child.getPrevious(),  variable)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  null;  child  =  child.getPrevious(),  variable)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	null;  child  =  child.getPrevious(),  variable)  {	  null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  not  a  statement	161	None	replace
382	[BUG]  [BUGGY]  Null;  child  =  child.getPrevious())  {  [CE]  cannot  find  symbol  Null  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Null;  child  =  child.getPrevious())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Null;  child  =  child.getPrevious())  {	  null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  cannot  find  symbol  Null	161	None	replace
383	[BUG]  [BUGGY]  null;  child  =  n.getPrevious())  {  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  null;  child  =  n.getPrevious())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	null;  child  =  n.getPrevious())  {	  null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  incompatible  types	161	None	replace
384	[BUG]  [BUGGY]  null;  child  =  child.getNext())  {  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  null;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	null;  child  =  child.getNext())  {	  null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  incompatible  types	161	None	replace
385	[BUG]  [BUGGY]  Null;  child  =  child.getPrevious(),  variable)  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Null;  child  =  child.getPrevious(),  variable)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Null;  child  =  child.getPrevious(),  variable)  {	  null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  not  a  statement	161	None	replace
386	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child,  new  Action());  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  NodeTraversal.traverse(compiler,  child,  new  Action());  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	NodeTraversal.traverse(compiler,  child,  new  Action());	  n!=    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    new    Action());    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
387	[BUG]  [BUGGY]  node!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  Action());  [CE]  cannot  find  symbol  node  [FE]          RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  node!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  Action());  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	node!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  Action());	  n!=    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    new    Action());    	non-compiled	[CE]  cannot  find  symbol  node	106	None	replace
388	[BUG]  [BUGGY]  Node  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  Action());  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  Action());  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  Action());	  n!=    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    new    Action());    	non-compiled	[CE]  ';'  expected	106	None	replace
389	[BUG]  [BUGGY]  n!=  null;  child  =  child.getParent())  {  NodeTraversal.traverse(compiler,  child,  new  Action());  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getParent())  {  NodeTraversal.traverse(compiler,  child,  new  Action());  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getParent())  {  NodeTraversal.traverse(compiler,  child,  new  Action());	  n!=    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    new    Action());    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
390	[BUG]  [BUGGY]  if(child  ==  null)  {  child!=  null;  child  =  child.getParent())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child  ==  null)  {  child!=  null;  child  =  child.getParent())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child  ==  null)  {  child!=  null;  child  =  child.getParent())  {	  if(child!=    null)    {    child!=    null;    child    =    child.getParent())    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
391	[BUG]  [BUGGY]  if(child!=  null)  {  child  ==  null;  child  =  child.getParent())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child  ==  null;  child  =  child.getParent())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  ==  null;  child  =  child.getParent())  {	  if(child!=    null)    {    child!=    null;    child    =    child.getParent())    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
392	[BUG]  [BUGGY]  node!=  null;  child  =  child.getNext())  {  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  node!=  null;  child  =  child.getNext())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	node!=  null;  child  =  child.getNext())  {  }	  child!=    null;    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
393	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError());  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError());  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError());	  child    ==    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    new    AssertionFailedError());    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
394	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError());  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError());  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError());	  child    ==    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    new    AssertionFailedError());    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
395	[BUG]  [BUGGY]  node  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError());  [CE]  cannot  find  symbol  node  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  node  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError());  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	node  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError());	  child    ==    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    new    AssertionFailedError());    	non-compiled	[CE]  cannot  find  symbol  node	138	None	replace
396	[BUG]  [BUGGY]  n  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError());  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError());  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError());	  child    ==    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    new    AssertionFailedError());    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
397	[BUG]  [BUGGY]  Child  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError());  [CE]  ';'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError());  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError());	  child    ==    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    new    AssertionFailedError());    	non-compiled	[CE]  ';'  expected	138	None	replace
398	[BUG]  [BUGGY]  n!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError());  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError());  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError());	  child    ==    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    new    AssertionFailedError());    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
399	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  child.getFirstChild();  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	add	n!=  child.getFirstChild();  child  =  child.getNext())  {	  n!=    child;    child    =    child.getNext())    {    	compilable	  [FE]  RuntimeException  	12	63	replace
400	[BUG]  [BUGGY]  n!=  child.getFirstChild();  child  =  child.getNext())  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  child.getFirstChild();  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  child.getFirstChild();  child  =  child.getNext())  {	  n!=    child;    child    =    child.getNext())    {    	compilable	  [FE]  RuntimeException  	12	63	replace
401	[BUG]  [BUGGY]  n!=  child.getNext())  {  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  child.getNext())  {	  n!=    child;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	12	None	replace
402	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]        RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  child.getParent();  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	add	n!=  child.getParent();  child  =  child.getNext())  {	  n!=    child;    child    =    child.getNext())    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	12	63	replace
403	[BUG]  [BUGGY]  n!=  child.getParent();  child  =  child.getNext())  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]        RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  child.getParent();  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  child.getParent();  child  =  child.getNext())  {	  n!=    child;    child    =    child.getNext())    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	12	63	replace
404	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  child;  child  =  child.getParent())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	add	n!=  child;  child  =  child.getParent())  {	  n!=    child;    child    =    child.getNext())    {    	compilable	  [FE]  RuntimeException  	12	63	replace
405	[BUG]  [BUGGY]  n!=  child;  child  =  child.getParent())  {  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  child;  child  =  child.getParent())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  child;  child  =  child.getParent())  {	  n!=    child;    child    =    child.getNext())    {    	compilable	  [FE]  RuntimeException  	12	63	replace
406	[BUG]  [BUGGY]  n  >=  child;  child  =  child.getNext())  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n  >=  child;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n  >=  child;  child  =  child.getNext())  {	  n!=    child;    child    =    child.getNext())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	12	None	replace
407	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR,  variable);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR,  variable);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.VAR,  variable);	  Preconditions.checkState(child.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
408	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()!=  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()!=  Token.VAR);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()!=  Token.VAR);	  Preconditions.checkState(child.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
409	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR,  state);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR,  state);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.VAR,  state);	  Preconditions.checkState(child.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
410	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.getType()  ==  Token.VAR);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.getType()  ==  Token.VAR);	  Preconditions.checkState(child.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
411	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.getType()  ==  Token.CALL);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.getType()  ==  Token.CALL);	  Preconditions.checkState(child.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
412	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.getType()  ==  Token.NAME);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.getType()  ==  Token.NAME);	  Preconditions.checkState(child.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
413	[BUG]  [BUGGY]  child!=  null;  child  =  child.getType()  >>  Token.FUNCTION)  {  [CE]  incompatible  types  [FE]        StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getType()  >>  Token.FUNCTION)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getType()  >>  Token.FUNCTION)  {	  child!=    null;    child    =    child.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  incompatible  types	74	None	replace
414	[BUG]  [BUGGY]  child!=  null;  child  =  child.getType()  >=  Token.FUNCTION)  {  [CE]  incompatible  types  [FE]          StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getType()  >=  Token.FUNCTION)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getType()  >=  Token.FUNCTION)  {	  child!=    null;    child    =    child.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  incompatible  types	74	None	replace
415	[BUG]  [BUGGY]  child!=  null;  child  =  child.getType()  {  Token.FUNCTION)  {  [CE]  ')'  expected  [FE]            StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getType()  {  Token.FUNCTION)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getType()  {  Token.FUNCTION)  {	  child!=    null;    child    =    child.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ')'  expected	74	None	replace
416	[BUG]  [BUGGY]  Child  child  =  child.getType()  {  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]              StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getType()  {  Token.FUNCTION)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getType()  {  Token.FUNCTION)  {	  child!=    null;    child    =    child.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	74	None	replace
417	[BUG]  [BUGGY]  Child  child  =  child.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getType()  ==  Token.FUNCTION)  {	  child!=    null;    child    =    child.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	74	None	replace
418	[BUG]  [BUGGY]  node!=  null;  child  =  child.getNext(),  variable).returnZero();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  node!=  null;  child  =  child.getNext(),  variable).returnZero();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	node!=  null;  child  =  child.getNext(),  variable).returnZero();	  child!=    null;    child    =    child.getNext(),    variable).returnZero();    	non-compiled	[CE]  not  a  statement	151	None	replace
419	[BUG]  [BUGGY]  Node  child  =  child.getNext(),  variable).returnZero();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  child  =  child.getNext(),  variable).returnZero();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  child.getNext(),  variable).returnZero();	  child!=    null;    child    =    child.getNext(),    variable).returnZero();    	non-compiled	[CE]  ';'  expected	151	None	replace
420	[BUG]  [BUGGY]  children!=  null;  child  =  child.getNext(),  variable).returnZero();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  children!=  null;  child  =  child.getNext(),  variable).returnZero();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	children!=  null;  child  =  child.getNext(),  variable).returnZero();	  child!=    null;    child    =    child.getNext(),    variable).returnZero();    	non-compiled	[CE]  not  a  statement	151	None	replace
421	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext(),  variable).returnNull();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext(),  variable).returnNull();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext(),  variable).returnNull();	  child!=    null;    child    =    child.getNext(),    variable).returnZero();    	non-compiled	[CE]  not  a  statement	151	None	replace
422	[BUG]  [BUGGY]  node!=  null;  child  =  child.getFirstChild())  {  Node  n  =  child.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  node!=  null;  child  =  child.getFirstChild())  {  Node  n  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	node!=  null;  child  =  child.getFirstChild())  {  Node  n  =  child.getFirstChild();	  child!=    null;    child    =    child.getFirstChild())    {    Node    n    =    child.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	34	None	replace
423	[BUG]  [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  Node  n  =  child.getLastChild();  [CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  Node  n  =  child.getLastChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getFirstChild())  {  Node  n  =  child.getLastChild();	  child!=    null;    child    =    child.getFirstChild())    {    Node    n    =    child.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	34	None	replace
424	[BUG]  [BUGGY]  node!=  null;  child  =  child.getFirstChild())  {  Node  n  =  n.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  node!=  null;  child  =  child.getFirstChild())  {  Node  n  =  n.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	node!=  null;  child  =  child.getFirstChild())  {  Node  n  =  n.getFirstChild();	  child!=    null;    child    =    child.getFirstChild())    {    Node    n    =    child.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	34	None	replace
425	[BUG]  [BUGGY]  ncy  >=  null;  child  =  child.getNext())  {  [CE]  cannot  find  symbol  ncy  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  ncy  >=  null;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	ncy  >=  null;  child  =  child.getNext())  {	  ncy!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  cannot  find  symbol  ncy	94	None	replace
426	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  n!=  null;  child  =  child.getNext())  {  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  n!=  null;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  n!=  null;  child  =  child.getNext())  {	  ncy!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	94	None	replace
427	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.SEMI_LIVE)  {  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.SEMI_LIVE)  {	  ncy!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	94	None	replace
428	[BUG]  [BUGGY]  Node  node  =  child.getNext())  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  node  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  node  =  child.getNext())  {	  Node    node!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	91	None	replace
429	[BUG]  [BUGGY]  Node  node  =  child.getFirstChild();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  node  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  node  =  child.getFirstChild();	  Node    node!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	91	None	replace
430	[BUG]  [BUGGY]  Node  node  =  child.getNext();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  node  =  child.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  node  =  child.getNext();	  Node    node!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	91	None	replace
431	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable));  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable));  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable));	  child    ==    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    new    AssertionFailedError(variable));    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
432	[BUG]  [BUGGY]  n  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable));  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable));  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable));	  child    ==    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    new    AssertionFailedError(variable));    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
433	[BUG]  [BUGGY]  node  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable));  [CE]  cannot  find  symbol  node  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  node  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable));  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	node  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable));	  child    ==    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    new    AssertionFailedError(variable));    	non-compiled	[CE]  cannot  find  symbol  node	133	None	replace
434	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable));  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable));  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable));	  child    ==    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    new    AssertionFailedError(variable));    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
435	[BUG]  [BUGGY]  Child  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable));  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable));  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable));	  child    ==    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    new    AssertionFailedError(variable));    	non-compiled	[CE]  ';'  expected	133	None	replace
436	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(param1));  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(param1));  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(param1));	  child    ==    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    new    AssertionFailedError(variable));    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
437	[BUG]  [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getFirstChild())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {	  child!=    null;    child    =    child.getFirstChild())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	125	None	replace
438	[BUG]  [BUGGY]  Child  child  =  child.getFirstChild())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getFirstChild())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getFirstChild())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {	  child!=    null;    child    =    child.getFirstChild())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    	non-compiled	[CE]  ';'  expected	125	None	replace
439	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {	  child!=    null;    child    =    child.getFirstChild())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	125	None	replace
440	[BUG]  [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getFirstChild())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {	  child!=    null;    child    =    child.getFirstChild())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	125	None	replace
441	[BUG]  [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getFirstChild())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {	  child!=    null;    child    =    child.getFirstChild())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	125	None	replace
442	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME);  child  =  child.getFirstChild();  [CE]  ')'  expected  [FE]            StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME);  child  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME);  child  =  child.getFirstChild();	  if(child!=    null)    {    child    =    child.getParent();    }    else    {    Preconditions.checkState(child.getType()    ==    Token.NAME);    child    =    child.getFirstChild();    }    	non-compiled	[CE]  ')'  expected	154	None	replace
443	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME);  child  =  child.getLastChild();  [CE]  ')'  expected  [FE]              StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME);  child  =  child.getLastChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME);  child  =  child.getLastChild();	  if(child!=    null)    {    child    =    child.getParent();    }    else    {    Preconditions.checkState(child.getType()    ==    Token.NAME);    child    =    child.getFirstChild();    }    	non-compiled	[CE]  ')'  expected	154	None	replace
444	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.FUNCTION);  child  =  child.getFirstChild();  [CE]  ')'  expected  [FE]                StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.FUNCTION);  child  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.FUNCTION);  child  =  child.getFirstChild();	  if(child!=    null)    {    child    =    child.getParent();    }    else    {    Preconditions.checkState(child.getType()    ==    Token.NAME);    child    =    child.getFirstChild();    }    	non-compiled	[CE]  ')'  expected	154	None	replace
445	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()!=  Token.NAME);  child  =  child.getFirstChild();  [CE]  ')'  expected  [FE]                  StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()!=  Token.NAME);  child  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()!=  Token.NAME);  child  =  child.getFirstChild();	  if(child!=    null)    {    child    =    child.getParent();    }    else    {    Preconditions.checkState(child.getType()    ==    Token.NAME);    child    =    child.getFirstChild();    }    	non-compiled	[CE]  ')'  expected	154	None	replace
446	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  child  =  child.getFirstChild();  [CE]  ')'  expected  [FE]                    StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  child  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.BLOCK);  child  =  child.getFirstChild();	  if(child!=    null)    {    child    =    child.getParent();    }    else    {    Preconditions.checkState(child.getType()    ==    Token.NAME);    child    =    child.getFirstChild();    }    	non-compiled	[CE]  ')'  expected	154	None	replace
447	[BUG]  [BUGGY]  NodeUtil.copyCfgNode(child,  variable);  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  NodeUtil.copyCfgNode(child,  variable);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	NodeUtil.copyCfgNode(child,  variable);	  NodeUtil.copyCfgNode(child,    n);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
448	[BUG]  [BUGGY]  NodeUtil.copyCfgNode(n,  child);  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  NodeUtil.copyCfgNode(n,  child);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	NodeUtil.copyCfgNode(n,  child);	  NodeUtil.copyCfgNode(child,    n);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
449	[BUG]  [BUGGY]  NodeUtil.copyCfgNode(parent,  n);  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  NodeUtil.copyCfgNode(parent,  n);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	NodeUtil.copyCfgNode(parent,  n);	  NodeUtil.copyCfgNode(child,    n);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
450	[BUG]  [BUGGY]  NodeUtil.copyCfgNode(child,  n,  variable);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  NodeUtil.copyCfgNode(child,  n,  variable);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	NodeUtil.copyCfgNode(child,  n,  variable);	  NodeUtil.copyCfgNode(child,    n);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
451	[BUG]  [BUGGY]  NodeUtil.copyRemovableCfgNode(child,  n);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  NodeUtil.copyRemovableCfgNode(child,  n);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	NodeUtil.copyRemovableCfgNode(child,  n);	  NodeUtil.copyCfgNode(child,    n);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
452	[BUG]  [BUGGY]  NodeUtil.copyCfgNode(child,  state);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  NodeUtil.copyCfgNode(child,  state);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	NodeUtil.copyCfgNode(child,  state);	  NodeUtil.copyCfgNode(child,    n);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
453	[BUG]  [BUGGY]  NodeUtil.copyFunctionNode(child,  n);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  NodeUtil.copyFunctionNode(child,  n);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	NodeUtil.copyFunctionNode(child,  n);	  NodeUtil.copyCfgNode(child,    n);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
454	[BUG]  [BUGGY]  Node  }  else  if(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  }  else  if(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  else  if(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.FUNCTION)  {	  Node    }    else    if(child.getType()    ==    Token.NAME)    {    node!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	83	None	replace
455	[BUG]  [BUGGY]  Node  }  else  if(child.getType()  ==  Token.NAME  &&  child.getFirstChild()!=  n)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  }  else  if(child.getType()  ==  Token.NAME  &&  child.getFirstChild()!=  n)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  else  if(child.getType()  ==  Token.NAME  &&  child.getFirstChild()!=  n)  {	  Node    }    else    if(child.getType()    ==    Token.NAME)    {    node!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	83	None	replace
456	[BUG]  [BUGGY]  Node  }  else  if(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.CALL)  {  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  }  else  if(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.CALL)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  else  if(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.CALL)  {	  Node    }    else    if(child.getType()    ==    Token.NAME)    {    node!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	83	None	replace
457	[BUG]  [BUGGY]  Node  }  else  if(child.getType()  ==  Token.NAME  &&  child.getChildCount()  >  1)  {  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  }  else  if(child.getType()  ==  Token.NAME  &&  child.getChildCount()  >  1)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  else  if(child.getType()  ==  Token.NAME  &&  child.getChildCount()  >  1)  {	  Node    }    else    if(child.getType()    ==    Token.NAME)    {    node!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	83	None	replace
458	[BUG]  [BUGGY]  Node  }  else  if(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  }  else  if(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.VAR)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  else  if(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.VAR)  {	  Node    }    else    if(child.getType()    ==    Token.NAME)    {    node!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	83	None	replace
459	[BUG]  [BUGGY]  Child  <  KILL  ||  child.getType()  ==  Token.NAME)  {  child!=  null;  child  =  child.getNext())  {  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  <  KILL  ||  child.getType()  ==  Token.NAME)  {  child!=  null;  child  =  child.getNext())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  <  KILL  ||  child.getType()  ==  Token.NAME)  {  child!=  null;  child  =  child.getNext())  {  }	  if(child    ==    null    ||    child.getType()    ==    Token.NAME)    {    child!=    null;    child    =    child.getNext())    {    }    	non-compiled	[CE]  ';'  expected	141	None	replace
460	[BUG]  [BUGGY]  if(child!=  null  &&  child.getType()  ==  Token.NAME)  {  child!=  null;  child  =  child.getNext())  {  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null  &&  child.getType()  ==  Token.NAME)  {  child!=  null;  child  =  child.getNext())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null  &&  child.getType()  ==  Token.NAME)  {  child!=  null;  child  =  child.getNext())  {  }	  if(child    ==    null    ||    child.getType()    ==    Token.NAME)    {    child!=    null;    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
461	[BUG]  [BUGGY]  if(child!=  null  ||  child.getType()  ==  Token.NAME)  {  child!=  null;  child  =  child.getNext())  {  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null  ||  child.getType()  ==  Token.NAME)  {  child!=  null;  child  =  child.getNext())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null  ||  child.getType()  ==  Token.NAME)  {  child!=  null;  child  =  child.getNext())  {  }	  if(child    ==    null    ||    child.getType()    ==    Token.NAME)    {    child!=    null;    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
462	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child,  this,  variable);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  NodeTraversal.traverse(compiler,  child,  this,  variable);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	NodeTraversal.traverse(compiler,  child,  this,  variable);	  NodeTraversal.traverse(compiler,    child,    this);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
463	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	NodeTraversal.traverse(compiler,  n,  this);	  NodeTraversal.traverse(compiler,    child,    this);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
464	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child,  this,  n);  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  NodeTraversal.traverse(compiler,  child,  this,  n);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	NodeTraversal.traverse(compiler,  child,  this,  n);	  NodeTraversal.traverse(compiler,    child,    this);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
465	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child,  this,  state);  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  NodeTraversal.traverse(compiler,  child,  this,  state);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	NodeTraversal.traverse(compiler,  child,  this,  state);	  NodeTraversal.traverse(compiler,    child,    this);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
466	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child,  this,  null);  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  NodeTraversal.traverse(compiler,  child,  this,  null);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	NodeTraversal.traverse(compiler,  child,  this,  null);	  NodeTraversal.traverse(compiler,    child,    this);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
467	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child,  null);  [CE]  illegal  start  of  expression  [FE]                          RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  NodeTraversal.traverse(compiler,  child,  null);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	NodeTraversal.traverse(compiler,  child,  null);	  NodeTraversal.traverse(compiler,    child,    this);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
468	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child,  this,  liveness);  [CE]  illegal  start  of  expression  [FE]                            RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  NodeTraversal.traverse(compiler,  child,  this,  liveness);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	NodeTraversal.traverse(compiler,  child,  this,  liveness);	  NodeTraversal.traverse(compiler,    child,    this);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
469	[BUG]  [BUGGY]  Node  newCfgNode  =  child.getNext();  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  newCfgNode  =  child.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  newCfgNode  =  child.getNext();	  child    ==    null;    child    =    child.getNext())    {    Node    newCfgNode    =    child.getFirstChild();    	non-compiled	[CE]  ';'  expected	135	None	replace
470	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext())  {  Node  newCfgNode  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	add	child!=  null;  child  =  child.getNext())  {  Node  newCfgNode  =  child.getFirstChild();	  child    ==    null;    child    =    child.getNext())    {    Node    newCfgNode    =    child.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	135	57	replace
471	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext())  {  Node  newCfgNode  =  child.getFirstChild();  [FE]  AssertionFailedError  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext())  {  Node  newCfgNode  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext())  {  Node  newCfgNode  =  child.getFirstChild();	  child    ==    null;    child    =    child.getNext())    {    Node    newCfgNode    =    child.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	135	57	replace
472	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext())  {  Node  newCfgNode  =  child.getLastChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	add	child!=  null;  child  =  child.getNext())  {  Node  newCfgNode  =  child.getLastChild();	  child    ==    null;    child    =    child.getNext())    {    Node    newCfgNode    =    child.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	135	57	replace
473	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext())  {  Node  newCfgNode  =  child.getLastChild();  [FE]  AssertionFailedError  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext())  {  Node  newCfgNode  =  child.getLastChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext())  {  Node  newCfgNode  =  child.getLastChild();	  child    ==    null;    child    =    child.getNext())    {    Node    newCfgNode    =    child.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	135	57	replace
474	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  ==  null;  child  =  child.getNext())  {  Node  newCfgNode  =  child.getLastChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	add	child  ==  null;  child  =  child.getNext())  {  Node  newCfgNode  =  child.getLastChild();	  child    ==    null;    child    =    child.getNext())    {    Node    newCfgNode    =    child.getFirstChild();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	135	63	replace
475	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getNext())  {  Node  newCfgNode  =  child.getLastChild();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  ==  null;  child  =  child.getNext())  {  Node  newCfgNode  =  child.getLastChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  ==  null;  child  =  child.getNext())  {  Node  newCfgNode  =  child.getLastChild();	  child    ==    null;    child    =    child.getNext())    {    Node    newCfgNode    =    child.getFirstChild();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	135	63	replace
476	[BUG]  [BUGGY]  Node  newCfgNode  =  child.getLastChild();  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  newCfgNode  =  child.getLastChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  newCfgNode  =  child.getLastChild();	  child    ==    null;    child    =    child.getNext())    {    Node    newCfgNode    =    child.getFirstChild();    	non-compiled	[CE]  ';'  expected	135	None	replace
477	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext())  {  Node  child  =  child.getNext();  [CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]              StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext())  {  Node  child  =  child.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext())  {  Node  child  =  child.getNext();	  child!=    null;    child    =    child.getParent())    {    Node    child    =    child.getNext();    	non-compiled	[CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	117	None	replace
478	[BUG]  [BUGGY]  node!=  null;  child  =  child.getParent())  {  Node  child  =  child.getNext();  [CE]  cannot  find  symbol  node  [FE]                StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  node!=  null;  child  =  child.getParent())  {  Node  child  =  child.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	node!=  null;  child  =  child.getParent())  {  Node  child  =  child.getNext();	  child!=    null;    child    =    child.getParent())    {    Node    child    =    child.getNext();    	non-compiled	[CE]  cannot  find  symbol  node	117	None	replace
479	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext())  {  Node  child  =  child.getParent();  [CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                  StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext())  {  Node  child  =  child.getParent();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext())  {  Node  child  =  child.getParent();	  child!=    null;    child    =    child.getParent())    {    Node    child    =    child.getNext();    	non-compiled	[CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	117	None	replace
480	[BUG]  [BUGGY]  node!=  null;  child  =  child.getFirstChild())  {  Node  child  =  n.getLastChild();  [CE]  cannot  find  symbol  node  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  node!=  null;  child  =  child.getFirstChild())  {  Node  child  =  n.getLastChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	node!=  null;  child  =  child.getFirstChild())  {  Node  child  =  n.getLastChild();	  child!=    null;    child    =    child.getFirstChild())    {    Node    child    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  node	32	None	replace
481	[BUG]  [BUGGY]  Child  child  =  n.getLastChild();  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  n.getLastChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  n.getLastChild();	  child!=    null;    child    =    child.getFirstChild())    {    Node    child    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	32	None	replace
482	[BUG]  [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  Node  child  =  n.getLastChild();  }  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  Node  child  =  n.getLastChild();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getFirstChild())  {  Node  child  =  n.getLastChild();  }	  child!=    null;    child    =    child.getFirstChild())    {    Node    child    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
483	[BUG]  [BUGGY]  if(child!=  null  &&  child.getType()  ==  Token.CALL)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null  &&  child.getType()  ==  Token.CALL)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null  &&  child.getType()  ==  Token.CALL)  {	  if(child!=    null    &&    child.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
484	[BUG]  [BUGGY]  if(child!=  null  &&  child.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null  &&  child.getType()  ==  Token.NAME)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null  &&  child.getType()  ==  Token.NAME)  {	  if(child!=    null    &&    child.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
485	[BUG]  [BUGGY]  if(child!=  null  &&  child.getType()  ==  Token.FUNCTION  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null  &&  child.getType()  ==  Token.FUNCTION  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null  &&  child.getType()  ==  Token.FUNCTION  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(child!=    null    &&    child.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
486	[BUG]  [BUGGY]  node!=  null;  child  =  child.getParent())  {  Node  child  =  n.getLastChild();  [CE]  cannot  find  symbol  node  [FE]                StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  node!=  null;  child  =  child.getParent())  {  Node  child  =  n.getLastChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	node!=  null;  child  =  child.getParent())  {  Node  child  =  n.getLastChild();	  child!=    null;    child    =    child.getParent())    {    Node    child    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  node	60	None	replace
487	[BUG]  [BUGGY]  child!=  null;  child  =  child.getLastChild(),  variable)  {  [CE]  not  a  statement  [FE]          StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getLastChild(),  variable)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getLastChild(),  variable)  {	  child!=    null;    child    =    child.getParent(),    variable)    {    	non-compiled	[CE]  not  a  statement	75	None	replace
488	[BUG]  [BUGGY]  node!=  null;  child  =  child.getParent(),  variable)  {  [CE]  not  a  statement  [FE]            StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  node!=  null;  child  =  child.getParent(),  variable)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	node!=  null;  child  =  child.getParent(),  variable)  {	  child!=    null;    child    =    child.getParent(),    variable)    {    	non-compiled	[CE]  not  a  statement	75	None	replace
489	[BUG]  [BUGGY]  node!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  this);  [CE]  cannot  find  symbol  node  [FE]          RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  node!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  this);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	node!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  this);	  n!=    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    this);    	non-compiled	[CE]  cannot  find  symbol  node	107	None	replace
490	[BUG]  [BUGGY]  Predicates.checkState(child!=  null);  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  this);  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Predicates.checkState(child!=  null);  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  this);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Predicates.checkState(child!=  null);  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  this);	  n!=    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    this);    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
491	[BUG]  [BUGGY]  n!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  this);  }  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  this);  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  this);  }	  n!=    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    this);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
492	[BUG]  [BUGGY]  while(child  ==  null  &&  child.getType()  ==  Token.CALL)  {  child  =  child.getNext())  {  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  while(child  ==  null  &&  child.getType()  ==  Token.CALL)  {  child  =  child.getNext())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	while(child  ==  null  &&  child.getType()  ==  Token.CALL)  {  child  =  child.getNext())  {  }	  while(child!=    null    &&    child.getType()    ==    Token.CALL)    {    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
493	[BUG]  [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.CALL)  {  child  =  child.getParent())  {  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.CALL)  {  child  =  child.getParent())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	while(child!=  null  &&  child.getType()  ==  Token.CALL)  {  child  =  child.getParent())  {  }	  while(child!=    null    &&    child.getType()    ==    Token.CALL)    {    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
494	[BUG]  [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.GETPROP)  {  child  =  child.getNext())  {  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.GETPROP)  {  child  =  child.getNext())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	while(child!=  null  &&  child.getType()  ==  Token.GETPROP)  {  child  =  child.getNext())  {  }	  while(child!=    null    &&    child.getType()    ==    Token.CALL)    {    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
495	[BUG]  [BUGGY]  while(child!=  null  &&  child.getType()  >=  Token.CALL)  {  child  =  child.getNext())  {  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  while(child!=  null  &&  child.getType()  >=  Token.CALL)  {  child  =  child.getNext())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	while(child!=  null  &&  child.getType()  >=  Token.CALL)  {  child  =  child.getNext())  {  }	  while(child!=    null    &&    child.getType()    ==    Token.CALL)    {    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
496	[BUG]  [BUGGY]  n!=  null;  child  =  child.getChildCount())  {  [CE]  incompatible  types  [FE]    RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getChildCount())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getChildCount())  {	  n!=    null;    child    =    child.getFirstChild())    {    	non-compiled	[CE]  incompatible  types	4	None	replace
497	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getNext())  {  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  ==  null;  child  =  child.getNext())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  ==  null;  child  =  child.getNext())  {  }	  if(child!=    null)    {    child    ==    null;    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
498	[BUG]  [BUGGY]  parent  ==  null;  child  =  child.getNext())  {  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  parent  ==  null;  child  =  child.getNext())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	parent  ==  null;  child  =  child.getNext())  {  }	  if(child!=    null)    {    child    ==    null;    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
499	[BUG]  [BUGGY]  if(child.getType()  ==  Token.NAME)  {  child!=  null;  child  =  child.getLastChild())  {  }  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child.getType()  ==  Token.NAME)  {  child!=  null;  child  =  child.getLastChild())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child.getType()  ==  Token.NAME)  {  child!=  null;  child  =  child.getLastChild())  {  }	  child!=    null;    child    =    child.getLastChild())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
500	[BUG]  [BUGGY]  if(child.getType()  ==  Token.NAME)  {  child!=  null;  child  =  child.getLastChild())  {  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child.getType()  ==  Token.NAME)  {  child!=  null;  child  =  child.getLastChild())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child.getType()  ==  Token.NAME)  {  child!=  null;  child  =  child.getLastChild())  {	  child!=    null;    child    =    child.getLastChild())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
501	[BUG]  [BUGGY]  child!=  null;  child  =  child.getPreviousChild())  {  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getPreviousChild())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getPreviousChild())  {	  child!=    null;    child    =    child.getLastChild())    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
502	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MOVED)  {  return  state;  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MOVED)  {  return  state;  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MOVED)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MOVED)    {    return    state;    }    	non-compiled	[CE]  ';'  expected	87	None	replace
503	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.SECOND)  {  return  state;  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.SECOND)  {  return  state;  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.SECOND)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MOVED)    {    return    state;    }    	non-compiled	[CE]  ';'  expected	87	None	replace
504	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination;  child  =  child.getPrevious())  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Predicate  matchRemovableAssignsElimination;  child  =  child.getPrevious())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Predicate  matchRemovableAssignsElimination;  child  =  child.getPrevious())  {	  children!=    null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  ';'  expected	119	None	replace
505	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination  =  child.getPrevious();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Predicate  matchRemovableAssignsElimination  =  child.getPrevious();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Predicate  matchRemovableAssignsElimination  =  child.getPrevious();	  children!=    null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  ';'  expected	119	None	replace
506	[BUG]  [BUGGY]  Neighbor  children!=  null;  child  =  child.getPrevious())  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Neighbor  children!=  null;  child  =  child.getPrevious())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Neighbor  children!=  null;  child  =  child.getPrevious())  {	  children!=    null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  ';'  expected	119	None	replace
507	[BUG]  [BUGGY]  enfants!=  null;  child  =  child.getPrevious())  {  [CE]  cannot  find  symbol  enfants  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  enfants!=  null;  child  =  child.getPrevious())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	enfants!=  null;  child  =  child.getPrevious())  {	  children!=    null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  cannot  find  symbol  enfants	119	None	replace
508	[BUG]  [BUGGY]  Node  child  =  child.getLastChild();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  child  =  child.getLastChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  child.getLastChild();	  Node    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	90	None	replace
509	[BUG]  [BUGGY]  node!=  null;  child  =  child.getFirstChild())  {  Node  child  =  n.getNext();  [CE]  cannot  find  symbol  node  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  node!=  null;  child  =  child.getFirstChild())  {  Node  child  =  n.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	node!=  null;  child  =  child.getFirstChild())  {  Node  child  =  n.getNext();	  child!=    null;    child    =    child.getFirstChild())    {    Node    child    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  node	37	None	replace
510	[BUG]  [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  Node  child  =  n.getParent();  [CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  Node  child  =  n.getParent();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getFirstChild())  {  Node  child  =  n.getParent();	  child!=    null;    child    =    child.getFirstChild())    {    Node    child    =    n.getNext();    	non-compiled	[CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	37	None	replace
511	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getNext()  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child  =  child.getNext()  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getNext()  ||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(child!=    null)    {    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
512	[BUG]  [BUGGY]  Node  child  =  node.getLastChild();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  child  =  node.getLastChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  node.getLastChild();	  Node    child    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	70	None	replace
513	[BUG]  [BUGGY]  Node  child  =  parent.getLastChild();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  child  =  parent.getLastChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  parent.getLastChild();	  Node    child    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	70	None	replace
514	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext())  {  Child  child  =  child.getParent();  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext())  {  Child  child  =  child.getParent();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext())  {  Child  child  =  child.getParent();	  child!=    null;    child    =    child.getParent())    {    Child    child    =    child.getParent();    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
515	[BUG]  [BUGGY]  child!=  null;  child  =  child.getParent())  {  Child  child  =  child.getParent();  }  [CE]  illegal  start  of  type  [FE]          StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getParent())  {  Child  child  =  child.getParent();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getParent())  {  Child  child  =  child.getParent();  }	  child!=    null;    child    =    child.getParent())    {    Child    child    =    child.getParent();    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
516	[BUG]  [BUGGY]  child!=  null;  child  =  child.getParent())  {  Child  child  =  child.getChildren();  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getParent())  {  Child  child  =  child.getChildren();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getParent())  {  Child  child  =  child.getChildren();	  child!=    null;    child    =    child.getParent())    {    Child    child    =    child.getParent();    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
517	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getParent())  {  Child  child  =  child.getParent();  [CE]  cannot  find  symbol  [FE]              StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  ==  null;  child  =  child.getParent())  {  Child  child  =  child.getParent();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  ==  null;  child  =  child.getParent())  {  Child  child  =  child.getParent();	  child!=    null;    child    =    child.getParent())    {    Child    child    =    child.getParent();    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
518	[BUG]  [BUGGY]  child!=  null;  child  =  child.getParent())  {  Child  child  =  child.getNext();  [CE]  cannot  find  symbol  [FE]                StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getParent())  {  Child  child  =  child.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getParent())  {  Child  child  =  child.getNext();	  child!=    null;    child    =    child.getParent())    {    Child    child    =    child.getParent();    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
519	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  child.getLastChild();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Predicate  matchRemovableAssigns  =  child.getLastChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Predicate  matchRemovableAssigns  =  child.getLastChild();	  Predicate    matchRemovableAssigns    =    child.getFirstChild();    	non-compiled	[CE]  ';'  expected	72	None	replace
520	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  child.getNext();  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Predicate  matchRemovableAssigns  =  child.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Predicate  matchRemovableAssigns  =  child.getNext();	  Predicate    matchRemovableAssigns    =    child.getFirstChild();    	non-compiled	[CE]  ';'  expected	72	None	replace
521	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  child.getFirstChild(),  variable;  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Predicate  matchRemovableAssigns  =  child.getFirstChild(),  variable;  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Predicate  matchRemovableAssigns  =  child.getFirstChild(),  variable;	  Predicate    matchRemovableAssigns    =    child.getFirstChild();    	non-compiled	[CE]  ';'  expected	72	None	replace
522	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  child.getParent();  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Predicate  matchRemovableAssigns  =  child.getParent();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Predicate  matchRemovableAssigns  =  child.getParent();	  Predicate    matchRemovableAssigns    =    child.getFirstChild();    	non-compiled	[CE]  ';'  expected	72	None	replace
523	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  child.getChildCount();  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Predicate  matchRemovableAssigns  =  child.getChildCount();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Predicate  matchRemovableAssigns  =  child.getChildCount();	  Predicate    matchRemovableAssigns    =    child.getFirstChild();    	non-compiled	[CE]  ';'  expected	72	None	replace
524	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  child.getPreviousChild();  [CE]  ';'  expected  [FE]                                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Predicate  matchRemovableAssigns  =  child.getPreviousChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Predicate  matchRemovableAssigns  =  child.getPreviousChild();	  Predicate    matchRemovableAssigns    =    child.getFirstChild();    	non-compiled	[CE]  ';'  expected	72	None	replace
525	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.CALL);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.CALL);	  Preconditions.checkState(child.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
526	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL,  variable);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL,  variable);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.CALL,  variable);	  Preconditions.checkState(child.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
527	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()!=  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()!=  Token.CALL);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()!=  Token.CALL);	  Preconditions.checkState(child.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
528	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.GETPROP);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.GETPROP);	  Preconditions.checkState(child.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
529	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()!=  Token.CALL  ||  child.getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()!=  Token.CALL  ||  child.getType()  ==  Token.CALL);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()!=  Token.CALL  ||  child.getType()  ==  Token.CALL);	  Preconditions.checkState(child.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
530	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.BLOCK);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.BLOCK);	  Preconditions.checkState(child.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
531	[BUG]  [BUGGY]  Child  <  KILL  ||  child.getType()  ==  Token.CALL)  {  child!=  null;  child  =  child.getNext())  {  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  <  KILL  ||  child.getType()  ==  Token.CALL)  {  child!=  null;  child  =  child.getNext())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  <  KILL  ||  child.getType()  ==  Token.CALL)  {  child!=  null;  child  =  child.getNext())  {  }	  if(child    ==    null    ||    child.getType()    ==    Token.CALL)    {    child!=    null;    child    =    child.getNext())    {    }    	non-compiled	[CE]  ';'  expected	142	None	replace
532	[BUG]  [BUGGY]  if(child!=  null  &&  child.getType()  ==  Token.CALL)  {  child!=  null;  child  =  child.getNext())  {  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null  &&  child.getType()  ==  Token.CALL)  {  child!=  null;  child  =  child.getNext())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null  &&  child.getType()  ==  Token.CALL)  {  child!=  null;  child  =  child.getNext())  {  }	  if(child    ==    null    ||    child.getType()    ==    Token.CALL)    {    child!=    null;    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
533	[BUG]  [BUGGY]  if(child!=  null  ||  child.getType()  ==  Token.CALL)  {  child!=  null;  child  =  child.getNext())  {  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null  ||  child.getType()  ==  Token.CALL)  {  child!=  null;  child  =  child.getNext())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null  ||  child.getType()  ==  Token.CALL)  {  child!=  null;  child  =  child.getNext())  {  }	  if(child    ==    null    ||    child.getType()    ==    Token.CALL)    {    child!=    null;    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
534	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext())  {  Node  child  =  n.getNext();  [CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext())  {  Node  child  =  n.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext())  {  Node  child  =  n.getNext();	  child    ==    null;    child    =    child.getNext())    {    Node    child    =    n.getNext();    	non-compiled	[CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	53	None	replace
535	[BUG]  [BUGGY]  node  ==  null;  child  =  child.getNext())  {  Node  child  =  n.getNext();  [CE]  cannot  find  symbol  node  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  node  ==  null;  child  =  child.getNext())  {  Node  child  =  n.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	node  ==  null;  child  =  child.getNext())  {  Node  child  =  n.getNext();	  child    ==    null;    child    =    child.getNext())    {    Node    child    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  node	53	None	replace
536	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext())  {  Node  child  =  n.getParent();  [CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext())  {  Node  child  =  n.getParent();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext())  {  Node  child  =  n.getParent();	  child    ==    null;    child    =    child.getNext())    {    Node    child    =    n.getNext();    	non-compiled	[CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	53	None	replace
537	[BUG]  [BUGGY]  node!=  null;  child  =  child.getParent())  {  Node  child  =  child.getParent();  [CE]  cannot  find  symbol  node  [FE]            StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  node!=  null;  child  =  child.getParent())  {  Node  child  =  child.getParent();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	node!=  null;  child  =  child.getParent())  {  Node  child  =  child.getParent();	  child!=    null;    child    =    child.getParent())    {    Node    child    =    child.getParent();    	non-compiled	[CE]  cannot  find  symbol  node	116	None	replace
538	[BUG]  [BUGGY]  child  [Delete]  null;  child  =  child.getNext())  {  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  [Delete]  null;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  [Delete]  null;  child  =  child.getNext())  {	  child    ==    null;    child    =    child.getNext())    {    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	55	None	replace
539	[BUG]  [BUGGY]  Node  matchRemovableAssigns  =  child.getLastChild();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  matchRemovableAssigns  =  child.getLastChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  matchRemovableAssigns  =  child.getLastChild();	  Node    matchRemovableAssigns    =    child.getFirstChild();    	non-compiled	[CE]  ';'  expected	69	None	replace
540	[BUG]  [BUGGY]  Node  matchRemovableAssigns  =  child.getNext();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  matchRemovableAssigns  =  child.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  matchRemovableAssigns  =  child.getNext();	  Node    matchRemovableAssigns    =    child.getFirstChild();    	non-compiled	[CE]  ';'  expected	69	None	replace
541	[BUG]  [BUGGY]  Node  matchRemovableAssigns  =  child.getParent();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  matchRemovableAssigns  =  child.getParent();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  matchRemovableAssigns  =  child.getParent();	  Node    matchRemovableAssigns    =    child.getFirstChild();    	non-compiled	[CE]  ';'  expected	69	None	replace
542	[BUG]  [BUGGY]  Node  matchRemovableAssigns  =  child.getFirstChild(),  variable;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  matchRemovableAssigns  =  child.getFirstChild(),  variable;  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  matchRemovableAssigns  =  child.getFirstChild(),  variable;	  Node    matchRemovableAssigns    =    child.getFirstChild();    	non-compiled	[CE]  ';'  expected	69	None	replace
543	[BUG]  [BUGGY]  Node  matchRemovableAssigns  =  n.getFirstChild();  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  matchRemovableAssigns  =  n.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  matchRemovableAssigns  =  n.getFirstChild();	  Node    matchRemovableAssigns    =    child.getFirstChild();    	non-compiled	[CE]  ';'  expected	69	None	replace
544	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.EXPR_RESULT);	  if(child.getType()    ==    Token.NAME)    {    child    =    child.getNext();    }    else    {    Preconditions.checkState(child.getType()    ==    Token.EXPR_RESULT);    }    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
545	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()!=  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()!=  Token.EXPR_RESULT);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()!=  Token.EXPR_RESULT);	  if(child.getType()    ==    Token.NAME)    {    child    =    child.getNext();    }    else    {    Preconditions.checkState(child.getType()    ==    Token.EXPR_RESULT);    }    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
546	[BUG]  [BUGGY]  Context.checkState(child.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Context.checkState(child.getType()  ==  Token.NAME);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Context.checkState(child.getType()  ==  Token.NAME);	  if(child.getType()    ==    Token.NAME)    {    child    =    child.getNext();    }    else    {    Preconditions.checkState(child.getType()    ==    Token.EXPR_RESULT);    }    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
547	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.EXPR_RESULT,  variable);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.EXPR_RESULT,  variable);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.EXPR_RESULT,  variable);	  if(child.getType()    ==    Token.NAME)    {    child    =    child.getNext();    }    else    {    Preconditions.checkState(child.getType()    ==    Token.EXPR_RESULT);    }    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
548	[BUG]  [BUGGY]  n  ==  null;  child  =  child.getNext())  {  n  ==  null;  child  =  child.getNext())  {  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n  ==  null;  child  =  child.getNext())  {  n  ==  null;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n    ==    null;    child    =    child.getNext())    {    n  ==  null;  child  =  child.getNext())  {	  	non-compiled	[CE]  not  a  statement	9	None	add
549	[BUG]  [BUGGY]  n  ==  null;  child  =  child.getNext())  {  n!=  null;  child  =  child.getNext())  {  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n  ==  null;  child  =  child.getNext())  {  n!=  null;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n    ==    null;    child    =    child.getNext())    {    n!=  null;  child  =  child.getNext())  {	  	non-compiled	[CE]  not  a  statement	9	None	add
550	[BUG]  [BUGGY]  n  ==  null;  child  =  child.getNext())  {  Node  n  =  child.getFirstChild();  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n  ==  null;  child  =  child.getNext())  {  Node  n  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n    ==    null;    child    =    child.getNext())    {    Node  n  =  child.getFirstChild();	  	non-compiled	[CE]  not  a  statement	9	None	add
551	[BUG]  [BUGGY]  n  ==  null;  child  =  child.getNext())  {  Node  n  =  child.getNext();  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n  ==  null;  child  =  child.getNext())  {  Node  n  =  child.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n    ==    null;    child    =    child.getNext())    {    Node  n  =  child.getNext();	  	non-compiled	[CE]  not  a  statement	9	None	add
552	[BUG]  [BUGGY]  n  ==  null;  child  =  child.getNext())  {  Node  n  =  child.getParent();  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n  ==  null;  child  =  child.getNext())  {  Node  n  =  child.getParent();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n    ==    null;    child    =    child.getNext())    {    Node  n  =  child.getParent();	  	non-compiled	[CE]  not  a  statement	9	None	add
553	[BUG]  [BUGGY]  n  ==  null;  child  =  child.getNext())  {  Node  child  =  n.getFirstChild();  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n  ==  null;  child  =  child.getNext())  {  Node  child  =  n.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n    ==    null;    child    =    child.getNext())    {    Node  child  =  n.getFirstChild();	  	non-compiled	[CE]  not  a  statement	9	None	add
554	[BUG]  [BUGGY]  n  ==  null;  child  =  child.getNext())  {  Node  n  =  child.getLastChild();  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n  ==  null;  child  =  child.getNext())  {  Node  n  =  child.getLastChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n    ==    null;    child    =    child.getNext())    {    Node  n  =  child.getLastChild();	  	non-compiled	[CE]  not  a  statement	9	None	add
555	[BUG]  [BUGGY]  n  ==  null;  child  =  child.getNext())  {  Node  parent  =  child.getParent();  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n  ==  null;  child  =  child.getNext())  {  Node  parent  =  child.getParent();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n    ==    null;    child    =    child.getNext())    {    Node  parent  =  child.getParent();	  	non-compiled	[CE]  not  a  statement	9	None	add
556	[BUG]  [BUGGY]  n!=  null;  child  =  child.getNext())  {  Node  child  =  n.getLastChild();  [CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]            RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getNext())  {  Node  child  =  n.getLastChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getNext())  {  Node  child  =  n.getLastChild();	  n!=    null;    child    =    child.getNext())    {    Node    child    =    n.getFirstChild();    	non-compiled	[CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	108	None	replace
557	[BUG]  [BUGGY]  n!=  null;  child  =  child.getNext())  {  Node  child  =  n.getFirstChild();  }  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getNext())  {  Node  child  =  n.getFirstChild();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getNext())  {  Node  child  =  n.getFirstChild();  }	  n!=    null;    child    =    child.getNext())    {    Node    child    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
558	[BUG]  [BUGGY]  node!=  null;  child  =  child.getParent())  {  Node  child  =  n.getNext();  [CE]  cannot  find  symbol  node  [FE]                    StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  node!=  null;  child  =  child.getParent())  {  Node  child  =  n.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	node!=  null;  child  =  child.getParent())  {  Node  child  =  n.getNext();	  child!=    null;    child    =    child.getParent())    {    Node    child    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  node	62	None	replace
559	[BUG]  [BUGGY]  node!=  null;  child  =  child.getNext())  {  Node  child  =  n.getNext();  [CE]  cannot  find  symbol  node  [FE]                      StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  node!=  null;  child  =  child.getNext())  {  Node  child  =  n.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	node!=  null;  child  =  child.getNext())  {  Node  child  =  n.getNext();	  child!=    null;    child    =    child.getParent())    {    Node    child    =    n.getNext();    	non-compiled	[CE]  cannot  find  symbol  node	62	None	replace
560	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.GETPROP);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.GETPROP);	  if(child.getType()    ==    Token.NAME)    {    child    =    child.getNext();    }    else    {    Preconditions.checkState(child.getType()    ==    Token.CALL);    }    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
561	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.FOR);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.FOR);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.FOR);	  if(child.getType()    ==    Token.NAME)    {    child    =    child.getNext();    }    else    {    Preconditions.checkState(child.getType()    ==    Token.CALL);    }    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
562	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext(),  VariableLiveness.KILL_LIVE)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext(),  VariableLiveness.KILL_LIVE)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext(),  VariableLiveness.KILL_LIVE)  {	  child!=    null;    child    =    child.getNext(),    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  not  a  statement	77	None	replace
563	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext(),  VariableLiveness.MILLIS_LIVE)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext(),  VariableLiveness.MILLIS_LIVE)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext(),  VariableLiveness.MILLIS_LIVE)  {	  child!=    null;    child    =    child.getNext(),    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  not  a  statement	77	None	replace
564	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext(),  VariableLiveness.MOVED)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext(),  VariableLiveness.MOVED)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext(),  VariableLiveness.MOVED)  {	  child!=    null;    child    =    child.getNext(),    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  not  a  statement	77	None	replace
565	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable),  n);  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable),  n);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable),  n);	  child    ==    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    new    AssertionFailedError(variable),    n);    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
566	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable),  n);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable),  n);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable),  n);	  child    ==    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    new    AssertionFailedError(variable),    n);    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
567	[BUG]  [BUGGY]  node  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable),  n);  [CE]  cannot  find  symbol  node  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  node  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable),  n);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	node  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable),  n);	  child    ==    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    new    AssertionFailedError(variable),    n);    	non-compiled	[CE]  cannot  find  symbol  node	139	None	replace
568	[BUG]  [BUGGY]  Child  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable),  n);  [CE]  ';'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable),  n);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable),  n);	  child    ==    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    new    AssertionFailedError(variable),    n);    	non-compiled	[CE]  ';'  expected	139	None	replace
569	[BUG]  [BUGGY]  n  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable),  n);  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable),  n);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable),  n);	  child    ==    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    new    AssertionFailedError(variable),    n);    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
570	[BUG]  [BUGGY]  n  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable),  state);  [CE]  cannot  find  symbol  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable),  state);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable),  state);	  child    ==    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    new    AssertionFailedError(variable),    n);    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
571	[BUG]  [BUGGY]  while(child  ==  null  &&  child.getType()  ==  Token.FUNCTION)  {  child  =  child.getNext())  {  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  while(child  ==  null  &&  child.getType()  ==  Token.FUNCTION)  {  child  =  child.getNext())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	while(child  ==  null  &&  child.getType()  ==  Token.FUNCTION)  {  child  =  child.getNext())  {  }	  while(child!=    null    &&    child.getType()    ==    Token.FUNCTION)    {    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
572	[BUG]  [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.FUNCTION)  {  child  =  child.getParent())  {  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.FUNCTION)  {  child  =  child.getParent())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	while(child!=  null  &&  child.getType()  ==  Token.FUNCTION)  {  child  =  child.getParent())  {  }	  while(child!=    null    &&    child.getType()    ==    Token.FUNCTION)    {    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
573	[BUG]  [BUGGY]  while(child!=  null  &&  child.getType()  >=  Token.FUNCTION)  {  child  =  child.getNext())  {  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  while(child!=  null  &&  child.getType()  >=  Token.FUNCTION)  {  child  =  child.getNext())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	while(child!=  null  &&  child.getType()  >=  Token.FUNCTION)  {  child  =  child.getNext())  {  }	  while(child!=    null    &&    child.getType()    ==    Token.FUNCTION)    {    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
574	[BUG]  [BUGGY]  while(child!=  null  ||  child.getType()  ==  Token.FUNCTION)  {  child  =  child.getNext())  {  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  while(child!=  null  ||  child.getType()  ==  Token.FUNCTION)  {  child  =  child.getNext())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	while(child!=  null  ||  child.getType()  ==  Token.FUNCTION)  {  child  =  child.getNext())  {  }	  while(child!=    null    &&    child.getType()    ==    Token.FUNCTION)    {    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
575	[BUG]  [BUGGY]  while(child  >=  null  &&  child.getType()  ==  Token.FUNCTION)  {  child  =  child.getNext())  {  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  while(child  >=  null  &&  child.getType()  ==  Token.FUNCTION)  {  child  =  child.getNext())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	while(child  >=  null  &&  child.getType()  ==  Token.FUNCTION)  {  child  =  child.getNext())  {  }	  while(child!=    null    &&    child.getType()    ==    Token.FUNCTION)    {    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
576	[BUG]  [BUGGY]  if(child  ==  null  &&  child.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child  ==  null  &&  child.getType()  ==  Token.NAME)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child  ==  null  &&  child.getType()  ==  Token.NAME)  {	  if(child!=    null    ||    child.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
577	[BUG]  [BUGGY]  if(child  ==  null  ||  child.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child  ==  null  ||  child.getType()  ==  Token.NAME)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child  ==  null  ||  child.getType()  ==  Token.NAME)  {	  if(child!=    null    ||    child.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
578	[BUG]  [BUGGY]  if(child  >=  null  &&  child.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child  >=  null  &&  child.getType()  ==  Token.NAME)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child  >=  null  &&  child.getType()  ==  Token.NAME)  {	  if(child!=    null    ||    child.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
579	[BUG]  [BUGGY]  if(child  ==  null  ||  child.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child  ==  null  ||  child.getType()!=  Token.NAME)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child  ==  null  ||  child.getType()!=  Token.NAME)  {	  if(child!=    null    ||    child.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
580	[BUG]  [BUGGY]  if(child  >=  null  ||  child.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child  >=  null  ||  child.getType()  ==  Token.NAME)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child  >=  null  ||  child.getType()  ==  Token.NAME)  {	  if(child!=    null    ||    child.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
581	[BUG]  [BUGGY]  Node  child  =  n.getFirstChild())  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  child  =  n.getFirstChild())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  n.getFirstChild())  {	  Node    child    =    n.getNext())    {    	non-compiled	[CE]  ';'  expected	81	None	replace
582	[BUG]  [BUGGY]  Node  child  =  n.getNext(),  variable)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  child  =  n.getNext(),  variable)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  n.getNext(),  variable)  {	  Node    child    =    n.getNext())    {    	non-compiled	[CE]  ';'  expected	81	None	replace
583	[BUG]  [BUGGY]  Node  child  =  n.getLastChild())  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  child  =  n.getLastChild())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  n.getLastChild())  {	  Node    child    =    n.getNext())    {    	non-compiled	[CE]  ';'  expected	81	None	replace
584	[BUG]  [BUGGY]  Node  child  =  n.getNext()  &&  variable!=  null  &&  variable.equals(child.getString()))  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  child  =  n.getNext()  &&  variable!=  null  &&  variable.equals(child.getString()))  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  n.getNext()  &&  variable!=  null  &&  variable.equals(child.getString()))  {	  Node    child    =    n.getNext())    {    	non-compiled	[CE]  ';'  expected	81	None	replace
585	[BUG]  [BUGGY]  Node  child  =  n.getNext()  &&  variable!=  null  &&  variable.equals(child.getString());  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  child  =  n.getNext()  &&  variable!=  null  &&  variable.equals(child.getString());  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  n.getNext()  &&  variable!=  null  &&  variable.equals(child.getString());	  Node    child    =    n.getNext())    {    	non-compiled	[CE]  ';'  expected	81	None	replace
586	[BUG]  [BUGGY]  if(child  ==  null)  {  child  =  child.getFirstChild();  child  =  child.getNext())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child  ==  null)  {  child  =  child.getFirstChild();  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child  ==  null)  {  child  =  child.getFirstChild();  child  =  child.getNext())  {	  if(child!=    null)    {    child    =    child.getFirstChild();    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
587	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getLastChild();  child  =  child.getNext())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child  =  child.getLastChild();  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getLastChild();  child  =  child.getNext())  {	  if(child!=    null)    {    child    =    child.getFirstChild();    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
588	[BUG]  [BUGGY]  Node  n  =  child.getLastChild();  n!=  null;  child  =  n.getNext())  {  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  n  =  child.getLastChild();  n!=  null;  child  =  n.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  n  =  child.getLastChild();  n!=  null;  child  =  n.getNext())  {	  n!=    null;    child    =    child.getNext())    {    Node    n    =    child.getLastChild();    n!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	131	None	replace
589	[BUG]  [BUGGY]  n  >=  null;  child  =  child.getNext())  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                    RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n  >=  null;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n  >=  null;  child  =  child.getNext())  {	  n!=    null;    child    =    child.getNext())    {    n    >=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	44	None	replace
590	[BUG]  [BUGGY]  parent  ==  null)  {  child  =  child.getNext();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  child  =  child.getParent();  }  [CE]  ';'  expected  [FE]        StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  parent  ==  null)  {  child  =  child.getNext();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  child  =  child.getParent();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	parent  ==  null)  {  child  =  child.getNext();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  child  =  child.getParent();  }	  if(child!=    null)    {    child    =    child.getNext();    }    else    {    Preconditions.checkState(child.getType()    ==    Token.NAME);    child    =    child.getParent();    }    	non-compiled	[CE]  ';'  expected	152	None	replace
591	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()!=  Token.NAME);  child  =  child.getParent();  [CE]  ')'  expected  [FE]          StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()!=  Token.NAME);  child  =  child.getParent();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()!=  Token.NAME);  child  =  child.getParent();	  if(child!=    null)    {    child    =    child.getNext();    }    else    {    Preconditions.checkState(child.getType()    ==    Token.NAME);    child    =    child.getParent();    }    	non-compiled	[CE]  ')'  expected	152	None	replace
592	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.FUNCTION);  child  =  child.getParent();  [CE]  ')'  expected  [FE]            StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.FUNCTION);  child  =  child.getParent();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.FUNCTION);  child  =  child.getParent();	  if(child!=    null)    {    child    =    child.getNext();    }    else    {    Preconditions.checkState(child.getType()    ==    Token.NAME);    child    =    child.getParent();    }    	non-compiled	[CE]  ')'  expected	152	None	replace
593	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  child  =  child.getParent();  [CE]  ')'  expected  [FE]              StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  child  =  child.getParent();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.BLOCK);  child  =  child.getParent();	  if(child!=    null)    {    child    =    child.getNext();    }    else    {    Preconditions.checkState(child.getType()    ==    Token.NAME);    child    =    child.getParent();    }    	non-compiled	[CE]  ')'  expected	152	None	replace
594	[BUG]  [BUGGY]  parent  ==  null;  child  =  child.getParent())  {  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  parent  ==  null;  child  =  child.getParent())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	parent  ==  null;  child  =  child.getParent())  {  }	  if(child!=    null)    {    child!=    null;    child    =    child.getParent())    {    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
595	[BUG]  [BUGGY]  n!=  null;  child  =  child.getParent())  {  n!=  null;  child  =  child.getParent())  {  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getParent())  {  n!=  null;  child  =  child.getParent())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=    null;    child    =    child.getParent())    {    n!=  null;  child  =  child.getParent())  {	  	non-compiled	[CE]  not  a  statement	7	None	add
596	[BUG]  [BUGGY]  n!=  null;  child  =  child.getParent())  {  n!=  null;  child  =  child.getNext())  {  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getParent())  {  n!=  null;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=    null;    child    =    child.getParent())    {    n!=  null;  child  =  child.getNext())  {	  	non-compiled	[CE]  not  a  statement	7	None	add
597	[BUG]  [BUGGY]  n!=  null;  child  =  child.getParent())  {  Node  n  =  child.getFirstChild();  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getParent())  {  Node  n  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=    null;    child    =    child.getParent())    {    Node  n  =  child.getFirstChild();	  	non-compiled	[CE]  not  a  statement	7	None	add
598	[BUG]  [BUGGY]  n!=  null;  child  =  child.getParent())  {  n  ==  null;  child  =  child.getParent())  {  [CE]  not  a  statement  [FE]          RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getParent())  {  n  ==  null;  child  =  child.getParent())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=    null;    child    =    child.getParent())    {    n  ==  null;  child  =  child.getParent())  {	  	non-compiled	[CE]  not  a  statement	7	None	add
599	[BUG]  [BUGGY]  n!=  null;  child  =  child.getParent())  {  n  >=  null;  child  =  child.getParent())  {  [CE]  not  a  statement  [FE]            RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getParent())  {  n  >=  null;  child  =  child.getParent())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=    null;    child    =    child.getParent())    {    n  >=  null;  child  =  child.getParent())  {	  	non-compiled	[CE]  not  a  statement	7	None	add
600	[BUG]  [BUGGY]  n!=  null;  child  =  child.getParent())  {  Node  n  =  child.getParent();  [CE]  not  a  statement  [FE]              RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getParent())  {  Node  n  =  child.getParent();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=    null;    child    =    child.getParent())    {    Node  n  =  child.getParent();	  	non-compiled	[CE]  not  a  statement	7	None	add
601	[BUG]  [BUGGY]  n!=  null;  child  =  child.getParent())  {  Node  n  =  child.getLastChild();  [CE]  not  a  statement  [FE]                RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getParent())  {  Node  n  =  child.getLastChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=    null;    child    =    child.getParent())    {    Node  n  =  child.getLastChild();	  	non-compiled	[CE]  not  a  statement	7	None	add
602	[BUG]  [BUGGY]  parent  ==  null;  child  =  child.getNext())  {  [CE]  cannot  find  symbol  parent  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  parent  ==  null;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	parent  ==  null;  child  =  child.getNext())  {	  if(child!=    null)    {    child    ==    null;    child    =    child.getNext())    {    	non-compiled	[CE]  cannot  find  symbol  parent	15	None	replace
603	[BUG]  [BUGGY]  node!=  null;  child  =  child.getFirstChild())  {  Node  child  =  parent.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  node!=  null;  child  =  child.getFirstChild())  {  Node  child  =  parent.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	node!=  null;  child  =  child.getFirstChild())  {  Node  child  =  parent.getFirstChild();	  child!=    null;    child    =    child.getFirstChild())    {    Node    child    =    parent.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	162	None	replace
604	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext())  {  Node  child  =  parent.getFirstChild();  [CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext())  {  Node  child  =  parent.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext())  {  Node  child  =  parent.getFirstChild();	  child!=    null;    child    =    child.getFirstChild())    {    Node    child    =    parent.getFirstChild();    	non-compiled	[CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	162	None	replace
605	[BUG]  [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  Node  child  =  parent.getLastChild();  [CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  Node  child  =  parent.getLastChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getFirstChild())  {  Node  child  =  parent.getLastChild();	  child!=    null;    child    =    child.getFirstChild())    {    Node    child    =    parent.getFirstChild();    	non-compiled	[CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	162	None	replace
606	[BUG]  [BUGGY]  node  ==  null;  child  =  child.getNext())  {  Node  child  =  n.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  node  ==  null;  child  =  child.getNext())  {  Node  child  =  n.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	node  ==  null;  child  =  child.getNext())  {  Node  child  =  n.getFirstChild();	  child    ==    null;    child    =    child.getNext())    {    Node    child    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	49	None	replace
607	[BUG]  [BUGGY]  n!=  null;  child  =  child.getParent())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getParent())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=    null;    child    =    child.getParent())    {    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);	  	non-compiled	[CE]  not  a  statement	7	None	add
608	[BUG]  [BUGGY]  n!=  null;  child  =  child.getParent())  {  n!=  null;  child  =  child.getParent());  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getParent())  {  n!=  null;  child  =  child.getParent());  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=    null;    child    =    child.getParent())    {    n!=  null;  child  =  child.getParent());	  	non-compiled	[CE]  not  a  statement	7	None	add
609	[BUG]  [BUGGY]  Node  child  =  n.getfirstChild();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  child  =  n.getfirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  n.getfirstChild();	  Node    child    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	70	None	replace
610	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getLastChild();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child  =  child.getLastChild();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getLastChild();  }	  if(child!=    null)    {    child    =    child.getFirstChild();    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
611	[BUG]  [BUGGY]  parent!=  null  &&  child.getType()  ==  Token.FUNCTION)  {  child  =  child.getFirstChild();  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  parent!=  null  &&  child.getType()  ==  Token.FUNCTION)  {  child  =  child.getFirstChild();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	parent!=  null  &&  child.getType()  ==  Token.FUNCTION)  {  child  =  child.getFirstChild();  }	  if(child!=    null)    {    child    =    child.getFirstChild();    }    	non-compiled	[CE]  ';'  expected	122	None	replace
612	[BUG]  [BUGGY]  parent!=  null  &&  child.getType()  ==  Token.CALL)  {  child  =  child.getFirstChild();  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  parent!=  null  &&  child.getType()  ==  Token.CALL)  {  child  =  child.getFirstChild();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	parent!=  null  &&  child.getType()  ==  Token.CALL)  {  child  =  child.getFirstChild();  }	  if(child!=    null)    {    child    =    child.getFirstChild();    }    	non-compiled	[CE]  ';'  expected	122	None	replace
613	[BUG]  [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getFirstChild())  {  Node  child  =  n.getFirstChild();  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getFirstChild())  {  Node  child  =  n.getFirstChild();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child!=  null;  child  =  child.getFirstChild())  {  Node  child  =  n.getFirstChild();  }	  child!=    null;    child    =    child.getFirstChild())    {    Node    child    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
614	[BUG]  [BUGGY]  Child  <  KILL  ||  child  ==  null;  child  =  child.getFirstChild())  {  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  <  KILL  ||  child  ==  null;  child  =  child.getFirstChild())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  <  KILL  ||  child  ==  null;  child  =  child.getFirstChild())  {  }	  Child    <    KILL    ||    child    ==    null;    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
615	[BUG]  [BUGGY]  Child  <  KILL  ||  child  >=  null;  child  =  child.getNext())  {  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  <  KILL  ||  child  >=  null;  child  =  child.getNext())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  <  KILL  ||  child  >=  null;  child  =  child.getNext())  {  }	  Child    <    KILL    ||    child    ==    null;    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
616	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getNext())  {  Node  n  =  child.getLastChild();  [CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  ==  null;  child  =  child.getNext())  {  Node  n  =  child.getLastChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  ==  null;  child  =  child.getNext())  {  Node  n  =  child.getLastChild();	  child    ==    null;    child    =    child.getNext())    {    Node    n    =    child.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	136	None	replace
617	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getParent())  {  NodeTraversal.traverse(compiler,  child,  this);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	add	n!=  null;  child  =  child.getParent())  {  NodeTraversal.traverse(compiler,  child,  this);	  n!=    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    this);    	compilable	  [FE]  RuntimeException  	107	63	replace
618	[BUG]  [BUGGY]  n!=  null;  child  =  child.getParent())  {  NodeTraversal.traverse(compiler,  child,  this);  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getParent())  {  NodeTraversal.traverse(compiler,  child,  this);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getParent())  {  NodeTraversal.traverse(compiler,  child,  this);	  n!=    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    this);    	compilable	  [FE]  RuntimeException  	107	63	replace
619	[BUG]  [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  Node  variable  =  child.getFirstChild();  [CE]  variable  variable  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  Node  variable  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getLastChild())  {  Node  variable  =  child.getFirstChild();	  child!=    null;    child    =    child.getFirstChild())    {    Node    variable    =    child.getFirstChild();    	non-compiled	[CE]  variable  variable  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	126	None	replace
620	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext())  {  Node  variable  =  child.getFirstChild();  [CE]  variable  variable  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext())  {  Node  variable  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext())  {  Node  variable  =  child.getFirstChild();	  child!=    null;    child    =    child.getFirstChild())    {    Node    variable    =    child.getFirstChild();    	non-compiled	[CE]  variable  variable  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	126	None	replace
621	[BUG]  [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  Node  variable  =  n.getFirstChild();  [CE]  variable  variable  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  Node  variable  =  n.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getFirstChild())  {  Node  variable  =  n.getFirstChild();	  child!=    null;    child    =    child.getFirstChild())    {    Node    variable    =    child.getFirstChild();    	non-compiled	[CE]  variable  variable  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	126	None	replace
622	[BUG]  [BUGGY]  Node  child  =  n.getChildCount();  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  child  =  n.getChildCount();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  n.getChildCount();	  Node    child    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	5	None	replace
623	[BUG]  [BUGGY]  VariableLiveness  state!=  null;  child  =  child.getNext())  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  VariableLiveness  state!=  null;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	VariableLiveness  state!=  null;  child  =  child.getNext())  {	  ncy!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	94	None	replace
624	[BUG]  [BUGGY]  Child  }  null;  child  =  child.getParent())  {  [CE]  ';'  expected  [FE]          StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  }  null;  child  =  child.getParent())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  }  null;  child  =  child.getParent())  {	  child!=    null;    child    =    child.getParent())    {    Child    }    null;    child    =    child.getParent())    {    	non-compiled	[CE]  ';'  expected	57	None	replace
625	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getNext();  child  =  child.getNext())  {  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child  =  child.getNext();  child  =  child.getNext())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getNext();  child  =  child.getNext())  {  }	  if(child!=    null)    {    child    =    child.getParent();    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
626	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getNext();  child  =  child.getParent())  {  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child  =  child.getNext();  child  =  child.getParent())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getNext();  child  =  child.getParent())  {  }	  if(child!=    null)    {    child    =    child.getParent();    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
627	[BUG]  [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getParent())  {  child  =  child.getParent();  }  [CE]  illegal  start  of  expression  [FE]        StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getParent())  {  child  =  child.getParent();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child!=  null;  child  =  child.getParent())  {  child  =  child.getParent();  }	  child!=    null;    child    =    child.getParent())    {    Child    child    =    child.getParent();    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
628	[BUG]  [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getParent())  {  Child  child  =  child.getParent();  }  [CE]  illegal  start  of  expression  [FE]          StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getParent())  {  Child  child  =  child.getParent();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child!=  null;  child  =  child.getParent())  {  Child  child  =  child.getParent();  }	  child!=    null;    child    =    child.getParent())    {    Child    child    =    child.getParent();    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
629	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child  =  child.getFirstChild().getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getFirstChild().getNext())  {	  if(child!=    null)    {    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
630	[BUG]  [BUGGY]  if(child  >=  null)  {  child  =  child.getNext())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child  >=  null)  {  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child  >=  null)  {  child  =  child.getNext())  {	  if(child!=    null)    {    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
631	[BUG]  [BUGGY]  child!=  null;  child  =  child.getParent())  {  Child  child  =  child.getFirstChild();  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getParent())  {  Child  child  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getParent())  {  Child  child  =  child.getFirstChild();	  child!=    null;    child    =    child.getFirstChild())    {    Child    child    =    child.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
632	[BUG]  [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  Child  child  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  Child  child  =  n.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getFirstChild())  {  Child  child  =  n.getFirstChild();	  child!=    null;    child    =    child.getFirstChild())    {    Child    child    =    child.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
633	[BUG]  [BUGGY]  parent!=  null  &&  child.getType()  ==  Token.FUNCTION)  {  child  =  child.getNext();  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  parent!=  null  &&  child.getType()  ==  Token.FUNCTION)  {  child  =  child.getNext();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	parent!=  null  &&  child.getType()  ==  Token.FUNCTION)  {  child  =  child.getNext();  }	  if(child!=    null)    {    child    =    child.getNext();    }    	non-compiled	[CE]  ';'  expected	101	None	replace
634	[BUG]  [BUGGY]  parent!=  null  &&  child.getType()  ==  Token.CALL)  {  child  =  child.getNext();  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  parent!=  null  &&  child.getType()  ==  Token.CALL)  {  child  =  child.getNext();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	parent!=  null  &&  child.getType()  ==  Token.CALL)  {  child  =  child.getNext();  }	  if(child!=    null)    {    child    =    child.getNext();    }    	non-compiled	[CE]  ';'  expected	101	None	replace
635	[BUG]  [BUGGY]  parent!=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getNext();  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  parent!=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getNext();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	parent!=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getNext();  }	  if(child!=    null)    {    child    =    child.getNext();    }    	non-compiled	[CE]  ';'  expected	101	None	replace
636	[BUG]  [BUGGY]  parent!=  null  &&  child.getParent()!=  null)  {  child  =  child.getNext();  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  parent!=  null  &&  child.getParent()!=  null)  {  child  =  child.getNext();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	parent!=  null  &&  child.getParent()!=  null)  {  child  =  child.getNext();  }	  if(child!=    null)    {    child    =    child.getNext();    }    	non-compiled	[CE]  ';'  expected	101	None	replace
637	[BUG]  [BUGGY]  Node  }  else  if(child.getType()  ==  Token.FUNCTION  ||  child.getType()  ==  Token.CATCH)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  }  else  if(child.getType()  ==  Token.FUNCTION  ||  child.getType()  ==  Token.CATCH)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  else  if(child.getType()  ==  Token.FUNCTION  ||  child.getType()  ==  Token.CATCH)  {	  Node    }    else    if(child.getType()    ==    Token.FUNCTION)    {    Node    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	82	None	replace
638	[BUG]  [BUGGY]  Node  }  else  if(child.getType()  ==  Token.FUNCTION)  {  Node  child  =  child.getFirstChild())  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  }  else  if(child.getType()  ==  Token.FUNCTION)  {  Node  child  =  child.getFirstChild())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  else  if(child.getType()  ==  Token.FUNCTION)  {  Node  child  =  child.getFirstChild())  {	  Node    }    else    if(child.getType()    ==    Token.FUNCTION)    {    Node    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	82	None	replace
639	[BUG]  [BUGGY]  Node  }  else  if(child.getType()  ==  Token.FUNCTION  ||  child.getType()  ==  Token.GETPROP)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  }  else  if(child.getType()  ==  Token.FUNCTION  ||  child.getType()  ==  Token.GETPROP)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  else  if(child.getType()  ==  Token.FUNCTION  ||  child.getType()  ==  Token.GETPROP)  {	  Node    }    else    if(child.getType()    ==    Token.FUNCTION)    {    Node    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	82	None	replace
640	[BUG]  [BUGGY]  Node  }  else  if(child.getType()  ==  Token.FUNCTION)  {  Node  child  =  child.getParent())  {  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  }  else  if(child.getType()  ==  Token.FUNCTION)  {  Node  child  =  child.getParent())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  else  if(child.getType()  ==  Token.FUNCTION)  {  Node  child  =  child.getParent())  {	  Node    }    else    if(child.getType()    ==    Token.FUNCTION)    {    Node    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	82	None	replace
641	[BUG]  [BUGGY]  if(child  ==  null)  {  child  =  child.getParent();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child  ==  null)  {  child  =  child.getParent();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child  ==  null)  {  child  =  child.getParent();  }	  if(child!=    null)    {    child!=    null;    child    =    child.getParent())    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
642	[BUG]  [BUGGY]  if(child  ==  null)  {  child!=  null;  child  =  child.getNext(),  variable)  {  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child  ==  null)  {  child!=  null;  child  =  child.getNext(),  variable)  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child  ==  null)  {  child!=  null;  child  =  child.getNext(),  variable)  {  }	  if(child!=    null)    {    child!=    null;    child    =    child.getNext(),    variable)    {    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
643	[BUG]  [BUGGY]  if(child!=  null)  {  child  ==  null;  child  =  child.getNext(),  variable)  {  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child  ==  null;  child  =  child.getNext(),  variable)  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  ==  null;  child  =  child.getNext(),  variable)  {  }	  if(child!=    null)    {    child!=    null;    child    =    child.getNext(),    variable)    {    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
644	[BUG]  [BUGGY]  Child  child  =  child.getPreviousChild())  {  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getPreviousChild())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getPreviousChild())  {	  Child    child    =    child.getFirstChild())    {    	non-compiled	[CE]  ';'  expected	6	None	replace
645	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext(),  state);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext(),  state);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext(),  state);	  child!=    null;    child    =    child.getNext(),    variable);    	non-compiled	[CE]  not  a  statement	76	None	replace
646	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext(),  variable  +  1;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext(),  variable  +  1;  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext(),  variable  +  1;	  child!=    null;    child    =    child.getNext(),    variable);    	non-compiled	[CE]  not  a  statement	76	None	replace
647	[BUG]  [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getNext(),  variable);  }  else  {  Predicate  matchRemovableAssignsElimination  =  isVariableReadBeforeKill(child,  variable);  if(matchRemovableAssigns  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getNext(),  variable);  }  else  {  Predicate  matchRemovableAssignsElimination  =  isVariableReadBeforeKill(child,  variable);  if(matchRemovableAssigns  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child!=  null;  child  =  child.getNext(),  variable);  }  else  {  Predicate  matchRemovableAssignsElimination  =  isVariableReadBeforeKill(child,  variable);  if(matchRemovableAssigns	  child!=    null;    child    =    child.getNext(),    variable);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
648	[BUG]  [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getNext(),  variable);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getNext(),  variable);  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child!=  null;  child  =  child.getNext(),  variable);  }	  child!=    null;    child    =    child.getNext(),    variable);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
649	[BUG]  [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getNext(),  variable);  }  else  {  return  VariableLiveness.KILL;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getNext(),  variable);  }  else  {  return  VariableLiveness.KILL;  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child!=  null;  child  =  child.getNext(),  variable);  }  else  {  return  VariableLiveness.KILL;  }	  child!=    null;    child    =    child.getNext(),    variable);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
650	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext())  {  child  =  child.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	add	child!=  null;  child  =  child.getNext())  {  child  =  child.getNext();	  child!=    null;    child    =    child.getParent())    {    Node    child    =    child.getNext();    	compilable	  [FE]  AssertionFailedError  	117	55	replace
651	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext())  {  child  =  child.getNext();  [FE]  AssertionFailedError  [FE]              StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext())  {  child  =  child.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext())  {  child  =  child.getNext();	  child!=    null;    child    =    child.getParent())    {    Node    child    =    child.getNext();    	compilable	  [FE]  AssertionFailedError  	117	55	replace
652	[BUG]  [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getParent())  {  child  =  child.getNext();  }  [CE]  illegal  start  of  expression  [FE]                StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getParent())  {  child  =  child.getNext();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child!=  null;  child  =  child.getParent())  {  child  =  child.getNext();  }	  child!=    null;    child    =    child.getParent())    {    Node    child    =    child.getNext();    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
653	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getParent())  {  child  =  child.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	add	child!=  null;  child  =  child.getParent())  {  child  =  child.getNext();	  child!=    null;    child    =    child.getParent())    {    Node    child    =    child.getNext();    	compilable	  [FE]  RuntimeException  	117	55	replace
654	[BUG]  [BUGGY]  child!=  null;  child  =  child.getParent())  {  child  =  child.getNext();  [FE]  RuntimeException  [FE]                  StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getParent())  {  child  =  child.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getParent())  {  child  =  child.getNext();	  child!=    null;    child    =    child.getParent())    {    Node    child    =    child.getNext();    	compilable	  [FE]  RuntimeException  	117	55	replace
655	[BUG]  [BUGGY]  n  =  child.getNext())  {  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n  =  child.getNext())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n  =  child.getNext())  {  }	  if(child    ==    null)    {    child    =    child.getNext())    {    }    	non-compiled	[CE]  ';'  expected	95	None	replace
656	[BUG]  [BUGGY]  n!=  child;  child  =  child.getNext())  {  Node  child  =  n.getLastChild();  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  child;  child  =  child.getNext())  {  Node  child  =  n.getLastChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=    child;    child    =    child.getNext())    {    Node  child  =  n.getLastChild();	  	non-compiled	[CE]  not  a  statement	11	None	add
657	[BUG]  [BUGGY]  n!=  child;  child  =  child.getNext())  {  Node  child  =  n.getNext();  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  child;  child  =  child.getNext())  {  Node  child  =  n.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=    child;    child    =    child.getNext())    {    Node  child  =  n.getNext();	  	non-compiled	[CE]  not  a  statement	11	None	add
658	[BUG]  [BUGGY]  n!=  child;  child  =  child.getNext())  {  Node  parent  =  child.getParent();  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  child;  child  =  child.getNext())  {  Node  parent  =  child.getParent();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=    child;    child    =    child.getNext())    {    Node  parent  =  child.getParent();	  	non-compiled	[CE]  not  a  statement	11	None	add
659	[BUG]  [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getFirstChild())  {  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getFirstChild())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	while(child!=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getFirstChild())  {  }	  while(child!=    null    &&    child.getType()    ==    Token.NAME)    {    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
660	[BUG]  [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getLastChild())  {  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getLastChild())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	while(child!=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getLastChild())  {  }	  while(child!=    null    &&    child.getType()    ==    Token.NAME)    {    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
661	[BUG]  [BUGGY]  Node  }  else  if(child.getType()  ==  Token.FUNCTION)  {  child  =  child.getNext();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  }  else  if(child.getType()  ==  Token.FUNCTION)  {  child  =  child.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  else  if(child.getType()  ==  Token.FUNCTION)  {  child  =  child.getNext();	  Node    }    else    if(child.getType()    ==    Token.FUNCTION)    {    node!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	84	None	replace
662	[BUG]  [BUGGY]  Node  }  else  if(child.getType()  ==  Token.FUNCTION)  {  child  =  child.getNext())  {  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  }  else  if(child.getType()  ==  Token.FUNCTION)  {  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  else  if(child.getType()  ==  Token.FUNCTION)  {  child  =  child.getNext())  {	  Node    }    else    if(child.getType()    ==    Token.FUNCTION)    {    node!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	84	None	replace
663	[BUG]  [BUGGY]  n!=  null;  child  =  child.getString())  {  [CE]  incompatible  types  [FE]    RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getString())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getString())  {	  n!=    null;    child    =    child.getFirstChild())    {    	non-compiled	[CE]  incompatible  types	4	None	replace
664	[BUG]  [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getParent())  {  Node  parent  =  child.getParent();  }  [CE]  illegal  start  of  expression  [FE]                  StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getParent())  {  Node  parent  =  child.getParent();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child!=  null;  child  =  child.getParent())  {  Node  parent  =  child.getParent();  }	  child!=    null;    child    =    child.getParent())    {    Node    parent    =    child.getParent();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
665	[BUG]  [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getParent())  {  parent  =  child.getParent();  }  [CE]  illegal  start  of  expression  [FE]                    StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getParent())  {  parent  =  child.getParent();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child!=  null;  child  =  child.getParent())  {  parent  =  child.getParent();  }	  child!=    null;    child    =    child.getParent())    {    Node    parent    =    child.getParent();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
666	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getNext();  child  =  child.getFirstChild())  {  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child  =  child.getNext();  child  =  child.getFirstChild())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getNext();  child  =  child.getFirstChild())  {	  if(child!=    null)    {    child!=    null;    child    =    child.getFirstChild())    {    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
667	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getParent();  child  =  child.getFirstChild())  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child  =  child.getParent();  child  =  child.getFirstChild())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getParent();  child  =  child.getFirstChild())  {	  if(child!=    null)    {    child!=    null;    child    =    child.getFirstChild())    {    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
668	[BUG]  [BUGGY]  Node  <  Null;  child  =  child.getFirstChild())  {  [CE]  cannot  find  symbol  Node  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  <  Null;  child  =  child.getFirstChild())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  <  Null;  child  =  child.getFirstChild())  {	  Node    <    Null;    child    =    child.getNext())    {    	non-compiled	[CE]  cannot  find  symbol  Node	93	None	replace
669	[BUG]  [BUGGY]  Node  <  Null;  child  =  child.getLastChild())  {  [CE]  cannot  find  symbol  Node  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  <  Null;  child  =  child.getLastChild())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  <  Null;  child  =  child.getLastChild())  {	  Node    <    Null;    child    =    child.getNext())    {    	non-compiled	[CE]  cannot  find  symbol  Node	93	None	replace
670	[BUG]  [BUGGY]  Node  <  Null;  child  =  child.getPrevious())  {  [CE]  cannot  find  symbol  Node  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  <  Null;  child  =  child.getPrevious())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  <  Null;  child  =  child.getPrevious())  {	  Node    <    Null;    child    =    child.getNext())    {    	non-compiled	[CE]  cannot  find  symbol  Node	93	None	replace
671	[BUG]  [BUGGY]  Node  <  Null;  child  =  child.getChildCount())  {  [CE]  cannot  find  symbol  Node  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  <  Null;  child  =  child.getChildCount())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  <  Null;  child  =  child.getChildCount())  {	  Node    <    Null;    child    =    child.getNext())    {    	non-compiled	[CE]  cannot  find  symbol  Node	93	None	replace
672	[BUG]  [BUGGY]  Node  node  ==  null;  child  =  child.getNext())  {  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  node  ==  null;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  node  ==  null;  child  =  child.getNext())  {	  node    ==    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	48	None	replace
673	[BUG]  [BUGGY]  child!=  null;  child  =  child.getFirstChild();  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getFirstChild();	  child!=    null;    child    =    child.getFirstChild())    {    child!=    null;    child    =    child.getFirstChild());    	non-compiled	[CE]  ')'  expected	163	None	replace
674	[BUG]  [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getNext(),  variable).returnZero();  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getNext(),  variable).returnZero();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child!=  null;  child  =  child.getNext(),  variable).returnZero();  }	  child!=    null;    child    =    child.getNext(),    variable).returnZero();    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
675	[BUG]  [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getNext(),  variable).returnZero();  }  else  {  return  VariableLiveness.KILL;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getNext(),  variable).returnZero();  }  else  {  return  VariableLiveness.KILL;  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child!=  null;  child  =  child.getNext(),  variable).returnZero();  }  else  {  return  VariableLiveness.KILL;  }	  child!=    null;    child    =    child.getNext(),    variable).returnZero();    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
676	[BUG]  [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getNext(),  variable).returnZero();  }  else  {  return  VariableLiveness.READ;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getNext(),  variable).returnZero();  }  else  {  return  VariableLiveness.READ;  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child!=  null;  child  =  child.getNext(),  variable).returnZero();  }  else  {  return  VariableLiveness.READ;  }	  child!=    null;    child    =    child.getNext(),    variable).returnZero();    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
677	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext(),  variable).returnVariableZero();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext(),  variable).returnVariableZero();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext(),  variable).returnVariableZero();	  child!=    null;    child    =    child.getNext(),    variable).returnZero();    	non-compiled	[CE]  not  a  statement	151	None	replace
678	[BUG]  [BUGGY]  n!=  null;  child  =  child.getNext())  {  Node  n  =  child.getNext();  }  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getNext())  {  Node  n  =  child.getNext();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getNext())  {  Node  n  =  child.getNext();  }	  n!=    null;    child    =    child.getNext())    {    Node    n    =    child.getNext();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
679	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Child  child!=  null;  child  =  child.getParent())  {  [CE]  illegal  start  of  expression  [FE]        StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Child  child!=  null;  child  =  child.getParent())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  Child  child!=  null;  child  =  child.getParent())  {	  child!=    null;    child    =    child.getParent())    {    Child    child!=    null;    child    =    child.getParent())    {    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
680	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  child    ==    null;    child    =    child.getNext())    {    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state    ==    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	54	None	replace
681	[BUG]  [BUGGY]  n  ==  null;  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n  ==  null;  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n  ==  null;  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  child    ==    null;    child    =    child.getNext())    {    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state    ==    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	54	None	replace
682	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  child    ==    null;    child    =    child.getNext())    {    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state    ==    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	54	None	replace
683	[BUG]  [BUGGY]  Child  }  else  if(child.getType()  ==  Token.EXPR_RESULT)  {  child!=  null;  child  =  child.getPrevious())  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  }  else  if(child.getType()  ==  Token.EXPR_RESULT)  {  child!=  null;  child  =  child.getPrevious())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  }  else  if(child.getType()  ==  Token.EXPR_RESULT)  {  child!=  null;  child  =  child.getPrevious())  {	  child!=    null;    child    =    n.getPrevious())    {    	non-compiled	[CE]  ';'  expected	64	None	replace
684	[BUG]  [BUGGY]  Child  }  else  if(child.getType()  ==  Token.NAME)  {  child!=  null;  child  =  child.getPrevious())  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  }  else  if(child.getType()  ==  Token.NAME)  {  child!=  null;  child  =  child.getPrevious())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  }  else  if(child.getType()  ==  Token.NAME)  {  child!=  null;  child  =  child.getPrevious())  {	  child!=    null;    child    =    n.getPrevious())    {    	non-compiled	[CE]  ';'  expected	64	None	replace
685	[BUG]  [BUGGY]  Child  }  else  if(child.getType()  ==  Token.FUNCTION)  {  child!=  null;  child  =  child.getPrevious())  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  }  else  if(child.getType()  ==  Token.FUNCTION)  {  child!=  null;  child  =  child.getPrevious())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  }  else  if(child.getType()  ==  Token.FUNCTION)  {  child!=  null;  child  =  child.getPrevious())  {	  child!=    null;    child    =    n.getPrevious())    {    	non-compiled	[CE]  ';'  expected	64	None	replace
686	[BUG]  [BUGGY]  Child  }  else  if(child.getType()  ==  Token.GETPROP)  {  child!=  null;  child  =  child.getPrevious())  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  }  else  if(child.getType()  ==  Token.GETPROP)  {  child!=  null;  child  =  child.getPrevious())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  }  else  if(child.getType()  ==  Token.GETPROP)  {  child!=  null;  child  =  child.getPrevious())  {	  child!=    null;    child    =    n.getPrevious())    {    	non-compiled	[CE]  ';'  expected	64	None	replace
687	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  child.removeFirstChild();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Predicate  matchRemovableAssigns  =  child.removeFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Predicate  matchRemovableAssigns  =  child.removeFirstChild();	  Predicate    matchRemovableAssigns    =    child.getFirstChild();    	non-compiled	[CE]  ';'  expected	72	None	replace
688	[BUG]  [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getFirstChild())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getFirstChild())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child!=  null;  child  =  child.getFirstChild())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {	  child!=    null;    child    =    child.getFirstChild())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
689	[BUG]  [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getLastChild())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {	  child!=    null;    child    =    child.getFirstChild())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	125	None	replace
690	[BUG]  [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getFirstChild())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getFirstChild())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child!=  null;  child  =  child.getFirstChild())  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  }	  child!=    null;    child    =    child.getFirstChild())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
691	[BUG]  [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  if(!ControlFlowGraph.isVariableReadBeforeKill(child,  variable))  {  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  if(!ControlFlowGraph.isVariableReadBeforeKill(child,  variable))  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getFirstChild())  {  if(!ControlFlowGraph.isVariableReadBeforeKill(child,  variable))  {	  child!=    null;    child    =    child.getFirstChild())    {    if(!ControlFlowGraph.isEnteringNewCfgNode(child))    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	125	None	replace
692	[BUG]  [BUGGY]  Node  variable  =  child.removeFirstChild();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  variable  =  child.removeFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  variable  =  child.removeFirstChild();	  Node    variable    =    child.getFirstChild();    	non-compiled	[CE]  ';'  expected	71	None	replace
693	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError());  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError());  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError());  }	  child    ==    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    new    AssertionFailedError());    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
694	[BUG]  [BUGGY]  Node  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError());  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError());  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError());	  child    ==    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    new    AssertionFailedError());    	non-compiled	[CE]  ';'  expected	138	None	replace
695	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  Node  parent  =  child.getParent();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	add	child!=  null;  child  =  child.getLastChild())  {  Node  parent  =  child.getParent();	  child!=    null;    child    =    child.getFirstChild())    {    Node    parent    =    child.getParent();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	36	61	replace
696	[BUG]  [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  Node  parent  =  child.getParent();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  Node  parent  =  child.getParent();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getLastChild())  {  Node  parent  =  child.getParent();	  child!=    null;    child    =    child.getFirstChild())    {    Node    parent    =    child.getParent();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	36	61	replace
697	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  Node  parent  =  child.getParent();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	add	n!=  null;  child  =  child.getFirstChild())  {  Node  parent  =  child.getParent();	  child!=    null;    child    =    child.getFirstChild())    {    Node    parent    =    child.getParent();    	compilable	  [FE]  RuntimeException  	36	63	replace
698	[BUG]  [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  Node  parent  =  child.getParent();  [FE]  RuntimeException  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  Node  parent  =  child.getParent();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getFirstChild())  {  Node  parent  =  child.getParent();	  child!=    null;    child    =    child.getFirstChild())    {    Node    parent    =    child.getParent();    	compilable	  [FE]  RuntimeException  	36	63	replace
699	[BUG]  [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  n.removeChild(child);  }  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  n.removeChild(child);  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getLastChild())  {  n.removeChild(child);  }	  child!=    null;    child    =    child.getFirstChild())    {    n.removeChild(child);    	non-compiled	[CE]  illegal  start  of  type	164	None	replace
700	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getParent())  {  n.removeChild(child);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	add	child!=  null;  child  =  child.getParent())  {  n.removeChild(child);	  child!=    null;    child    =    child.getFirstChild())    {    n.removeChild(child);    	compilable	  [FE]  RuntimeException  	164	61	replace
701	[BUG]  [BUGGY]  child!=  null;  child  =  child.getParent())  {  n.removeChild(child);  [FE]  RuntimeException  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getParent())  {  n.removeChild(child);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getParent())  {  n.removeChild(child);	  child!=    null;    child    =    child.getFirstChild())    {    n.removeChild(child);    	compilable	  [FE]  RuntimeException  	164	61	replace
702	[BUG]  [BUGGY]  if(child  ==  null)  {  child  =  child.getParent();  child  =  child.getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child  ==  null)  {  child  =  child.getParent();  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child  ==  null)  {  child  =  child.getParent();  child  =  child.getNext())  {	  if(child!=    null)    {    child    ==    null;    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
703	[BUG]  [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getNext(),  VariableLiveness.MAYBE_LIVE)  {  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getNext(),  VariableLiveness.MAYBE_LIVE)  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child!=  null;  child  =  child.getNext(),  VariableLiveness.MAYBE_LIVE)  {  }	  child!=    null;    child    =    child.getNext(),    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
704	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext(),  VariableLiveness.KEYBE_LIVE)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext(),  VariableLiveness.KEYBE_LIVE)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext(),  VariableLiveness.KEYBE_LIVE)  {	  child!=    null;    child    =    child.getNext(),    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  not  a  statement	77	None	replace
705	[BUG]  [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getNext(),  VariableLiveness.MAYBE_LIVE)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getNext(),  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child!=  null;  child  =  child.getNext(),  VariableLiveness.MAYBE_LIVE)  {	  child!=    null;    child    =    child.getNext(),    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
706	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child,  new  AssignmentFailedError(variable));  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  NodeTraversal.traverse(compiler,  child,  new  AssignmentFailedError(variable));  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	NodeTraversal.traverse(compiler,  child,  new  AssignmentFailedError(variable));	  n    ==    null;    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
707	[BUG]  [BUGGY]  Node  node!=  null;  child  =  child.getPrevious())  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  node!=  null;  child  =  child.getPrevious())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  node!=  null;  child  =  child.getPrevious())  {	  node!=    null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  ';'  expected	65	None	replace
708	[BUG]  [BUGGY]  Node  child!=  null;  child  =  child.getPrevious())  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  child!=  null;  child  =  child.getPrevious())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child!=  null;  child  =  child.getPrevious())  {	  node!=    null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  ';'  expected	65	None	replace
709	[BUG]  [BUGGY]  Node  }  null;  child  =  child.getPrevious())  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  }  null;  child  =  child.getPrevious())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  null;  child  =  child.getPrevious())  {	  node!=    null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  ';'  expected	65	None	replace
710	[BUG]  [BUGGY]  Node  childEOF!=  null;  child  =  child.getPrevious())  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  childEOF!=  null;  child  =  child.getPrevious())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  childEOF!=  null;  child  =  child.getPrevious())  {	  node!=    null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  ';'  expected	65	None	replace
711	[BUG]  [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  Node  child  =  n.getNext();  [CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  Node  child  =  n.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getLastChild())  {  Node  child  =  n.getNext();	  child!=    null;    child    =    child.getFirstChild())    {    Node    child    =    n.getNext();    	non-compiled	[CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	37	None	replace
712	[BUG]  [BUGGY]  n!=  null;  child  =  child.getNext())  {  Node  n  =  child.getLastChild();  }  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getNext())  {  Node  n  =  child.getLastChild();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getNext())  {  Node  n  =  child.getLastChild();  }	  n!=    null;    child    =    child.getNext())    {    Node    n    =    child.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
713	[BUG]  [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getParent())  {  child  =  child.getFirstChild();  }  [CE]  illegal  start  of  expression  [FE]          StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getParent())  {  child  =  child.getFirstChild();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child!=  null;  child  =  child.getParent())  {  child  =  child.getFirstChild();  }	  child!=    null;    child    =    child.getParent())    {    Node    child    =    child.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
714	[BUG]  [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.VAR)  {  child  =  child.getNext())  {  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.VAR)  {  child  =  child.getNext())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	while(child!=  null  &&  child.getType()  ==  Token.VAR)  {  child  =  child.getNext())  {  }	  while(child!=    null    &&    child.getType()    ==    Token.FUNCTION)    {    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
715	[BUG]  [BUGGY]  if(child  [Delete]  null  &&  child.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child  [Delete]  null  &&  child.getType()  ==  Token.NAME)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child  [Delete]  null  &&  child.getType()  ==  Token.NAME)  {	  if(child!=    null    ||    child.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
716	[BUG]  [BUGGY]  Child  child  =  child.getNode())  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getNode())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getNode())  {	  Child    child    =    n.getPrevious())    {    	non-compiled	[CE]  ';'  expected	67	None	replace
717	[BUG]  [BUGGY]  if(child!=  null  &&  child.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null  &&  child.getType()  ==  Token.GETPROP)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null  &&  child.getType()  ==  Token.GETPROP)  {	  if(child!=    null    &&    child.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
718	[BUG]  [BUGGY]  if(child!=  null  &&  child.getType()  ==  Token.FOR)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null  &&  child.getType()  ==  Token.FOR)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null  &&  child.getType()  ==  Token.FOR)  {	  if(child!=    null    &&    child.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
719	[BUG]  [BUGGY]  NodeUtil.copyCfgNode(child,  n,  state);  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  NodeUtil.copyCfgNode(child,  n,  state);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	NodeUtil.copyCfgNode(child,  n,  state);	  NodeUtil.copyCfgNode(child,    n);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
720	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  0xfff);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  0xfff);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  0xfff);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  ';'  expected	68	None	replace
721	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  0xff);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  0xff);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  0xff);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  ';'  expected	68	None	replace
722	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getNext();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  return  VariableLiveness.KILL;  }  [CE]  illegal  start  of  expression  [FE]                StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child  =  child.getNext();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  return  VariableLiveness.KILL;  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getNext();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  return  VariableLiveness.KILL;  }	  if(child!=    null)    {    child    =    child.getParent();    }    else    {    Preconditions.checkState(child.getType()    ==    Token.NAME);    return    VariableLiveness.KILL;    }    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
723	[BUG]  [BUGGY]  parent  ==  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getParent();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  return  VariableLiveness.KILL;  }  [CE]  ';'  expected  [FE]                  StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  parent  ==  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getParent();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  return  VariableLiveness.KILL;  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	parent  ==  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getParent();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  return  VariableLiveness.KILL;  }	  if(child!=    null)    {    child    =    child.getParent();    }    else    {    Preconditions.checkState(child.getType()    ==    Token.NAME);    return    VariableLiveness.KILL;    }    	non-compiled	[CE]  ';'  expected	156	None	replace
724	[BUG]  [BUGGY]  parent!=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getParent();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  return  VariableLiveness.KILL;  }  [CE]  ';'  expected  [FE]                    StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  parent!=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getParent();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  return  VariableLiveness.KILL;  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	parent!=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getParent();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  return  VariableLiveness.KILL;  }	  if(child!=    null)    {    child    =    child.getParent();    }    else    {    Preconditions.checkState(child.getType()    ==    Token.NAME);    return    VariableLiveness.KILL;    }    	non-compiled	[CE]  ';'  expected	156	None	replace
725	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getParent();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  return  VariableLiveness.READ;  }  [CE]  illegal  start  of  expression  [FE]                      StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child  =  child.getParent();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  return  VariableLiveness.READ;  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getParent();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  return  VariableLiveness.READ;  }	  if(child!=    null)    {    child    =    child.getParent();    }    else    {    Preconditions.checkState(child.getType()    ==    Token.NAME);    return    VariableLiveness.KILL;    }    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
726	[BUG]  [BUGGY]  node!=  null;  child  =  child.getParent())  {  Node  child  =  n.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]            StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  node!=  null;  child  =  child.getParent())  {  Node  child  =  n.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	node!=  null;  child  =  child.getParent())  {  Node  child  =  n.getFirstChild();	  child!=    null;    child    =    child.getParent())    {    Node    child    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	58	None	replace
727	[BUG]  [BUGGY]  child  =  child.getNext()  ||  variable!=  null  &&  variable.equals(child.getString()))  {  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  =  child.getNext()  ||  variable!=  null  &&  variable.equals(child.getString()))  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  =  child.getNext()  ||  variable!=  null  &&  variable.equals(child.getString()))  {  }	  child    =    child.getNext())    {    }    	non-compiled	[CE]  ';'  expected	23	None	replace
728	[BUG]  [BUGGY]  child  =  child.getNext()  ||  variable  ==  null  &&  variable.equals(child.getString()))  {  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  =  child.getNext()  ||  variable  ==  null  &&  variable.equals(child.getString()))  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  =  child.getNext()  ||  variable  ==  null  &&  variable.equals(child.getString()))  {  }	  child    =    child.getNext())    {    }    	non-compiled	[CE]  ';'  expected	23	None	replace
729	[BUG]  [BUGGY]  child  =  child.getFirstChild())  {  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  =  child.getFirstChild())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  =  child.getFirstChild())  {  }	  child    =    child.getNext())    {    }    	non-compiled	[CE]  ';'  expected	23	None	replace
730	[BUG]  [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getNext(),  VariableLiveness.KILL)  {  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getNext(),  VariableLiveness.KILL)  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child!=  null;  child  =  child.getNext(),  VariableLiveness.KILL)  {  }	  child!=    null;    child    =    child.getNext(),    VariableLiveness.KILL)    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
731	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext(),  VariableLiveness.MILL)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext(),  VariableLiveness.MILL)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext(),  VariableLiveness.MILL)  {	  child!=    null;    child    =    child.getNext(),    VariableLiveness.KILL)    {    	non-compiled	[CE]  not  a  statement	99	None	replace
732	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext(),  VariableLiveness.FALSE)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext(),  VariableLiveness.FALSE)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext(),  VariableLiveness.FALSE)  {	  child!=    null;    child    =    child.getNext(),    VariableLiveness.KILL)    {    	non-compiled	[CE]  not  a  statement	99	None	replace
733	[BUG]  [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  Node  n  =  child.getNext();  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  Node  n  =  child.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=    null;    child    =    child.getFirstChild())    {    Node  n  =  child.getNext();	  	non-compiled	[CE]  not  a  statement	3	None	add
734	[BUG]  [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  n!=  null;  child  =  child.getFirstChild());  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  n!=  null;  child  =  child.getFirstChild());  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=    null;    child    =    child.getFirstChild())    {    n!=  null;  child  =  child.getFirstChild());	  	non-compiled	[CE]  not  a  statement	3	None	add
735	[BUG]  [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  Node  child  =  n.getFirstChild();  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  Node  child  =  n.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=    null;    child    =    child.getFirstChild())    {    Node  child  =  n.getFirstChild();	  	non-compiled	[CE]  not  a  statement	3	None	add
736	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getNext();  child  =  child.getFirstChild())  {  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child  =  child.getNext();  child  =  child.getFirstChild())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getNext();  child  =  child.getFirstChild())  {  }	  if(child!=    null)    {    child!=    null;    child    =    child.getFirstChild())    {    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
737	[BUG]  [BUGGY]  if(child  ==  null)  {  child!=  null;  child  =  child.getParent())  {  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child  ==  null)  {  child!=  null;  child  =  child.getParent())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child  ==  null)  {  child!=  null;  child  =  child.getParent())  {  }	  if(child!=    null)    {    child!=    null;    child    =    child.getParent())    {    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
738	[BUG]  [BUGGY]  if(child  ==  null)  {  child  =  child.getParent())  {  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child  ==  null)  {  child  =  child.getParent())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child  ==  null)  {  child  =  child.getParent())  {  }	  if(child!=    null)    {    child    =    child.getParent())    {    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
739	[BUG]  [BUGGY]  null;  child  =  child.getPrevious()  &&  variable.equals(child.getString()))  {  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  null;  child  =  child.getPrevious()  &&  variable.equals(child.getString()))  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	null;  child  =  child.getPrevious()  &&  variable.equals(child.getString()))  {	  null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  incompatible  types	161	None	replace
740	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child,  new  Action(),  false)  {  [CE]  ';'  expected  [FE]        RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  NodeTraversal.traverse(compiler,  child,  new  Action(),  false)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	NodeTraversal.traverse(compiler,  child,  new  Action(),  false)  {	  NodeTraversal.traverse(compiler,    child,    new    Action())    {    	non-compiled	[CE]  ';'  expected	88	None	replace
741	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child,  new  Action(),  liveness)  {  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  NodeTraversal.traverse(compiler,  child,  new  Action(),  liveness)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	NodeTraversal.traverse(compiler,  child,  new  Action(),  liveness)  {	  NodeTraversal.traverse(compiler,    child,    new    Action())    {    	non-compiled	[CE]  ';'  expected	88	None	replace
742	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child,  new  Action(),  variables)  {  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  NodeTraversal.traverse(compiler,  child,  new  Action(),  variables)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	NodeTraversal.traverse(compiler,  child,  new  Action(),  variables)  {	  NodeTraversal.traverse(compiler,    child,    new    Action())    {    	non-compiled	[CE]  ';'  expected	88	None	replace
743	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child,  new  Action(),  dataArea)  {  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  NodeTraversal.traverse(compiler,  child,  new  Action(),  dataArea)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	NodeTraversal.traverse(compiler,  child,  new  Action(),  dataArea)  {	  NodeTraversal.traverse(compiler,    child,    new    Action())    {    	non-compiled	[CE]  ';'  expected	88	None	replace
744	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  &&  child.hasChildren());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  &&  child.hasChildren());  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.CALL  &&  child.hasChildren());	  Preconditions.checkState(child.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
745	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.hasChildren());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.hasChildren());  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.hasChildren());	  Preconditions.checkState(child.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
746	[BUG]  [BUGGY]  if(child  ==  null)  {  child  >=  null;  child  =  child.getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child  ==  null)  {  child  >=  null;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child  ==  null)  {  child  >=  null;  child  =  child.getNext())  {	  if(child!=    null)    {    child    >=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
747	[BUG]  [BUGGY]  if(child!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {	  if(child!=    null)    {    child    >=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
748	[BUG]  [BUGGY]  if(child  ==  null)  {  child  >>  null;  child  =  child.getNext())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child  ==  null)  {  child  >>  null;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child  ==  null)  {  child  >>  null;  child  =  child.getNext())  {	  if(child!=    null)    {    child    >=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
749	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if(state!=  VariableLiveness.MOVED)  {  return  state;  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if(state!=  VariableLiveness.MOVED)  {  return  state;  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if(state!=  VariableLiveness.MOVED)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MOVED)    {    return    state;    }    	non-compiled	[CE]  ';'  expected	87	None	replace
750	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);  if(state!=  VariableLiveness.MOVED)  {  return  state;  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);  if(state!=  VariableLiveness.MOVED)  {  return  state;  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);  if(state!=  VariableLiveness.MOVED)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MOVED)    {    return    state;    }    	non-compiled	[CE]  ';'  expected	87	None	replace
751	[BUG]  [BUGGY]  Node  <  Node,  Child>  child  =  child.getChildCount())  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  <  Node,  Child>  child  =  child.getChildCount())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  <  Node,  Child>  child  =  child.getChildCount())  {	  Node    <    Node,    Child>    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	146	None	replace
752	[BUG]  [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getLastChild())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);	  child!=    null;    child    =    child.getFirstChild())    {    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	124	None	replace
753	[BUG]  [BUGGY]  Node  }  null;  child  =  child.getParent())  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  }  null;  child  =  child.getParent())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  null;  child  =  child.getParent())  {	  Node    }    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	92	None	replace
754	[BUG]  [BUGGY]  Node  }  null;  child  =  child.getFirstChild())  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  }  null;  child  =  child.getFirstChild())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  null;  child  =  child.getFirstChild())  {	  Node    }    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	92	None	replace
755	[BUG]  [BUGGY]  Node  }  null;  child  =  child.getNext(),  variable)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  }  null;  child  =  child.getNext(),  variable)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  null;  child  =  child.getNext(),  variable)  {	  Node    }    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	92	None	replace
756	[BUG]  [BUGGY]  n!=  child.getChildCount();  child  =  child.getNext())  {  [CE]  incomparable  types:  Node  and  int  [FE]    RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  child.getChildCount();  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  child.getChildCount();  child  =  child.getNext())  {	  n!=    child;    child    =    child.getNext())    {    	non-compiled	[CE]  incomparable  types:  Node  and  int	12	None	replace
757	[BUG]  [BUGGY]  Node  child  =  n.getChildCount())  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  child  =  n.getChildCount())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  n.getChildCount())  {	  Node    child    =    n.getNext())    {    	non-compiled	[CE]  ';'  expected	81	None	replace
758	[BUG]  [BUGGY]  Node  child  =  n.getNextChild())  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  child  =  n.getNextChild())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  n.getNextChild())  {	  Node    child    =    n.getNext())    {    	non-compiled	[CE]  ';'  expected	81	None	replace
759	[BUG]  [BUGGY]  Node  child  =  n.getParent())  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  child  =  n.getParent())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  n.getParent())  {	  Node    child    =    n.getNext())    {    	non-compiled	[CE]  ';'  expected	81	None	replace
760	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable));  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable));  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable));  }	  child    ==    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    new    AssertionFailedError(variable));    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
761	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(param1));  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(param1));  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(param1));	  child    ==    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    new    AssertionFailedError(variable));    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
762	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(param1));  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(param1));  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(param1));	  child    ==    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    new    AssertionFailedError(variable));    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
763	[BUG]  [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.FOR)  {  child  =  child.getNext())  {  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.FOR)  {  child  =  child.getNext())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	while(child!=  null  &&  child.getType()  ==  Token.FOR)  {  child  =  child.getNext())  {  }	  while(child!=    null    &&    child.getType()    ==    Token.RETURN)    {    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
764	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable),  junit);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable),  junit);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable),  junit);	  child    ==    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    new    AssertionFailedError(variable),    n);    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
765	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable),  junit);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable),  junit);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable),  junit);	  child    ==    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    new    AssertionFailedError(variable),    n);    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
766	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable),  n);  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable),  n);  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable),  n);  }	  child    ==    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    new    AssertionFailedError(variable),    n);    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
767	[BUG]  [BUGGY]  if(child  [Delete]  null  &&  child.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child  [Delete]  null  &&  child.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child  [Delete]  null  &&  child.getType()  ==  Token.FUNCTION)  {	  if(child!=    null    ||    child.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
768	[BUG]  [BUGGY]  Node  }  else  if(child.getType()  ==  Token.NAME)  {  child  =  child.getNext();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  }  else  if(child.getType()  ==  Token.NAME)  {  child  =  child.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  else  if(child.getType()  ==  Token.NAME)  {  child  =  child.getNext();	  Node    }    else    if(child.getType()    ==    Token.NAME)    {    node!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	83	None	replace
769	[BUG]  [BUGGY]  Node  }  else  if(child.getType()  ==  Token.NAME  &&  child.hasChildren())  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  }  else  if(child.getType()  ==  Token.NAME  &&  child.hasChildren())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  else  if(child.getType()  ==  Token.NAME  &&  child.hasChildren())  {	  Node    }    else    if(child.getType()    ==    Token.NAME)    {    node!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	83	None	replace
770	[BUG]  [BUGGY]  Node  }  else  if(child.getType()  ==  Token.NAME)  {  child  =  child.getFirstChild();  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  }  else  if(child.getType()  ==  Token.NAME)  {  child  =  child.getFirstChild();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  else  if(child.getType()  ==  Token.NAME)  {  child  =  child.getFirstChild();  }	  Node    }    else    if(child.getType()    ==    Token.NAME)    {    node!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	83	None	replace
771	[BUG]  [BUGGY]  Node  }  else  if(child.getType()  ==  Token.NAME)  {  child  =  child.getFirstChild();  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  }  else  if(child.getType()  ==  Token.NAME)  {  child  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  else  if(child.getType()  ==  Token.NAME)  {  child  =  child.getFirstChild();	  Node    }    else    if(child.getType()    ==    Token.NAME)    {    node!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	83	None	replace
772	[BUG]  [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getFirstChild())  {  Child  child  =  n.getFirstChild();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getFirstChild())  {  Child  child  =  n.getFirstChild();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child!=  null;  child  =  child.getFirstChild())  {  Child  child  =  n.getFirstChild();  }	  child!=    null;    child    =    child.getFirstChild())    {    Child    child    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
773	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  child!=  null;  child  =  child.getParent())  {  Child  child!=  null;  child  =  child.getNext())  {  [CE]  illegal  start  of  expression  [FE]          StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  child!=  null;  child  =  child.getParent())  {  Child  child!=  null;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  child!=  null;  child  =  child.getParent())  {  Child  child!=  null;  child  =  child.getNext())  {	  child!=    null;    child    =    child.getParent())    {    Child    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
774	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  child!=  null;  child  =  child.getParent())  {  childtipuri  [CE]  illegal  start  of  expression  [FE]            StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  child!=  null;  child  =  child.getParent())  {  childtipuri  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  child!=  null;  child  =  child.getParent())  {  childtipuri	  child!=    null;    child    =    child.getParent())    {    Child    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
775	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  child!=  null;  child  =  child.getParent())  {  child!=  null;  child  =  child.getNext())  {  [CE]  illegal  start  of  expression  [FE]              StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  child!=  null;  child  =  child.getParent())  {  child!=  null;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  child!=  null;  child  =  child.getParent())  {  child!=  null;  child  =  child.getNext())  {	  child!=    null;    child    =    child.getParent())    {    Child    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
776	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  child!=  null;  child  =  child.getParent())  {  Child  child!=  null;  child  =  child.getNext())  {  }  [CE]  illegal  start  of  expression  [FE]                StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  child!=  null;  child  =  child.getParent())  {  Child  child!=  null;  child  =  child.getNext())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  child!=  null;  child  =  child.getParent())  {  Child  child!=  null;  child  =  child.getNext())  {  }	  child!=    null;    child    =    child.getParent())    {    Child    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
777	[BUG]  [BUGGY]  Child  child  =  child.getPrevious()  &&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getPrevious()  &&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getPrevious()  &&!ControlFlowGraph.isEnteringNewCfgNode(child))  {	  Child    child    =    child.getPrevious())    {    	non-compiled	[CE]  ';'  expected	120	None	replace
778	[BUG]  [BUGGY]  Child  }  null;  child  =  child.getNext())  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  }  null;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  }  null;  child  =  child.getNext())  {	  Child    }    null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  ';'  expected	118	None	replace
779	[BUG]  [BUGGY]  Child  }  null;  child  =  child.getFirstChild())  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  }  null;  child  =  child.getFirstChild())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  }  null;  child  =  child.getFirstChild())  {	  Child    }    null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  ';'  expected	118	None	replace
780	[BUG]  [BUGGY]  Node  }  else  if(child.getType()  ==  Token.FUNCTION)  {  Child  }  null;  child  =  child.getPrevious())  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  }  else  if(child.getType()  ==  Token.FUNCTION)  {  Child  }  null;  child  =  child.getPrevious())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  else  if(child.getType()  ==  Token.FUNCTION)  {  Child  }  null;  child  =  child.getPrevious())  {	  Child    }    null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  ';'  expected	118	None	replace
781	[BUG]  [BUGGY]  Child  }  else  if(child.getType()  ==  Token.NAME)  {  Child  }  null;  child  =  child.getPrevious())  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  }  else  if(child.getType()  ==  Token.NAME)  {  Child  }  null;  child  =  child.getPrevious())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  }  else  if(child.getType()  ==  Token.NAME)  {  Child  }  null;  child  =  child.getPrevious())  {	  Child    }    null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  ';'  expected	118	None	replace
782	[BUG]  [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(child,  variable  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(child,  variable  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=    null;    child    =    child.getLastChild())    {    junit.framework.AssertionFailedError:  Expected:  function  FUNC(child,  variable	  	non-compiled	[CE]  not  a  statement	1	None	add
783	[BUG]  [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  }  return  VariableLiveness.KILL;  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  }  return  VariableLiveness.KILL;  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=    null;    child    =    child.getLastChild())    {    junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  }  return  VariableLiveness.KILL;	  	non-compiled	[CE]  not  a  statement	1	None	add
784	[BUG]  [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(parent  ==  return  VariableLiveness.KILL;  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(parent  ==  return  VariableLiveness.KILL;  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=    null;    child    =    child.getLastChild())    {    junit.framework.AssertionFailedError:  Expected:  function  FUNC(parent  ==  return  VariableLiveness.KILL;	  	non-compiled	[CE]  not  a  statement	1	None	add
785	[BUG]  [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(parent  >>  return  VariableLiveness.KILL;  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(parent  >>  return  VariableLiveness.KILL;  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=    null;    child    =    child.getLastChild())    {    junit.framework.AssertionFailedError:  Expected:  function  FUNC(parent  >>  return  VariableLiveness.KILL;	  	non-compiled	[CE]  not  a  statement	1	None	add
786	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  Node  newCfgNode  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	add	child!=  null;  child  =  child.getLastChild())  {  Node  newCfgNode  =  child.getFirstChild();	  child!=    null;    child    =    child.getFirstChild())    {    Node    newCfgNode    =    child.getFirstChild();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	127	61	replace
787	[BUG]  [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  Node  newCfgNode  =  child.getFirstChild();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  Node  newCfgNode  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getLastChild())  {  Node  newCfgNode  =  child.getFirstChild();	  child!=    null;    child    =    child.getFirstChild())    {    Node    newCfgNode    =    child.getFirstChild();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	127	61	replace
788	[BUG]  [BUGGY]  n  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssignmentFailedError(variable));  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssignmentFailedError(variable));  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n    ==    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,  child,  new  AssignmentFailedError(variable));	  	non-compiled	[CE]  not  a  statement	9	None	add
789	[BUG]  [BUGGY]  n  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(variable));  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(variable));  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n    ==    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(variable));	  	non-compiled	[CE]  not  a  statement	9	None	add
790	[BUG]  [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getParent())  {  child  =  n.getNext();  }  [CE]  illegal  start  of  expression  [FE]                    StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getParent())  {  child  =  n.getNext();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child!=  null;  child  =  child.getParent())  {  child  =  n.getNext();  }	  child!=    null;    child    =    child.getParent())    {    Node    child    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
791	[BUG]  [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getParent())  {  Node  child  =  n.getNext();  }  [CE]  illegal  start  of  expression  [FE]                      StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getParent())  {  Node  child  =  n.getNext();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child!=  null;  child  =  child.getParent())  {  Node  child  =  n.getNext();  }	  child!=    null;    child    =    child.getParent())    {    Node    child    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
792	[BUG]  [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  Node  child  =  parent.getFirstChild();  [CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  Node  child  =  parent.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getLastChild())  {  Node  child  =  parent.getFirstChild();	  child!=    null;    child    =    child.getFirstChild())    {    Node    child    =    parent.getFirstChild();    	non-compiled	[CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	162	None	replace
793	[BUG]  [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  Node  parent  =  parent.getFirstChild();  [CE]  variable  parent  might  not  have  been  initialized  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  Node  parent  =  parent.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getLastChild())  {  Node  parent  =  parent.getFirstChild();	  child!=    null;    child    =    child.getFirstChild())    {    Node    child    =    parent.getFirstChild();    	non-compiled	[CE]  variable  parent  might  not  have  been  initialized	162	None	replace
794	[BUG]  [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  Node  parent  =  parent.getFirstChild();  [CE]  variable  parent  might  not  have  been  initialized  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  Node  parent  =  parent.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getFirstChild())  {  Node  parent  =  parent.getFirstChild();	  child!=    null;    child    =    child.getFirstChild())    {    Node    child    =    parent.getFirstChild();    	non-compiled	[CE]  variable  parent  might  not  have  been  initialized	162	None	replace
795	[BUG]  [BUGGY]  n!=  null;  child  =  child.getParent())  {  Node  child  =  n.getFirstChild();  [CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]            RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getParent())  {  Node  child  =  n.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getParent())  {  Node  child  =  n.getFirstChild();	  n!=    null;    child    =    child.getNext())    {    Node    child    =    n.getFirstChild();    	non-compiled	[CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	108	None	replace
796	[BUG]  [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getPrevious(),  variable)  {  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getPrevious(),  variable)  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child!=  null;  child  =  child.getPrevious(),  variable)  {  }	  child!=    null;    child    =    child.getPrevious(),    variable)    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
797	[BUG]  [BUGGY]  child!=  null;  child  =  child.getPrevious(),  state)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getPrevious(),  state)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getPrevious(),  state)  {	  child!=    null;    child    =    child.getPrevious(),    variable)    {    	non-compiled	[CE]  not  a  statement	66	None	replace
798	[BUG]  [BUGGY]  Node  node  =  child.getFirstChild();  child  =  child.getNext())  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  node  =  child.getFirstChild();  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  node  =  child.getFirstChild();  child  =  child.getNext())  {	  Node    node!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	91	None	replace
799	[BUG]  [BUGGY]  Node  <  KILL,  V>  node  =  child.getNext())  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  <  KILL,  V>  node  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  <  KILL,  V>  node  =  child.getNext())  {	  Node    node!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	91	None	replace
800	[BUG]  [BUGGY]  Node  node  =  child.getParent();  child  =  child.getNext())  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  node  =  child.getParent();  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  node  =  child.getParent();  child  =  child.getNext())  {	  Node    node!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	91	None	replace
801	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination  =  isVariableReadBeforeKill(child,  variable);  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Predicate  matchRemovableAssignsElimination  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Predicate  matchRemovableAssignsElimination  =  isVariableReadBeforeKill(child,  variable);	  n!=    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    this);    n!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	132	None	replace
802	[BUG]  [BUGGY]  if(child  ==  null)  {  child  =  child.getFirstChild();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child  ==  null)  {  child  =  child.getFirstChild();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child  ==  null)  {  child  =  child.getFirstChild();  }	  if(child    ==    null)    {    child!=    null;    child    =    child.getFirstChild())    {    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
803	[BUG]  [BUGGY]  while(child!=  null)  {  child  =  child.getNext();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  while(child!=  null)  {  child  =  child.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	while(child!=  null)  {  child  =  child.getNext();	  if(child    ==    null)    {    child    =    child.getNext();    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
804	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination(child)!=  null;  child  =  child.getPrevious())  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Predicate  matchRemovableAssignsElimination(child)!=  null;  child  =  child.getPrevious())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Predicate  matchRemovableAssignsElimination(child)!=  null;  child  =  child.getPrevious())  {	  children!=    null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  ';'  expected	119	None	replace
805	[BUG]  [BUGGY]  Predicates.checkNotNull(child);  child  =  child.getPrevious())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Predicates.checkNotNull(child);  child  =  child.getPrevious())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Predicates.checkNotNull(child);  child  =  child.getPrevious())  {	  children!=    null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
806	[BUG]  [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  Node  n  =  child.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  Node  n  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getLastChild())  {  Node  n  =  child.getFirstChild();	  child!=    null;    child    =    child.getFirstChild())    {    Node    n    =    child.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	34	None	replace
807	[BUG]  [BUGGY]  child  =  child.getFirstChild())  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  =  child.getFirstChild())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  =  child.getFirstChild())  {	  child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	27	None	replace
808	[BUG]  [BUGGY]  child  =  child.getLastChild())  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  =  child.getLastChild())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  =  child.getLastChild())  {	  child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	27	None	replace
809	[BUG]  [BUGGY]  child  =  child.getNext()  &&  variable!=  null)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  =  child.getNext()  &&  variable!=  null)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  =  child.getNext()  &&  variable!=  null)  {	  child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	27	None	replace
810	[BUG]  [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  Node  child  =  n.getLastChild();  [CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  Node  child  =  n.getLastChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getLastChild())  {  Node  child  =  n.getLastChild();	  child!=    null;    child    =    child.getFirstChild())    {    Node    child    =    n.getLastChild();    	non-compiled	[CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	32	None	replace
811	[BUG]  [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  Node  child  =  n.getLastChild();  }  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  Node  child  =  n.getLastChild();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getLastChild())  {  Node  child  =  n.getLastChild();  }	  child!=    null;    child    =    child.getFirstChild())    {    Node    child    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
812	[BUG]  [BUGGY]  if(child.getType()  ==  Token.NAME  &&  child.hasChildren())  {  child!=  null;  child  =  child.getParent())  {  }  [CE]  illegal  start  of  expression  [FE]              StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child.getType()  ==  Token.NAME  &&  child.hasChildren())  {  child!=  null;  child  =  child.getParent())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child.getType()  ==  Token.NAME  &&  child.hasChildren())  {  child!=  null;  child  =  child.getParent())  {  }	  if(child.getType()    ==    Token.NAME)    {    child!=    null;    child    =    child.getParent())    {    }    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
813	[BUG]  [BUGGY]  if(child.getType()  ==  Token.NAME  &&  child.hasChildren())  {  child!=  null;  child  =  child.getNext())  {  }  [CE]  illegal  start  of  expression  [FE]                StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child.getType()  ==  Token.NAME  &&  child.hasChildren())  {  child!=  null;  child  =  child.getNext())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child.getType()  ==  Token.NAME  &&  child.hasChildren())  {  child!=  null;  child  =  child.getNext())  {  }	  if(child.getType()    ==    Token.NAME)    {    child!=    null;    child    =    child.getParent())    {    }    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
814	[BUG]  [BUGGY]  if(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.CALL)  {  child!=  null;  child  =  child.getParent())  {  }  [CE]  illegal  start  of  expression  [FE]                  StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.CALL)  {  child!=  null;  child  =  child.getParent())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.CALL)  {  child!=  null;  child  =  child.getParent())  {  }	  if(child.getType()    ==    Token.NAME)    {    child!=    null;    child    =    child.getParent())    {    }    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
815	[BUG]  [BUGGY]  n!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  Action());  }  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  Action());  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  Action());  }	  n!=    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    new    Action());    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
816	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.RETURN);  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.RETURN);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.RETURN);	  if(child.getType()    ==    Token.NAME)    {    child    =    child.getNext();    }    else    {    Preconditions.checkState(child.getType()    ==    Token.CALL);    }    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
817	[BUG]  [BUGGY]  Node  matchRemovableAssigns  =  child.removeFirstChild();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  matchRemovableAssigns  =  child.removeFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  matchRemovableAssigns  =  child.removeFirstChild();	  Node    matchRemovableAssigns    =    child.getFirstChild();    	non-compiled	[CE]  ';'  expected	69	None	replace
818	[BUG]  [BUGGY]  Node  matchRemovableAssigns  =  child.getChildCount();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  matchRemovableAssigns  =  child.getChildCount();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  matchRemovableAssigns  =  child.getChildCount();	  Node    matchRemovableAssigns    =    child.getFirstChild();    	non-compiled	[CE]  ';'  expected	69	None	replace
819	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1);  if(state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1);  if(state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1);  if(state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.SEMI_LIVE)    {    return    state;    }    	non-compiled	[CE]  ';'  expected	86	None	replace
820	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if(state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if(state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if(state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.SEMI_LIVE)    {    return    state;    }    	non-compiled	[CE]  ';'  expected	86	None	replace
821	[BUG]  [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getNext(),  variable  +  1)  {  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getNext(),  variable  +  1)  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child!=  null;  child  =  child.getNext(),  variable  +  1)  {  }	  child!=    null;    child    =    child.getNext(),    variable    +    1)    {    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
822	[BUG]  [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getNext(),  variable  +  1)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getNext(),  variable  +  1)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child!=  null;  child  =  child.getNext(),  variable  +  1)  {	  child!=    null;    child    =    child.getNext(),    variable    +    1)    {    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
823	[BUG]  [BUGGY]  child!=  null;  child  =  child.getParent(),  variable  +  1)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getParent(),  variable  +  1)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getParent(),  variable  +  1)  {	  child!=    null;    child    =    child.getNext(),    variable    +    1)    {    	non-compiled	[CE]  not  a  statement	150	None	replace
824	[BUG]  [BUGGY]  Node  childCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  child!=  null;  child  =  child;  child  =  child;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  childCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  child!=  null;  child  =  child;  child  =  child;  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  childCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  child!=  null;  child  =  child;  child  =  child;	  Node    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	90	None	replace
825	[BUG]  [BUGGY]  Node  childCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  child!=  null;  child  =  child;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  childCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  child!=  null;  child  =  child;  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  childCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  child!=  null;  child  =  child;	  Node    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	90	None	replace
826	[BUG]  [BUGGY]  Node  childCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  child!=  null;  child  =  child;  child  =  child.  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  childCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  child!=  null;  child  =  child;  child  =  child.  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  childCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  child!=  null;  child  =  child;  child  =  child.	  Node    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	90	None	replace
827	[BUG]  [BUGGY]  Node  childCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  child!=  null;  child  =  child.getNodeCopiii  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  childCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  child!=  null;  child  =  child.getNodeCopiii  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  childCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  child!=  null;  child  =  child.getNodeCopiii	  Node    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	90	None	replace
828	[BUG]  [BUGGY]  Node  childCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  child!=  null;  child  =  child.getChild  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  childCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  child!=  null;  child  =  child.getChild  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  childCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  child!=  null;  child  =  child.getChild	  Node    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	90	None	replace
829	[BUG]  [BUGGY]  Node  childCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  child!=  null;  child  =  child.getFirstChil  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  childCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  child!=  null;  child  =  child.getFirstChil  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  childCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  child!=  null;  child  =  child.getFirstChil	  Node    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	90	None	replace
830	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n  ==  null;  child  =  child.getNext())  {  Node  newCfgNode  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	add	n  ==  null;  child  =  child.getNext())  {  Node  newCfgNode  =  child.getFirstChild();	  child    ==    null;    child    =    child.getNext())    {    Node    newCfgNode    =    child.getFirstChild();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	135	61	replace
831	[BUG]  [BUGGY]  n  ==  null;  child  =  child.getNext())  {  Node  newCfgNode  =  child.getFirstChild();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n  ==  null;  child  =  child.getNext())  {  Node  newCfgNode  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n  ==  null;  child  =  child.getNext())  {  Node  newCfgNode  =  child.getFirstChild();	  child    ==    null;    child    =    child.getNext())    {    Node    newCfgNode    =    child.getFirstChild();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	135	61	replace
832	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getNext())  {  newCfgNode  =  child.getFirstChild();  [CE]  cannot  find  symbol  newCfgNode  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  ==  null;  child  =  child.getNext())  {  newCfgNode  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  ==  null;  child  =  child.getNext())  {  newCfgNode  =  child.getFirstChild();	  child    ==    null;    child    =    child.getNext())    {    Node    newCfgNode    =    child.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  newCfgNode	135	None	replace
833	[BUG]  [BUGGY]  Node  child  =  child.getNext()  &&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  child  =  child.getNext()  &&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  child.getNext()  &&!ControlFlowGraph.isEnteringNewCfgNode(child))  {	  Node    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	80	None	replace
834	[BUG]  [BUGGY]  Node  child  =  child.getNext()  &&!VariableFlowGraph.isEnteringNewCfgNode(child))  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  child  =  child.getNext()  &&!VariableFlowGraph.isEnteringNewCfgNode(child))  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  child.getNext()  &&!VariableFlowGraph.isEnteringNewCfgNode(child))  {	  Node    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	80	None	replace
835	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {	  child    ==    null;    child    =    child.getNext())    {    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
836	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  }	  child    ==    null;    child    =    child.getNext())    {    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
837	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  child    ==    null;    child    =    child.getNext())    {    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
838	[BUG]  [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getParent(),  variable)  {  }  [CE]  illegal  start  of  expression  [FE]          StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getParent(),  variable)  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child!=  null;  child  =  child.getParent(),  variable)  {  }	  child!=    null;    child    =    child.getParent(),    variable)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
839	[BUG]  [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getParent(),  variable)  {  [CE]  illegal  start  of  expression  [FE]            StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getParent(),  variable)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child!=  null;  child  =  child.getParent(),  variable)  {	  child!=    null;    child    =    child.getParent(),    variable)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
840	[BUG]  [BUGGY]  Node  <  KILL;  child  =  child.getFirstChild())  {  [CE]  cannot  find  symbol  Node  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  <  KILL;  child  =  child.getFirstChild())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  <  KILL;  child  =  child.getFirstChild())  {	  Node    <    KILL;    child    =    child.getNext())    {    	non-compiled	[CE]  cannot  find  symbol  Node	145	None	replace
841	[BUG]  [BUGGY]  Node  <  KILL;  child  =  child.getLastChild())  {  [CE]  cannot  find  symbol  Node  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  <  KILL;  child  =  child.getLastChild())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  <  KILL;  child  =  child.getLastChild())  {	  Node    <    KILL;    child    =    child.getNext())    {    	non-compiled	[CE]  cannot  find  symbol  Node	145	None	replace
842	[BUG]  [BUGGY]  Node  <  KILL;  child  =  child.getPrevious())  {  [CE]  cannot  find  symbol  Node  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  <  KILL;  child  =  child.getPrevious())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  <  KILL;  child  =  child.getPrevious())  {	  Node    <    KILL;    child    =    child.getNext())    {    	non-compiled	[CE]  cannot  find  symbol  Node	145	None	replace
843	[BUG]  [BUGGY]  Node  <  KILL;  child  =  child.getChildCount())  {  [CE]  cannot  find  symbol  Node  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  <  KILL;  child  =  child.getChildCount())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  <  KILL;  child  =  child.getChildCount())  {	  Node    <    KILL;    child    =    child.getNext())    {    	non-compiled	[CE]  cannot  find  symbol  Node	145	None	replace
844	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getParent())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  ==  null;  child  =  child.getParent())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child    ==    null;    child    =    child.getParent())    {    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);	  	non-compiled	[CE]  not  a  statement	46	None	add
845	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getParent())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(parent  ==  return  VariableLiveness.KILL;  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  ==  null;  child  =  child.getParent())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(parent  ==  return  VariableLiveness.KILL;  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child    ==    null;    child    =    child.getParent())    {    junit.framework.AssertionFailedError:  Expected:  function  FUNC(parent  ==  return  VariableLiveness.KILL;	  	non-compiled	[CE]  not  a  statement	46	None	add
846	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getParent())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(child,  variable  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  ==  null;  child  =  child.getParent())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(child,  variable  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child    ==    null;    child    =    child.getParent())    {    junit.framework.AssertionFailedError:  Expected:  function  FUNC(child,  variable	  	non-compiled	[CE]  not  a  statement	46	None	add
847	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getParent())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  }  return  VariableLiveness.KILL;  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  ==  null;  child  =  child.getParent())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  }  return  VariableLiveness.KILL;  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child    ==    null;    child    =    child.getParent())    {    junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  }  return  VariableLiveness.KILL;	  	non-compiled	[CE]  not  a  statement	46	None	add
848	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getParent())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  >>  return  VariableLiveness.KILL;  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  ==  null;  child  =  child.getParent())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  >>  return  VariableLiveness.KILL;  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child    ==    null;    child    =    child.getParent())    {    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  >>  return  VariableLiveness.KILL;	  	non-compiled	[CE]  not  a  statement	46	None	add
849	[BUG]  [BUGGY]  child!=  null;  child  =  child.getType()  [Delete]  Token.FUNCTION)  {  [CE]  ')'  expected  [FE]        StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getType()  [Delete]  Token.FUNCTION)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getType()  [Delete]  Token.FUNCTION)  {	  child!=    null;    child    =    child.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ')'  expected	74	None	replace
850	[BUG]  [BUGGY]  child!=  null;  child  =  child.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunction(child))  {  [CE]  incompatible  types  [FE]          StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunction(child))  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunction(child))  {	  child!=    null;    child    =    child.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  incompatible  types	74	None	replace
851	[BUG]  [BUGGY]  Child  child  =  child.getLastChild())  {  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getLastChild())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getLastChild())  {  }	  Child    child    =    child.getNext())    {    }    	non-compiled	[CE]  ';'  expected	97	None	replace
852	[BUG]  [BUGGY]  Child  child  =  child.getPrevious())  {  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getPrevious())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getPrevious())  {  }	  Child    child    =    child.getNext())    {    }    	non-compiled	[CE]  ';'  expected	97	None	replace
853	[BUG]  [BUGGY]  Child  child  =  child.getNext()  &&  variable!=  null)  {  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getNext()  &&  variable!=  null)  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getNext()  &&  variable!=  null)  {  }	  Child    child    =    child.getNext())    {    }    	non-compiled	[CE]  ';'  expected	97	None	replace
854	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  child    ==    null;    child    =    child.getNext())    {    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
855	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  ==  null;  child  =  child.getNext())  {  n.removeChild(child);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	add	child  ==  null;  child  =  child.getNext())  {  n.removeChild(child);	  child    ==    null;    child    =    child.getNext())    {    Node    child    =    n.getNext();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	53	63	replace
856	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getNext())  {  n.removeChild(child);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  ==  null;  child  =  child.getNext())  {  n.removeChild(child);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  ==  null;  child  =  child.getNext())  {  n.removeChild(child);	  child    ==    null;    child    =    child.getNext())    {    Node    child    =    n.getNext();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	53	63	replace
857	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getNext())  {  Node  child  =  n.getParent();  [CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  ==  null;  child  =  child.getNext())  {  Node  child  =  n.getParent();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  ==  null;  child  =  child.getNext())  {  Node  child  =  n.getParent();	  child    ==    null;    child    =    child.getNext())    {    Node    child    =    n.getNext();    	non-compiled	[CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	53	None	replace
858	[BUG]  [BUGGY]  Child  <  KILL  ||  child  ==  null;  child  =  child.getParent())  {  [CE]  cannot  find  symbol  Child  [FE]            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  <  KILL  ||  child  ==  null;  child  =  child.getParent())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  <  KILL  ||  child  ==  null;  child  =  child.getParent())  {	  Child    <    KILL    ||    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  cannot  find  symbol  Child	29	None	replace
859	[BUG]  [BUGGY]  Child  <  KILL  ||  child!=  null;  child  =  child.getFirstChild())  {  [CE]  cannot  find  symbol  Child  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  <  KILL  ||  child!=  null;  child  =  child.getFirstChild())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  <  KILL  ||  child!=  null;  child  =  child.getFirstChild())  {	  Child    <    KILL    ||    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  cannot  find  symbol  Child	29	None	replace
860	[BUG]  [BUGGY]  Predicate  <  KILL  ||  child!=  null;  child  =  child.getNext())  {  [CE]  cannot  find  symbol  Predicate  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Predicate  <  KILL  ||  child!=  null;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Predicate  <  KILL  ||  child!=  null;  child  =  child.getNext())  {	  Child    <    KILL    ||    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  cannot  find  symbol  Predicate	29	None	replace
861	[BUG]  [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getParent())  {  Node  child  =  n.getLastChild();  }  [CE]  illegal  start  of  expression  [FE]                StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getParent())  {  Node  child  =  n.getLastChild();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child!=  null;  child  =  child.getParent())  {  Node  child  =  n.getLastChild();  }	  child!=    null;    child    =    child.getParent())    {    Node    child    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
862	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getNext())  {  Node  child  =  child.getLastChild();  [CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  ==  null;  child  =  child.getNext())  {  Node  child  =  child.getLastChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  ==  null;  child  =  child.getNext())  {  Node  child  =  child.getLastChild();	  child    ==    null;    child    =    child.getNext())    {    Node    child    =    child.getFirstChild();    	non-compiled	[CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	137	None	replace
863	[BUG]  [BUGGY]  if(child  ==  null)  {  child.removeChild(child);  child  =  child.getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child  ==  null)  {  child.removeChild(child);  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child  ==  null)  {  child.removeChild(child);  child  =  child.getNext())  {	  if(child!=    null)    {    child.removeChild(child);    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
864	[BUG]  [BUGGY]  if(child!=  null)  {  child.removeChild(child);  child  =  child.getParent())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child.removeChild(child);  child  =  child.getParent())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child.removeChild(child);  child  =  child.getParent())  {	  if(child!=    null)    {    child.removeChild(child);    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
865	[BUG]  [BUGGY]  Child  child  =  child.getNext(),  null)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getNext(),  null)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getNext(),  null)  {	  Child    child    =    child.getNext(),    variable)    {    	non-compiled	[CE]  ';'  expected	78	None	replace
866	[BUG]  [BUGGY]  Child  child  =  child.getNext(),  variable).returnValue();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getNext(),  variable).returnValue();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getNext(),  variable).returnValue();	  Child    child    =    child.getNext(),    variable)    {    	non-compiled	[CE]  ';'  expected	78	None	replace
867	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME,  n);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME,  n);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME,  n);	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
868	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  &&  child.hasChildren());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  &&  child.hasChildren());  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME  &&  child.hasChildren());	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
869	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getNext(),  VariableLiveness.MAYBE_LIVE)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  ==  null;  child  =  child.getNext(),  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  ==  null;  child  =  child.getNext(),  VariableLiveness.MAYBE_LIVE)  {	  child    ==    null;    child    =    child.getNext(),    variable)    {    	non-compiled	[CE]  not  a  statement	79	None	replace
870	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getNext(),  VariableLiveness.KILL)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  ==  null;  child  =  child.getNext(),  VariableLiveness.KILL)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  ==  null;  child  =  child.getNext(),  VariableLiveness.KILL)  {	  child    ==    null;    child    =    child.getNext(),    variable)    {    	non-compiled	[CE]  not  a  statement	79	None	replace
871	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getParent(),  variable)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  ==  null;  child  =  child.getParent(),  variable)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  ==  null;  child  =  child.getParent(),  variable)  {	  child    ==    null;    child    =    child.getNext(),    variable)    {    	non-compiled	[CE]  not  a  statement	79	None	replace
872	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.hasChildren());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.hasChildren());  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.hasChildren());	  Preconditions.checkState(child.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
873	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(child.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
874	[BUG]  [BUGGY]  if(child!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.SEMI_LIVE)    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
875	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.SEMI_LIVE)    {    return    state;    }    	non-compiled	[CE]  ';'  expected	86	None	replace
876	[BUG]  [BUGGY]  Node  <  Null;  child  =  child.getFirstChild()).getNext())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  <  Null;  child  =  child.getFirstChild()).getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  <  Null;  child  =  child.getFirstChild()).getNext())  {	  Node    <    Null;    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
877	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getLastChild())  {  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child  =  child.getLastChild())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getLastChild())  {  }	  if(child!=    null)    {    child    =    child.getParent())    {    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
878	[BUG]  [BUGGY]  parent  ==  child  =  child.getParent())  {  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  parent  ==  child  =  child.getParent())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	parent  ==  child  =  child.getParent())  {  }	  if(child!=    null)    {    child    =    child.getParent())    {    }    	non-compiled	[CE]  ';'  expected	96	None	replace
879	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getFirstChild())  {  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child  =  child.getFirstChild())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getFirstChild())  {  }	  if(child!=    null)    {    child    =    child.getParent())    {    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
880	[BUG]  [BUGGY]  child  ==  null;  newCfgNode  =  child.getNext();  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  ==  null;  newCfgNode  =  child.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  ==  null;  newCfgNode  =  child.getNext();	  child    ==    null;    child    =    child.getNext())    {    Node    newCfgNode    =    child.getFirstChild();    	non-compiled	[CE]  ')'  expected	135	None	replace
881	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getNext())  {  Node  newCfgNode  =  child.getFirstChild();  }  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  ==  null;  child  =  child.getNext())  {  Node  newCfgNode  =  child.getFirstChild();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  ==  null;  child  =  child.getNext())  {  Node  newCfgNode  =  child.getFirstChild();  }	  child    ==    null;    child    =    child.getNext())    {    Node    newCfgNode    =    child.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
882	[BUG]  [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  Node  parent  =  parent.getParent();  [CE]  variable  parent  might  not  have  been  initialized  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  Node  parent  =  parent.getParent();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getFirstChild())  {  Node  parent  =  parent.getParent();	  child!=    null;    child    =    child.getFirstChild())    {    Node    parent    =    child.getParent();    	non-compiled	[CE]  variable  parent  might  not  have  been  initialized	36	None	replace
883	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  Node  parent  =  n.getParent();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	add	n!=  null;  child  =  child.getFirstChild())  {  Node  parent  =  n.getParent();	  child!=    null;    child    =    child.getFirstChild())    {    Node    parent    =    child.getParent();    	compilable	  [FE]  RuntimeException  	36	63	replace
884	[BUG]  [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  Node  parent  =  n.getParent();  [FE]  RuntimeException  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  Node  parent  =  n.getParent();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getFirstChild())  {  Node  parent  =  n.getParent();	  child!=    null;    child    =    child.getFirstChild())    {    Node    parent    =    child.getParent();    	compilable	  [FE]  RuntimeException  	36	63	replace
885	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MINUS)  {  return  state;  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MINUS)  {  return  state;  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MINUS)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MOVED)    {    return    state;    }    	non-compiled	[CE]  ';'  expected	87	None	replace
886	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.BLOCK)  {  return  state;  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.BLOCK)  {  return  state;  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.BLOCK)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MOVED)    {    return    state;    }    	non-compiled	[CE]  ';'  expected	87	None	replace
887	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  &&  child.getFirstChild()  ==  n);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  &&  child.getFirstChild()  ==  n);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.CALL  &&  child.getFirstChild()  ==  n);	  Preconditions.checkState(child.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
888	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.VAR);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.VAR);	  Preconditions.checkState(child.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
889	[BUG]  [BUGGY]  child!=  null;  newCfgNode  =  child.getFirstChild();  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  newCfgNode  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  newCfgNode  =  child.getFirstChild();	  child!=    null;    child    =    child.getFirstChild())    {    Node    newCfgNode    =    child.getFirstChild();    	non-compiled	[CE]  ')'  expected	127	None	replace
890	[BUG]  [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  Node  newCfgNode  =  newCfgNode.getFirstChild();  [CE]  variable  newCfgNode  might  not  have  been  initialized  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  Node  newCfgNode  =  newCfgNode.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getFirstChild())  {  Node  newCfgNode  =  newCfgNode.getFirstChild();	  child!=    null;    child    =    child.getFirstChild())    {    Node    newCfgNode    =    child.getFirstChild();    	non-compiled	[CE]  variable  newCfgNode  might  not  have  been  initialized	127	None	replace
891	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  Node  newCfgNode  =  n.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	add	n!=  null;  child  =  child.getFirstChild())  {  Node  newCfgNode  =  n.getFirstChild();	  child!=    null;    child    =    child.getFirstChild())    {    Node    newCfgNode    =    child.getFirstChild();    	compilable	  [FE]  RuntimeException  	127	63	replace
892	[BUG]  [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  Node  newCfgNode  =  n.getFirstChild();  [FE]  RuntimeException  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  Node  newCfgNode  =  n.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getFirstChild())  {  Node  newCfgNode  =  n.getFirstChild();	  child!=    null;    child    =    child.getFirstChild())    {    Node    newCfgNode    =    child.getFirstChild();    	compilable	  [FE]  RuntimeException  	127	63	replace
893	[BUG]  [BUGGY]  if(child!=  null  &&  child.getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null  &&  child.getType()  ==  Token.VAR)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null  &&  child.getType()  ==  Token.VAR)  {	  if(child!=    null)    {    child!=    null;    child    =    child.getParent())    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
894	[BUG]  [BUGGY]  n!=  null;  child  =  child.getParent())  {  Node  child  =  n.getNext();  [CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                    StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getParent())  {  Node  child  =  n.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getParent())  {  Node  child  =  n.getNext();	  child!=    null;    child    =    child.getParent())    {    Node    child    =    n.getNext();    	non-compiled	[CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	62	None	replace
895	[BUG]  [BUGGY]  n  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable),  n);  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable),  n);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable),  n);	  child    ==    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    new    AssertionFailedError(variable),    n);    	non-compiled	[CE]  ';'  expected	139	None	replace
896	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable),  n);  }  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable),  n);  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable),  n);  }	  child    ==    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    new    AssertionFailedError(variable),    n);    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
897	[BUG]  [BUGGY]  n  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable),  state);  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable),  state);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable),  state);	  child    ==    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    new    AssertionFailedError(variable),    n);    	non-compiled	[CE]  ';'  expected	139	None	replace
898	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.getType()  ==  Token.BLOCK);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.getType()  ==  Token.BLOCK);	  Preconditions.checkState(child.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
899	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.getType()  ==  Token.CATCH);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.getType()  ==  Token.CATCH);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.VAR  ||  child.getType()  ==  Token.CATCH);	  Preconditions.checkState(child.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
900	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getParent())  {  Node  parent  =  child.getParent();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	add	n!=  null;  child  =  child.getParent())  {  Node  parent  =  child.getParent();	  child!=    null;    child    =    child.getParent())    {    Node    parent    =    child.getParent();    	compilable	  [FE]  RuntimeException  	61	63	replace
901	[BUG]  [BUGGY]  n!=  null;  child  =  child.getParent())  {  Node  parent  =  child.getParent();  [FE]  RuntimeException  [FE]                  StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getParent())  {  Node  parent  =  child.getParent();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getParent())  {  Node  parent  =  child.getParent();	  child!=    null;    child    =    child.getParent())    {    Node    parent    =    child.getParent();    	compilable	  [FE]  RuntimeException  	61	63	replace
902	[BUG]  [BUGGY]  n!=  null;  child  =  child.getParent())  {  Node  parent  =  parent.getParent();  [CE]  variable  parent  might  not  have  been  initialized  [FE]                    StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getParent())  {  Node  parent  =  parent.getParent();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getParent())  {  Node  parent  =  parent.getParent();	  child!=    null;    child    =    child.getParent())    {    Node    parent    =    child.getParent();    	non-compiled	[CE]  variable  parent  might  not  have  been  initialized	61	None	replace
903	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getNext();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  child  =  child.getFirstChild();  }  [CE]  illegal  start  of  expression  [FE]            StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child  =  child.getNext();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  child  =  child.getFirstChild();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getNext();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  child  =  child.getFirstChild();  }	  if(child!=    null)    {    child    =    child.getParent();    }    else    {    Preconditions.checkState(child.getType()    ==    Token.NAME);    child    =    child.getFirstChild();    }    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
904	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getNext();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME,  child);  child  =  child.getFirstChild();  }  [CE]  illegal  start  of  expression  [FE]              StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child  =  child.getNext();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME,  child);  child  =  child.getFirstChild();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getNext();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME,  child);  child  =  child.getFirstChild();  }	  if(child!=    null)    {    child    =    child.getParent();    }    else    {    Preconditions.checkState(child.getType()    ==    Token.NAME);    child    =    child.getFirstChild();    }    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
905	[BUG]  [BUGGY]  Node  <  KILL,  V>  child  =  child.getNext())  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  <  KILL,  V>  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  <  KILL,  V>  child  =  child.getNext())  {	  Node    node!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	91	None	replace
906	[BUG]  [BUGGY]  if(child.getType()  ==  Token.NAME)  {  child!=  null;  child  =  child.getParent())  {  [CE]  illegal  start  of  expression  [FE]              StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child.getType()  ==  Token.NAME)  {  child!=  null;  child  =  child.getParent())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child.getType()  ==  Token.NAME)  {  child!=  null;  child  =  child.getParent())  {	  child!=    null;    child    =    child.getParent())    {    Child    <    null;    child    =    child.getParent())    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
907	[BUG]  [BUGGY]  if(child!=  null  &&  child.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null  &&  child.getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null  &&  child.getType()  ==  Token.BLOCK)  {	  if(child!=    null    &&    child.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
908	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n  ==  null;  child  =  child.getFirstChild())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	add	n  ==  null;  child  =  child.getFirstChild())  {	  n!=    null;    child    =    child.getFirstChild())    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	4	61	replace
909	[BUG]  [BUGGY]  n  ==  null;  child  =  child.getFirstChild())  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n  ==  null;  child  =  child.getFirstChild())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n  ==  null;  child  =  child.getFirstChild())  {	  n!=    null;    child    =    child.getFirstChild())    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	4	61	replace
910	[BUG]  [BUGGY]  n!=  null;  child  =  child.getNextSibling())  {  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getNextSibling())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getNextSibling())  {	  n!=    null;    child    =    child.getFirstChild())    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
911	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  this);  }  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  this);  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  this);  }	  child    ==    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    this);    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
912	[BUG]  [BUGGY]  n!=  null;  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  reached  end  of  file  while  parsing  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {	  child    ==    null;    child    =    child.getNext())    {    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	113	None	replace
913	[BUG]  [BUGGY]  n!=  null;  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  child    ==    null;    child    =    child.getNext())    {    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	52	None	replace
914	[BUG]  [BUGGY]  n  ==  null;  child  =  child.getNext())  {  NodeUtil.copyCfgNode(child,  variable);  n  ==  null;  child  =  child.getNext())  {  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n  ==  null;  child  =  child.getNext())  {  NodeUtil.copyCfgNode(child,  variable);  n  ==  null;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n    ==    null;    child    =    child.getNext())    {    NodeUtil.copyCfgNode(child,  variable);  n  ==  null;  child  =  child.getNext())  {	  	non-compiled	[CE]  not  a  statement	9	None	add
915	[BUG]  [BUGGY]  n  ==  null;  child  =  child.getNext())  {  Node  <  KILL,  V>  n  =  child.getFirstChild();  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n  ==  null;  child  =  child.getNext())  {  Node  <  KILL,  V>  n  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n    ==    null;    child    =    child.getNext())    {    Node  <  KILL,  V>  n  =  child.getFirstChild();	  	non-compiled	[CE]  not  a  statement	9	None	add
916	[BUG]  [BUGGY]  if(child!=  null  &&  child.getType()  ==  Token.FUNCTION)  {  child  =  child.getParent();  child  =  child.getNext())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null  &&  child.getType()  ==  Token.FUNCTION)  {  child  =  child.getParent();  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null  &&  child.getType()  ==  Token.FUNCTION)  {  child  =  child.getParent();  child  =  child.getNext())  {	  if(child!=    null)    {    child    =    child.getParent();    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
917	[BUG]  [BUGGY]  if(child!=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getParent();  child  =  child.getNext())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getParent();  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getParent();  child  =  child.getNext())  {	  if(child!=    null)    {    child    =    child.getParent();    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
918	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child,  this,  matchRemovableAssigns);  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  NodeTraversal.traverse(compiler,  child,  this,  matchRemovableAssigns);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	NodeTraversal.traverse(compiler,  child,  this,  matchRemovableAssigns);	  NodeTraversal.traverse(compiler,    child,    this);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
919	[BUG]  [BUGGY]  if(child!=  null)  {  child.removeChild(child);  child  =  child.getFirstChild())  {  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child.removeChild(child);  child  =  child.getFirstChild())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child.removeChild(child);  child  =  child.getFirstChild())  {	  if(child!=    null)    {    child!=    null;    child    =    child.getFirstChild())    {    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
920	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getFirstChild();  }  else  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child  =  child.getFirstChild();  }  else  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getFirstChild();  }  else  {	  if(child!=    null)    {    child!=    null;    child    =    child.getFirstChild())    {    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
921	[BUG]  [BUGGY]  n!=  child;  child  =  child.getNext())  {  Node  child;  child  =  child.getNext())  {  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  child;  child  =  child.getNext())  {  Node  child;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=    child;    child    =    child.getNext())    {    Node  child;  child  =  child.getNext())  {	  	non-compiled	[CE]  ';'  expected	11	None	add
922	[BUG]  [BUGGY]  Node  }  else  if(child.getType()  ==  Token.FUNCTION  ||  child.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  }  else  if(child.getType()  ==  Token.FUNCTION  ||  child.getType()  ==  Token.VAR)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  else  if(child.getType()  ==  Token.FUNCTION  ||  child.getType()  ==  Token.VAR)  {	  Node    }    else    if(child.getType()    ==    Token.FUNCTION)    {    node!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	84	None	replace
923	[BUG]  [BUGGY]  Node  }  else  if(child.getType()  ==  Token.FUNCTION  &&  child.getFirstChild()  ==  n)  {  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  }  else  if(child.getType()  ==  Token.FUNCTION  &&  child.getFirstChild()  ==  n)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  else  if(child.getType()  ==  Token.FUNCTION  &&  child.getFirstChild()  ==  n)  {	  Node    }    else    if(child.getType()    ==    Token.FUNCTION)    {    node!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	84	None	replace
924	[BUG]  [BUGGY]  Node  }  else  if(child.getType()  ==  Token.FUNCTION  &&  child.hasChildren())  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  }  else  if(child.getType()  ==  Token.FUNCTION  &&  child.hasChildren())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  else  if(child.getType()  ==  Token.FUNCTION  &&  child.hasChildren())  {	  Node    }    else    if(child.getType()    ==    Token.FUNCTION)    {    Node    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	82	None	replace
925	[BUG]  [BUGGY]  Node  }  else  if(child.getType()  ==  Token.FUNCTION  &&  child.getChildCount()  >  2)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  }  else  if(child.getType()  ==  Token.FUNCTION  &&  child.getChildCount()  >  2)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  else  if(child.getType()  ==  Token.FUNCTION  &&  child.getChildCount()  >  2)  {	  Node    }    else    if(child.getType()    ==    Token.FUNCTION)    {    Node    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	82	None	replace
926	[BUG]  [BUGGY]  if(child!=  null  &&  child.hasChildren())  {  child.removeChild(child);  child  =  child.getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null  &&  child.hasChildren())  {  child.removeChild(child);  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null  &&  child.hasChildren())  {  child.removeChild(child);  child  =  child.getNext())  {	  if(child!=    null)    {    child.removeChild(child);    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
927	[BUG]  [BUGGY]  if(child!=  null  &&  child.getType()  ==  Token.CALL)  {  child.removeChild(child);  child  =  child.getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null  &&  child.getType()  ==  Token.CALL)  {  child.removeChild(child);  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null  &&  child.getType()  ==  Token.CALL)  {  child.removeChild(child);  child  =  child.getNext())  {	  if(child!=    null)    {    child.removeChild(child);    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
928	[BUG]  [BUGGY]  if(child!=  null  &&  child.removeChild(child);  child  =  child.getNext())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null  &&  child.removeChild(child);  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null  &&  child.removeChild(child);  child  =  child.getNext())  {	  if(child!=    null)    {    child.removeChild(child);    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
929	[BUG]  [BUGGY]  if(child!=  null  &&  child.getType()  ==  Token.CATCH)  {  child.removeChild(child);  child  =  child.getNext())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null  &&  child.getType()  ==  Token.CATCH)  {  child.removeChild(child);  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null  &&  child.getType()  ==  Token.CATCH)  {  child.removeChild(child);  child  =  child.getNext())  {	  if(child!=    null)    {    child.removeChild(child);    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
930	[BUG]  [BUGGY]  n  ==  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n  ==  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n  ==  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  child    ==    null;    child    =    child.getNext())    {    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state    ==    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  ';'  expected	54	None	replace
931	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getNext(),  variable  +  1)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  ==  null;  child  =  child.getNext(),  variable  +  1)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  ==  null;  child  =  child.getNext(),  variable  +  1)  {	  child    ==    null;    child    =    child.getNext(),    variable)    {    	non-compiled	[CE]  not  a  statement	79	None	replace
932	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getNext();  child  =  child.getNext(),  variable)  {  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child  =  child.getNext();  child  =  child.getNext(),  variable)  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getNext();  child  =  child.getNext(),  variable)  {  }	  if(child!=    null)    {    child!=    null;    child    =    child.getNext(),    variable)    {    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
933	[BUG]  [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.CALL)  {  child  =  child.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.CALL)  {  child  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	while(child!=  null  &&  child.getType()  ==  Token.CALL)  {  child  =  child.getFirstChild();	  if(child!=    null)    {    child    =    child.getFirstChild();    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
934	[BUG]  [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.VAR)  {  child  =  child.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.VAR)  {  child  =  child.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	while(child!=  null  &&  child.getType()  ==  Token.VAR)  {  child  =  child.getFirstChild();	  if(child!=    null)    {    child    =    child.getFirstChild();    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
935	[BUG]  [BUGGY]  while(child!=  null  &&  child.hasChildren())  {  child  =  child.getFirstChild();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  while(child!=  null  &&  child.hasChildren())  {  child  =  child.getFirstChild();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	while(child!=  null  &&  child.hasChildren())  {  child  =  child.getFirstChild();  }	  if(child!=    null)    {    child    =    child.getFirstChild();    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
936	[BUG]  [BUGGY]  if(child.getType()  ==  Token.NAME)  {  child!=  null;  child  =  child.getParent();  }  [CE]  illegal  start  of  expression  [FE]        StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child.getType()  ==  Token.NAME)  {  child!=  null;  child  =  child.getParent();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child.getType()  ==  Token.NAME)  {  child!=  null;  child  =  child.getParent();  }	  child!=    null;    child    =    child.getParent())    {    Child    child    =    child.getParent();    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
937	[BUG]  [BUGGY]  if(child.getType()  ==  Token.VAR)  {  child!=  null;  child  =  child.getParent();  }  [CE]  illegal  start  of  expression  [FE]          StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child.getType()  ==  Token.VAR)  {  child!=  null;  child  =  child.getParent();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child.getType()  ==  Token.VAR)  {  child!=  null;  child  =  child.getParent();  }	  child!=    null;    child    =    child.getParent())    {    Child    child    =    child.getParent();    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
938	[BUG]  [BUGGY]  parent  ==  child  =  child.getParent();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  parent  ==  child  =  child.getParent();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	parent  ==  child  =  child.getParent();	  if(child!=    null)    {    child    =    child.getParent();    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
939	[BUG]  [BUGGY]  n  >>  null;  child  =  child.getNext())  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                    RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n  >>  null;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n  >>  null;  child  =  child.getNext())  {	  n!=    null;    child    =    child.getNext())    {    n    >=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	44	None	replace
940	[BUG]  [BUGGY]  n  ==  null;  child  =  child.getFirstChild())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n  ==  null;  child  =  child.getFirstChild())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n  ==  null;  child  =  child.getFirstChild())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);	  child!=    null;    child    =    child.getFirstChild())    {    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	124	None	replace
941	[BUG]  [BUGGY]  Node  <  KILL;  child  =  child.getFirstChild()).getNext())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  <  KILL;  child  =  child.getFirstChild()).getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  <  KILL;  child  =  child.getFirstChild()).getNext())  {	  Node    <    KILL;    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
942	[BUG]  [BUGGY]  if(child.getType()  ==  Token.NAME  &&  child.getFirstChild()  ==  n)  {  child!=  null;  child  =  child.getParent())  {  }  [CE]  illegal  start  of  expression  [FE]              StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child.getType()  ==  Token.NAME  &&  child.getFirstChild()  ==  n)  {  child!=  null;  child  =  child.getParent())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child.getType()  ==  Token.NAME  &&  child.getFirstChild()  ==  n)  {  child!=  null;  child  =  child.getParent())  {  }	  if(child.getType()    ==    Token.NAME)    {    child!=    null;    child    =    child.getParent())    {    }    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
943	[BUG]  [BUGGY]  child  =  child.getNext()  ||  child.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  =  child.getNext()  ||  child.getType()  ==  Token.VAR)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  =  child.getNext()  ||  child.getType()  ==  Token.VAR)  {	  child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	27	None	replace
944	[BUG]  [BUGGY]  child  =  child.getNext()  ||  child.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  =  child.getNext()  ||  child.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  =  child.getNext()  ||  child.getType()  ==  Token.FUNCTION)  {	  child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	27	None	replace
945	[BUG]  [BUGGY]  child  =  child.getNext()  ||  child.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  =  child.getNext()  ||  child.getType()  ==  Token.NAME)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  =  child.getNext()  ||  child.getType()  ==  Token.NAME)  {	  child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	27	None	replace
946	[BUG]  [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  Node  child  =  parent.getFirstChild();  [CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  Node  child  =  parent.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getFirstChild())  {  Node  child  =  parent.getFirstChild();	  child!=    null;    child    =    child.getFirstChild())    {    Node    child    =    parent.getFirstChild();    	non-compiled	[CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	162	None	replace
947	[BUG]  [BUGGY]  if(child.getType()  ==  Token.VAR)  {  child!=  null;  child  =  child.getParent())  {  }  [CE]  illegal  start  of  expression  [FE]        StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child.getType()  ==  Token.VAR)  {  child!=  null;  child  =  child.getParent())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child.getType()  ==  Token.VAR)  {  child!=  null;  child  =  child.getParent())  {  }	  child!=    null;    child    =    child.getParent())    {    Child    child!=    null;    child    =    child.getParent())    {    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
948	[BUG]  [BUGGY]  Node  child  =  n.getFirstChild().getNext();  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  child  =  n.getFirstChild().getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  n.getFirstChild().getNext();	  Node    child    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	5	None	replace
949	[BUG]  [BUGGY]  Child  <  KILL  ||  child  >=  null;  child  =  child.getParent())  {  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  <  KILL  ||  child  >=  null;  child  =  child.getParent())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  <  KILL  ||  child  >=  null;  child  =  child.getParent())  {  }	  Child    <    KILL    ||    child    ==    null;    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
950	[BUG]  [BUGGY]  if(child.getType()  ==  Token.NAME)  {  child!=  null;  child  =  child.getParent())  {  return  VariableLiveness.KILL;  }  [CE]  illegal  start  of  expression  [FE]          StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child.getType()  ==  Token.NAME)  {  child!=  null;  child  =  child.getParent())  {  return  VariableLiveness.KILL;  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child.getType()  ==  Token.NAME)  {  child!=  null;  child  =  child.getParent())  {  return  VariableLiveness.KILL;  }	  child!=    null;    child    =    child.getParent())    {    Child    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
951	[BUG]  [BUGGY]  if(child.getType()  ==  Token.VAR)  {  child!=  null;  child  =  child.getParent())  {  return  VariableLiveness.KILL;  }  [CE]  illegal  start  of  expression  [FE]            StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child.getType()  ==  Token.VAR)  {  child!=  null;  child  =  child.getParent())  {  return  VariableLiveness.KILL;  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child.getType()  ==  Token.VAR)  {  child!=  null;  child  =  child.getParent())  {  return  VariableLiveness.KILL;  }	  child!=    null;    child    =    child.getParent())    {    Child    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
952	[BUG]  [BUGGY]  if(child.getType()  ==  Token.FUNCTION)  {  child!=  null;  child  =  child.getParent())  {  return  VariableLiveness.KILL;  }  [CE]  illegal  start  of  expression  [FE]              StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child.getType()  ==  Token.FUNCTION)  {  child!=  null;  child  =  child.getParent())  {  return  VariableLiveness.KILL;  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child.getType()  ==  Token.FUNCTION)  {  child!=  null;  child  =  child.getParent())  {  return  VariableLiveness.KILL;  }	  child!=    null;    child    =    child.getParent())    {    Child    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
953	[BUG]  [BUGGY]  Preconditions.checkState(child!=  null);  child  =  child.getNext())  {  Node  child  =  n.getFirstChild();  [CE]  incompatible  types  [FE]            RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child!=  null);  child  =  child.getNext())  {  Node  child  =  n.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child!=  null);  child  =  child.getNext())  {  Node  child  =  n.getFirstChild();	  n!=    null;    child    =    child.getNext())    {    Node    child    =    n.getFirstChild();    	non-compiled	[CE]  incompatible  types	108	None	replace
954	[BUG]  [BUGGY]  node!=  null;  child  =  child.getNext())  {  Node  child  =  n.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]              RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  node!=  null;  child  =  child.getNext())  {  Node  child  =  n.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	node!=  null;  child  =  child.getNext())  {  Node  child  =  n.getFirstChild();	  n!=    null;    child    =    child.getNext())    {    Node    child    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	108	None	replace
955	[BUG]  [BUGGY]  n!=  null;  child  =  child.getParent())  {  Node  child  =  n.getLastChild();  [CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getParent())  {  Node  child  =  n.getLastChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getParent())  {  Node  child  =  n.getLastChild();	  child!=    null;    child    =    child.getParent())    {    Node    child    =    n.getLastChild();    	non-compiled	[CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	60	None	replace
956	[BUG]  [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getFirstChild().getNext())  {  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getFirstChild().getNext())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	while(child!=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getFirstChild().getNext())  {  }	  while(child!=    null    &&    child.getType()    ==    Token.NAME)    {    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
957	[BUG]  [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getChildren().getNext())  {  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getChildren().getNext())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	while(child!=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getChildren().getNext())  {  }	  while(child!=    null    &&    child.getType()    ==    Token.NAME)    {    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
958	[BUG]  [BUGGY]  null;  child  =  child.getParent())  {  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  null;  child  =  child.getParent())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	null;  child  =  child.getParent())  {	  null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  incompatible  types	161	None	replace
959	[BUG]  [BUGGY]  if(child.getType()  ==  Token.NAME)  {  child!=  null;  child  =  child.getParent())  {  child!=  null;  child  =  child.getNext())  {  }  [CE]  illegal  start  of  expression  [FE]                      StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child.getType()  ==  Token.NAME)  {  child!=  null;  child  =  child.getParent())  {  child!=  null;  child  =  child.getNext())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child.getType()  ==  Token.NAME)  {  child!=  null;  child  =  child.getParent())  {  child!=  null;  child  =  child.getNext())  {  }	  child!=    null;    child    =    child.getParent())    {    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
960	[BUG]  [BUGGY]  n!=  null;  child  =  child.getNext())  {  Node  n  =  child.getParent();  }  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getNext())  {  Node  n  =  child.getParent();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getNext())  {  Node  n  =  child.getParent();  }	  n!=    null;    child    =    child.getNext())    {    Node    n    =    child.getParent();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
961	[BUG]  [BUGGY]  n!=  null;  child  =  child.getNext())  {  Node  n  =  parent.getParent();  [CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                  RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getNext())  {  Node  n  =  parent.getParent();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getNext())  {  Node  n  =  parent.getParent();	  n!=    null;    child    =    child.getNext())    {    Node    n    =    child.getParent();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	42	None	replace
962	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getNext(),  variable);  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  child  =  child.getNext();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child  =  child.getNext(),  variable);  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  child  =  child.getNext();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getNext(),  variable);  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  child  =  child.getNext();  }	  child!=    null;    child    =    child.getNext(),    variable);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
963	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getNext(),  variable);  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  return  VariableLiveness.KILL;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child  =  child.getNext(),  variable);  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  return  VariableLiveness.KILL;  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getNext(),  variable);  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  return  VariableLiveness.KILL;  }	  child!=    null;    child    =    child.getNext(),    variable);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
964	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getNext(),  variable);  }  else  {  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  child  =  child.getNext();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child  =  child.getNext(),  variable);  }  else  {  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  child  =  child.getNext();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getNext(),  variable);  }  else  {  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  child  =  child.getNext();  }	  child!=    null;    child    =    child.getNext(),    variable);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
965	[BUG]  [BUGGY]  child!=  null;  child  =  child.getType()  ==  Token.FUNCTION  &&  variable.equals(child.getString()))  {  [CE]  incompatible  types  [FE]        StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getType()  ==  Token.FUNCTION  &&  variable.equals(child.getString()))  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getType()  ==  Token.FUNCTION  &&  variable.equals(child.getString()))  {	  child!=    null;    child    =    child.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  incompatible  types	74	None	replace
966	[BUG]  [BUGGY]  Child  <  KILL  ||  child!=  null;  child  =  child.getFirstChild().getNext())  {  [CE]  cannot  find  symbol  Child  [FE]            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  <  KILL  ||  child!=  null;  child  =  child.getFirstChild().getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  <  KILL  ||  child!=  null;  child  =  child.getFirstChild().getNext())  {	  Child    <    KILL    ||    child!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  cannot  find  symbol  Child	29	None	replace
967	[BUG]  [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.CALL)  {  child  =  child.getFirstChild().getNext())  {  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  while(child!=  null  &&  child.getType()  ==  Token.CALL)  {  child  =  child.getFirstChild().getNext())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	while(child!=  null  &&  child.getType()  ==  Token.CALL)  {  child  =  child.getFirstChild().getNext())  {  }	  while(child!=    null    &&    child.getType()    ==    Token.CALL)    {    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
968	[BUG]  [BUGGY]  if(child!=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getNext())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getNext())  {	  if(child!=    null)    {    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
969	[BUG]  [BUGGY]  if(child.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child.getType()  ==  Token.FUNCTION)  {	  if(child!=    null    ||    child.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
970	[BUG]  [BUGGY]  if(child.getType()  ==  Token.FUNCTION  ||  child!=  null)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child.getType()  ==  Token.FUNCTION  ||  child!=  null)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child.getType()  ==  Token.FUNCTION  ||  child!=  null)  {	  if(child!=    null    ||    child.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
971	[BUG]  [BUGGY]  Node  child  =  node.getFirstChild();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  child  =  node.getFirstChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  node.getFirstChild();	  Node    child    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	70	None	replace
972	[BUG]  [BUGGY]  n!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable));  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable));  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable));	  child    ==    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    new    AssertionFailedError(variable));    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
973	[BUG]  [BUGGY]  n  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable));  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable));  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  AssertionFailedError(variable));	  child    ==    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    new    AssertionFailedError(variable));    	non-compiled	[CE]  ';'  expected	133	None	replace
974	[BUG]  [BUGGY]  Node  }  else  if(child.getType()  ==  Token.NAME  &&  child.getFirstChild()  ==  n)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  }  else  if(child.getType()  ==  Token.NAME  &&  child.getFirstChild()  ==  n)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  else  if(child.getType()  ==  Token.NAME  &&  child.getFirstChild()  ==  n)  {	  Node    }    else    if(child.getType()    ==    Token.NAME)    {    node!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	83	None	replace
975	[BUG]  [BUGGY]  Node  }  else  if(child.getType()  ==  Token.NAME  &&  child!=  null  &&  child.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  }  else  if(child.getType()  ==  Token.NAME  &&  child!=  null  &&  child.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  else  if(child.getType()  ==  Token.NAME  &&  child!=  null  &&  child.getFirstChild().getType()  ==  Token.FUNCTION)  {	  Node    }    else    if(child.getType()    ==    Token.NAME)    {    node!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	83	None	replace
976	[BUG]  [BUGGY]  Node  }  else  if(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.CATCH)  {  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  }  else  if(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.CATCH)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  else  if(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.CATCH)  {	  Node    }    else    if(child.getType()    ==    Token.NAME)    {    node!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	83	None	replace
977	[BUG]  [BUGGY]  n!=  null;  child  =  child.getParent())  {  Node  child  =  child.getParent();  [CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]            StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getParent())  {  Node  child  =  child.getParent();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getParent())  {  Node  child  =  child.getParent();	  child!=    null;    child    =    child.getParent())    {    Node    child    =    child.getParent();    	non-compiled	[CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	116	None	replace
978	[BUG]  [BUGGY]  null;  child  =  child.getNext())  {  Node  n  =  child.getNext();  [CE]  incompatible  types  [FE]            RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  null;  child  =  child.getNext())  {  Node  n  =  child.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	null;  child  =  child.getNext())  {  Node  n  =  child.getNext();	  n!=    null;    child    =    child.getNext())    {    Node    n    =    child.getNext();    	non-compiled	[CE]  incompatible  types	40	None	replace
979	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n  ==  child.getFirstChild();  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	add	n  ==  child.getFirstChild();  child  =  child.getNext())  {	  n    ==    null;    child    =    child.getNext())    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	10	63	replace
980	[BUG]  [BUGGY]  n  ==  child.getFirstChild();  child  =  child.getNext())  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n  ==  child.getFirstChild();  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n  ==  child.getFirstChild();  child  =  child.getNext())  {	  n    ==    null;    child    =    child.getNext())    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	10	63	replace
981	[BUG]  [BUGGY]  VariableLiveness  state  >>  null;  child  =  child.getNext())  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  VariableLiveness  state  >>  null;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	VariableLiveness  state  >>  null;  child  =  child.getNext())  {	  ncy!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	94	None	replace
982	[BUG]  [BUGGY]  ncy!=  null;  child  =  child.getParent())  {  [CE]  cannot  find  symbol  ncy  [FE]                              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  ncy!=  null;  child  =  child.getParent())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	ncy!=  null;  child  =  child.getParent())  {	  ncy!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  cannot  find  symbol  ncy	94	None	replace
983	[BUG]  [BUGGY]  Node  ncy  =  child.getNext();  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  ncy  =  child.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  ncy  =  child.getNext();	  ncy!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	94	None	replace
984	[BUG]  [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  Node  child  =  n.getLastChild();  [CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  Node  child  =  n.getLastChild();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getFirstChild())  {  Node  child  =  n.getLastChild();	  child!=    null;    child    =    child.getFirstChild())    {    Node    child    =    n.getLastChild();    	non-compiled	[CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	32	None	replace
985	[BUG]  [BUGGY]  Child  }  else  if(child.getType()  ==  Token.NAME)  {  child  =  child.getPrevious();  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  }  else  if(child.getType()  ==  Token.NAME)  {  child  =  child.getPrevious();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  }  else  if(child.getType()  ==  Token.NAME)  {  child  =  child.getPrevious();  }	  Child    }    null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  ';'  expected	118	None	replace
986	[BUG]  [BUGGY]  Child  }  else  if(child.getType()  ==  Token.CALL)  {  child  =  child.getPrevious();  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  }  else  if(child.getType()  ==  Token.CALL)  {  child  =  child.getPrevious();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  }  else  if(child.getType()  ==  Token.CALL)  {  child  =  child.getPrevious();  }	  Child    }    null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  ';'  expected	118	None	replace
987	[BUG]  [BUGGY]  Child  }  else  if(child.getType()  ==  Token.FUNCTION)  {  child  =  child.getPrevious();  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  }  else  if(child.getType()  ==  Token.FUNCTION)  {  child  =  child.getPrevious();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  }  else  if(child.getType()  ==  Token.FUNCTION)  {  child  =  child.getPrevious();  }	  Child    }    null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  ';'  expected	118	None	replace
988	[BUG]  [BUGGY]  Child  }  else  if(child.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  }  else  if(child.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  }  else  if(child.getType()  ==  Token.FUNCTION)  {	  Child    }    null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  ';'  expected	118	None	replace
989	[BUG]  [BUGGY]  Child  }  else  if(child.getType()  ==  Token.VAR)  {  child  =  child.getPrevious();  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  }  else  if(child.getType()  ==  Token.VAR)  {  child  =  child.getPrevious();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  }  else  if(child.getType()  ==  Token.VAR)  {  child  =  child.getPrevious();  }	  Child    }    null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  ';'  expected	118	None	replace
990	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext(),  variable  *  2)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getNext(),  variable  *  2)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext(),  variable  *  2)  {	  child!=    null;    child    =    child.getNext(),    variable    +    1)    {    	non-compiled	[CE]  not  a  statement	150	None	replace
991	[BUG]  [BUGGY]  Node  child  =  n.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  child  =  n.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  n.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);	  child    ==    null;    child    =    child.getNext())    {    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  ';'  expected	50	None	replace
992	[BUG]  [BUGGY]  if(child.getType()  ==  Token.NAME)  {  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child.getType()  ==  Token.NAME)  {  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child.getType()  ==  Token.NAME)  {  child  =  child.getNext())  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  child    ==    null;    child    =    child.getNext())    {    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
993	[BUG]  [BUGGY]  if(child.getType()  ==  Token.NAME)  {  child  =  child.getParent();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.EXPR_RESULT);  }  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child.getType()  ==  Token.NAME)  {  child  =  child.getParent();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.EXPR_RESULT);  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child.getType()  ==  Token.NAME)  {  child  =  child.getParent();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.EXPR_RESULT);  }	  child    ==    null;    child    =    child.getParent())    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
994	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getParent();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.EXPR_RESULT);  }  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child  =  child.getParent();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.EXPR_RESULT);  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getParent();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.EXPR_RESULT);  }	  child    ==    null;    child    =    child.getParent())    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
995	[BUG]  [BUGGY]  Child  child  =  child.getNext()  ||  child.getType()  ==  Token.VAR)  {  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getNext()  ||  child.getType()  ==  Token.VAR)  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getNext()  ||  child.getType()  ==  Token.VAR)  {  }	  Child    child    =    child.getNext())    {    }    	non-compiled	[CE]  ';'  expected	97	None	replace
996	[BUG]  [BUGGY]  Child  child  =  child.getNext()  ||  child.getType()  ==  Token.CALL)  {  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getNext()  ||  child.getType()  ==  Token.CALL)  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getNext()  ||  child.getType()  ==  Token.CALL)  {  }	  Child    child    =    child.getNext())    {    }    	non-compiled	[CE]  ';'  expected	97	None	replace
997	[BUG]  [BUGGY]  Child  child  =  child.getNext()  ||  child.getType()  ==  Token.FUNCTION)  {  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getNext()  ||  child.getType()  ==  Token.FUNCTION)  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getNext()  ||  child.getType()  ==  Token.FUNCTION)  {  }	  Child    child    =    child.getNext())    {    }    	non-compiled	[CE]  ';'  expected	97	None	replace
998	[BUG]  [BUGGY]  n  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  Action());  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  Action());  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n  ==  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  child,  new  Action());	  n!=    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    new    Action());    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
999	[BUG]  [BUGGY]  n!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  new  Action());  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  new  Action());  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getNext())  {  NodeTraversal.traverse(compiler,  new  Action());	  n!=    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    new    Action());    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
1000	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child,  new  Actions())  {  [CE]  ';'  expected  [FE]        RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  NodeTraversal.traverse(compiler,  child,  new  Actions())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	NodeTraversal.traverse(compiler,  child,  new  Actions())  {	  NodeTraversal.traverse(compiler,    child,    new    Action())    {    	non-compiled	[CE]  ';'  expected	88	None	replace
1001	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child,  new  Action(),  VariableLiveness.KILL)  {  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  NodeTraversal.traverse(compiler,  child,  new  Action(),  VariableLiveness.KILL)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	NodeTraversal.traverse(compiler,  child,  new  Action(),  VariableLiveness.KILL)  {	  NodeTraversal.traverse(compiler,    child,    new    Action())    {    	non-compiled	[CE]  ';'  expected	88	None	replace
1002	[BUG]  [BUGGY]  if(child!=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getFirstChild();  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getFirstChild();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getFirstChild();  }	  if(child!=    null)    {    child!=    null;    child    =    child.getFirstChild())    {    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
1003	[BUG]  [BUGGY]  if(child!=  null  &&  child.getType()  ==  Token.FUNCTION)  {  child!=  null;  child  =  child.getFirstChild())  {  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null  &&  child.getType()  ==  Token.FUNCTION)  {  child!=  null;  child  =  child.getFirstChild())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null  &&  child.getType()  ==  Token.FUNCTION)  {  child!=  null;  child  =  child.getFirstChild())  {  }	  if(child!=    null)    {    child!=    null;    child    =    child.getFirstChild())    {    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
1004	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getFirstChild();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  return  VariableLiveness.KILL;  }  [CE]  illegal  start  of  expression  [FE]                StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child  =  child.getFirstChild();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  return  VariableLiveness.KILL;  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getFirstChild();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  return  VariableLiveness.KILL;  }	  if(child!=    null)    {    child    =    child.getParent();    }    else    {    Preconditions.checkState(child.getType()    ==    Token.NAME);    return    VariableLiveness.KILL;    }    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
1005	[BUG]  [BUGGY]  child!=  null;  child  =  child.getPrevious(),  variable  +  1)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getPrevious(),  variable  +  1)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getPrevious(),  variable  +  1)  {	  child!=    null;    child    =    child.getPrevious(),    variable)    {    	non-compiled	[CE]  not  a  statement	66	None	replace
1006	[BUG]  [BUGGY]  child!=  null;  child  =  child.getPrevious(),  variable),  state)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getPrevious(),  variable),  state)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getPrevious(),  variable),  state)  {	  child!=    null;    child    =    child.getPrevious(),    variable)    {    	non-compiled	[CE]  not  a  statement	66	None	replace
1007	[BUG]  [BUGGY]  child!=  null;  child  =  child.getPrevious(),  variable).show()  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getPrevious(),  variable).show()  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getPrevious(),  variable).show()  {	  child!=    null;    child    =    child.getPrevious(),    variable)    {    	non-compiled	[CE]  not  a  statement	66	None	replace
1008	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getLastChild();  child  =  child.getNext())  {  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child  =  child.getLastChild();  child  =  child.getNext())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getLastChild();  child  =  child.getNext())  {  }	  if(child!=    null)    {    child    =    child.getFirstChild();    child    =    child.getNext())    {    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
1009	[BUG]  [BUGGY]  parent  ==  null  &&  child!=  null  &&  child.getFirstChild().getType()  ==  Token.FUNCTION)  {  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  parent  ==  null  &&  child!=  null  &&  child.getFirstChild().getType()  ==  Token.FUNCTION)  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	parent  ==  null  &&  child!=  null  &&  child.getFirstChild().getType()  ==  Token.FUNCTION)  {  }	  if(child!=    null)    {    child    =    child.getFirstChild();    child    =    child.getNext())    {    }    	non-compiled	[CE]  ';'  expected	105	None	replace
1010	[BUG]  [BUGGY]  Child  child  =  child.getNext(),  variable).return;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Child  child  =  child.getNext(),  variable).return;  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Child  child  =  child.getNext(),  variable).return;	  Child    child    =    child.getNext(),    variable)    {    	non-compiled	[CE]  ';'  expected	78	None	replace
1011	[BUG]  [BUGGY]  aught  =  child.getNext();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  aught  =  child.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	aught  =  child.getNext();	  if(child!=    null)    {    child    =    child.getNext();    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
1012	[BUG]  [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  child!=  null;  child  =  child.getFirstChild();  }  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  child!=  null;  child  =  child.getFirstChild();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getFirstChild())  {  child!=  null;  child  =  child.getFirstChild();  }	  child!=    null;    child    =    child.getFirstChild())    {    child!=    null;    child    =    child.getFirstChild());    	non-compiled	[CE]  not  a  statement	163	None	replace
1013	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.CALL);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.CALL);	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
1014	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.VAR);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.VAR);	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
1015	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.BLOCK);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.BLOCK);	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
1016	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  child,  this);  n!=  null;  child  =  child.getNext())  {  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  NeighborTraversal.traverse(compiler,  child,  this);  n!=  null;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	NeighborTraversal.traverse(compiler,  child,  this);  n!=  null;  child  =  child.getNext())  {	  n!=    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    this);    n!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  not  a  statement	132	None	replace
1017	[BUG]  [BUGGY]  NaNodeTraversal.traverse(compiler,  child,  this);  n!=  null;  child  =  child.getNext())  {  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  NaNodeTraversal.traverse(compiler,  child,  this);  n!=  null;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	NaNodeTraversal.traverse(compiler,  child,  this);  n!=  null;  child  =  child.getNext())  {	  n!=    null;    child    =    child.getNext())    {    NodeTraversal.traverse(compiler,    child,    this);    n!=    null;    child    =    child.getNext())    {    	non-compiled	[CE]  not  a  statement	132	None	replace
1018	[BUG]  [BUGGY]  if(child.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child.getType()  ==  Token.NAME)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child.getType()  ==  Token.NAME)  {	  if(child!=    null    ||    child.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
1019	[BUG]  [BUGGY]  if(child  >>  null  &&  child.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child  >>  null  &&  child.getType()  ==  Token.NAME)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child  >>  null  &&  child.getType()  ==  Token.NAME)  {	  if(child!=    null    ||    child.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
1020	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getParent();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  child  =  child.getNext();  }  [CE]  illegal  start  of  expression  [FE]          StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child  =  child.getParent();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  child  =  child.getNext();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getParent();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  child  =  child.getNext();  }	  child!=    null;    child    =    child.getParent(),    variable)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
1021	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getParent();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.FUNCTION);  child  =  child.getNext();  }  [CE]  illegal  start  of  expression  [FE]            StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child  =  child.getParent();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.FUNCTION);  child  =  child.getNext();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getParent();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.FUNCTION);  child  =  child.getNext();  }	  child!=    null;    child    =    child.getParent(),    variable)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
1022	[BUG]  [BUGGY]  child  =  child.getLastChild())  {  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  =  child.getLastChild())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  =  child.getLastChild())  {  }	  child    =    child.getNext())    {    }    	non-compiled	[CE]  ';'  expected	23	None	replace
1023	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  ==  null;  child  =  child.getFirstChild())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	add	child  ==  null;  child  =  child.getFirstChild())  {	  child!=    null;    child    =    child.getFirstChild())    {    child!=    null;    child    =    child.getFirstChild())    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	31	63	replace
1024	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getFirstChild())  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  ==  null;  child  =  child.getFirstChild())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  ==  null;  child  =  child.getFirstChild())  {	  child!=    null;    child    =    child.getFirstChild())    {    child!=    null;    child    =    child.getFirstChild())    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	31	63	replace
1025	[BUG]  [BUGGY]  Node  child  =  child.getNext()  &&  variable!=  null  &&  variable.equals(child.getString());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  child  =  child.getNext()  &&  variable!=  null  &&  variable.equals(child.getString());  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  child  =  child.getNext()  &&  variable!=  null  &&  variable.equals(child.getString());	  Node    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	80	None	replace
1026	[BUG]  [BUGGY]  parent  ==  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getParent();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  child  =  child.getNext();  }  [CE]  ';'  expected  [FE]          StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  parent  ==  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getParent();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  child  =  child.getNext();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	parent  ==  null  &&  child.getType()  ==  Token.NAME)  {  child  =  child.getParent();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  child  =  child.getNext();  }	  if(child!=    null)    {    child    =    child.getParent();    }    else    {    Preconditions.checkState(child.getType()    ==    Token.NAME);    child    =    child.getNext();    }    	non-compiled	[CE]  ';'  expected	153	None	replace
1027	[BUG]  [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  Node  child  =  n.getNext();  [CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getFirstChild())  {  Node  child  =  n.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getFirstChild())  {  Node  child  =  n.getNext();	  child!=    null;    child    =    child.getFirstChild())    {    Node    child    =    n.getNext();    	non-compiled	[CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	37	None	replace
1028	[BUG]  [BUGGY]  Node  variable  =  child.getQualifiedName();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  variable  =  child.getQualifiedName();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  variable  =  child.getQualifiedName();	  Node    variable    =    child.getFirstChild();    	non-compiled	[CE]  ';'  expected	71	None	replace
1029	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getNext())  {  Node  child  =  n.getLastChild();  }  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  ==  null;  child  =  child.getNext())  {  Node  child  =  n.getLastChild();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  ==  null;  child  =  child.getNext())  {  Node  child  =  n.getLastChild();  }	  child    ==    null;    child    =    child.getNext())    {    Node    child    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
1030	[BUG]  [BUGGY]  n!=  null;  child  =  child.getParent())  {  Node  child  =  child.getNext();  [CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]              StackOverflowError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getParent())  {  Node  child  =  child.getNext();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getParent())  {  Node  child  =  child.getNext();	  child!=    null;    child    =    child.getParent())    {    Node    child    =    child.getNext();    	non-compiled	[CE]  variable  child  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	117	None	replace
1031	[BUG]  [BUGGY]  if(child!=  null  &&  child.getType()  ==  Token.FUNCTION)  {  child!=  null;  child  =  child.getParent())  {  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null  &&  child.getType()  ==  Token.FUNCTION)  {  child!=  null;  child  =  child.getParent())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null  &&  child.getType()  ==  Token.FUNCTION)  {  child!=  null;  child  =  child.getParent())  {  }	  if(child!=    null)    {    child!=    null;    child    =    child.getParent())    {    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
1032	[BUG]  [BUGGY]  if(child!=  null  &&  child.getType()  ==  Token.CALL)  {  child!=  null;  child  =  child.getParent())  {  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null  &&  child.getType()  ==  Token.CALL)  {  child!=  null;  child  =  child.getParent())  {  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null  &&  child.getType()  ==  Token.CALL)  {  child!=  null;  child  =  child.getParent())  {  }	  if(child!=    null)    {    child!=    null;    child    =    child.getParent())    {    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
1033	[BUG]  [BUGGY]  if(child  ==  null  ||  child.getType()  ==  Token.NAME)  {  child  =  child.getNext())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child  ==  null  ||  child.getType()  ==  Token.NAME)  {  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child  ==  null  ||  child.getType()  ==  Token.NAME)  {  child  =  child.getNext())  {	  if(child    ==    null)    {    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
1034	[BUG]  [BUGGY]  if(child  ==  null)  {  child  =  child.getParent())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child  ==  null)  {  child  =  child.getParent())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child  ==  null)  {  child  =  child.getParent())  {	  if(child    ==    null)    {    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
1035	[BUG]  [BUGGY]  if(child  ==  null  ||  child.getType()  ==  Token.BLOCK)  {  child  =  child.getNext())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child  ==  null  ||  child.getType()  ==  Token.BLOCK)  {  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child  ==  null  ||  child.getType()  ==  Token.BLOCK)  {  child  =  child.getNext())  {	  if(child    ==    null)    {    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
1036	[BUG]  [BUGGY]  VariablesAnalysis  liveness  =  child.getPrevious();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  VariablesAnalysis  liveness  =  child.getPrevious();  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	VariablesAnalysis  liveness  =  child.getPrevious();	  children!=    null;    child    =    child.getPrevious())    {    	non-compiled	[CE]  ';'  expected	119	None	replace
1037	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getNext())  {  Node  child  =  n.getNext();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child  =  child.getNext())  {  Node  child  =  n.getNext();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getNext())  {  Node  child  =  n.getNext();  }	  child    ==    null;    child    =    child.getNext())    {    Node    child    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
1038	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  ==  null;  child  =  child.getNext())  {  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	add	child  ==  null;  child  =  child.getNext())  {  Preconditions.checkState(child.getType()  ==  Token.BLOCK);	  child    ==    null;    child    =    child.getNext())    {    Node    child    =    n.getNext();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	53	63	replace
1039	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getNext())  {  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  ==  null;  child  =  child.getNext())  {  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  ==  null;  child  =  child.getNext())  {  Preconditions.checkState(child.getType()  ==  Token.BLOCK);	  child    ==    null;    child    =    child.getNext())    {    Node    child    =    n.getNext();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	53	63	replace
1040	[BUG]  [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  ==  return  VariableLiveness.KILL;  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  ==  return  VariableLiveness.KILL;  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=    null;    child    =    child.getLastChild())    {    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  ==  return  VariableLiveness.KILL;	  	non-compiled	[CE]  not  a  statement	1	None	add
1041	[BUG]  [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  >>  return  VariableLiveness.KILL;  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  >>  return  VariableLiveness.KILL;  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=    null;    child    =    child.getLastChild())    {    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  >>  return  VariableLiveness.KILL;	  	non-compiled	[CE]  not  a  statement	1	None	add
1042	[BUG]  [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  }  return  VariableLiveness.KILL);  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  }  return  VariableLiveness.KILL);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=    null;    child    =    child.getLastChild())    {    junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  }  return  VariableLiveness.KILL);	  	non-compiled	[CE]  not  a  statement	1	None	add
1043	[BUG]  [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  ==  return  VariableLiveness.KILL);  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  ==  return  VariableLiveness.KILL);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=    null;    child    =    child.getLastChild())    {    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  ==  return  VariableLiveness.KILL);	  	non-compiled	[CE]  not  a  statement	1	None	add
1044	[BUG]  [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1!=  return  VariableLiveness.KILL;  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child!=  null;  child  =  child.getLastChild())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1!=  return  VariableLiveness.KILL;  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=    null;    child    =    child.getLastChild())    {    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1!=  return  VariableLiveness.KILL;	  	non-compiled	[CE]  not  a  statement	1	None	add
1045	[BUG]  [BUGGY]  if(child!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
1046	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MINUS_LIVE)  {  return  state;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MINUS_LIVE)  {  return  state;  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  VariableLiveness.MINUS_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    if(state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  ';'  expected	85	None	replace
1047	[BUG]  [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getNext(),  variable).returnZero();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  return  state;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getNext(),  variable).returnZero();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  return  state;  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child!=  null;  child  =  child.getNext(),  variable).returnZero();  }  else  {  Preconditions.checkState(child.getType()  ==  Token.NAME);  return  state;  }	  child!=    null;    child    =    child.getNext(),    variable).returnZero();    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
1048	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getParent())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  ==  return  VariableLiveness.KILL);  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  ==  null;  child  =  child.getParent())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  ==  return  VariableLiveness.KILL);  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child    ==    null;    child    =    child.getParent())    {    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  ==  return  VariableLiveness.KILL);	  	non-compiled	[CE]  not  a  statement	46	None	add
1049	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getParent())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1!=  return  VariableLiveness.KILL;  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  ==  null;  child  =  child.getParent())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1!=  return  VariableLiveness.KILL;  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child    ==    null;    child    =    child.getParent())    {    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1!=  return  VariableLiveness.KILL;	  	non-compiled	[CE]  not  a  statement	46	None	add
1050	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getParent())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param0  >>  return  VariableLiveness.KILL;  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  ==  null;  child  =  child.getParent())  {  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param0  >>  return  VariableLiveness.KILL;  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child    ==    null;    child    =    child.getParent())    {    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param0  >>  return  VariableLiveness.KILL;	  	non-compiled	[CE]  not  a  statement	46	None	add
1051	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getNext())  {  Node  child  =  n.getFirstChild();  }  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  child  ==  null;  child  =  child.getNext())  {  Node  child  =  n.getFirstChild();  }  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  ==  null;  child  =  child.getNext())  {  Node  child  =  n.getFirstChild();  }	  child    ==    null;    child    =    child.getNext())    {    Node    child    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
1052	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getNext()  ||  variable  ==  null;  child  =  child.getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  if(child!=  null)  {  child  =  child.getNext()  ||  variable  ==  null;  child  =  child.getNext())  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getNext()  ||  variable  ==  null;  child  =  child.getNext())  {	  if(child!=    null)    {    child    ==    null;    child    =    child.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
1053	[BUG]  [BUGGY]  Node  }  else  if(child.getType()  ==  Token.CATCH)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  Node  }  else  if(child.getType()  ==  Token.CATCH)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	Node  }  else  if(child.getType()  ==  Token.CATCH)  {	  Node    }    null;    child    =    child.getNext())    {    	non-compiled	[CE]  ';'  expected	92	None	replace
1054	[BUG]  [BUGGY]  n!=  null;  child  =  child.getNext(),  VariableLiveness.KILL)  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]        return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();      [BUGGY]  n!=  null;  child  =  child.getNext(),  VariableLiveness.KILL)  {  [BUGGY]      if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getNext(),  VariableLiveness.KILL)  {	  child!=    null;    child    =    child.getNext(),    VariableLiveness.KILL)    {    	non-compiled	[CE]  not  a  statement	99	None	replace
