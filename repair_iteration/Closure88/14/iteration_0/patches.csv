bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    AssertionFailedError  [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  [BUGGY]  child!=  null;  child  =  child.getParent())  {  [BUGGY]  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	add	child!=  null;  child  =  child.getParent())  {	child  !=  null;  child  =  child.getNext())  {  	compilable	  [FE]  StackOverflowError  	27	61	replace
2	[BUG]  [BUGGY]  child!=  null;  child  =  child.getParent())  {  [FE]  StackOverflowError  [FE]    AssertionFailedError  [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  [BUGGY]  child!=  null;  child  =  child.getParent())  {  [BUGGY]  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getParent())  {	child  !=  null;  child  =  child.getNext())  {  	compilable	  [FE]  StackOverflowError  	27	61	replace
3	[BUG]  [BUGGY]  child!=  null;  child  =  child.getNext(),  variable)  {  [CE]  not  a  statement  [FE]      AssertionFailedError  [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  [BUGGY]  child!=  null;  child  =  child.getNext(),  variable)  {  [BUGGY]  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getNext(),  variable)  {	child  !=  null;  child  =  child.getNext())  {  	non-compiled	[CE]  not  a  statement	27	None	replace
4	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]        AssertionFailedError  [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  [BUGGY]  child  ==  null;  child  =  child.getNext())  {  [BUGGY]  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	add	child  ==  null;  child  =  child.getNext())  {	child  !=  null;  child  =  child.getNext())  {  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	27	63	replace
5	[BUG]  [BUGGY]  child  ==  null;  child  =  child.getNext())  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]        AssertionFailedError  [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  [BUGGY]  child  ==  null;  child  =  child.getNext())  {  [BUGGY]  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child  ==  null;  child  =  child.getNext())  {	child  !=  null;  child  =  child.getNext())  {  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	27	63	replace
6	[BUG]  [BUGGY]  child!=  null;  child  =  child.getPrevious())  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError  [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  [BUGGY]  child!=  null;  child  =  child.getPrevious())  {  [BUGGY]  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getPrevious())  {	child  !=  null;  child  =  child.getNext())  {  	non-compiled	[CE]  cannot  find  symbol	27	None	replace
7	[BUG]  [BUGGY]  node!=  null;  child  =  child.getNext())  {  [CE]  cannot  find  symbol  node  [FE]            AssertionFailedError  [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  [BUGGY]  node!=  null;  child  =  child.getNext())  {  [BUGGY]  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	node!=  null;  child  =  child.getNext())  {	child  !=  null;  child  =  child.getNext())  {  	non-compiled	[CE]  cannot  find  symbol  node	27	None	replace
8	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]              AssertionFailedError  [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  [BUGGY]    [BUGGY]  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	  	child  !=  null;  child  =  child.getNext())  {  	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
9	[BUG]  [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getNext())  {  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getNext())  {  }  [BUGGY]  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child!=  null;  child  =  child.getNext())  {  }	child  !=  null;  child  =  child.getNext())  {  	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
10	[BUG]  [BUGGY]  if(child  ==  null)  {  child!=  null;  child  =  child.getNext())  {  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  [BUGGY]  if(child  ==  null)  {  child!=  null;  child  =  child.getNext())  {  }  [BUGGY]  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child  ==  null)  {  child!=  null;  child  =  child.getNext())  {  }	child  !=  null;  child  =  child.getNext())  {  	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
11	[BUG]  [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getNext())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  [BUGGY]  if(child!=  null)  {  child!=  null;  child  =  child.getNext())  {  [BUGGY]  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child!=  null;  child  =  child.getNext())  {	child  !=  null;  child  =  child.getNext())  {  	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
12	[BUG]  [BUGGY]  if(child  ==  null)  {  child!=  null;  child  =  child.getNext())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  [BUGGY]  if(child  ==  null)  {  child!=  null;  child  =  child.getNext())  {  [BUGGY]  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child  ==  null)  {  child!=  null;  child  =  child.getNext())  {	child  !=  null;  child  =  child.getNext())  {  	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
13	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    AssertionFailedError  [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  [BUGGY]  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	add	child!=  null;  child  =  child.getFirstChild())  {	child  !=  null;  child  =  child.getNext())  {  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	27	61	replace
14	[BUG]  [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    AssertionFailedError  [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  [BUGGY]  child!=  null;  child  =  child.getFirstChild())  {  [BUGGY]  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	child!=  null;  child  =  child.getFirstChild())  {	child  !=  null;  child  =  child.getNext())  {  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	27	61	replace
15	[BUG]  [BUGGY]  if(child!=  null)  {  child  =  child.getNext())  {  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  [BUGGY]  if(child!=  null)  {  child  =  child.getNext())  {  }  [BUGGY]  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	if(child!=  null)  {  child  =  child.getNext())  {  }	child  !=  null;  child  =  child.getNext())  {  	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
16	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError  [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  [BUGGY]  n!=  null;  child  =  child.getNext())  {  [BUGGY]  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	add	n!=  null;  child  =  child.getNext())  {	child  !=  null;  child  =  child.getNext())  {  	compilable	  [FE]  RuntimeException  	27	63	replace
17	[BUG]  [BUGGY]  n!=  null;  child  =  child.getNext())  {  [FE]  RuntimeException  [FE]        AssertionFailedError  [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  [BUGGY]  n!=  null;  child  =  child.getNext())  {  [BUGGY]  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	338	338	6	replace	n!=  null;  child  =  child.getNext())  {	child  !=  null;  child  =  child.getNext())  {  	compilable	  [FE]  RuntimeException  	27	63	replace
