bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  sibling);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  sibling);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	5	None	replace
2	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  variable);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	5	None	replace
3	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  n);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	5	None	replace
4	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variables);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variables);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variables);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  	5	None	replace
5	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(i,  sibling,  variable);  [CE]  cannot  find  symbol  i  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(i,  sibling,  variable);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(i,  sibling,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  i	5	None	replace
6	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  exprRoot,  sibling);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  exprRoot,  sibling);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  exprRoot,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(variable,    sibling);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	10	None	replace
7	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(variable,    sibling);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	10	None	replace
8	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  sibling,  exprRoot);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  sibling,  exprRoot);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  sibling,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(variable,    sibling);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	10	None	replace
9	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  sibling);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  sibling);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(variable,    sibling);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	10	None	replace
10	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  sibling,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  sibling,  n);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  sibling,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(variable,    sibling);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	10	None	replace
11	[BUG]  [BUGGY]  Node  state  =  sibling.getFirstChild();  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  Node  state  =  sibling.getFirstChild();  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	Node  state  =  sibling.getFirstChild();	      	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	8	None	replace
12	[BUG]  [BUGGY]  Node  state  =  n.getFirstChild();  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  Node  state  =  n.getFirstChild();  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	Node  state  =  n.getFirstChild();	      	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	8	None	replace
13	[BUG]  [BUGGY]  Node  state  =  sibling.getLastChild();  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  Node  state  =  sibling.getLastChild();  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	Node  state  =  sibling.getLastChild();	      	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	8	None	replace
14	[BUG]  [BUGGY]  Node  state  =  sibling.getNext();  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  Node  state  =  sibling.getNext();  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	Node  state  =  sibling.getNext();	      	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	8	None	replace
15	[BUG]  [BUGGY]  Predicate  state  =(Predicate)n.getParent();  [CE]  incomparable  types:  Predicate  and  VariableLiveness  [FE]                              AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  Predicate  state  =(Predicate)n.getParent();  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	Predicate  state  =(Predicate)n.getParent();	      	non-compiled	[CE]  incomparable  types:  Predicate  and  VariableLiveness	8	None	replace
16	[BUG]  [BUGGY]  Predicate  state  =  n.getFirstChild();  [CE]  incompatible  types  [FE]                                AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  Predicate  state  =  n.getFirstChild();  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	Predicate  state  =  n.getFirstChild();	      	non-compiled	[CE]  incompatible  types	8	None	replace
17	[BUG]  [BUGGY]  n  =  sibling.getNext();  [CE]  cannot  find  symbol  state  [FE]                                  AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  n  =  sibling.getNext();  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	n  =  sibling.getNext();	      	non-compiled	[CE]  cannot  find  symbol  state	8	None	replace
18	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  variable,  exprRoot);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  variable,  exprRoot);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  variable,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    exprRoot);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	9	None	replace
19	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(i,  sibling,  variable,  exprRoot);  [CE]  cannot  find  symbol  i  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(i,  sibling,  variable,  exprRoot);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(i,  sibling,  variable,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  i	9	None	replace
20	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  exprRoot);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  exprRoot);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    exprRoot);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	9	None	replace
21	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(v,  sibling,  exprRoot);  [CE]  cannot  find  symbol  v  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(v,  sibling,  exprRoot);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(v,  sibling,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  v	9	None	replace
22	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(descrRoot,  variable,  sibling);  [CE]  cannot  find  symbol  descrRoot  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(descrRoot,  variable,  sibling);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(descrRoot,  variable,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  descrRoot	9	None	replace
23	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  exprRoot);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  exprRoot);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    exprRoot);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	9	None	replace
24	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  n);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	3	None	replace
25	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  exprRoot,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  exprRoot,  variable);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  exprRoot,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	3	None	replace
26	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  sibling);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  sibling);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	3	None	replace
27	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  null);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	3	None	replace
28	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  liveness);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	3	None	replace
29	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  test);  [CE]  cannot  find  symbol  test  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  test);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  test);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable);    	non-compiled	[CE]  cannot  find  symbol  test	3	None	replace
30	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  VAR_LIVE);  [CE]  cannot  find  symbol  VAR_LIVE  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  VAR_LIVE);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  VAR_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable);    	non-compiled	[CE]  cannot  find  symbol  VAR_LIVE	3	None	replace
31	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  sibling,  exprRoot);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  sibling,  exprRoot);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  sibling,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	7	None	replace
32	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  null);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	7	None	replace
33	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  variable,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  variable,  null);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  variable,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	11	None	replace
34	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot,  null);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	11	None	replace
35	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variables,  null);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variables,  null);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variables,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  	11	None	replace
36	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  variable,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  variable,  null);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  variable,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	11	None	replace
37	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  null,  exprRoot);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  null,  exprRoot);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  null,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	11	None	replace
38	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  sibling,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  sibling,  variable);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  sibling,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    sibling,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	4	None	replace
39	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  variable);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    sibling,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	4	None	replace
40	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  variable,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  variable,  n);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  variable,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    sibling,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	4	None	replace
41	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(i,  sibling,  exprRoot);  [CE]  cannot  find  symbol  i  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(i,  sibling,  exprRoot);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(i,  sibling,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  i	1	None	replace
42	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable);  [CE]  incompatible  types  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    exprRoot);    	non-compiled	[CE]  incompatible  types	6	None	replace
43	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  sibling,  exprRoot);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  sibling,  exprRoot);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  sibling,  exprRoot);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    exprRoot);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	6	None	replace
44	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  exprRoot);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  exprRoot);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  exprRoot);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    exprRoot);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	6	None	replace
45	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  n,  exprRoot);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  n,  exprRoot);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  n,  exprRoot);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    exprRoot);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	6	None	replace
46	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variables);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variables);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variables);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  	6	None	replace
47	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(v,  sibling,  exprRoot);  [CE]  cannot  find  symbol  v  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(v,  sibling,  exprRoot);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(v,  sibling,  exprRoot);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  v	6	None	replace
48	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(label,  sibling,  exprRoot);  [CE]  cannot  find  symbol  label  [FE]                              AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(label,  sibling,  exprRoot);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(label,  sibling,  exprRoot);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  label	6	None	replace
49	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  sibling,  variable);  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  sibling,  variable);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  sibling,  variable);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  incompatible  types	2	None	replace
50	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  variable,  exprRoot);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  variable,  exprRoot);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  variable,  exprRoot);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	2	None	replace
51	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  n,  variable);  [CE]  incompatible  types  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  n,  variable);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  n,  variable);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  incompatible  types	2	None	replace
52	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(variable,  sibling);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(variable,  sibling);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(variable,  sibling);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	2	None	replace
53	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  variable,  n);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  variable,  n);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  variable,  n);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	2	None	replace
54	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(i,  sibling,  variable);  [CE]  cannot  find  symbol  i  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(i,  sibling,  variable);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(i,  sibling,  variable);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol  i	2	None	replace
55	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  sibling,  variable,  exprRoot);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  sibling,  variable,  exprRoot);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  sibling,  variable,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    exprRoot);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	9	None	replace
56	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(exprRoot,  variable,  sibling);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(exprRoot,  variable,  sibling);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(exprRoot,  variable,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(variable,    sibling);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	10	None	replace
57	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(desc,  variable,  sibling);  [CE]  cannot  find  symbol  desc  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(desc,  variable,  sibling);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(desc,  variable,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(variable,    sibling);    	non-compiled	[CE]  cannot  find  symbol  desc	10	None	replace
58	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  exprRoot,  variable);  [CE]  incompatible  types  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  exprRoot,  variable);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  exprRoot,  variable);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    exprRoot);    	non-compiled	[CE]  incompatible  types	6	None	replace
59	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(variable,  exprRoot);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(variable,  exprRoot);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(variable,  exprRoot);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    exprRoot);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	6	None	replace
60	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(label,  n,  sibling,  variable);  [CE]  cannot  find  symbol  label  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(label,  n,  sibling,  variable);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(label,  n,  sibling,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol  label	4	None	replace
61	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  null,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  null,  variable);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  null,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	11	None	replace
62	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  exprRoot);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  exprRoot);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	1	None	replace
63	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(v,  sibling,  variable);  [CE]  cannot  find  symbol  v  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(v,  sibling,  variable);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(v,  sibling,  variable);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol  v	2	None	replace
64	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	7	None	replace
65	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(v,  sibling,  n);  [CE]  cannot  find  symbol  v  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(v,  sibling,  n);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(v,  sibling,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    n);    	non-compiled	[CE]  cannot  find  symbol  v	7	None	replace
66	[BUG]  [BUGGY]  LiveVariablesAnalysis  liveness  =  getLiveVariablesAnalysis(n);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  LiveVariablesAnalysis  liveness  =  getLiveVariablesAnalysis(n);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	LiveVariablesAnalysis  liveness  =  getLiveVariablesAnalysis(n);	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
67	[BUG]  [BUGGY]  LiveVariablesAnalysis  liveness  =  getLiveVariablesAnalysis();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  LiveVariablesAnalysis  liveness  =  getLiveVariablesAnalysis();  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	LiveVariablesAnalysis  liveness  =  getLiveVariablesAnalysis();	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
68	[BUG]  [BUGGY]  State  state  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  State  state  =  n.getFirstChild();  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	State  state  =  n.getFirstChild();	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
69	[BUG]  [BUGGY]  VariableLiveness  state  =  liveness.getVariableStillLiveWithinExpression(sibling);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  liveness.getVariableStillLiveWithinExpression(sibling);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  liveness.getVariableStillLiveWithinExpression(sibling);	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
70	[BUG]  [BUGGY]  LiveVariablesAnalysis  liveness  =  getLiveVariablesAnalysis(n,  variable);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  LiveVariablesAnalysis  liveness  =  getLiveVariablesAnalysis(n,  variable);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	LiveVariablesAnalysis  liveness  =  getLiveVariablesAnalysis(n,  variable);	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
71	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot,  n);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	5	None	replace
72	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variables,  n);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variables,  n);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variables,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  	5	None	replace
73	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  VAR);  [CE]  cannot  find  symbol  VAR  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  VAR);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  VAR);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable);    	non-compiled	[CE]  cannot  find  symbol  VAR	3	None	replace
74	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  REGEXP);  [CE]  cannot  find  symbol  REGEXP  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  REGEXP);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  REGEXP);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable);    	non-compiled	[CE]  cannot  find  symbol  REGEXP	3	None	replace
75	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  true);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  true);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  true);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	3	None	replace
76	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  module,  exprRoot);  [CE]  cannot  find  symbol  module  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  module,  exprRoot);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  module,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  module	1	None	replace
77	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  module,  variable);  [CE]  cannot  find  symbol  module  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  module,  variable);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  module,  variable);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol  module	2	None	replace
78	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  sibling,  variable,  exprRoot,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  sibling,  variable,  exprRoot,  liveness);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  sibling,  variable,  exprRoot,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    exprRoot);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	9	None	replace
79	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  variable,  exprRoot);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  variable,  exprRoot);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  variable,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    exprRoot);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	9	None	replace
80	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(label,  sibling,  variable,  exprRoot);  [CE]  cannot  find  symbol  label  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(label,  sibling,  variable,  exprRoot);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(label,  sibling,  variable,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  label	9	None	replace
81	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  VARIABLE_LIVE);  [CE]  cannot  find  symbol  VARIABLE_LIVE  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  VARIABLE_LIVE);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  VARIABLE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable);    	non-compiled	[CE]  cannot  find  symbol  VARIABLE_LIVE	3	None	replace
82	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  module,  variable,  null);  [CE]  cannot  find  symbol  module  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  module,  variable,  null);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  module,  variable,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  module	11	None	replace
83	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  null,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  null,  liveness);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  null,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	11	None	replace
84	[BUG]  [BUGGY]  VariableLiveness  state  =  liveness.isVariableStillLiveWithinExpression(sibling);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  liveness.isVariableStillLiveWithinExpression(sibling);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  liveness.isVariableStillLiveWithinExpression(sibling);	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
85	[BUG]  [BUGGY]  VariableLiveness  state  =  liveness.isVariableStillLiveWithinExpression(sibling,  variable);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  liveness.isVariableStillLiveWithinExpression(sibling,  variable);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  liveness.isVariableStillLiveWithinExpression(sibling,  variable);	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
86	[BUG]  [BUGGY]  VariableLiveness  state  =  liveness.isVariableStillLiveWithinExpression(n,  exprRoot);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  liveness.isVariableStillLiveWithinExpression(n,  exprRoot);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  liveness.isVariableStillLiveWithinExpression(n,  exprRoot);	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
87	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  module,  n);  [CE]  cannot  find  symbol  module  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  module,  n);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  module,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    n);    	non-compiled	[CE]  cannot  find  symbol  module	7	None	replace
88	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  module,  variable,  n);  [CE]  cannot  find  symbol  module  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  module,  variable,  n);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  module,  variable,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  module	5	None	replace
89	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  test,  variable,  n);  [CE]  cannot  find  symbol  test  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  test,  variable,  n);  [BUGGY]      if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  test,  variable,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  test	5	None	replace
